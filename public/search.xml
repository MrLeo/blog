<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[npm]]></title>
      <url>%2F2017%2F01%2F07%2Fnpm%2F</url>
      <content type="text"><![CDATA[临时指定淘宝 npm 源1$ npm i node-sass@3.8.0 --registry=https://registry.npm.taobao.org 更新NPM包npm-check是用来检查npm依赖包是否有更新，错误以及不在使用的，我们也可以使用npm-check进行包的更新。安装npm-check：1npm install -g npm-check 检查npm包的状态:1npm-check -u -g 通过上下键可以移动光标，使用空格键可以选择需要处理的包，回车直接进行处理。选择npm@3.10.2包升级到3.10.3：12345678910111213? Choose which packages to update. npm@3.10.3$ npm install --global npm@3.10.3 --color=always/usr/local/bin/npm -&gt; /usr/local/lib/node_modules/npm/bin/npm-cli.js/usr/local/lib└─┬ npm@3.10.3 ├── aproba@1.0.4 ├── has-unicode@2.0.1 └── read-package-tree@5.1.5[npm-check] Update complete![npm-check] npm@3.10.3[npm-check] You should re-run your tests to make sure everything works with the updates.]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[动态计算rem]]></title>
      <url>%2F2017%2F01%2F07%2F%E5%8A%A8%E6%80%81%E8%AE%A1%E7%AE%97rem%2F</url>
      <content type="text"><![CDATA[使用Flexible实现手淘H5页面的终端适配https://github.com/amfe/lib-flexible 动态计算 rem 基准大小123456789101112131415/** * 动态计算 rem 基准大小 */!(function(doc, win) &#123; var docEle = doc.documentElement, evt = "onorientationchange" in window ? "orientationchange" : "resize", fn = function() &#123; var width = docEle.clientWidth; width &amp;&amp; (docEle.style.fontSize = 20 * (width / 320) + "px"); &#125;; win.addEventListener(evt, fn, false); doc.addEventListener("DOMContentLoaded", fn, false); &#125;(document, window)); 任意浏览器的默认字体高都是16px。所有未经调整的浏览器都符合: 1em=16px。那么12px=0.75em,10px=0.625em。为了简化font-size的换算，需要在css中的body选择器中声明Font-size=62.5%，这就使em值变为 16px*62.5%=10px, 这样12px=1.2em, 10px=1em, 也就是说只需要将你的原来的px数值除以10，然后换上em作为单位就行了。 1234html &#123; font-size: 62.5%;/*10 ÷ 16 × 100% = 62.5%*/ &#125; body &#123; font-size: 1.4rem;/*1.4 × 10px = 14px */ &#125;h1 &#123; font-size: 2.4rem;/*2.4 × 10px = 24px*/ &#125;p &#123;font-size:14px; font-size:1.4rem;&#125;/*IE8及之前版本的IE浏览器使用14像素*/ 下面列出几种常见设计稿相应的font-size值： deviceWidth = 320，font-size = 320 / 6.4 = 50pxdeviceWidth = 375，font-size = 375 / 6.4 = 58.59375pxdeviceWidth = 414，font-size = 414 / 6.4 = 64.6875pxdeviceWidth = 500，font-size = 500 / 6.4 = 78.125px 也可使用JS计算:12345678910(function () &#123; document.addEventListener('DOMContentLoaded', function () &#123; var html = document.documentElement; var windowWidth = html.clientWidth; html.style.fontSize = windowWidth / 6.4 + 'px'; // 等价于html.style.fontSize = windowWidth / 640 * 100 + 'px'; &#125;, false);&#125;)();// 这个6.4就是根据设计稿的横向宽度来确定的，假如你的设计稿是750// 那么 html.style.fontSize = windowWidth / 7.5 + 'px'; webapp font-size解决问题的方案]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[html 代码片段札记]]></title>
      <url>%2F2017%2F01%2F07%2Fhtml-snippets%2F</url>
      <content type="text"><![CDATA[自定义苹果图标 在网站文件根目录放一个 apple-touch-icon.png 文件，苹果设备保存网站为书签或桌面快捷方式时，就会使用这个文件作为图标，文件尺寸建议为：180px × 180px。 定义浏览器点击行为 123&lt;a href="tel:020-10086"&gt;打电话给:020-10086&lt;/a&gt;&lt;a href="sms:10086"&gt;发短信给: 10086&lt;/a&gt;&lt;a href="mailto:me@22278.club"&gt;发送邮件: me@22278.club&lt;/a&gt; 定义上传文件类型和格式 1&lt;input type=file accept="image/*"&gt; 上面的文件上传框中，accept 可以限制上传文件的类型，参数为 image/* 是所有图片类型，点击会弹出图库，也可以指定图片格式，参数设置成 image/png 则可以限制图片类型为png；参数如果为 video/* 则是选择视频的意思；accept 还可以设置多个文件格式，语法为 accept=&quot;image/gif, image/jpeg&quot; 使用box-shadow改变(挡住)表单自动填充后的黄色 123input:-webkit-autofill, textarea:-webkit-autofill, select:-webkit-autofill&#123; box-shadow:inset 0 0 0 1000px #fff;&#125; 用CSS实现省略号文字截断 123white-space: nowrap;text-overflow: ellipsis;overflow: hidden; 使用border绘制小三角 原理是：上下和左右的边框对接其实是个斜角，利用这个特性，使其中一边的边框透明，另外一边写成想要的颜色并隐藏对边，就可以变成小箭头形状。 1234border-width: 10px 10px 10px 0; //左箭头border-color: transparent #fff;border-style: solid;width: 0; Tootip写法: 12&lt;!--html--&gt;&lt;div class="box"&gt;嗨！点击菜单就可以关注兮兮公众号了哟~&lt;/div&gt; 123456789101112131415161718192021222324/*--css--*/.box&#123; position: relative; padding: 0 20px; width: 380px; height: 80px; border-radius: 8px; background: #efefef; font-size: 18px; line-height: 80px;&#125;.box:after&#123; position: absolute; top: 50%; left: -15px; z-index: 1; display: block; margin-top: -15px; width: 0; border-color: transparent #efefef; border-style: solid; border-width: 15px 15px 15px 0; content: "";&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[html-template]]></title>
      <url>%2F2017%2F01%2F07%2Fhtml-template%2F</url>
      <content type="text"><![CDATA[12345678910111213141516171819202122232425262728293031323334&lt;!DOCTYPE html&gt;&lt;html lang="zh-CN"&gt; &lt;head&gt; &lt;meta charset="UTF-8"/&gt; &lt;!--视窗宽度--&gt; &lt;meta name="viewport" content="width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no" /&gt; &lt;!--自动识别格式--&gt; &lt;meta name="format-detection" content="telephone=no"/&gt; &lt;meta name="format-detection" content="email=no"/&gt; &lt;!-- 启用 WebApp 全屏模式 --&gt; &lt;meta name="apple-mobile-web-app-capable" content="yes" /&gt; &lt;!-- UC强制全屏 --&gt; &lt;meta name="full-screen" content="yes"&gt; &lt;meta name="full-screen" content="true" /&gt; &lt;!-- QQ强制全屏 --&gt; &lt;meta name="x5-fullscreen" content="true"&gt; &lt;!-- 360强制全屏 --&gt; &lt;meta name="360-fullscreen" content="true"&gt; &lt;!-- uc强制竖屏 --&gt; &lt;meta name="screen-orientation" content="portrait" /&gt; &lt;!-- QQ强制竖屏 --&gt; &lt;meta name="x5-orientation" content="portrait" /&gt; &lt;!--自定义favicon--&gt; &lt;link rel="icon" href="favicon.ico" mce_href="favicon.ico" type="image/x-icon"&gt; &lt;title&gt;首页&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;自定义苹果图标&lt;/h1&gt; &lt;p&gt;在网站文件根目录放一个 apple-touch-icon.png 文件，苹果设备保存网站为书签或桌面快捷方式时，就会使用这个文件作为图标，文件尺寸建议为：180px × 180px。&lt;/p&gt; &lt;/body&gt;&lt;/html&gt;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[清除浮动]]></title>
      <url>%2F2017%2F01%2F07%2Fclearfix%2F</url>
      <content type="text"><![CDATA[1234/*清除浮动 clear &amp; clearfix*/.clear &#123; display:block !important; clear:both !important; float:none !important; margin:0 !important; padding:0 !important; height:0; line-height:0; font-size:0; overflow:hidden;&#125;.clearfix &#123; zoom:1; &#125;.clearfix:after &#123; content:""; display:block; clear:both; height:0; &#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[flex - 弹性盒子布局]]></title>
      <url>%2F2017%2F01%2F07%2Fflex%2F</url>
      <content type="text"><![CDATA[http://www.cnblogs.com/blog-leo/p/4634631.html 12345678910111213141516171819202122232425262728.flex-cont&#123; /*定义为flexbox的“父元素”*/ display: -webkit-box; display: -webkit-flex; display: flex; /*子元素沿主轴对齐方式居中*/ -webkit-box-pack: center; -webkit-justify-content: center; justify-content: center; /*子元素沿侧轴对齐方式垂直居中*/ -webkit-box-align: center; -webkit-align-items: center; align-items: center; /*指定主轴的伸缩流方向是纵向的*/ -webkit-box-orient:vertical; -webkit-box-direction: normal; -webkit-flex-direction: column; flex-direction: column;&#125;.flex-item&#123; /*不要给flexbox里的子元素设置“margin:auto”的属性，在部分安卓机下，它会导致该元素的宽度撑开到100%占位*/ /*在旧版的规范中，使用比例伸缩布局时，子元素的内容长短不同会导致无法“等分”，这个时候，我们需要给子元素设置一个“width:0%”来解决问题*/ width: 0%; /*给“子元素”赋予自由伸缩的能力*/ -webkit-box-flex: 1; -webkit-flex: 1; flex:1;&#125; 这里假设flex容器为 .box ，子元素为 .item 。 定义容器为flex布局 12345678910.box&#123; display: -webkit-flex; /*webkit*/ display: flex;&#125;/*行内flex*/.box&#123; display: -webkit-inline-flex; /*webkit*/ display:inline-flex;&#125; 容器样式 12345678910111213141516171819.box&#123; flex-direction: row | row-reverse | column | column-reverse; /*主轴方向：左到右（默认） | 右到左 | 上到下 | 下到上*/ flex-wrap: nowrap | wrap | wrap-reverse; /*换行：不换行（默认） | 换行 | 换行并第一行在下方*/ flex-flow: &lt;flex-direction&gt; || &lt;flex-wrap&gt;; /*主轴方向和换行简写*/ justify-content: flex-start | flex-end | center | space-between | space-around; /*主轴对齐方式：左对齐（默认） | 右对齐 | 居中对齐 | 两端对齐 | 平均分布*/ align-items: flex-start | flex-end | center | baseline | stretch; /*交叉轴对齐方式：顶部对齐（默认） | 底部对齐 | 居中对齐 | 上下对齐并铺满 | 文本基线对齐*/ align-content: flex-start | flex-end | center | space-between | space-around | stretch; /*多主轴对齐：顶部对齐（默认） | 底部对齐 | 居中对齐 | 上下对齐并铺满 | 上下平均分布*/&#125; 子元素样式 12345678910111213141516171819.item&#123; order: &lt;integer&gt;; /*排序：数值越小，越排前，默认为0*/ flex-grow: &lt;number&gt;; /* default 0 */ /*放大：默认0（即如果有剩余空间也不放大，值为1则放大，2是1的双倍大小，以此类推）*/ flex-shrink: &lt;number&gt;; /* default 1 */ /*缩小：默认1（如果空间不足则会缩小，值为0不缩小）*/ flex-basis: &lt;length&gt; | auto; /* default auto */ /*固定大小：默认为0，可以设置px值，也可以设置百分比大小*/ flex: none | [ &lt;'flex-grow'&gt; &lt;'flex-shrink'&gt;? || &lt;'flex-basis'&gt; ] /*flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto，*/ align-self: auto | flex-start | flex-end | center | baseline | stretch; /*单独对齐方式：自动（默认） | 顶部对齐 | 底部对齐 | 居中对齐 | 上下对齐并铺满 | 文本基线对齐*/&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[前端调试解决方案]]></title>
      <url>%2F2017%2F01%2F07%2F%E5%89%8D%E7%AB%AF%E8%B0%83%E8%AF%95%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%2F</url>
      <content type="text"><![CDATA[[TOC] 真机联调vConsole 腾讯出品的一个轻量、可拓展、针对手机网页的前端开发者调试面板。与 vConsole 类似的还有 Eruda、JSConsole 查看 console 日志 查看网络请求 手动执行 JS 命令行 自定义插件 1234567//建议通过url参数来控制是否加载调试器，例↓;(function () &#123; var src = '//liriliri.github.io/eruda/eruda.min.js'; if (!/eruda=true/.test(window.location) &amp;&amp; localStorage.getItem('active-eruda') != 'true') return; document.write('&lt;scr' + 'ipt src="' + src + '"&gt;&lt;/scr' + 'ipt&gt;'); document.write('&lt;scr' + 'ipt&gt;eruda.init();&lt;/scr' + 'ipt&gt;');&#125;)(); spy-debugger 一站式页面调试、抓包工具。远程调试任何手机浏览器页面，任何手机移动端webview（如：微信，HybirdApp等）HTTP/HTTPS与spy-debugger类似的还有whistle 页面调试＋抓包。 支持HTTPS。 spy-debugger内部集成了weinre、node-mitmproxy、AnyProxy。 自动忽略原生App发起的https请求，只拦截webview发起的https请求。对使用了SSL pinning技术的原生App不造成任何影响。 可以配合其它代理工具一起使用(默认使用AnyProxy) (设置外部代理) spy-debugger 截图whistle 截图 多设备自适应开发与调试Browsersync 多设备同步操作。Browsersync能让浏览器实时、快速响应您的文件更改（html、js、css、sass、less等）并自动刷新页面。更重要的是 Browsersync可以同时在PC、平板、手机等设备下进项调试。您可以想象一下：“假设您的桌子上有pc、ipad、iphone、android等设备，同时打开了您需要调试的页面，当您使用browsersync后，您的任何一次代码保存，以上的设备都会同时显示您的改动”。无论您是前端还是后端工程师，使用它将提高您30%的工作效率。 Blisk浏览器 完全模拟手机和平板电脑的内部 网址和桌面和移动的滚动是同步的 文件更改会自动刷新页面 可通过DevTools调试桌面和移动效果 Blisk 适用于任何IDE、语言和框架]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[WebStorm ES6 语法支持设置]]></title>
      <url>%2F2017%2F01%2F07%2FWebStormES6%E8%AF%AD%E6%B3%95%E6%94%AF%E6%8C%81%E8%AE%BE%E7%BD%AE%2F</url>
      <content type="text"><![CDATA[在webstorm写下了这段代码，体验一下ES6语法的便利，但是一大堆报错 语法支持设置 Preferences &gt; Languages &amp; Frameworks &gt; JavaScript 这里只要配置ECMAScript版本即可 自动转码为ES5 file watcher + babel（ES6转码器） npm install -g babel-cli / npm install --save-dev babel-cli Preferences &gt; Tools &gt; File watchers 点击“+”按钮 File Type：配置该监听器监听的文件类型，可以在Preferences &gt; Editor &gt; File types中配置Scope：配置该监听器的监听范围，可自定义新的范围，也可以使用Preferences &gt; Appearance &amp; Behavior &gt; ScopesProgram：babel的安装位置C:\Users\lxbin\node_modules\.bin\babel.cmdArguments：命令执行参数，参见Babel CLI$FilePathRelativeToProjectRoot$ --out-dir dist --source-maps --presets es2015Working directory：babel命令执行的位置，默认为文件所在目录dist\$FileDirRelativeToProjectRoot$\$FileNameWithoutExtension$.js:dist\$FileDirRelativeToProjectRoot$\$FileNameWithoutExtension$.js.map 最后在项目目录下面添加一个.babelrc文件 123&#123; "presets": ["es2015"]&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[WebStorm模板]]></title>
      <url>%2F2017%2F01%2F07%2FWebStorm%E6%A8%A1%E6%9D%BF%2F</url>
      <content type="text"><![CDATA[文件模版变量 ${PACKAGE_NAME} name of the package in which the new file is created ${USER} current user system login name ${DATE} current system date ${TIME} current system time ${YEAR} current year ${MONTH} current month ${MONTH_NAME_SHORT} first 3 letters of the current month name. Example: Jan, Feb, etc. ${MONTH_NAME_FULL} full name of the current month. Example: January, February, etc. ${DAY} current day of the month ${HOUR} current hour ${MINUTE} current minute ${PROJECT_NAME} the name of the current project 文件模版1234567891011121314151617181920212223242526272829303132333435363738/** * @Date: $&#123;DATE&#125; $&#123;TIME&#125; * @Author: $&#123;USER&#125; * Created with JetBrains WebStorm. */&lt;template&gt; &lt;div&gt; &lt;!--&lt;component :is="currentView"&gt;&lt;/component&gt;--&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt; import &#123;mapState, mapGetters, mapMutations, mapActions&#125; from 'vuex' import * as types from '../store/mutation-types' export default&#123; name:'', components:&#123;&#125;, props:[], data()&#123; return&#123; //currentView:'' &#125; &#125;, watch:&#123;&#125;, computed: &#123; ...mapState(&#123;&#125;), ...mapGetters(&#123; //baseInfo: 'baseInfo' &#125;) &#125;, methods: mapActions([ //'addToBaseInfo' ]), created()&#123;&#125;, mounted()&#123;&#125; &#125;&lt;/script&gt;&lt;style scoped lang="scss" rel="stylesheet/scss"&gt;&lt;/style&gt;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[WebStorm快捷键]]></title>
      <url>%2F2017%2F01%2F07%2FWebStorm%E5%BF%AB%E6%8D%B7%E9%94%AE%2F</url>
      <content type="text"><![CDATA[快捷键 双击Shift全局搜索 ctrl + alt + T 围绕包裹代码(包括zencoding的Wrap with Abbreviation) ctrl + [/] 匹配 {}[] ctrl + shift + ]/[ 选中块代码 ctrl + q JSDoc文档预览 ctrl + shift + i 显示当前CSS选择器或者JS函数的详细信息 Shift+F6 重构-重命名 Alt+~vcs操作 Alt+~ 7关闭重启前的本地历史纪录 Ctrl+F文件内查找 Ctrl+K查找下一个 Ctrl+Shift+K 查找上一个 Ctrl+B或Ctrl+鼠标左键单击 快速打开光标处的类或方法 Ctrl+Alt+Shift+N通过字符快速查找位置 Ctrl+Shift+R工程内查找文件名 Ctrl+E最近打开的文件 ctrl+shift+F12 最大区域显示代码（会隐藏其他的功能界面模块） ctrl+alt+L 格式化代码 control + shift + j 合并行 界面操作 Ctrl+F4关闭当前代码选项卡 Alt+←/→切换代码选项卡 Alt+[0~9]快速拆合功能界面模块 Alt+Shift+F将当前文件加入收藏夹 Ctrl+F12显示当前文件的结构 代码编辑 Alt+Shift+↑选中单词/选中当前块 Alt+Insert新建一个文件或其他 Ctrl+Alt+L/Ctrl+Shift+F格式化代码 Shift+Enter重新开始一行（无论光标在哪个位置） 导航 Esc进入代码编辑区域 Alt+F1查找代码在其他界面模块的位置，颇为有用 Ctrl+G查找引用 Ctrl+L撞到指定行 Ctrl+]/[光标到代码块的前面或后面 Ctrl+Shift+up/down上一个/下一个方法 编辑器 Ctrl+Alt+S打开配置窗口 Ctrl+Shift+A快速查找并使用编辑器所有功能 Emmet前端开发神器 Emmet w -webkit- m -moz- s -ms- o -o- lorem 一段随机看不懂的文字，作为测试数据填充用的]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Git]]></title>
      <url>%2F2017%2F01%2F07%2FGit%2F</url>
      <content type="text"><![CDATA[客户端 GitHub for windows SourceTree Git操作 用SourceTree轻巧Git项目图解 Git教程 - 廖雪峰的官方网站 猴子都能懂的GIT入门 Git起步 版本控制入门 – 搬进 Github 写给Git初学者的7个建议 程序员提交代码的 emoji 指南 Git工作流 feature功能分支（多个、玫红）。主要是自己玩了，差不多的时候要合并回develop去。从不与master交互。 develop开发主分支（1个、黄色）。主要是和feature以及release交互。 release发布分支（同一时间1个、绿色）。总是基于develop，最后又合并回develop。当然对应的tag跑到master这边去了。生命周期很短，只是为了发布 hotfix线上维护分支（同一时间1个、红色）。总是基于master，并最后合并到master和develop。生命周期较短，用了修复bug或小粒度修改发布。 master正式发布历史分支（1个蓝色）。没有什么东西，仅是一些关联的tag，因从不在master上开发。 SourceTree中的Git工作流 参考: Git分支管理策略^1 企业级开发：Gitflow Workflow工作流^2 Git工作流指南：Gitflow工作流^3 深入理解学习Git工作流（git-workflow-tutorial）^4]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Ngrok 内网穿透利器]]></title>
      <url>%2F2017%2F01%2F07%2FNgrok%2F</url>
      <content type="text"><![CDATA[ngrok介绍：http://dorole.com/1233/ ngrok国内服务器1：http://www.ngrok.cc/ ngrok国内服务器2：http://natapp.cn/ ngrok替代品pagekite：http://pagekite.net/downloads/]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[我的 Caddy 配置]]></title>
      <url>%2F2017%2F01%2F07%2FCaddy%2F</url>
      <content type="text"><![CDATA[Caddy 服务器 这是一个Web Server的时代，apache与nginx共舞，在追求极致性能的路上，没有最高，只有更高。但这又是一个追求个性化的时代，有些Web Server并没有去挤“Performance提升”这一独木桥，而是有着自己的定位，Caddy就是这样一个开源Web Server。 Caddy的作者Matt Holt在caddy官网以及FAQ中对caddy的目标阐释如下： 其他Web Server为Web而设计，Caddy为human设计。功能定位上，与经常充当最前端反向代理的nginx不同，caddy致力于成为一个易用的静态 文件Web Server。可以看出Caddy主打易用性，使用配置简单。并且得益于Go的跨平台特性，caddy很容易的支持了三大主流平台:Windows、 Linux、Mac。在Caddy开发者文档中，我们可以看到caddy还可以在Android(linux arm)上运行。caddy目前版本为0.7.1，还不稳定，且后续版本可能变化较大，甚至与前期版本不兼容，因此作者目前不推荐caddy在生产环境被 重度使用。 Caddy 是一个支持 HTTP/2 的跨平台 Web 服务器，使用和配置都非常简单。Caddy 支持 HTTP/2, IPv6, Markdown, WebSockets, FastCGI, 模板等等。 iplaysoft介绍的《轻松把文件夹变成网站！使用 Caddy 服务器软件自己搭建网页形式的文件共享》 小众软件《Caddy – 最简单的支持 HTTP/2 的网页服务器》 我的一些配置信息《Caddyfile配置官网说明》1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768#=&gt; Caddyfile配置 https://caddyserver.com/docs/caddyfile########################### 多站点 ############################=&gt; Vue2.0站点 → port:2000localhost:2000, http://vue-2-demo.com &#123; # 站点物理路径 root ../../../Users/lxbin/Documents/WWW/vue-2.0-demo/dist # log日志输出路径 #log ../log/localhost-2000.log # 开启gzip #gzip &#125;#=&gt; 9X_WAP站点 → port:8000localhost:8000,http://m2.test.jiuxiulvxing.com &#123; # 站点物理路径 root ../../../Users/lxbin/Documents/WWW/9X_WAP/ # log日志输出路径 log ../log/localhost-8000.log # 开启gzip #gzip &#125;########################### 反向代理 ############################=&gt; 反向代理 → port:80#http://leo.xuebin.leo &#123;# proxy / localhost:80# log ../log/proxy-port-80.log #&#125;#=&gt; 反向代理 → port:8080#http://leo.xuebin.leo &#123;# proxy / localhost:8080# log ../log/proxy-port-8080.log #&#125;#http://leo.xuebin.leo &#123;# proxy / localhost:8000# log ../log/proxy-port-8000.log #&#125;########################### 文件服务器 ############################=&gt; 文件服务器,指定文件服务器地址192.168.100.126:1000filemanager / &#123; # 文件目录地址 show ../../../Users/lxbin/Documents/WWW/ # 是否可以新建 allow_new true # 是否可以修改 allow_edit true&#125;########################### 异常处理 ###########################errors &#123; log ../log/error.log 404 404.html # Not Found 500 500.html # Internal Server Error&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Nginx配置杂记]]></title>
      <url>%2F2017%2F01%2F07%2FNginx%2F</url>
      <content type="text"><![CDATA[Nginx配置杂记 我的nginx.conf123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156# [Leo]=&gt;Nginx配置文件nginx.conf中文详解：http://www.cnblogs.com/sunxucool/p/3225818.html# [Leo]=&gt;Nginx 配置从零开始：http://www.open-open.com/lib/view/open1419826381531.html# [Leo]=&gt;Nginx配置杂记：https://wenjs.me/p/note-of-nginx-configure#user nobody;# [Leo]=&gt;worker processes 启动个数worker_processes 1;#error_log logs/error.log;#error_log logs/error.log notice;#error_log logs/error.log info;#pid logs/nginx.pid;# nginx工作模式events &#123; # [Leo]=&gt;最大并发数 worker_connections 1024;&#125;# http设置http &#123; # [Leo]=&gt;引入mime.types文件所声明的文件扩展名与文件类型映射 include mime.types; # [Leo]=&gt;默认使用application/octet-stream default_type application/octet-stream; #log_format main '$remote_addr - $remote_user [$time_local] "$request" ' # '$status $body_bytes_sent "$http_referer" ' # '"$http_user_agent" "$http_x_forwarded_for"'; #access_log logs/access.log main; # [Leo]=&gt;开启高效文件传输模式 sendfile on; #tcp_nopush on; #keepalive_timeout 0; keepalive_timeout 65; #gzip on; # 主机设置 server &#123; # [Leo]=&gt;监听localhost:80 listen 80; server_name localhost; # [Leo]=&gt;设置网页的默认编码格式。 #charset koi8-r; #charset utf-8; # [Leo]=&gt;指定此虚拟主机的访问日志存放路径，最后的main用于指定访问日志的输出格式 #access_log logs/host.access.log main; # [Leo]=&gt;表示在这整个server虚拟主机内，全部的root web根目录。注意要和locate &#123;&#125;下面定义的区分开来。 #root html; # [Leo]=&gt;全局定义访问的默认首页地址。注意要和locate &#123;&#125;下面定义的区分开来。 #index index.html index.htm; # [Leo]=&gt;URL匹配,映射目录为“当前目录的html目录” location / &#123; root html; index index.html index.htm; &#125; #error_page 404 /404.html; # [Leo]=&gt;出现500、502、503、504错误，则映射到50x.html # redirect server error pages to the static page /50x.html # error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root html; &#125; # proxy the PHP scripts to Apache listening on 127.0.0.1:80 # #location ~ \.php$ &#123; # proxy_pass http://127.0.0.1; #&#125; # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000 # #location ~ \.php$ &#123; # root html; # fastcgi_pass 127.0.0.1:9000; # fastcgi_index index.php; # fastcgi_param SCRIPT_FILENAME /scripts$fastcgi_script_name; # include fastcgi_params; #&#125; # deny access to .htaccess files, if Apache's document root # concurs with nginx's one # #location ~ /\.ht &#123; # deny all; #&#125; &#125; # another virtual host using mix of IP-, name-, and port-based configuration # #server &#123; # listen 8000; # listen somename:8080; # server_name somename alias another.alias; # location / &#123; # root html; # index index.html index.htm; # &#125; #&#125; # HTTPS server # #server &#123; # listen 443 ssl; # server_name localhost; # ssl_certificate cert.pem; # ssl_certificate_key cert.key; # ssl_session_cache shared:SSL:1m; # ssl_session_timeout 5m; # ssl_ciphers HIGH:!aNULL:!MD5; # ssl_prefer_server_ciphers on; # location / &#123; # root html; # index index.html index.htm; # &#125; #&#125; ################################################################## server &#123; listen 80; server_name m2.jiuxiulvxing.com; access_log c:/Users/lxbin/Documents/WWW/9X_WAP_IM/m.jiuxiulvxing.com_access.log; location / &#123; #root c:/Users/lxbin/Documents/WWW/9X_WAP_IM/; index index.html index.htm; #proxy_redirect off; #proxy_set_header Host $host; #proxy_set_header X-Real-IP $remote_addr; #proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; #proxy_pass http://127.0.0.1:8080; &#125; &#125;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Apache]]></title>
      <url>%2F2017%2F01%2F07%2FApache%2F</url>
      <content type="text"><![CDATA[下载 登录http://httpd.apache.org/download.cgi 这个地址 进入如下界面后，选择第一项ApacheHaus，这是个第三方下载平台，在它的网站下载独立的Apache会是一个压缩包，第二项也是独立的Apache下载地址，另外三个是集成开发环境。 在下载界面中，会发现VC9和VC11字样，通过阅读相关内容得知: VC9是指用VS2008编译的 VC11是指用VS2012编译的，VC11无法在windows xp和server 2003中使用 配置 进入解压后的Apache目录，找到 ~\Apache\conf\httpd.conf 文件并用编辑器打开 找到 Define SRVROOT ，将后面的地址改成本地Apache安装存放的地址，例如: 1Define SRVROOT &quot;c:/PortableSoft/Apache&quot; 找到 Listene 80 ，若80端口被占用（可在cmd下用命令 netstat -a 查看），则将80端口改为别的 找到 DocumentRoot，将后面的地址修改为需要的wwwroot 找到 DirectoryIndex，将后面的文件修改为需要的默认启动页面 安装主服务 管理员打开CMD窗口，输入： 1&quot;c:\PortableSoft\Apache\bin\httpd.exe&quot; -k install -n apache 带有引号的。该命令的意思是，安装 apache 服务，并将该服务名称命名为apache(也可以改成别的) Win+R运行输入 services.msc，找到刚刚安装的 apache 服务，右键属性中将启动类型设置为手动 进入 Apache 安装目录，找到c:\PortableSoft\Apache\bin\ApacheMonitor.exe，运行后在系统右下角状态栏中打开窗口界面点击Start启动服务 卸载 停止 Apache 服务 管理员打开CMD窗口，输入: 1sc delete apache 参考 Apache 修改端口 默认路径配置修改方法]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[console]]></title>
      <url>%2F2017%2F01%2F07%2Fconsole%2F</url>
      <content type="text"><![CDATA[http://www.cnblogs.com/Wayou/p/chrome-console-tips-and-tricks.html 显示信息的命令123456789101112131415&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;常用console命令&lt;/title&gt; &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;&lt;/head&gt;&lt;body&gt; &lt;script type="text/javascript"&gt; console.log('hello'); console.info('信息'); console.error('错误'); console.warn('警告'); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 最常用的就是console.log了。 占位符console上述的集中度支持printf的占位符格式，支持的占位符有：字符（%s）、整数（%d或%i）、浮点数（%f）和对象（%o）。123&lt;script type="text/javascript"&gt; console.log("%d年%d月%d日",2011,3,26);&lt;/script&gt; 信息分组12345678910111213141516171819202122&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;常用console命令&lt;/title&gt; &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;&lt;/head&gt;&lt;body&gt; &lt;script type="text/javascript"&gt; console.group("第一组信息"); console.log("第一组第一条:我的博客(http://www.ido321.com)"); console.log("第一组第二条:CSDN(http://blog.csdn.net/u011043843)"); console.groupEnd(); console.group("第二组信息"); console.log("第二组第一条:程序爱好者QQ群： 259280570"); console.log("第二组第二条:欢迎你加入"); console.groupEnd(); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 查看对象的信息console.dir()可以显示一个对象所有的属性和方法。12345678&lt;script type="text/javascript"&gt; var info = &#123; blog:"http://www.ido321.com", QQGroup:259280570, message:"程序爱好者欢迎你的加入" &#125;; console.dir(info);&lt;/script&gt; 显示某个节点的内容console.dirxml()用来显示网页的某个节点（node）所包含的html/xml代码。1234567891011121314151617&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;常用console命令&lt;/title&gt; &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;&lt;/head&gt;&lt;body&gt; &lt;div id="info"&gt; &lt;h3&gt;我的博客：www.ido321.com&lt;/h3&gt; &lt;p&gt;程序爱好者:259280570,欢迎你的加入&lt;/p&gt; &lt;/div&gt; &lt;script type="text/javascript"&gt; var info = document.getElementById('info'); console.dirxml(info); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 判断变量是否是真console.assert()用来判断一个表达式或变量是否为真。如果结果为否，则在控制台输出一条相应信息，并且抛出一个异常。123456&lt;script type="text/javascript"&gt; var result = 1; console.assert( result ); var year = 2014; console.assert(year == 2018 );&lt;/script&gt; 1是非0值，是真；而第二个判断是假，在控制台显示错误信息 追踪函数的调用轨迹console.trace()用来追踪函数的调用轨迹。1234567891011&lt;script type="text/javascript"&gt; /*函数是如何被调用的，在其中加入console.trace()方法就可以了*/ function add(a,b)&#123; console.trace(); return a+b; &#125; var x = add3(1,1); function add3(a,b)&#123;return add2(a,b);&#125; function add2(a,b)&#123;return add1(a,b);&#125; function add1(a,b)&#123;return add(a,b);&#125;&lt;/script&gt; 计时功能console.time()和console.timeEnd()，用来显示代码的运行时间。1234567&lt;script type="text/javascript"&gt; console.time("控制台计时器一"); for(var i=0;i&lt;1000;i++)&#123; for(var j=0;j&lt;1000;j++)&#123;&#125; &#125; console.timeEnd("控制台计时器一");&lt;/script&gt; 运行时间是38.84ms console.profile()的性能分析性能分析（Profiler）就是分析程序各个部分的运行时间，找出瓶颈所在，使用的方法是console.profile()。1234567891011121314151617181920&lt;script type="text/javascript"&gt; function All() &#123; alert(11); for (var i = 0; i &lt; 10; i++) &#123; funcA(1000); &#125; funcB(10000); &#125; function funcA(count) &#123; for (var i = 0; i &lt; count; i++) &#123;&#125; &#125; function funcB(count) &#123; for (var i = 0; i &lt; count; i++) &#123;&#125; &#125; console.profile('性能分析器'); All(); console.profileEnd();&lt;/script&gt;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[css 代码片段]]></title>
      <url>%2F2017%2F01%2F07%2Fcss-snippets%2F</url>
      <content type="text"><![CDATA[以下是常用的代码收集，没有任何技术含量，只是填坑的积累。转载请注明出处，谢谢。1. css 2.x 文字换行 1234567/*强制不换行*/white-space:nowrap;/*自动换行*/word-wrap: break-word;word-break: normal;/*强制英文单词断行*/word-break:break-all; 两端对齐 1text-align:justify;text-justify:inter-ideogra 去掉Webkit(chrome)浏览器中input(文本框)或textarea的黄色焦点框 12input,button,select,textarea&#123; outline:none;&#125;textarea&#123; font-size:13px; resize:none;&#125; 去掉chrome记住密码后自动填充表单的黄色背景 ie6: position:fixed 123.fixed-top /* position fixed Top */&#123;position:fixed;bottom:auto;top:0; &#125;* html .fixed-top /* IE6 position fixed Top */&#123;position:absolute;bottom:auto;top:expression(eval(document.documentElement.scrollTop));&#125;*html&#123;background-image:url(about:blank);background-attachment:fixed;&#125; clearfix 123456789.clearfix:after&#123;visibility:hidden;display:block;font-size:0;content:" ";clear:both;height:0;&#125;.clearfix&#123;display:inline-block;&#125;html[xmlns] .clearfix&#123;display:block;&#125;* html .clearfix&#123;height:1%;&#125;.clearfix&#123;*zoom: 1;&#125;.clearfix:after&#123;clear:both;display:table;content:"";&#125;.clearfix&#123;overflow:hidden;_zoom:1;&#125; http://www.cnblogs.com/blog-leo/p/3959217.htmlhttp://www.daqianduan.com/3606.html seperate-table 1234.tab&#123;border-collapse:separate;border:1px solid #e0e0e0;&#125;.tab th,.tab td&#123;padding:3px;font-size:12px;background:#f5f9fb;border:1px solid;border-color:#fff #deedf6 #deedf6 #fff;&#125;.tab th&#123;background:#edf4f0;&#125;.tab tr.even td&#123;background:#fff;&#125; 12345678910&lt;table class="tab" width="100%" cellpadding="0" cellspacing="0" border="0"&gt; &lt;tr&gt; &lt;th&gt;111&lt;/th&gt; &lt;td&gt;222&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;111&lt;/th&gt; &lt;td&gt;222&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt; min-height: 最小高度兼容代码 1.minheight500&#123;min-height:500px;height:auto !important;height:500px;overflow:visible;&#125; 鼠标不允许点击 1cursor:not-allowed; mac font: osx平台字体优化 1font-family:"Hiragino Sans GB","Hiragino Sans GB W3",'微软雅黑'; 文字过多后显示省略号 1.ellipsis,.ell&#123;white-space:nowrap;overflow:hidden;text-overflow:ellipsis&#125; 2. css 3 投影 1234.b&#123;box-shadow:inset 1px -1px 0 #f1f1f1;text-shadow:1px 1px 0px #630;&#125;filter:progid:DXImageTransform.Microsoft.gradient(enabled='true',startColorstr='#99000000',endColorstr='#99000000');background:rgba(0,0,0,.6);background:rgba(0,0,0,0.5);filter:progid:DXImageTransform.Microsoft.gradient(GradientType=0,startColorstr='#50000000',endColorstr='#50000000')\9; search占位 123456789::-webkit-input-placeholder &#123;&#125;::-moz-input-placeholder &#123;&#125;input:focus::-webkit-input-placeholder &#123; color: transparent; &#125;-webkit-appearance:none; google边框去除input[type="search"]&#123;-webkit-appearance:textfield;&#125; // 去除chrome默认样式http://i.wanz.im/2011/02/04/remove_border_from_input_type_search/http://blog.csdn.net/do_it__/article/details/6789699line-height: normal; /* for non-ie */line-height: 22px\9; /* for ie */ title 换行 1&amp;#13; 关闭 x 符号 1&amp;#215; 全部浏览器的兼容代码生成CSS 实现 textArea 的 placeholder 换行 阻止默认事件 1pointer-events:none; 变灰 gray 12345678910html&#123; filter: grayscale(100%); -webkit-filter: grayscale(100%); -moz-filter: grayscale(100%); -ms-filter: grayscale(100%); -o-filter: grayscale(100%); filter: url("data:image/svg+xml;utf8,&lt;svg xmlns=\'http://www.w3.org/2000/svg\'&gt;&lt;filter id=\'grayscale\'&gt;&lt;feColorMatrix type=\'matrix\' values=\'0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\'/&gt;&lt;/filter&gt;&lt;/svg&gt;#grayscale"); filter:progid:DXImageTransform.Microsoft.BasicImage(grayscale=1); -webkit-filter: grayscale(1);&#125; firefox 阻止选中 1-moz-user-focus:ignore;-moz-user-input:disabled;-moz-user-select:none; 箭头 1234display:block;border:solid transparent;line-height: 0;width:0; height:0;border-top:solid #0288ce;border-width:8px 6px 0 6px;border-style:solid; border-width:7px; border-color:transparent transparent transparent #ff7020;position:absolute;top: 0;left: 0;border-width:20px;border-style:solid;border-color:#d1ddde transparent transparent #d1ddde; ie6 bug测试，把border-style设为dashed. 取消textarea右下角可拖动手柄 1resize:none 取消chrome form表单的聚焦边框 12input,button,select,textarea&#123;outline:none&#125;textarea&#123;resize:none&#125; 取消a链接的黄色边框 1a&#123;-webkit-tap-highlight-color:rgba(0,0,0,0);&#125; webkit 水平居中 1display:-webkit-box;-webkit-box-pack:center; -webkit-box-align: center; 取消chrome 搜索x提示 123456input[type=search]::-webkit-search-decoration,input[type=search]::-webkit-search-cancel-button,input[type=search]::-webkit-search-results-button,input[type=search]::-webkit-search-results-decoration &#123; display: none;&#125; chrome取消默认黄色背景 1234567input:-webkit-autofill &#123;-webkit-box-shadow: 0 0 0px 1000px white inset;&#125;input:-webkit-autofill,textarea:-webkit-autofill,select:-webkit-autofill &#123; -webkit-box-shadow: 0 0 0 1000px white inset;&#125;autocomplete="off" 手机版本网页a标记虚线框问题 1a:focus &#123;outline:none;-moz-outline:none;&#125; 焦点去除背景 12-webkit-tap-highlight-color:rgba(255, 255, 255, 0);-webkit-tap-highlight-color:transparent; // i.e. Nexus5/Chrome and Kindle Fire HD 7'' placeholder占位符颜色自定义 12input:-moz-placeholder &#123;color: #369;&#125;::-webkit-input-placeholder &#123;color:#369;&#125; IOS 禁用高亮 1-webkit-tap-highlight-color:rgba(255,0,0,0.5);-webkit-tap-highlight-color:transparent; /* For some Androids */ 用户不能选择元素中的任何内容 1user-select:none IOS iframe 滚动 滚动回弹特效 1-webkit-overflow-scrolling:touch;overflow-y:scroll; 禁止选中文本 1234-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none;user-select:none; 模糊(毛玻璃)效果1 模糊(毛玻璃)效果2 模糊(毛玻璃)逼真效果 123456.blur &#123; -webkit-filter: blur(10px); /* Chrome, Opera */ -moz-filter: blur(10px); -ms-filter: blur(10px); filter: blur(10px); &#125; 12&lt;img src="mm1.jpg" /&gt;&lt;img src="mm1.jpg" class="blur" /&gt; 显示旋转加载图片，下拉加载数据 123456789#pullDown .pullDownIcon&#123;display:inline-block;vertical-align:middle;width:40px;height:40px;background:url(https://github.com/chalecao/chale/blob/master/pull-icon%402x.png) 0 0 no-repeat;-webkit-background-size:40px 80px;background-size:40px 80px;-webkit-transition-property:-webkit-transform;-webkit-transition-duration:250ms&#125;#pullDown .pullDownIcon&#123;-webkit-transform:rotate(0deg) translateZ(0)&#125;#pullDown .pullDownLabel&#123;display:inline-block;vertical-align:middle;margin-left:5px;&#125;#pullDown.flip .pullDownIcon&#123;-webkit-transform:rotate(-180deg) translateZ(0)&#125;#pullDown.loading .pullDownIcon&#123;background-position:0 100%;-webkit-transform:rotate(0deg) translateZ(0);-webkit-transition-duration:0ms;-webkit-animation-name:loading;-webkit-animation-duration:2s;-webkit-animation-iteration-count:infinite;-webkit-animation-timing-function:linear&#125;@-webkit-keyframes loading&#123; from&#123;-webkit-transform:rotate(0deg) translateZ(0)&#125; to&#123;-webkit-transform:rotate(360deg) translateZ(0)&#125;&#125; 123&lt;div id="pullDown" class="none loading"&gt; &lt;span class="pullDownIcon"&gt;&lt;/span&gt;&lt;span class="pullDownLabel"&gt;正在载入中...&lt;/span&gt;&lt;/div&gt; 居中 css media ：通过媒体查询为不同的设备和大小配置不同的样式。 123456789101112131415161718192021222324252627282930313233/* media *//* 横屏 */@media screen and (orientation:landscape)&#123; &#125;/* 竖屏 */@media screen and (orientation:portrait)&#123; &#125;/* 窗口宽度&lt;960,设计宽度=768 */@media screen and (max-width:959px)&#123; &#125;/* 窗口宽度&lt;768,设计宽度=640 */@media screen and (max-width:767px)&#123; &#125;/* 窗口宽度&lt;640,设计宽度=480 */@media screen and (max-width:639px)&#123; &#125;/* 窗口宽度&lt;480,设计宽度=320 */@media screen and (max-width:479px)&#123; &#125;/* windows UI 贴靠 */@media screen and (-ms-view-state:snapped)&#123; &#125;/* 打印 */@media print&#123; &#125; flexbox 12345678910111213141516171819202122232425262728.flex-cont&#123; /*定义为flexbox的“父元素”*/ display: -webkit-box; display: -webkit-flex; display: flex; /*子元素沿主轴对齐方式居中*/ -webkit-box-pack: center; -webkit-justify-content: center; justify-content: center; /*子元素沿侧轴对齐方式垂直居中*/ -webkit-box-align: center; -webkit-align-items: center; align-items: center; /*指定主轴的伸缩流方向是纵向的*/ -webkit-box-orient:vertical; -webkit-box-direction: normal; -webkit-flex-direction: column; flex-direction: column;&#125;.flex-item&#123; /*不要给flexbox里的子元素设置“margin:auto”的属性，在部分安卓机下，它会导致该元素的宽度撑开到100%占位*/ /*在旧版的规范中，使用比例伸缩布局时，子元素的内容长短不同会导致无法“等分”，这个时候，我们需要给子元素设置一个“width:0%”来解决问题*/ width: 0%; /*给“子元素”赋予自由伸缩的能力*/ -webkit-box-flex: 1; -webkit-flex: 1; flex:1;&#125; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455/*使用无衬线字体*/body &#123; font-family: "Helvetica Neue", Helvetica, STHeiTi, sans-serif; &#125;/*禁止长按链接与图片弹出菜单*/a, img &#123; -webkit-touch-callout: none; &#125;/*禁止选中文本*/html, body &#123; -webkit-user-select: none; user-select: none;&#125;/* 如何禁止选中文字 */.noselect &#123; -webkit-touch-callout: none; /* iOS Safari */ -webkit-user-select: none; /* Chrome/Safari/Opera */ -khtml-user-select: none; /* Konqueror */ -moz-user-select: none; /* Firefox */ -ms-user-select: none; /* Internet Explorer/Edge */ user-select: none; /* Non-prefixed version, currently not supported by any browser */&#125;/*去掉webkit默认的表单样式*/button,input,optgroup,select,textarea &#123; -webkit-appearance:none; &#125;/*去掉a、input和button点击时的蓝色外边框和灰色半透明背景*/a,button,input,optgroup,select,textarea &#123; -webkit-tap-highlight-color:rgba(0,0,0,0); &#125;/*修改webkit中input的planceholder样式*/input::-webkit-input-placeholder &#123; color:#ccc; &#125;/*修改webkit中focus状态下input的planceholder样式*/input:focus::-webkit-input-placeholder &#123; color:#f00; &#125;/*禁止IOS调整字体大小*/body &#123; -webkit-text-size-adjust: 100%!important; &#125;/*隐藏Android的语音输入按钮*/input::-webkit-input-speech-button &#123; display: none; &#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[版本规范]]></title>
      <url>%2F2017%2F01%2F07%2F%E7%89%88%E6%9C%AC%E8%A7%84%E8%8C%83%2F</url>
      <content type="text"><![CDATA[版本号由x.y.z三位组成，符合 语义化版本号 规范： 主版本号：当做了不兼容的API 修改 次版本号：当做了向下兼容的功能性新增 修订号：当做了向下兼容的问题修正 先行版本号及版本编译信息可以加到“主版本号.次版本号.修订号”的后面，作为延伸。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[C#开发规范]]></title>
      <url>%2F2017%2F01%2F07%2Fcsharp-%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83%2F</url>
      <content type="text"><![CDATA[注释 类头 注释 123456789101112/****************************************************************** ADD:-----------------------------------------------------------* VER:1.0* DTE:2015-4-21 10:39:36* ATU:作者* DES:说明* MOD:-----------------------------------------------------------* VER:1.1* DTE:2015-4-21 10:39:36* ATU:作者* DES:说明*****************************************************************/ 方法 注释 123456789101112131415//#region 获取xxx分页数据/// &lt;summary&gt;/// 获取xxx分页数据/// &lt;/summary&gt;/// &lt;param name="page"&gt;页码&lt;/param&gt;/// &lt;returns&gt;返回分页列表&lt;/returns&gt;public void GetPageList(int page)&#123; //TODO：未完成 ... //#region 代码块 - 逻辑操作 ... //#endregion&#125;//#endregion Enumerate / Model 注释 12345678910111213141516public void BooleanStates&#123; /// &lt;summary&gt; /// output true value only /// &lt;/summary&gt; True, /// &lt;summary&gt; /// output false value only /// &lt;/summary&gt; False, /// &lt;summary&gt; /// output true and false value both /// &lt;/summary&gt; TrueFalse&#125; MVC - C#框架规范]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[javascript规范]]></title>
      <url>%2F2017%2F01%2F07%2Fjavascript%E8%A7%84%E8%8C%83%2F</url>
      <content type="text"><![CDATA[javascript 注释 HBuilder官方文档 123456789101112131415161718192021/** * 文档注释写在这里 * @alias aliasName (使用@alias可以给一个变量或者函数指定一个别名，代码提示时会提示该别名) * @description 描述内容 (使用@description可以在代码提示时显示被描述变量或者函数的描述信息。) * @example 示例内容 (使用@example可以提示代码示例。) * @extends &#123;Type&#125; (使用@extends用于标识继承于某个类型。) * @param &#123;Type[,Type,...]&#125; ParameterName=[Value1|Value2[|Value3|...]] 参数描述 (使用@param可以描述一个函数的参数以及参数类型，HBuilder扩展了参数值域的写法（目前只支持字符串值域）) * @property &#123;Type[,Type,...]&#125; propertyName 属性描述 (使用@property可以描述一个对象的属性) * @constructor (使用@constructor可以标识一个函数是构造函数) * @type &#123;Type[,Type,...]&#125; (使用@type可以定义某个变量的类型) * @return &#123;Type[,Type,...]&#125; (使用@return可以描述一个对象的属性) * @throw &#123;TypeError&#125; 参数类型不匹配 (异常信息) */ function add(item)&#123; if(typeof item === "number")&#123; arr.push(item) &#125; else&#123; throw new TypeError(); &#125;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[CSS文件结构规范]]></title>
      <url>%2F2017%2F01%2F07%2Fcss-%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E8%A7%84%E8%8C%83%2F</url>
      <content type="text"><![CDATA[Sass 文件夹结构说明参考：http://sass-guidelin.es/zh/#section-53 下载Sass文件结构示例 Base 文件夹 base/文件夹存放项目中的模板文件。在这里，可以找到重置文件、排版规范文件或者一个样式表——定义一些 HTML 元素公认的标准样式（我喜欢命名为_base.scss）。 _base.scss:公认的标准样式 _reset.scss:浏览器重置样式 _animations.scss:动画 。。。 Layout / Partials文件夹 layout/(partials/) 文件夹存放构建网站或者应用程序使用到的布局部分。该文件夹存放网站主体（头部、尾部、导航栏、侧边栏…）的样式表、栅格系统甚至是所有表单的 CSS 样式。 Components / Modules 文件夹 对于小型组件来说，有一个 components/ 文件夹来存放。相对于 layout/ 的宏观（定义全局线框结构），components/ 更专注于局部组件。该文件夹包含各类具体模块，基本上是所有的独立模块，比如一个滑块、一个加载块、一个部件……由于整个网站或应用程序主要由微型模块构成，components/ 中往往有大量文件。 Pages 文件夹 如果页面有特定的样式，最好将该样式文件放进 pages/ 文件夹并用页面名字。例如，主页通常具有独特的样式，因此可以在 pages/ 下包含一个 _home.scss 以实现需求。取决于各自的开发流程，这些文件可以使用你自己的前缀命名，避免在最终样式表中与他人的样式表发生合并。一切完全取决于你。 Themes 文件夹 在大型网站和应用程序中，往往有多种主题。虽有多种方式管理这些主题，但是我个人更喜欢把它们存放在 themes/ 文件夹中。 Utils / Helpers / Utilities 文件夹 utils/ 文件夹包含了整个项目中使用到的 Sass 辅助工具，这里存放着每一个全局变量、函数、混合宏和占位符。该文件夹的经验法则是，编译后这里不应该输出任何 CSS，单纯的只是一些 Sass 辅助工具。当项目体量庞大工具复杂时，通过主题而不是类型分类整理可能更有帮助，比如排版（_typography.scss）、主题（_theming.scss）等。每一个文件都包含所有的相关信息：变量、函数、混合宏和占位符。这样做可以让维护更加单，特别针对于文件较长的情况。 Vendors 文件夹 最后但并非最终的是，大多数的项目都有一个 vendors/ 文件夹，用来存放所有外部库和框架（Normalize, Bootstrap, jQueryUI, FancyCarouselSliderjQueryPowered……）的 CSS 文件。将这些文件放在同一个文件中是一个很好的说明方式:”嘿，这些不是我的代码，无关我的责任。”如果你重写了任何库或框架的部分，建议设置第 8 个文件夹 vendors-extensions/ 来存放，并使用相同的名字命名。例如，vendors-extensions/_boostrap.scss 文件存放所有重写 Bootstrap 默认 CSS 之后的 CSS 规则。这是为了避免在原库或者框架文件中进行二次编辑——显然不是好方法。 入口文件 主文件（通常写作 main.scss）应该是整个代码库中唯一开头不用下划线命名的 Sass 文件。除 @import 和注释外，该文件不应该包含任何其他代码。 文件引入方式：为了保持可读性，主文件应遵守如下两种准则一种 方式一： 每个 @import引用一个文件； 每个 @import单独一行； 从相同文件夹中引入的文件之间不用空行； 从不同文件夹中引入的文件之间用空行分隔； 忽略文件扩展名和下划线前缀。 123456789101112131415161718192021222324252627282930@import 'utils/variables';@import 'utils/functions';@import 'utils/mixins';@import 'utils/placeholders';@import 'vendors/bootstrap';@import 'vendors/jquery-ui';@import 'vendors-extensions/bootstrap';@import 'vendors-extensions/jquery-ui';@import 'base/reset';@import 'base/typography';@import 'layout/navigation';@import 'layout/grid';@import 'layout/header';@import 'layout/footer';@import 'layout/sidebar';@import 'layout/forms';@import 'components/buttons';@import 'components/carousel';@import 'components/cover';@import 'components/dropdown';@import 'pages/home';@import 'pages/contact';@import 'themes/theme';@import 'themes/admin'; 方式二： 每个文件夹只使用一个@import 每个@import之后都断行 每个文件占一行 新的文件跟在最后的文件夹后面 文件扩展名都可以省略 12345678910111213141516171819202122232425262728293031323334353637@import 'utils/variables', 'utils/functions', 'utils/mixins', 'utils/placeholders';@import 'vendors/bootstrap', 'vendors/jquery-ui', 'vendors-extensions/bootstrap', 'vendors-extensions/jquery-ui';@import 'base/reset', 'base/typography';@import 'layout/navigation', 'layout/grid', 'layout/header', 'layout/footer', 'layout/sidebar', 'layout/forms';@import 'components/buttons', 'components/carousel', 'components/cover', 'components/dropdown';@import 'pages/home', 'pages/demo';@import 'themes/theme', 'themes/admin'; 另一个有意思的方面，由业内已流行的 Harry Roberts, Dave Rupert 和 Chris Coyier 引起的，那就是将所有的CSS声明、Hack行为和我们不支持的行为放入一个 shame file。该文件命名为 _shame.scss，在所有文件之后被引用，放在所有样式表的最后。 12345678910/** * Nav specificity fix. * * Someone used an ID in the header code (`#header a &#123;&#125;`) which trumps the * nav selectors (`.site-nav a &#123;&#125;`). Use !important to override it until I * have time to refactor the header stuff. */.site-nav a &#123; color: #BADA55 !important;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[CSS选择器嵌套规范]]></title>
      <url>%2F2017%2F01%2F07%2Fcss-%E9%80%89%E6%8B%A9%E5%99%A8%E5%B5%8C%E5%A5%97%E8%A7%84%E8%8C%83%2F</url>
      <content type="text"><![CDATA[应该尽可能避免选择器嵌套。 例外在最外层选择器中嵌套伪类和伪元素是被允许，也是受推荐的。1234567891011.foo &#123; color: red; &amp;:hover &#123; color: green; &#125; &amp;::before &#123; content: 'pseudo-element'; &#125;&#125; 使用选择器嵌套选择伪类和伪元素不仅仅有道理的（因为它的处理功能与选择器紧密相关），而且有助于保持总体的一致性。当然，如果使用类似 .is-active 类名来控制当前选择器状态，也可以这样使用选择器嵌套。1234567.foo &#123; // ... &amp;.is-active &#123; font-weight: bold; &#125;&#125; 这并不是最重要的，当一个元素的样式在另一个容器中有其他指定的样式时，可以使用嵌套选择器让他们保持在同一个地方。1234567.foo &#123; // ... .no-opacity &amp; &#123; display: none; &#125;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[css-声明顺序规范]]></title>
      <url>%2F2017%2F01%2F07%2Fcss-%E5%A3%B0%E6%98%8E%E9%A1%BA%E5%BA%8F%E8%A7%84%E8%8C%83%2F</url>
      <content type="text"><![CDATA[CSS 声明顺序以类型（position, display, colors, font, miscellaneous…）顺序排列，依赖盒模型定义顺序：由外而内。 位置属性(position, top, right, z-index, display, float等) 大小(width, height, padding, margin) 文字系列(font, line-height, letter-spacing, color- text-align等) 背景(background, border等) 其他(animation, transition等) 123456789101112131415.foo &#123; position: absolute; top: 0; left: 0; z-index: -1; width: 100px; height: 100px; margin: 0; padding: 0; font-weight: bold; font-size: 1.5em; color: white; background: black; overflow: hidden;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[CSS MAP 规范]]></title>
      <url>%2F2017%2F01%2F07%2Fcss-map%E8%A7%84%E8%8C%83%2F</url>
      <content type="text"><![CDATA[Maps从 Sass3.3 开始，样式表作者可以使用 map 这种数据结构—— Sass 团队使 map 可以映射关联数组、哈希表甚至是 Javascript 对象。map 是一种映射任何类型键值对（可以是任何类型，包括内嵌 maps，不过不推荐这种内嵌方式）的数据结构。 map 的使用应该遵循下述规范： 冒号(:)之后添加空格； 左开括号(()要和冒号(:)写在同一行； 如果键是字符串（99% 都是字符串），则使用引号包裹起来。 每一个键值对单独一行； 每一个键值对以逗号(,)结尾； 为最后一个键值对添加尾部逗号 (,)，方便添加新键值对、删除和重排已有键值对； 单独一行书写右闭括号 ())； 右闭括号 ())和分号(;)之间不使用空格和换行。123456789// Yep$breakpoints: ( 'small': 767px, 'medium': 992px, 'large': 1200px,);// Nope$breakpoints: ( small: 767px, medium: 992px, large: 1200px ); 调试 SASS MAP如果你感到困惑并想了解 Sass 的 map 到底有怎样的魔力，请不要担心，Sass 中始终存在一个自动保存运行过程的机制。123456789101112131415@mixin debug-map($map) &#123; @at-root &#123; @debug-map &#123; __toString__: inspect($map); __length__: length($map); __depth__: if(function-exists('map-depth'), map-depth($map), null); __keys__: map-keys($map); __properties__ &#123; @each $key, $value in $map &#123; #&#123;'(' + type-of($value) + ') ' + $key&#125;: inspect($value); &#125; &#125; &#125; &#125;&#125; 如果你想深入了解 map 的实现机制，可以添加下述函数。该混合宏可以自动显示 map 的运行机制。1234567891011121314/// Compute the maximum depth of a map/// @param &#123;Map&#125; $map/// @return &#123;Number&#125; max depth of `$map`@function map-depth($map) &#123; $level: 1; @each $key, $value in $map &#123; @if type-of($value) == 'map' &#123; $level: max(map-depth($value) + 1, $level); &#125; &#125; @return $level;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[CSS列表规范]]></title>
      <url>%2F2017%2F01%2F07%2Fcss-%E5%88%97%E8%A1%A8%E8%A7%84%E8%8C%83%2F</url>
      <content type="text"><![CDATA[列表需要遵守以下规范： 除非列表太长不能写在 80 字符宽度的单行中，否则应该始终单行显示； 除非适用于 CSS，否则应该始终使用逗号作为分隔符； 要么使用内联形式，要么使用多行形式； 始终使用括号包裹； 始终不要添加尾部的逗号。123456789101112131415161718// Yep$font-stack: ('Helvetica', 'Arial', sans-serif);// Yep$font-stack: ( 'Helvetica', 'Arial', sans-serif);// Nope$font-stack: 'Helvetica' 'Arial' sans-serif;// Nope$font-stack: 'Helvetica', 'Arial', sans-serif;// Nope$font-stack: ('Helvetica', 'Arial', sans-serif,); 当需要给列表添加一个新列表项时，请遵守其提供的 API，不要试图手动给列表添加列表项。 1234567$shadows: (0 42px 13.37px hotpink);// Yep$shadows: append($shadows, $shadow, comma);// Nope$shadows: $shadows, $shadow;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[CSS颜色规范]]></title>
      <url>%2F2017%2F01%2F07%2Fcss-%E9%A2%9C%E8%89%B2%E8%A7%84%E8%8C%83%2F</url>
      <content type="text"><![CDATA[颜色 当涉及到操纵色彩时，Sass 通过提供少数的 函数功能，最终成为了极具价值的助手。 颜色格式为了尽可能简单地使用颜色，我建议颜色格式要按照以下顺序排列： CSS 颜色关键字 HSL 值 RGB 值 十六进制。小写并尽可能简写12345678910111213141516171819// Yep.foo &#123; color: red;&#125;// Nope.foo &#123; color: #FF0000;&#125;// Yep.foo &#123; color: #ebc;&#125;// Nope.foo &#123; color: #eebbcc;&#125; 使用 HSL 值或者 RGB 值，通常在逗号 (,)后面追加一个空格，而不在前后括号 ((, )) 和值之间添加空格。1234567891011// Yep.foo &#123; color: rgba(0, 0, 0, 0.1); background: hsl(300, 100%, 100%);&#125;// Nope.foo &#123; color: rgba(0,0,0,0.1); background: hsl( 300, 100%, 100% );&#125; 颜色和变量当一个颜色被多次调用时，最好用一个有意义的变量名来保存它。12$sass-pink: #c69;color: $sass-pink; 不过，如果你是在一个主题中使用，我不建议固定的使用这个变量。相反，可以使用另一个标识方式的变量来保存它。1$main-theme-color: $sass-pink; 变亮和变暗颜色lighten 和 darken 函数都是通过增加或者减小HSL中颜色的亮度来实现调节的。基本上，它们就是 adjust-color 函数添加了 $lightness 参数的别名。另一方面，通过混合 白色 或 黑色 实现变量或变暗的 mix 函数，是一个不错的方法。 使用 mix 的好处是，当你降低颜色的比例时，它会渐进的接近黑色（或者白色），而 darken 和 lighten 立即变换颜色到黑色或白色。具体差异可以查看 KatieK。 1234567891011121314151617/// Slightly lighten a color/// @access public/// @param &#123;Color&#125; $color - color to tint/// @param &#123;Number&#125; $percentage - percentage of `$color` in returned color/// @return &#123;Color&#125;@function tint($color, $percentage) &#123; @return mix(white, $color, $percentage);&#125;/// Slightly darken a color/// @access public/// @param &#123;Color&#125; $color - color to shade/// @param &#123;Number&#125; $percentage - percentage of `$color` in returned color/// @return &#123;Color&#125;@function shade($color, $percentage) &#123; @return mix(black, $color, $percentage);&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[CSS数字规范]]></title>
      <url>%2F2017%2F01%2F07%2Fcss-%E6%95%B0%E5%AD%97%E8%A7%84%E8%8C%83%2F</url>
      <content type="text"><![CDATA[当数字小于 1 时，省略小数的 0 1234567891011// Yep.foo &#123; padding: 2em; opacity: .5;&#125;// Nope.foo &#123; padding: 2.0em; opacity: 0.5;&#125; 当定义长度时，0 后面不需要加单位 12345// Yep$length: 0;// Nope$length: 0em; 给数字添加单位，可以让该数值乘以 1 个单位，也可以加上一个 0unit 1234567$value: 42; // Yep $length: $value * 1px; // Nope $length: $value + px; 12345678$value: 42 + 0px; // -&gt; 42px $value: 1in + 0px; // -&gt; 1in $value: 0px + 1in; // -&gt; 96px 删除一个值的单位，可以除以相同类型的 1 单位。 1234567$length: 42px; // Yep $value: $length / 1px; // Nope $value: str-slice($length + unquote(''), 1, 2); 运算最高级运算应该始终被包裹在括号中。这么做不仅是为了提高可读性，也是为了防止一些 Sass 强制要求对括号内内容计算的极端情况。123456789// Yep.foo &#123; width: (100% / 3);&#125;// Nope.foo &#123; width: 100% / 3;&#125; 幻数（MAGIC NUMBERS）“幻数”，是http://en.wikipedia.org/wiki/Magic_number_(programming)#Unnamed_numerical_constants&quot;&gt;古老的学校编程给未命名数值常数的命名。基本上，它们只是能工作™但没有任何逻辑思维的随机数。 相信不用多说你也会理解，幻数是一场瘟疫，应不惜一切代价以避免。当你对数值的解析方式无法找到一个合理解释时，你可以对此提交一个内容宽泛的评论，包括你是怎样遇见这个问题以及你认为它应该怎样工作。承认自己不清楚一些机制的解析方式，远比让以后的开发者从零开始弄清它们更有帮助。 1234567/** * 1\. Magic number. This value is the lowest I could find to align the top of * `.foo` with its parent. Ideally, we should fix it properly. */.foo &#123; top: 0.327em; /* 1 */&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[CSS字符串规范]]></title>
      <url>%2F2017%2F01%2F07%2Fcss-%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A7%84%E8%8C%83%2F</url>
      <content type="text"><![CDATA[字符串、URL 应该始终被单引号(‘)所包裹，initial 或 sans-serif 的专用名词无须引用起来12345// Yep$direction: 'left';// Nope$direction: left; 123456789// Yep.foo &#123;background-image: url('/images/kittens.jpg');&#125;// Nope.foo &#123;background-image: url(/images/kittens.jpg);&#125; 12345678// Yep$font-type: sans-serif;// Nope$font-type: 'sans-serif';// Okay I guess$font-type: unquote('sans-serif'); 12345// Okay@warn 'You can\'t do that.';// Okay@warn "You can't do that.";]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[css规范札记]]></title>
      <url>%2F2017%2F01%2F07%2Fcss-%E8%A7%84%E8%8C%83%E6%9C%AD%E8%AE%B0%2F</url>
      <content type="text"><![CDATA[web前端规范-CSS 参考 Sass Guidelines（中文版） 编码为了避免潜在的字符编码问题，强力建议在入口文件中通过 @charset 指令使用 UTF-8 编码格式。请确保该指令是文件的第一条语句，并排除其他字符编码声明。1@charset 'utf-8'; CSS的权重 通配选择符的权值 0,0,0,0 标签的权值为 0,0,0,1 类的权值为 0,0,1,0 属性选择的权值为 0,0,1,0 伪类选择的权值为 0,0,1,0 伪对象选择的权值为 0,0,0,1 ID的权值为 0,1,0,0 important的权值为最高 1,0,0,0 比较同一级别的个数，数量多的优先级高，如果相同即比较下一级别的个数。important &gt; 内联 &gt; ID &gt; 类 &gt; 标签 | 伪类 | 属性选择 &gt; 伪对象 &gt; 通配符 &gt; 继承 256个class类名选择器干掉一个id选择器实例 ~所有的类名(classes)都是以8字节字符串存储的，8字节所能hold的最大值就是255，超过势必会越过其边缘~ CSS选择器的 效率 从高到低： id选择器（#myid） 类选择器（.myclassname） 标签选择器（div,h1,p） 相邻选择器（h1+p） 子选择器（ul &lt; li） 后代选择器（li a） 通配符选择器（*） 属性选择器（a[rel=”external”]） 伪类选择器（a:hover,li:nth-child） 命名就变量、函数和混合宏的命名而言，我们坚持一些很 CSS-y 的风格：小写连字符分隔，有意义的命名。组件命名参考BEM原则123456789$vertical-rhythm-baseline: 1.5rem;@mixin size($width, $height: $width) &#123; // ...&#125;@function opposite-direction($direction) &#123; // ...&#125; 常量建议使用全大写方式书写12345// Yep$CSS_POSITIONS: (top, right, bottom, left, center);// Nope$css-positions: (top, right, bottom, left, center); 组件命名应该遵循BEM原则：块（Block）、元素（Element）、修饰符（Modifier） 块 是一个独立的实体，既可以是简单的也可以是复合的（包含其他块）。块使用顶级类名(多个单词的长名称使用一个连字符(-)连接)12//组件块.menu-tabs&#123;&#125; 元素 是块的一部分，具有某种功能。元素是依赖上下文的：它们只有处于他们应该属于的块的上下文中时才是有意义的。使用两个下划线(__)来分隔块名和元素名12//构成 .menu-tabs 的一个子元素.menu-tabs__tab1&#123;&#125; 修饰符 作为一个块或是一个元素的一种属性，代表这个块或这个元素在外观或是行为上的改变。使用两个连字符(--)来分隔块名（或元素名）和修饰符名12//.menu-tabs__tab1 的某个不同状态或版本.menu-tabs__tab1--active&#123;&#125; CSS属性 使用(2/4)空格代表缩进，而不是使用tab键 理想上，每行保持为80个字符宽度 正确书写多行CSS规则 有意义的使用空格、换行 相关联的选择器写在同一行；不相关联选择器分行书写 最后一个选择器和左开大括号({)中间书写一个空格 每个声明单独一行 冒号(:)后添加空格 所有声明的尾部都添加一个分号 (;) 右闭大括号(})单独一行 右闭大括号(})后添加空行12345678910111213141516171819202122232425262728// Yep.foo &#123; display: block; overflow: hidden; padding: 0 1em;&#125;// Nope.foo &#123; display: block; overflow: hidden; padding: 0 1em;&#125;// Yep .foo, .foo-bar, .baz &#123; display: block; overflow: hidden; margin: 0 auto; &#125; // Nope .foo, .foo-bar, .baz &#123; display: block; overflow: hidden; margin: 0 auto &#125; 添加与 CSS 相关的规范时，我们需要注意： 本地变量在其他任何变量之前声明，并和其他声明用空行分隔开； 不需 @content 的混合宏在放在其他声明之前； 嵌套选择器在新行声明； 需要 @content 的混合宏在嵌套选择器后声明； 右闭大括号(})上一行无需空行；123456789101112131415161718.foo, .foo-bar,.baz &#123; $length: 42em; @include ellipsis; @include size($length); display: block; overflow: hidden; margin: 0 auto; &amp;:hover &#123; color: red; &#125; @include respond-to('small') &#123; overflow: visible; &#125;&#125; 注释在代码完成之时立即注释 一个文件的结构或者作用； 规则集的目标； 使用幻数背后的目的； CSS 声明的原因； CSS 声明的顺序； 方法执行背后的逻辑思维。 CSS文件开头或核心块，使用多行注释：1234567891011/** * Helper class to truncate and add ellipsis to a string too long for it to fit * on a single line. * 1\. Prevent content from wrapping, forcing it on a single line. * 2\. Add ellipsis at the end of the line. */.ellipsis &#123; white-space: nowrap; /* 1 */ text-overflow: ellipsis; /* 2 */ overflow: hidden;&#125; 当注释 Sass 的一个特定部分时，使用单行注释：123// Add current module to the list of imported modules.// `!global` flag is required so it actually updates the global variable.$imported-modules: append($imported-modules, $module) !global; 每一个旨在代码库中复用的变量、函数、混合宏和占位符，都应该使用 SassDoc 记录下来作为全部 API 的一部分。123/// Vertical rhythm baseline used all over the code base./// @type Length$vertical-rhythm-baseline: 1.5rem; SassDoc 需要三个反斜杠(/)，主要有两个作用： 作为公有或私有 API 的一部分，在所有的地方使用一个注释系统强制标准化注释。 通过使用任意的 SassDoc 终端(CLI tool, Grunt, Gulp, Broccoli, Node…)，能够生成 API 文档的 HTML 版本。 1234567891011121314151617181920212223242526272829303132/// Mixin helping defining both `width` and `height` simultaneously.////// @author Hugo Giraudel////// @access public////// @param &#123;Length&#125; $width - Element’s `width`/// @param &#123;Length&#125; $height ($width) - Element’s `height`////// @example scss - Usage/// .foo &#123;/// @include size(10em);/// &#125;////// .bar &#123;/// @include size(100%, 10em);/// &#125;////// @example css - CSS output/// .foo &#123;/// width: 10em;/// height: 10em;/// &#125;////// .bar &#123;/// width: 100%;/// height: 10em;/// &#125;@mixin size($width, $height: $width) &#123; width: $width; height: $height;&#125; 媒体查询媒体查询紧贴选择器 1234567.foo &#123; color: red; @include respond-to('medium') &#123; color: blue; &#125;&#125; 生成结果： 123456789.foo &#123; color: red;&#125;@media (min-width: 800px) &#123; .foo &#123; color: blue; &#125;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[CSS命名规范]]></title>
      <url>%2F2017%2F01%2F07%2Fcss-%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83%2F</url>
      <content type="text"><![CDATA[web前端命名规范 web语义化： 标签语义化，如在合适的地方用合适的语义化标签，如头部可用&lt;header&gt;、尾部可用&lt;footer&gt;； 命名语义化，包括html的id和class的命名，javascript相关命名；如#header{}、.footer{}、等。 下面是常见的命名参考规范： 主体 头部：header 内容：content/container 尾部：footer 导航：nav 侧栏：sidebar 栏目：column 整体布局：wrapper 左右中：left / right / center 登录条：loginbar 标志：logo 广告：banner 页面主体：main 热点：hot 新闻：news 下载：download 子导航：subnav 菜单：menu 子菜单：submenu 搜索：search 友情链接：friendlink 页脚：footer 版权：copyright 滚动：scroll 标签页：tab 文章列表：list 提示信息：msg 小技巧：tips 栏目标题：title 加入：join 指南：guild 服务：service 注册：regsiter 状态：status 投票：vote 合作伙伴：partner css注释的写法如内容区，Html注释的写法 ：&lt;!--header头部-- &gt; id的命名规范 页面结构 容器: container 页头：header 内容：content/container 页面主体：main 页尾：footer 导航：nav 侧栏：sidebar 栏目：column 页面外围控制整体布局宽度：wrapper 左右中：left right center 导航 导航：nav 主导航：mainnav 子导航：subnav 顶导航：topnav 边导航：sidebar 左导航：leftsidebar 右导航：rightsidebar 菜单：menu 子菜单：submenu 标题：title 摘要：summary 功能 标志：logo 广告：banner 登陆：login 登录条：loginbar 注册：regsiter 搜索：search 功能区：shop 标题：title 加入：joinus 状态：status 按钮：btn 滚动：scroll 标签页：tab 文章列表：list 提示信息：msg 当前的：current 小技巧：tips 图标：icon 注释：note 指南：guild 服务：service 热点：hot 新闻：news 下载：download 投票：vote 合作伙伴：partner 友情链接：link 版权：copyright class的命名: 颜色：使用颜色的名称或者16进制代码，如： .red { color: red; }.f60 { color: #f60; }.ff8600 { color: #ff8600; } 字体大小，直接使用“font+字体大小”作为名称，如： .font12px { font-size: 12px; }.font9pt {font-size: 9pt; } 对齐样式，使用对齐目标的英文名称，如： .left { float:left; }.bottom { float:bottom; } 标题栏样式，使用“类别+功能”的方式命名，如： .barnews { }.barproduct { } 注意事项： 一律小写； 尽量用英文； 尽量不加中杠和下划线； 尽量不缩写，除非一看就明白的单词，如：wrapper可以写成wrap。 css文件命名规范： 主要的 master.css 模块 module.css 基本共用 base.css 布局，版面 layout.css 主题 themes.css 专栏 columns.css 文字 font.css 表单 forms.css 补丁 mend.css 打印 print.css]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[接口规范]]></title>
      <url>%2F2017%2F01%2F07%2F%E6%8E%A5%E5%8F%A3%E8%A7%84%E8%8C%83%2F</url>
      <content type="text"><![CDATA[所有的返回数据都要配合全局状态码； 接口参数 requestData 中的 XXX 需要根据实际业务需求进行替换，其他参数为固定接口参数； 接口返回值 returnData 中的 KEY 需要根据实际业务需求进行替换，格式要保持统一，其他返回参数为固定接口参数。 [TOC] STATUS_CODE 状态码 状态码 说明 1xx 元数据 2xx 正确的响应 3xx 重定向 4xx 客户端错误 5xx 服务端错误 查询单条数据XXX接口 接口用途:获取XXX单条信息 URL : /app/interface/getItem Method : POST or GET requestData： 参数名 必选 类型及范围 说明 XXX √ string 如用户ID[^示例] 接口参数示例 123&#123; "MEMBER_ID":"123"&#125; returnData : 返回键 类型 返回值 说明 STATUS_CODE int 状态码 参考上方的全局状态码 MSG string 返回状态信息 如操作成功，可以为空 KEY1 int 响应字段值1[^示例] KEY2 string 响应字段值2[^示例] KEY3 object 响应字段值3[^示例] 可以依然包含对象 - KEY3_KEY1 string - 响应字段值3-1[^示例] - KEY3_KEY2 string - 响应字段值3-2[^示例] （接口返回数据示例，可以直接将测试工具[^1]中的数据粘贴过来） 12345678910111213//测试地址 =&gt; http://123.57.89.97:8080/t2o/app/forum/listForumByActivity?ACTIVITY_ID=1f423553e3534b20b01523a08460a981&amp;MEMBER_ID=58b6195bfe804fbb94dadac5f500124b&amp;TYPE=2&amp;showCount=10&amp;currentPage=1&#123; "STATUS_CODE": 0, //=&gt;状态码，必需 "MSG": "success", //=&gt;返回信息，必需 // 以下字段需要根据实际业务需求替换 "KEY1": "响应字段值1", "KEY2": "响应字段值2", "KEY3": &#123; "KEY3_KEY1": "响应字段值3-1", "KEY3_KEY2": "响应字段值3-2" &#125;&#125; 列表数据XXX接口 接口用途:获取XXX列表数据 URL : /app/interface/getList Method : POST / GET requestData： 参数名 必选 类型及范围 说明 XXX √ string 如用户ID[^示例] PAGE_INDEX int 页码，不传默认获取第一页 SHOW_COUNT int 每页显示条数，不传默认每页10条 12345&#123; "MEMBER_ID":"123", "PAGE_INDEX":1, "SHOW_COUNT":10&#125; returnData : 返回键 类型 返回值 说明 STATUS_CODE int 状态码 参考上方的全局状态码 MSG string 返回状态信息 如操作成功，可以为空 CURRENT_PAGE int 当前页码 PAGE_COUNT int 总页数 KEY1 int 响应字段值1[^示例] KEY2 string 相应字段值2[^示例] LIST Array[Object] 对象列表 LIST为空时显示 “LIST”:[] - KEY string - 对象列表字段值[^示例] 1234567891011121314//测试地址 =&gt; http://123.57.89.97:8080/t2o/app/forum/listForumByActivity?ACTIVITY_ID=1f423553e3534b20b01523a08460a981&amp;MEMBER_ID=58b6195bfe804fbb94dadac5f500124b&amp;TYPE=2&amp;showCount=10&amp;currentPage=1&#123; "STATUS_CODE": 0, //=&gt;状态码，必需 "MSG": "success", //=&gt;返回信息，必需 "CURRENT_PAGE": 1, //=&gt;当前页码 "PAGE_COUNT": 10, //=&gt;总页数 "KEY1": 123, "KEY2": "", "LIST": [ //=&gt; 列表数组 &#123;"KEY": "对象列表字段值"&#125;, &#123;"KEY": "对象列表字段值"&#125; ]&#125; 操作增/删/改XXX接口 接口用途:…… URL : /app/interface/add Method : POST requestData： 参数名 必选 类型及范围 说明 XXX √ string 如用户ID[^示例] XXX string 如昵称[^示例] 123&#123; "MEMBER_ID":"123"&#125; returnData : 返回键 类型 返回值 说明 STATUS_CODE int 状态码 参考上方的全局状态码 MSG string 返回状态信息 如操作成功，可以为空 ID int 增、删、改数据的ID或者标志 1234567//测试地址 =&gt; http://123.57.89.97:8080/t2o/app/forum/listForumByActivity?ACTIVITY_ID=1f423553e3534b20b01523a08460a981&amp;MEMBER_ID=58b6195bfe804fbb94dadac5f500124b&amp;TYPE=2&amp;showCount=10&amp;currentPage=1&#123; "STATUS_CODE": 0, //=&gt;状态码，必需 "MSG": "success", //=&gt;返回信息，必需 "ID": 1&#125; 上传Base64上传图片XXX接口 接口用途:…… URL : /app/interface/uploadBase64 Method : POST requestData： 参数名 必选 类型及范围 说明 XXX string 如用户ID[^示例] FILE √ string 图片文件的Base64字符串 123&#123; "MEMBER_ID":"123"&#125; returnData : 返回键 类型 返回值 说明 STATUS_CODE int 状态码 参考上方的全局状态码 MSG string 返回状态信息 如操作成功，可以为空 FILE_PATH int 文件上传后的服务器路径 1234567//测试地址 =&gt; http://123.57.89.97:8080/t2o/app/forum/listForumByActivity?ACTIVITY_ID=1f423553e3534b20b01523a08460a981&amp;MEMBER_ID=58b6195bfe804fbb94dadac5f500124b&amp;TYPE=2&amp;showCount=10&amp;currentPage=1&#123; "STATUS_CODE": 0, //=&gt;状态码，必需 "MSG": "success", //=&gt;返回信息，必需 "FILE_PATH": "xxx/xxx.png" //=&gt;保存的文件路径&#125; 文件流上传XXX接口 接口用途:…… URL : /app/interface/uploadFile Method : POST requestData： 参数名 必选 类型及范围 说明 XXX string 如用户ID[^示例] FILE √ file 文件对象 1234&#123; "MEMBER_ID":"123", "FILE":"..."&#125; returnData : 返回键 类型 返回值 说明 STATUS_CODE int 状态码 参考上方的全局状态码 MSG string 返回状态信息 如操作成功，可以为空 FILE_PATH int 文件上传后的服务器路径 1234567//测试地址 =&gt; http://123.57.89.97:8080/t2o/app/forum/listForumByActivity?ACTIVITY_ID=1f423553e3534b20b01523a08460a981&amp;MEMBER_ID=58b6195bfe804fbb94dadac5f500124b&amp;TYPE=2&amp;showCount=10&amp;currentPage=1&#123; "STATUS_CODE": 0, //=&gt;状态码，必需 "MSG": "success", //=&gt;返回信息，必需 "FILE_PATH": "xxx/xxx.png" //=&gt;保存的文件路径&#125; [^示例]: http://toutiao.com/a6324044757329051906/ “接口示例”[^1]: http://www.getpostman.com “接口测试工具：POSTMAN”[^2]: http://jsoneditoronline.org/index.html?referrer=chrome_app “JSON格式化工具”]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[命名规范]]></title>
      <url>%2F2017%2F01%2F07%2F%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83%2F</url>
      <content type="text"><![CDATA[对象名、方法名语义化，英语不行用拼音 文件名 内容 文件命名 例子 List Page fileName + s users.html Detail Page fileName + Info userInfo.html Data / Update Page fileName + Act userAct.html Update Page fileName + Edit userEdit.html Insert Page fileName + Add userAdd.html Delete Page fileName + Delete userDelete.html Order Page fileName + Order userOrder.html Data Validate Page fileName + Checker userChecker.html 类名 内容 类(文件)名 例子 Interface I + ClassName IParamLanguage Model ClassName + Model UserModel DAL ClassName + DAL …… BLL ClassName + BLL …… 方法名 方法命名 说明 GetPagerList 获取分页数据 GetDictionary 获取数据字典的数据 GetList 获取所有列表数据 GetSingleList …… GetSingle 获取单条对象数据 GetFirstOrDefault …… Get「内容」 获取指定内容的数据 Insert「内容」 增加 Update「内容」 修改 Delete「内容」 删除 Order 数据重新排序 IsExist 检查数据是否存在 控件ID/NAME 元素 前缀 例子 input(text) / textarea / textbox tb tbUserName input(checkbox) cb cbIsRead input(radio) rd rdSex label lb lbIsRead hidden hd hdUserId]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[科学上网]]></title>
      <url>%2F2017%2F01%2F07%2F%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%2F</url>
      <content type="text"><![CDATA[爱翻墙 是一个网址导航网站，收录了中国大陆不能正常访问的网址。 为什么要科学上网在天朝的IT从业者，没有人不知道GFW的存在。GFW的利与弊在这不再深究。以下列出的我科学上网的理由： 搜索，百度的竞价排名搜出来的东西更google不在同一档次，想要更高的搜索质量。 软件/库更新老旧，大部分优质的（开源）软件/库都是国外的人开发的。当获取某一个库的时候，不翻墙，更新很慢，甚至无法更新。 锻炼英语能力，通过阅读一些原始的文档（至少有工作驱使）来练练英语水平。 世界那么大，我想去看看。我可以看看外面的资讯，避免一面之辞。 获取灵感，知乎与Quora，segmentfault与stackoverflow…这些是多么的相似。 现在比较流行的科学上网方式 Hosts最成功、最有效，也是最为跨平台的方法。它简单高效，并且随时可修改，通过绕过 DNS 直接访问 IP 的方式，可以让翻墙变得十分容易，不会像客户端软件那样需要不停地切换国内国外网络，大大简化了操作步骤。 维基百科 VPN虚拟专用网络。 GAE（GoAgent）一个基于Google Appengine的代理工具，代理IP。 Shadowsocks一个轻量级socks加密代理，全主流平台支持。 XX-Net免费开源的翻墙工具安装简单、速度快、智能路由。中文教程 Lantern和“XX-Net”类似。 Hosts Hosts不是长久有效的，如发现访问不了则需更新最新的Hosts。Hosts更新后打开浏览器访问https://www.google.com/ncr,刚替换完有可能还是无法访问，此时需要清除缓存多刷新几次。 怎样修改Hosts Windows : 打开资源管理器定位到C:\windows\system32\drivers\etc\ 找到hosts文件，获得读写权限，用记事本打开并修改。 Mac OS X : 右键点击Dock上的Finder，选择［前往文件夹］，输入/etc回车，找到hosts文件，拖到桌面，在桌面修改完成，删掉/etc里面的hosts（需要密码鉴定），然后把桌面的hosts拖回去（需要鉴定）。 在Mac下修改可能需要您的管理员权限批准。 Linux : 定位到/etc，取得hosts读写权限，然后修改保存。 hosts切换工具 SwitchHostshosts 获取地址 YouTube、Google+、Facebook、Twitter、维基百科最全hosts racaljk.hosts hosts 自动更新程序 每次手动替换失效hosts比较麻烦，也可以使用下面的自动更新脚本进行修改，但是hosts文件一定要有读写权限 Update Hosts 下载 : 使用的hosts源是racaljk.hosts可替换，替换方法请移步官网 使用的时候只需要 双击 start.vbs 文件即可完成自动更新。 如果想让 hosts 始终保持最新，可以 双击 addToStartup.js 将此脚本加入到启动项，开机状态下每隔1小时会自动获取一次 ​ Shadowsocks(小飞机) Shadowsocks 是什么Shadowsocks 是一种安全的 socks5 代理，可以保护你的上网流量。基于多种加密方式，推荐使用 aes-256-cfb 加密。安装和使用需要本地端和服务端。本地客户端已经包含了多种版本，包括iOS，Android，Windows，MAC，甚至是路由器 (基于OpenWRT)，所以使用方便，各取所需。远程服务端则一般安装在基于 Linux 的各种发行版操作系统，比如 Debian， CentOS， Fedora， Redhat， Ubuntu， openSUSE等。 Shadowsocks 的作者是谁最初只有 Python 版，由 @clowwindy 开发和维护，后来随着知名度提高，开始出现各种语言的版本，其中比较知名的是 libev ， go， nodejs 等版本，需要注意的是，nodejs 的作者也是 @clowwindy，但最近已不再维护该版本。libev 的维护者是@madeye，长期更新。 官方客户端第三方客户端:shadowsocksR 免费Shadowsocks账号获取地址 ishadowsocks freeshadowsocks 使用方法 Shadowsocks使用指导 解压到任意目录，运行其中的Shadowsocks.exe 首次运行，会弹出编辑服务器窗口，按图示填写您的Shadowsocks服务器地址、端口、密码和加密方式 点确定后，会如下提示 按提示右键程序图标，弹出菜单，勾选“启用系统代理”]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>%2F2017%2F01%2F07%2Fhello-world%2F</url>
      <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
    </entry>

    
  
  
</search>
