<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>移动端开发的屏幕、图像、字体与布局的兼容适配</title>
    <url>/posts/366e9f61.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>前端的一大工作内容就是去兼容页面在不同内核的浏览器，不同的设备，不同的分辨率下的行为，使页面的能正常工作在各种各样的宿主环境当中。</p>
<p>而本文的主题 – 移动端开发的兼容适配与性能优化，就是希望能从一些常见的移动端开发问题出发，厘清 Web 移动端开发的前前后后，一些技术的发展过程，一些问题的优化手段以及给出一些常见的兼容性问题的解决方案。</p>
<a id="more"></a>
<h2 id="什么是响应式设计"><a href="#什么是响应式设计" class="headerlink" title="什么是响应式设计"></a>什么是响应式设计</h2><p>首先先聊聊响应式设计，这个与移动端开发有着密切的联系。</p>
<p>响应式设计即是 RWD，Responsive Web Design。</p>
<p>这里百度或者谷歌一下会有各种各样的答案。这里一段摘自知乎上我觉得很棒的一个答案：<span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzIwOTc2NDA1" title="https://www.zhihu.com/question/20976405">什么是响应式布局设计？<i class="fa fa-external-link"></i></span></p>
<p>根据维基百科及其参考文献，理论上，响应式界面能够适应不同的设备。描述响应式界面最著名的一句话就是 “Content is like water”，翻译成中文便是 “如果将屏幕看作容器，那么内容就像水一样”。</p>
<h3 id="为什么要设计响应式界面"><a href="#为什么要设计响应式界面" class="headerlink" title="为什么要设计响应式界面"></a>为什么要设计响应式界面</h3><p>为什么要费神地尝试统一所有设备呢？</p>
<ul>
<li>即便是 PC 或 Mac 用户，有查显示只有一半的人会将浏览器全屏显示，而剩下的一般人使用多大的浏览器，很难预知；</li>
<li>台式机、投影、电视、笔记本、手机、平板、手表、VR…… 智能设备正在不断增加，“主流设备” 的概念正在消失；</li>
<li>屏幕分辨率正飞速发展，同一张图片在不同设备上看起来，大小可能天差地别；</li>
<li>鼠标、触屏、笔、摄像头手势…… 不可预期的操控方式正在不断出现。</li>
</ul>
<h3 id="响应式界面的四个层次"><a href="#响应式界面的四个层次" class="headerlink" title="响应式界面的四个层次"></a>响应式界面的四个层次</h3><ul>
<li>同一页面在不同大小和比例上看起来都应该是舒适的；</li>
<li>同一页面在不同分辨率上看起来都应该是合理;</li>
<li>同一页面在不同操作方式（如鼠标和触屏）下，体验应该是统一的；</li>
<li>同一页面在不同类型的设备（手机、平板、电脑）上，交互方式应该是符合习惯的。</li>
</ul>
<h3 id="响应式界面的基本规则"><a href="#响应式界面的基本规则" class="headerlink" title="响应式界面的基本规则"></a>响应式界面的基本规则</h3><ul>
<li><p>可伸缩的内容区块：内容区块的在一定程度上能够自动调整，以确保填满整个页面<br><span class="exturl" data-url="aHR0cHM6Ly9jYW1vLmdpdGh1YnVzZXJjb250ZW50LmNvbS9kNGMyYWQ0ZTgwOGYyNTRjZWNiYTkwM2RiMjA1MzE1NjU2MjU2NDhhLzY4NzQ3NDcwNzMzYTJmMmY3MDY5NjMzNDJlN2E2ODY5NmQ2NzJlNjM2ZjZkMmY3NjMyMmQzMzYzMzczNDM3NjU2MzMxMzYzMjMzNjE2NDY2MzU2MzYyMzA2MTM5MzUzOTM3NjYzODY1MzM2MjM2MzQ2MTM0NWY3MjJlNmE3MDY3" title="https://camo.githubusercontent.com/d4c2ad4e808f254cecba903db20531565625648a/68747470733a2f2f706963342e7a68696d672e636f6d2f76322d33633734376563313632336164663563623061393539376638653362363461345f722e6a7067"><img src="https://camo.githubusercontent.com/d4c2ad4e808f254cecba903db20531565625648a/68747470733a2f2f706963342e7a68696d672e636f6d2f76322d33633734376563313632336164663563623061393539376638653362363461345f722e6a7067" alt><i class="fa fa-external-link"></i></span></p>
</li>
<li><p>可自由排布的内容区块：当页面尺寸变动较大时，能够减少 / 增加排布的列数<br><span class="exturl" data-url="aHR0cHM6Ly9jYW1vLmdpdGh1YnVzZXJjb250ZW50LmNvbS9kNzE1OGUyMGQ2NTM1MDM3ZGFmMmUzMzhhOGE2NmE0NDdiYTVjOTQxLzY4NzQ3NDcwNzMzYTJmMmY3MDY5NjMzMzJlN2E2ODY5NmQ2NzJlNjM2ZjZkMmY3NjMyMmQ2MzM5NjY2MTY2MzMzNDMxNjMzNTM0MzczMjM0MzAzOTY1NjMzMjM3MzczNzM5MzUzMTM5NjEzMTM4NjUzMjYyNWY3MjJlNmE3MDY3" title="https://camo.githubusercontent.com/d7158e20d6535037daf2e338a8a66a447ba5c941/68747470733a2f2f706963332e7a68696d672e636f6d2f76322d63396661663334316335343732343039656332373737393531396131386532625f722e6a7067"><img src="https://camo.githubusercontent.com/d7158e20d6535037daf2e338a8a66a447ba5c941/68747470733a2f2f706963332e7a68696d672e636f6d2f76322d63396661663334316335343732343039656332373737393531396131386532625f722e6a7067" alt><i class="fa fa-external-link"></i></span></p>
</li>
<li><p>适应页面尺寸的边距：到页面尺寸发生更大变化时，区块的边距也应该变化<br><span class="exturl" data-url="aHR0cHM6Ly9jYW1vLmdpdGh1YnVzZXJjb250ZW50LmNvbS9mYWVjMDM1OTEzYzRlMjQ3OTQxZWFjMDRlOGM2ZTAwZjgwZTk4ZTVmLzY4NzQ3NDcwNzMzYTJmMmY3MDY5NjMzMjJlN2E2ODY5NmQ2NzJlNjM2ZjZkMmY3NjMyMmQzOTMyMzYzNDYxNjI2MzM4MzEzMjY2MzQzMDM0MzMzOTYxMzMzNTM2MzEzNzM2NjE2NTYxNjM2NTM2NjI2MzM2NWY3MjJlNmE3MDY3" title="https://camo.githubusercontent.com/faec035913c4e247941eac04e8c6e00f80e98e5f/68747470733a2f2f706963322e7a68696d672e636f6d2f76322d39323634616263383132663430343339613335363137366165616365366263365f722e6a7067"><img src="https://camo.githubusercontent.com/faec035913c4e247941eac04e8c6e00f80e98e5f/68747470733a2f2f706963322e7a68696d672e636f6d2f76322d39323634616263383132663430343339613335363137366165616365366263365f722e6a7067" alt><i class="fa fa-external-link"></i></span></p>
</li>
<li><p>能够适应比例变化的图片：对于常见的宽度调整，图片在隐去两侧部分时，依旧保持美观可用<br><span class="exturl" data-url="aHR0cHM6Ly9jYW1vLmdpdGh1YnVzZXJjb250ZW50LmNvbS9mOWJmNGQ0NDVhMWM2ZmFiZjMzYzVlODA1N2I2NDYyMjQ3NzRjM2Q1LzY4NzQ3NDcwNzMzYTJmMmY3MDY5NjMzNDJlN2E2ODY5NmQ2NzJlNjM2ZjZkMmY3NjMyMmQzMjM1MzY2NjMzMzEzOTYxMzQ2NjYyNjYzODMxMzUzODY2MzYzMzM3Mzk2MzMyMzY2NTMwMzA2MzM5NjE2NTYxNWY3MjJlNmE3MDY3" title="https://camo.githubusercontent.com/f9bf4d445a1c6fabf33c5e8057b646224774c3d5/68747470733a2f2f706963342e7a68696d672e636f6d2f76322d32353666333139613466626638313538663633373963323665303063396165615f722e6a7067"><img src="https://camo.githubusercontent.com/f9bf4d445a1c6fabf33c5e8057b646224774c3d5/68747470733a2f2f706963342e7a68696d672e636f6d2f76322d32353666333139613466626638313538663633373963323665303063396165615f722e6a7067" alt><i class="fa fa-external-link"></i></span></p>
</li>
<li><p>能够自动隐藏 / 部分显示的内容：如在电脑上显示的的大段描述文本，在手机上就只能少量显示或全部隐藏<br><span class="exturl" data-url="aHR0cHM6Ly9jYW1vLmdpdGh1YnVzZXJjb250ZW50LmNvbS9kNjc4MDIxZTkwZmIzOTcyZDIxNmM2ZGNmNjc3Y2NjYTdiNzg5YjJmLzY4NzQ3NDcwNzMzYTJmMmY3MDY5NjMzNDJlN2E2ODY5NmQ2NzJlNjM2ZjZkMmY3NjMyMmQ2MTM4MzYzMjM1NjUzOTM2MzE2MTMzNjUzMzM0NjEzMTY2MzEzMzMzNjI2NjM5MzEzNzMzNjEzNDM5MzMzMDY0NWY3MjJlNmE3MDY3" title="https://camo.githubusercontent.com/d678021e90fb3972d216c6dcf677ccca7b789b2f/68747470733a2f2f706963342e7a68696d672e636f6d2f76322d61383632356539363161336533346131663133336266393137336134393330645f722e6a7067"><img src="https://camo.githubusercontent.com/d678021e90fb3972d216c6dcf677ccca7b789b2f/68747470733a2f2f706963342e7a68696d672e636f6d2f76322d61383632356539363161336533346131663133336266393137336134393330645f722e6a7067" alt><i class="fa fa-external-link"></i></span></p>
</li>
<li><p>能自动折叠的导航和菜单：展开还是收起，应该根据页面尺寸来判断<br><span class="exturl" data-url="aHR0cHM6Ly9jYW1vLmdpdGh1YnVzZXJjb250ZW50LmNvbS85Mzc2Yzc1NzkwMTc2NWYwZjc2YjM2YWExNDEyZDZhMWJlMDlmZWI1LzY4NzQ3NDcwNzMzYTJmMmY3MDY5NjMzMzJlN2E2ODY5NmQ2NzJlNjM2ZjZkMmY3NjMyMmQ2NjY2MzIzODMxNjE2NjYyNjU2NTM3MzgzMjYxMzkzNDY2MzQ2MzM3NjYzNTM4NjUzMDMyNjQzNzY2MzAzNTY0NWY3MjJlNmE3MDY3" title="https://camo.githubusercontent.com/9376c757901765f0f76b36aa1412d6a1be09feb5/68747470733a2f2f706963332e7a68696d672e636f6d2f76322d66663238316166626565373832613934663463376635386530326437663035645f722e6a7067"><img src="https://camo.githubusercontent.com/9376c757901765f0f76b36aa1412d6a1be09feb5/68747470733a2f2f706963332e7a68696d672e636f6d2f76322d66663238316166626565373832613934663463376635386530326437663035645f722e6a7067" alt><i class="fa fa-external-link"></i></span></p>
</li>
<li><p>放弃使用像素作为尺寸单位：用 dp(对于前端来说，这里可能是 rem) 尺寸等方法来确保页面在分辨率相差很大的设备上，看起来也能保持一致。同时也要求提供的图片应该比预想的更大，才能适应高分辨率的屏幕</p>
</li>
</ul>
<p>上面一段我觉得已经涵盖了响应式设计的绝大部分，简单总结起来，可以概括为：</p>
<ol>
<li>媒体查询，边界断点的规则设定（Media queries &amp;&amp; break point）</li>
<li>内容的可伸缩性效果（Flexibel visuals）</li>
<li>流式网格布局 (Fluid grids)</li>
<li>主要内容呈现及图片的高质量 (Main content and high quality)</li>
</ol>
<h2 id="响应式-vs-自适应"><a href="#响应式-vs-自适应" class="headerlink" title="响应式 vs. 自适应"></a>响应式 vs. 自适应</h2><p>响应式设计是 Responsive Web Design（RWD），自适应设计是 Adaptive Web Design（AWD）。经常有人会将两者混为一谈，或者其实根本也区分不了所谓的响应式与自适应。</p>
<p>其实在我写这篇文章的时候，我也无法很好的去区分两者。</p>
<p>RWD 和 AWD 两者都是为了适配各种不同的移动设备，致力于提升用户体验所产生的的技术。核心思想是用技术来使网页适应从小到大（现在到超大）的不同分辨率的屏幕。通常认为，RWD 是 AWD 的子集。</p>
<p>RWD：Ethan Marcote 的文章是大家认为 RWD 的起源。他提出的 RWD 方案是通过 HTML 和 CSS 的媒体查询技术，配合流体布局实现。RWD 倾向于只改变元素的外观布局，而不大幅度改变内容。Jeffrey Zeldman 总结说，我们就把 RWD 定义为一切能用来为各种分辨率和设备性能优化视觉体验的技术。</p>
<p>AWD：Adaptive Design 是 Aaron Gustafson 的书的标题。他认为 AWD 在包括 RWD 的 CSS 媒体查询技术以外，也要用 Javascript 来操作 HTML 来更适应移动设备的能力。AWD 有可能会针对移动端用户减去内容，减去功能。AWD 可以在服务器端就进行优化，把优化过的内容送到终端上。</p>
<p>一图胜千言。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vODU1NDE0My82MDAwNDEzNy1hM2UxZTM4MC05NjllLTExZTktODE3NS1jMTAwYjJhN2Q3MTgucG5n" title="https://user-images.githubusercontent.com/8554143/60004137-a3e1e380-969e-11e9-8175-c100b2a7d718.png"><img src="https://user-images.githubusercontent.com/8554143/60004137-a3e1e380-969e-11e9-8175-c100b2a7d718.png" alt><i class="fa fa-external-link"></i></span></p>
<p>从定义上而言，RWD 是一套代码，适用于所有屏幕。而 AWD 则是多端多套代码。本文不会过多去纠结响应式与自适应区别，我觉得这两者的本质都是致力于适配不同设备，更好地提升用户体验。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cucXVvcmEuY29tL1doYXQtaXMtdGhlLWRpZmZlcmVuY2UtYmV0d2Vlbi1yZXNwb25zaXZlLWFuZC1hZGFwdGl2ZS1kZXNpZ24=" title="https://www.quora.com/What-is-the-difference-between-responsive-and-adaptive-design">Quora - Responsive Design vs. Adaptive Design?<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzIwNjI4MDUwP3JmPTI0MzM0MTgx" title="https://www.zhihu.com/question/20628050?rf=24334181">zhihu – Responsive design 和 Adaptive design 的区别<i class="fa fa-external-link"></i></span></p>
<h2 id="渐进增强-vs-优雅降级"><a href="#渐进增强-vs-优雅降级" class="headerlink" title="渐进增强 vs. 优雅降级"></a>渐进增强 vs. 优雅降级</h2><ul>
<li><p>渐进增强（progressive enhancement）：针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。</p>
</li>
<li><p>优雅降级（graceful degradation）：一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。</p>
</li>
</ul>
<p>区别：优雅降级是从复杂的现状开始，并试图减少用户体验的供给，而渐进增强则是从一个非常基础的，能够起作用的版本开始，并不断扩充，以适应未来环境的需要。降级（功能衰减）意味着往回看；而渐进增强则意味着朝前看，同时保证其根基处于安全地带。　</p>
<p>渐进增强 / 优雅降级通常是 AWD 会牵扯到的另一个技术术语。本质上而言即是随着屏幕的大小的改变，功能会一点一点增强。</p>
<p>也通常会用在一些高级 CSS3 属性上，我们对一些 CSS 属性进行特性检测，甚至不进行特性检测直接使用。后果是在支持它的网页上该属性正常展示，而不支持它的网页该属性不生效，但也不影响用户的基本使用。</p>
<p>典型的例子是 CSS3 逐渐被大众认可并被使用，PC 端页面开始由 IE678 向兼容性更好的 IE9+，chrome，firefox 浏览器转变的时期。我们可以对页面元素直接使用阴影，圆角等属性。对于不支持它的低版本 IE 而言，没有什么损失，而对于支持它的高级浏览器而言，带给了用户更好的交互视觉体验，这就是渐进增强。</p>
<h2 id="移动端屏幕适配方案"><a href="#移动端屏幕适配方案" class="headerlink" title="移动端屏幕适配方案"></a>移动端屏幕适配方案</h2><p>下面会针对一些具体的案例，展开讲讲。第一个是高保真还原设计稿，也就是如何适配移动端繁杂的屏幕大小。</p>
<p>通常而言，设计师只会给出单一分辨率下的设计稿，而我们要做的，就是以这个设计稿为基准，去适配所有不同大小的移动端设备。</p>
<p>在此之前，有一些基础概念需要理解。</p>
<blockquote>
<p>一些概念性的东西，大部分人很难一次性记住，或者记了又忘，我觉得记忆这个东西比较看技巧，比如关联法，想象法，把这些生硬的概念与一些符合我们常识的知识关联在一起记忆，往往能够事半功倍。</p>
</blockquote>
<h3 id="设备独立像素"><a href="#设备独立像素" class="headerlink" title="设备独立像素"></a>设备独立像素</h3><p>以 iPhone6/7/8 为例，这里我们打开 Chrome 开发者工具：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vODU1NDE0My82MDAxNTk4NC02ZjJlNTYwMC05NmI3LTExZTktOGZkNi05ODNmZTQ2MTQ1ZmUucG5n" title="https://user-images.githubusercontent.com/8554143/60015984-6f2e5600-96b7-11e9-8fd6-983fe46145fe.png"><img src="https://user-images.githubusercontent.com/8554143/60015984-6f2e5600-96b7-11e9-8fd6-983fe46145fe.png" alt><i class="fa fa-external-link"></i></span></p>
<p>这里的 <code>375 * 667</code> 表示的是什么呢，表示的是设备独立像素（DIP），也可以理解为 CSS 像素，也称为逻辑像素：</p>
<p>设备独立像素 = CSS 像素 = 逻辑像素</p>
<p>如何记忆呢？这里使用 CSS 像素来记忆，也就是说。我们设定一个宽度为 375px 的 div，刚好可以充满这个设备的一行，配合高度 667px ，则 div 的大小刚好可以充满整个屏幕。</p>
<h3 id="物理像素"><a href="#物理像素" class="headerlink" title="物理像素"></a>物理像素</h3><p>OK，那么，什么又是物理像素呢。我们到电商网站购买手机，都会看一看手机的参数，以 JD 上的 iPhone7 为例：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vODU1NDE0My82MDgwNzMwMS1lMTI2OTUwMC1hMWI3LTExZTktOGRjMS1lYTYyOTVmZmJjMzcucG5n" title="https://user-images.githubusercontent.com/8554143/60807301-e1269500-a1b7-11e9-8dc1-ea6295ffbc37.png"><img src="https://user-images.githubusercontent.com/8554143/60807301-e1269500-a1b7-11e9-8dc1-ea6295ffbc37.png" alt><i class="fa fa-external-link"></i></span></p>
<p>可以看到，iPhone7 的分辨率是 <code>1334 x 750</code>，这里描述的就是屏幕实际的物理像素。</p>
<p>物理像素，又称为设备像素。显示屏是由一个个物理像素点组成的，<code>1334 x 750</code> 表示手机分别在垂直和水平上所具有的像素点数。通过控制每个像素点的颜色，就可以使屏幕显示出不同的图像，屏幕从工厂出来那天起，它上面的物理像素点就固定不变了，单位为 pt。</p>
<p>设备像素 = 物理像素</p>
<h2 id="DPR（Device-Pixel-Ratio）-设备像素比"><a href="#DPR（Device-Pixel-Ratio）-设备像素比" class="headerlink" title="DPR（Device Pixel Ratio） 设备像素比"></a>DPR（Device Pixel Ratio） 设备像素比</h2><p>OK，有了上面两个概念，就可以顺理成章引出下一个概念。DPR（Device Pixel Ratio） 设备像素比，这个与我们通常说的视网膜屏（多倍屏，Retina 屏）有关。</p>
<p>设备像素比描述的是未缩放状态下，物理像素和设备独立像素的初始比例关系。</p>
<p>简单的计算公式：</p>
<p>DPR = 物理像素 / 设备独立像素</p>
<p>我们套用一下上面 iPhone7 的数据（取设备的物理像素宽度与设备独立像素宽度进行计算）：</p>
<p>iPhone7’s DPR = iPhone7’s 物理像素宽度 / iPhone7’s 设备独立像素宽度 = 2</p>
<blockquote>
<p>750 / 375 = 2<br>或者是 1334 / 667 = 2</p>
</blockquote>
<p>可以得到 iPhone7 的 dpr 为 2。也就是我们常说的视网膜屏幕。</p>
<p>视网膜（Retina）屏幕是苹果公司 “发明” 的一个营销术语。 苹果公司将 <code>dpr &gt; 1</code> 的屏幕称为视网膜屏幕。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vODU1NDE0My82MDgwODE1MS0yYmE5MTEwMC1hMWJhLTExZTktODFlYS1jMGZlMGI1MjQ2MjUucG5n" title="https://user-images.githubusercontent.com/8554143/60808151-2ba91100-a1ba-11e9-81ea-c0fe0b524625.png"><img src="https://user-images.githubusercontent.com/8554143/60808151-2ba91100-a1ba-11e9-81ea-c0fe0b524625.png" alt><i class="fa fa-external-link"></i></span></p>
<p>在视网膜屏幕中，以 dpr = 2 为例，把 4(2x2) 个像素当 1 个像素使用，这样让屏幕看起来更精致，但是元素的大小本身却不会改变：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vODU1NDE0My82MDgwODIyMC01Mzk4NzQ4MC1hMWJhLTExZTktODFhNC04ZTk2MDVkZDY4MTcucG5n" title="https://user-images.githubusercontent.com/8554143/60808220-53987480-a1ba-11e9-81a4-8e9605dd6817.png"><img src="https://user-images.githubusercontent.com/8554143/60808220-53987480-a1ba-11e9-81a4-8e9605dd6817.png" alt><i class="fa fa-external-link"></i></span></p>
<p>OK，我们再来看看 iPhone XS Max：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vODU1NDE0My82MDgwODY5MS03ZjY4MmEwMC1hMWJiLTExZTktODMwMC0yOTQ0NDM0NDNhOWQucG5n" title="https://user-images.githubusercontent.com/8554143/60808691-7f682a00-a1bb-11e9-8300-294443443a9d.png"><img src="https://user-images.githubusercontent.com/8554143/60808691-7f682a00-a1bb-11e9-8300-294443443a9d.png" alt><i class="fa fa-external-link"></i></span></p>
<p>它的物理像素如上图是 <code>2688 x 1242</code>，</p>
<p><span class="exturl" data-url="aHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vODU1NDE0My82MDgwODkwNy1mMjcxYTA4MC1hMWJiLTExZTktOWI1ZC0yMzg5NmFjZDdlNzUucG5n" title="https://user-images.githubusercontent.com/8554143/60808907-f271a080-a1bb-11e9-9b5d-23896acd7e75.png"><img src="https://user-images.githubusercontent.com/8554143/60808907-f271a080-a1bb-11e9-9b5d-23896acd7e75.png" alt><i class="fa fa-external-link"></i></span></p>
<p>它的 CSS 像素是 <code>896 x 414</code>，很容易得出 iPhone XS Max 的 dpr 为 3。</p>
<blockquote>
<p>上面三个概念（CSS 像素、设备独立像素、DPR）是我觉得比较重要的，还有一些其他比较重要的概念 PPI、DPI 不影响后续的内容，可以自行去加深理解。</p>
</blockquote>
<p>OK，到这里我们就完成了一个小的里程碑。我们通常说的 H5 手机适配也就是指的这两个维度：</p>
<ol>
<li>适配不同屏幕大小，也就是适配不同屏幕下的 CSS 像素</li>
<li>适配不同像素密度，也就是适配不同屏幕下 dpr 不一致导致的一些问题</li>
</ol>
<h2 id="适配不同屏幕大小"><a href="#适配不同屏幕大小" class="headerlink" title="适配不同屏幕大小"></a>适配不同屏幕大小</h2><p>适配不同屏幕大小，也就是适配不同屏幕下的 CSS 像素。最早移动端屏幕 CSS 像素适配方案是 CSS 媒体查询。但是无法做到高保真接近 100% 的还原。</p>
<p>适配不同屏幕大小其实只需要遵循一条原则，确保页面元素大小的与屏幕大小保持一定比例。也就是：按比例还原设计稿</p>
<p><span class="exturl" data-url="aHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vODU1NDE0My82MjA0NDgyMC02ZjdkYmMwMC1iMjM2LTExZTktODc3Zi1jMDU4NzQ2MmNhYzgucG5n" title="https://user-images.githubusercontent.com/8554143/62044820-6f7dbc00-b236-11e9-877f-c0587462cac8.png"><img src="https://user-images.githubusercontent.com/8554143/62044820-6f7dbc00-b236-11e9-877f-c0587462cac8.png" alt><i class="fa fa-external-link"></i></span></p>
<p>假设我们现在拿到标注为 <code>375*667</code> 的大小的设计稿，其中一个元素的标注如下：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vODU1NDE0My82MjA0NTA4OC0wZmQzZTA4MC1iMjM3LTExZTktOTQ1OS0zYWQ4MGYxOGM3MmEucG5n" title="https://user-images.githubusercontent.com/8554143/62045088-0fd3e080-b237-11e9-9459-3ad80f18c72a.png"><img src="https://user-images.githubusercontent.com/8554143/62045088-0fd3e080-b237-11e9-9459-3ad80f18c72a.png" alt><i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vODU1NDE0My82MjA0NTIyNS02NzcyNGMwMC1iMjM3LTExZTktODY5Zi1hNWZjOThkYmI4YWMucG5n" title="https://user-images.githubusercontent.com/8554143/62045225-67724c00-b237-11e9-869f-a5fc98dbb8ac.png"><img src="https://user-images.githubusercontent.com/8554143/62045225-67724c00-b237-11e9-869f-a5fc98dbb8ac.png" alt><i class="fa fa-external-link"></i></span></p>
<p>以页面宽度为基准的话，那么，</p>
<ul>
<li>元素的宽度为：<code>209/375 = 55.73%</code></li>
<li>元素的高度为：<code>80/375 = 21.33%</code></li>
<li>元素的上左右边距依次计算…</li>
</ul>
<p>这样，无论屏幕的 CSS 像素宽度是 320px 还是 375px 还是 414px，按照等量百分比还原出来的界面总是正确的。</p>
<p>然而，理想很丰满，现实很骨感。实现上述百分比方案的核心需要一个全局通用的基准单位，让所有百分比展示以它为基准，但是在 CSS 中，根据 <span class="exturl" data-url="aHR0cHM6Ly93d3cudzMub3JnL1RSL2Nzcy12YWx1ZXMtNC8jcGVyY2VudGFnZXM=" title="https://www.w3.org/TR/css-values-4/#percentages">CSS Values and Units Module Level 4<i class="fa fa-external-link"></i></span> 的定义：</p>
<blockquote>
<p>百分比值总要相对于另一个量，比如长度。每个允许使用百分比值的属性，同时也要定义百分比值参照的那个量。这个量可以是相同元素的另一个属性的值，也可以是祖先元素的某个属性的值，甚至是格式化上下文的一个度量（比如包含块的宽度）。</p>
</blockquote>
<p>具体来说：</p>
<ul>
<li><p>宽度（width）、间距（maring/padding）支持百分比值，但默认的相对参考值是包含块的宽度；</p>
</li>
<li><p>高度（height）百分比的大小是相对其父级元素高的大小；</p>
</li>
<li><p>边框（border）不支持百分值；</p>
</li>
<li><p>边框圆角半径（border-radius）支持百分比值，但水平方向相对参考值是盒子的宽度，垂直方向相对参考值是盒子的高度；</p>
</li>
<li><p>文本大小（font-size）支持百分比值，但相对参考值是父元素的 font-size 的值；</p>
</li>
<li><p>盒阴影（box-shadow）和文本阴影（text-shadow）不支持百分比值；</p>
</li>
</ul>
<p>首先，支持百分比单位的度量属性有其各自的参照基准，其次并非所有度量属性都支持百分比单位。所以我们需要另辟蹊径。</p>
<h3 id="rem-适配方案"><a href="#rem-适配方案" class="headerlink" title="rem 适配方案"></a>rem 适配方案</h3><p>在 vw 方案出来之前，最被大众接受的就是使用 rem 进行适配的方案，因为 rem 满足上面说的，可以是一个全局性的基准单位。</p>
<blockquote>
<p>rem（font size of the root element），在 <span class="exturl" data-url="aHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy12YWx1ZXMtMy8jbGVuZ3Rocw==" title="https://drafts.csswg.org/css-values-3/#lengths">CSS Values and Units Module Level 3<i class="fa fa-external-link"></i></span> 中的定义就是， 根据网页的根元素来设置字体大小，和 em（font size of the element）的区别是，em 是根据其父元素的字体大小来设置，而 rem 是根据网页的跟元素（html）来设置字体大小。</p>
</blockquote>
<h4 id="flexible"><a href="#flexible" class="headerlink" title="flexible"></a>flexible</h4><p>基于此，淘宝早年推行的一套以 rem 为基准的适配方案：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FtZmUvbGliLWZsZXhpYmxl" title="https://github.com/amfe/lib-flexible">lib-flexible<i class="fa fa-external-link"></i></span>。其核心做法在于：</p>
<ul>
<li>根据设备的 dpr 动态改写 <code>&lt;meta&gt;</code> 标签，设置 viewport 的缩放</li>
<li>给 <code>&lt;html&gt;</code> 元素添加 data-dpr 属性，并且动态改写 data-dpr 的值</li>
<li>根据 <code>document.documentElement.clientWidth</code> 动态修改 <code>&lt;html&gt;</code> 的 font-size ，页面其他元素使用 rem 作为长度单位进行布局，从而实现页面的等比缩放</li>
</ul>
<blockquote>
<p>关于头两点，其实现在的 <code>lib-flexible</code> 库已经不这样做了，不再去缩放 Viewport，字体大小的设定也直接使用了 rem</p>
</blockquote>
<h4 id="hotcss"><a href="#hotcss" class="headerlink" title="hotcss"></a>hotcss</h4><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ltb2NoZW4vaG90Y3Nz" title="https://github.com/imochen/hotcss">hotcss<i class="fa fa-external-link"></i></span> 不是一个库，也不是一个框架。它是一个移动端布局开发解决方案。使用 hotcss 可以让移动端布局开发更容易。本质的思想与 flexible 完全一致。</p>
<h3 id="对于-rem-方案的一些总结"><a href="#对于-rem-方案的一些总结" class="headerlink" title="对于 rem 方案的一些总结"></a>对于 rem 方案的一些总结</h3><p>使用 flexible/hotcss 作为屏幕宽度适配解决方案，是存在一些问题的：</p>
<ol>
<li>动态修改 Viewport 存在一定的风险的，譬如通过 Viewport 改变了页面的缩放之后，获取到的 <code>innerWidth/innerHeight</code> 也会随之发生变化，如果业务逻辑有获取此类高宽进行其他计算的，可能会导致意想不到的错误；</li>
</ol>
<blockquote>
<p>到今天，其实存在很多在 flexible 基础上演化而来的各种 rem 解决方案，有的不会对 Viewport 进行缩放处理，自行处理 1px 边框问题。</p>
</blockquote>
<ol start="2">
<li>flexible/hotcss 都并非纯 CSS 方案，需要引入一定的 Javascript 代码</li>
<li>rem 的设计初衷并非是用于解决此类问题，用 rem 进行页面的宽度适配多少有一种 hack 的感觉</li>
<li>存在一定的兼容性问题，对于安卓 4.4 以下版本系统不支持 viewport 缩放（当然，flexible 处理 Android 系列时，始终认为其 dpr 为 1，没有进行 viewport 缩放）</li>
</ol>
<h3 id="vw-适配方案"><a href="#vw-适配方案" class="headerlink" title="vw 适配方案"></a>vw 适配方案</h3><p>严格来说，使用 rem 进行页面适配其实是一种 hack 手段，rem 单位的初衷本身并不是用来进行移动端页面宽度适配的。</p>
<p>到了今天，有了一种更好的替代方案，使用 vw 进行适配 。</p>
<p>百分比适配方案的核心需要一个全局通用的基准单位，rem 是不错，但是需要借助 Javascript 进行动态修改根元素的 <code>font-size</code>，而 vw/vh（vmax/vmin） 的出现则很好弥补 rem 需要 JS 辅助的缺点。</p>
<p>根据 CSS Values and Units Module Level 4：<code>vw</code>等于初始包含块（html 元素）宽度的 1%，也就是</p>
<ul>
<li><code>1vw</code> 等于 <code>window.innerWidth</code> 的数值的 1%</li>
<li><code>1vh</code> 等于<code>window.innerHeight</code> 的数值的 1%</li>
</ul>
<p><span class="exturl" data-url="aHR0cHM6Ly9jYW1vLmdpdGh1YnVzZXJjb250ZW50LmNvbS9mOGEzODNjYjIwNzI5NmIxMWM2ODVhM2ZkNTRlOWRmMjI4ZGNjY2E5LzY4NzQ3NDcwNzMzYTJmMmY3NTcwNmM2ZjYxNjQyZDY5NmQ2MTY3NjU3MzJlNmE2OTYxNmU3MzY4NzUyZTY5NmYyZjc1NzA2YzZmNjE2NDVmNjk2ZDYxNjc2NTczMmYzNzMwMzEzNjM2MzEzNzJkNjYzMDY1MzY2NTY0NjUzMTY0NjE2NDMxNjIzMDY1NjYyZTcwNmU2Nw==" title="https://camo.githubusercontent.com/f8a383cb207296b11c685a3fd54e9df228dccca9/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f373031363631372d663065366564653164616431623065662e706e67"><img src="https://camo.githubusercontent.com/f8a383cb207296b11c685a3fd54e9df228dccca9/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f373031363631372d663065366564653164616431623065662e706e67" alt><i class="fa fa-external-link"></i></span></p>
<p>再以上面设计稿图的元素为例，那么，</p>
<ul>
<li>元素的宽度为：<code>209/375 = 55.73% = 55.73vw</code></li>
<li>元素的高度为：<code>80/375 = 21.33% = 21.33vw</code></li>
<li>元素的上左右边距依次计算…</li>
</ul>
<p>根据相关的测试，可以使用 vw 进行长度单位的有：</p>
<ul>
<li>容器大小适配，可以使用 vw</li>
<li>文本大小的适配，可以使用 vw</li>
<li>大于 1px 的边框、圆角、阴影都可以使用 vw</li>
<li>内距和外距，可以使用 vw</li>
</ul>
<p>简单的一个页面，看看效果，完全是等比例缩放的效果：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vODU1NDE0My82NDAwNzM5My1hN2FkM2U4MC1jYjAzLTExZTktOTg4YS05MGE3YTM4OTkwZjYuZ2lm" title="https://user-images.githubusercontent.com/8554143/64007393-a7ad3e80-cb03-11e9-988a-90a7a38990f6.gif"><img src="https://user-images.githubusercontent.com/8554143/64007393-a7ad3e80-cb03-11e9-988a-90a7a38990f6.gif" alt><i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9jb2RlcGVuLmlvL0Nob2tjb2NvL3Blbi9vTnZXVllxP2VkaXRvcnM9MTEwMA==" title="https://codepen.io/Chokcoco/pen/oNvWVYq?editors=1100">CodePen Demo（移动端打开）：使用 vw 进行页面适配<i class="fa fa-external-link"></i></span></p>
<h3 id="自动转换插件"><a href="#自动转换插件" class="headerlink" title="自动转换插件"></a>自动转换插件</h3><p>当我们使用 rem 作为长度单位的时，通常会有借助 Sass/Less 实现一个转换函数，像是这样：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 假设设计稿的宽度是 375px，假设取设计稿宽度下 1rem = 100px</span></span><br><span class="line"><span class="variable">$baseFontSize</span>: <span class="number">100</span>;</span><br><span class="line"> </span><br><span class="line">@function px2rem(<span class="variable">$px</span>) &#123;</span><br><span class="line">    @return <span class="variable">$px</span> / <span class="variable">$baseFontSize</span> * 1rem;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>同理，在 vw 方案下，我们只需要去改写这个方法：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 假设设计稿的宽度是 375px</span></span><br><span class="line">@function px2rem(<span class="variable">$px</span>) &#123;</span><br><span class="line">    @return <span class="variable">$px</span> / 375 * 100vw;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当然，我们还可以借助一些插件包去实现这个自动转换，提高效率，譬如 <span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcG9zdGNzcy1weC10by12aWV3cG9ydA==" title="https://www.npmjs.com/package/postcss-px-to-viewport">postcss-px-to-viewport<i class="fa fa-external-link"></i></span></p>
<h3 id="vw-polyfill"><a href="#vw-polyfill" class="headerlink" title="vw polyfill"></a>vw polyfill</h3><p>vw 现在毕竟还是存在兼容问题的，看看兼容性：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vODU1NDE0My82MzgyNjgzMy03ZDNjNzM4MC1jOTkzLTExZTktOWQwZS02ZDMzZjJkNWFhMWEucG5n" title="https://user-images.githubusercontent.com/8554143/63826833-7d3c7380-c993-11e9-9d0e-6d33f2d5aa1a.png"><img src="https://user-images.githubusercontent.com/8554143/63826833-7d3c7380-c993-11e9-9d0e-6d33f2d5aa1a.png" alt><i class="fa fa-external-link"></i></span></p>
<p>其实已经覆盖了绝大部分设备，那么如果业务使用了且又真的出现了兼容问题，应该怎么处理呢？有两种方式可以进行降级处理：</p>
<ul>
<li>CSS Houdini：通过 CSS Houdini 针对 vw 做处理，调用 CSS Typed OM Level1 提供的 CSSUnitValue API。</li>
<li>CSS Polyfill：通过相应的 Polyfill 做相应的处理，目前针对于 vw 单位的 Polyfill 主要有：vminpoly、Viewport Units Buggyfill、vunits.js 和 Modernizr</li>
</ul>
<h2 id="对于-vw-方案的一些总结"><a href="#对于-vw-方案的一些总结" class="headerlink" title="对于 vw 方案的一些总结"></a>对于 vw 方案的一些总结</h2><p>vw 确实看上去很不错，但是也是存在它的一些问题：</p>
<ol>
<li>也没能很好的解决 1px 边框在高清屏下的显示问题，需要自行处理</li>
<li>由于 vw 方案是完全的等比缩放，在完全等比还原设计稿的同时带来的一个问题是无法很好的限定一个最大最小宽度值，由于 rem 方案是借助 Javascript 的，所以这一点 rem 比 vw 会更加的灵活</li>
</ol>
<p>当然，两个方案现阶段其实都可以使用甚至一起搭配使用，更多详情可以读读：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vZW50cnkvNWE5ZDA3ZWU2ZmI5YTAyOGMxNDlmNTVi" title="https://juejin.im/entry/5a9d07ee6fb9a028c149f55b">再聊移动端页面的适配<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvTmdHZDl6U202TkVhRjVKeHA1V0JLZw==" title="https://mp.weixin.qq.com/s/NgGd9zSm6NEaF5Jxp5WBKg">H5 必知必会之像素级还原设计稿<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuc21hc2hpbmdtYWdhemluZS5jb20vMjAxNi8wNS9mbHVpZC10eXBvZ3JhcGh5Lw==" title="https://www.smashingmagazine.com/2016/05/fluid-typography/">Responsive And Fluid Typography With vh And vw Units<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vd2VuZ3h1ZXNvbmcvYXJjaGl2ZS8yMDE2LzA1LzE2LzU0OTc2NTMuaHRtbA==" title="https://www.cnblogs.com/wengxuesong/archive/2016/05/16/5497653.html">使用 VH 和 VW 实现真正的流体排版<i class="fa fa-external-link"></i></span></li>
</ul>
<h2 id="1px-线"><a href="#1px-线" class="headerlink" title="1px 线"></a>1px 线</h2><p>上面说到使用 vw 适配屏幕大小方案，其中有一个缺点就是在 Retina 屏下，无法很好的展示真正的 1px 物理像素线条。</p>
<p>设计师想要的 retina 下 <code>border: 1px</code>，其实是 1 物理像素宽，而不是 1 CSS 像素宽度，对于 CSS 而言：</p>
<ul>
<li>在 dpr = 1 时，此时 1 物理像素等于 1 CSS 像素宽度；</li>
<li>在 dpr = 2 时，此时 1 物理像素等于 0.5 CSS 宽度像素，可以认为 <code>border-width: 1px</code> 这里的 1px 其实是 1 CSS 像素宽度，等于 2 像素物理宽度，设计师其实想要的是 <code>border-width: 0.5px</code>;</li>
<li>在 dpr = 3 时，此时 1 物理像素等于 0.33 CSS 宽度像素，设计师其实想要的是 border: 0.333px</li>
</ul>
<p>然而，并不是所有手机浏览器都能识别 <code>border-width: 0.5px</code>，在 iOS7 以下，Android 等其他系统里，小于 1px 的单位会被当成为 0px 处理，那么如何实现这 0.5px、0.33px 呢？</p>
<p>这里介绍几种方法：</p>
<ul>
<li>渐变实现</li>
<li>使用缩放实现</li>
<li>使用图片实现（base64）</li>
<li>使用 SVG 实现（嵌入 background url）</li>
</ul>
<p><span class="exturl" data-url="aHR0cHM6Ly9jb2RlcGVuLmlvL0Nob2tjb2NvL3Blbi9YeU5qcUs=" title="https://codepen.io/Chokcoco/pen/XyNjqK">Retina 屏幕下 1px 线的实现<i class="fa fa-external-link"></i></span></p>
<h2 id="图片适配及优化"><a href="#图片适配及优化" class="headerlink" title="图片适配及优化"></a>图片适配及优化</h2><p>图像通常占据了网页上下载资源绝的大部分。优化图像通常可以最大限度地减少从网站下载的字节数以及提高网站性能。</p>
<p>通常可以，有一些通用的优化手段：</p>
<ol>
<li>消除多余的图像资源</li>
<li>尽可能利用 CSS3\SVG 矢量图像替代某些光栅图像</li>
<li>谨慎使用字体图标，使用网页字体取代在图像中进行文本编码</li>
<li>选择正确的图片格式</li>
<li>为不同 DPR 屏幕提供最适合的图片尺寸</li>
</ol>
<p>本文重点关注如何在不同的 dpr 屏幕下，让图片看起来都不失真。</p>
<p>首先就是上述的第二点，尽可能利用 CSS3\SVG 矢量图像替代某些光栅图像。某些简单的几何图标，可以用 CSS3 快速实现的图形，都应该尽量避免使用光栅图像。这样能够保证它们在任何尺寸下都不会失真。</p>
<p>其次，实在到了必须使用光栅图像的地步，也是有许多方式能保证图像在各种场景下都不失真。</p>
<h3 id="无脑多倍图"><a href="#无脑多倍图" class="headerlink" title="无脑多倍图"></a>无脑多倍图</h3><p>在移动端假设我们需要一张 CSS 像素为 <code>300 x 200</code> 的图像，考虑到现在已经有了 dpr = 3 的设备，那么要保证图片在 dpr = 3 的设备下也正常高清展示，我们最大可能需要一张 <code>900 x 600</code> 的原图。</p>
<p>这样，不管设备的 dpr 是否为 3，我们统一都使用 3 倍图。这样即使在 dpr = 1，dpr = 2 的设备上，也能非常好的展示图片。</p>
<p>当然这样并不可取，会造成大量带宽的浪费。现代浏览器，提供了更好的方式，让我们能够根据设备 dpr 的不同，提供不同尺寸的图片。</p>
<h3 id="srcset-配合-1x-2x-像素密度描述符"><a href="#srcset-配合-1x-2x-像素密度描述符" class="headerlink" title="srcset 配合 1x 2x 像素密度描述符"></a>srcset 配合 1x 2x 像素密度描述符</h3><p>简单来说，srcset 可以根据不同的 dpr 拉取对应尺寸的图片：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'illustration'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">'illustration-small.png'</span></span></span><br><span class="line"><span class="tag">       <span class="attr">srcset</span>=<span class="string">'images/illustration-small.png 1x,</span></span></span><br><span class="line"><span class="tag"><span class="string">               images/illustration-big.png 2x'</span></span></span><br><span class="line"><span class="tag">       <span class="attr">style</span>=<span class="string">'max-width: 500px'</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上面 <code>srcset</code> 里的 1x，2x 表示 像素密度描述符，表示</p>
<ul>
<li>当屏幕的 dpr = 1 时，使用 <code>images/illustration-small.png</code> 这张图</li>
<li>当屏幕的 dpr = 2 时，使用 <code>images/illustration-big.png</code> 这张图</li>
</ul>
<h3 id="srcset-属性配合-sizes-属性-w-宽度描述符"><a href="#srcset-属性配合-sizes-属性-w-宽度描述符" class="headerlink" title="srcset 属性配合 sizes 属性 w 宽度描述符"></a>srcset 属性配合 sizes 属性 w 宽度描述符</h3><p>上面 1x，2x 的写法比较容易接受易于理解。</p>
<p>除此之外，srcset 属性还有一个 w 宽度描述符，配合 sizes 属性一起使用，可以覆盖更多的面。</p>
<p>以下面这段代码为例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">        <span class="attr">sizes</span> = <span class="string">“(min-width:</span> <span class="attr">600px</span>) <span class="attr">600px</span>, <span class="attr">300px</span>"</span></span><br><span class="line"><span class="tag">        <span class="attr">src</span> = <span class="string">"photo.png"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">srcset</span> = <span class="string">“photo@1x.png</span> <span class="attr">300w</span>,</span></span><br><span class="line"><span class="tag">                       <span class="attr">photo</span>@<span class="attr">2x.png</span> <span class="attr">600w</span>,</span></span><br><span class="line"><span class="tag">                       <span class="attr">photo</span>@<span class="attr">3x.png</span> <span class="attr">1200w</span>,</span></span><br><span class="line"><span class="tag">&gt;</span></span><br></pre></td></tr></table></figure>
<p>解析一下：</p>
<p><code>sizes = “(min-width: 600px) 600px, 300px&quot;</code>的意思是，如果屏幕当前的 CSS 像素宽度大于或者等于 600px，则图片的 CSS 宽度为 600px，反之，则图片的 CSS 宽度为 300px。</p>
<p>也就是 sizes 属性声明了在不同宽度下图片的 CSS 宽度表现。这里可以理解为，大屏幕下图片宽度为 600px，小屏幕下图片宽度为 300px。（具体的媒体查询代码由 CSS 实现）</p>
<blockquote>
<p>这里的 sizes 属性只是声明了在不同宽度下图片的 CSS 宽度表现，而具体使图片在大于 600px 的屏幕上展示为 600px 宽度的代码需要另外由 CSS 或者 JS 实现，有点绕。</p>
</blockquote>
<p><code>srcset = “photo@1x.png 300w, photo@2x.png 600w, photo@3x.png 1200w</code>里面的 300w，600w，900w 叫宽度描述符。怎么确定当前场景会选取哪张图片呢？</p>
<h4 id="1-当前屏幕-dpr-2-，CSS-宽度为-375px。"><a href="#1-当前屏幕-dpr-2-，CSS-宽度为-375px。" class="headerlink" title="1. 当前屏幕 dpr = 2 ，CSS 宽度为 375px。"></a>1. 当前屏幕 dpr = 2 ，CSS 宽度为 375px。</h4><p>当前屏幕 CSS 宽度为 375px，则图片 CSS 宽度为 300px。分别用上述 3 个宽度描述符的数值除以 300。</p>
<ol>
<li>300 / 300 = 1</li>
<li>600 / 300 = 2</li>
<li>1200 / 300 = 4</li>
</ol>
<p>上面计算得到的 1、 2、 4 即是算出的有效的像素密度，换算成和 x 描述符等价的值 。这里 600w 算出的 2 即满足 dpr = 2 的情况，选择此张图。 </p>
<h4 id="2-当前屏幕-dpr-3-，CSS-宽度为-414px。"><a href="#2-当前屏幕-dpr-3-，CSS-宽度为-414px。" class="headerlink" title="2. 当前屏幕 dpr = 3 ，CSS 宽度为 414px。"></a>2. 当前屏幕 dpr = 3 ，CSS 宽度为 414px。</h4><p>当前屏幕 CSS 宽度为 414px，则图片 CSS 宽度仍为 300px。再计算一次：</p>
<ol>
<li>300 / 300 = 1</li>
<li>600 / 300 = 2</li>
<li>1200 / 300 = 4</li>
</ol>
<p>因为 dpr = 3，2 已经不满足了，则此时会选择 1200w 这张图。</p>
<h4 id="3-当前屏幕-dpr-1-，CSS-宽度为-1920px。"><a href="#3-当前屏幕-dpr-1-，CSS-宽度为-1920px。" class="headerlink" title="3. 当前屏幕 dpr = 1 ，CSS 宽度为 1920px。"></a>3. 当前屏幕 dpr = 1 ，CSS 宽度为 1920px。</h4><p>当前屏幕 CSS 宽度为 1920px，则图片 CSS 宽度变为了 600px。再计算一次：</p>
<ol>
<li>300 / 600 = .5</li>
<li>600 / 600 = 1</li>
<li>1200 / 600 = 2</li>
</ol>
<p>因为 dpr = 1，所以此时会选择 600w 对应的图片。</p>
<p>具体的可以试下这个 Demo：<span class="exturl" data-url="aHR0cHM6Ly9jb2RlcGVuLmlvL0Nob2tjb2NvL3Blbi9XTmVadk9YP2VkaXRvcnM9MTEwMA==" title="https://codepen.io/Chokcoco/pen/WNeZvOX?editors=1100">CodePen Demo – srcset 属性配合 w 宽度描述符配合 sizes 属性<i class="fa fa-external-link"></i></span></p>
<p>此方案的意义在于考虑到了响应性布局的复杂性与屏幕的多样性，利用上述规则，可以一次适配 PC 端大屏幕和移动端高清屏，一箭多雕。</p>
<p>了解更多细节，推荐看看：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vd2ViL2Z1bmRhbWVudGFscy9kZXNpZ24tYW5kLXV4L3Jlc3BvbnNpdmUvaW1hZ2Vz" title="https://developers.google.com/web/fundamentals/design-and-ux/responsive/images">Google Web Fundamentals – Web Responsive Images<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuemhhbmd4aW54dS5jb20vd29yZHByZXNzLzIwMTQvMTAvcmVzcG9uc2l2ZS1pbWFnZXMtc3Jjc2V0LXNpemUtdy1kZXNjcmlwdG9yLw==" title="https://www.zhangxinxu.com/wordpress/2014/10/responsive-images-srcset-size-w-descriptor/">响应式图片 srcset 全新释义 sizes 属性 w 描述符<i class="fa fa-external-link"></i></span></li>
</ul>
<h2 id="字体适配方案"><a href="#字体适配方案" class="headerlink" title="字体适配方案"></a>字体适配方案</h2><h3 id="字体大小"><a href="#字体大小" class="headerlink" title="字体大小"></a>字体大小</h3><p>字体是很多前端开发同学容易忽略的一个点，但是其中也是有很多小知识点。</p>
<p>首先要知道，浏览器有最小字体限制：</p>
<ul>
<li>PC 上最小 font-size=12px</li>
<li>手机上最小 font-size=8px</li>
</ul>
<p>如果小于最小字体，那么字体默认就是最小字体。</p>
<blockquote>
<p>其次，很多早期的文章规范都建议不要使用奇数级单位来定义字体大小（如 13px，15px…），容易在一些低端设备上造成字体模糊，出现锯齿。</p>
</blockquote>
<h3 id="字体的选择展示"><a href="#字体的选择展示" class="headerlink" title="字体的选择展示"></a>字体的选择展示</h3><p>在字体适配上面，我们需要从性能和展示效果两个维度去考虑。</p>
<p>完整的一个字体资源实在太大了，所以我们应该尽可能的使用用户设备上已有的字体，而不是额外去下载字体资源，从而使加载时间明显加快。</p>
<p>而从展示效果层面来说，使用系统字体能更好的与当前操作系统使用的相匹配，得到最佳的展示效果。所以我们在字体使用方面，有一个应该尽量去遵循的原则，也是现在大部分网站在字体适配上使用的策略：</p>
<p>使用各个支持平台上的默认系统字体。</p>
<h3 id="兼顾各个操作系统"><a href="#兼顾各个操作系统" class="headerlink" title="兼顾各个操作系统"></a>兼顾各个操作系统</h3><p>常见的操作系统有 Windows、Windows Phone、Mac OS X、iPhone、Android Phone、Linux。当然对于普通用户而言，无须关注 Linux 系统。</p>
<p>下面就以 <span class="exturl" data-url="aHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS8=" title="https://css-tricks.com/">CSS-Trick<i class="fa fa-external-link"></i></span> 网站最新的 font-family 为例，看看他们是如何在字体选择上做到适配各个操作系统的</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attribute">font-family</span>:</span><br><span class="line">    system-ui,-apple-system,BlinkMacSystemFont,segoe ui,Roboto,</span><br><span class="line">    Helvetica,Arial,</span><br><span class="line">    sans-serif,apple color emoji,segoe ui emoji,segoe ui symbol;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="font-family-关键字"><a href="#font-family-关键字" class="headerlink" title="font-family 关键字"></a>font-family 关键字</h3><p>对于 CSS 中的 <code>font-family</code> 而言，它有两类取值。</p>
<ol>
<li><p>一类是类似这样的具体的字体族名定义：<code>font-family: Arial</code> 这里定义了一个具体的字体样式，字体族名为 <code>Arial</code>;</p>
</li>
<li><p>一类是通用字体族名，它是一种备选机制，用于在指定的字体不可用时给出较好的字体，类似这样：<code>font-family: sans-serif</code> 。</p>
</li>
</ol>
<p>其中，<code>sans-serif</code> 表无衬线字体族，例如， “Open Sans”, “Arial” “微软雅黑” 等等。</p>
<p>关于通用字体族名，在 <span class="exturl" data-url="aHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTgvUkVDLWNzcy1mb250cy0zLTIwMTgwOTIwLyNnZW5lcmljLWZvbnQtZmFtaWxpZXM=" title="https://www.w3.org/TR/2018/REC-css-fonts-3-20180920/#generic-font-families">CSS Fonts Module Level 3 – Basic Font Properties<i class="fa fa-external-link"></i></span> 中，定义了 5 个，也就是我们熟知的几个通用字体族名：</p>
<ol>
<li>serif 衬线字体族</li>
<li>sans-serif 非衬线字体族</li>
<li>monospace 等宽字体，即字体中每个字宽度相同</li>
<li>cursive 草书字体</li>
<li>fantasy 主要是那些具有特殊艺术效果的字体</li>
</ol>
<h3 id="新增通用字体族关键字"><a href="#新增通用字体族关键字" class="headerlink" title="新增通用字体族关键字"></a>新增通用字体族关键字</h3><p>而在 <span class="exturl" data-url="aHR0cHM6Ly93d3cudzMub3JnL1RSL2Nzcy1mb250cy00LyNnZW5lcmljLWZvbnQtZmFtaWxpZXM=" title="https://www.w3.org/TR/css-fonts-4/#generic-font-families">CSS Fonts Module Level 4 – Generic font families<i class="fa fa-external-link"></i></span> 中，新增了几个关键字：</p>
<ul>
<li>system-ui 系统默认字体</li>
<li>emoji 用于兼容 emoji 表情符号字符</li>
<li>math 适用于数学表达式</li>
<li>fangsong 此字体系列用于中文的（仿宋）字体。</li>
</ul>
<p>我们看看用的最多的 <code>system-ui</code>。</p>
<h3 id="system-ui"><a href="#system-ui" class="headerlink" title="system-ui"></a>system-ui</h3><p>简单而言，<code>font-family: system-ui</code> 的目的就是在不同的操作系统的 Web 页面下，自动选择本操作系统下的默认系统字体。</p>
<p>默认使用特定操作系统的系统字体可以提高性能，因为浏览器或者 webview 不必去下载任何字体文件，而是使用已有的字体文件。 <code>font-family: system-ui</code> 字体设置的优势之处在于它与当前操作系统使用的字体相匹配，对于文本内容而言，它可以得到最恰当的展示。</p>
<h3 id="San-Francisco-Fonts"><a href="#San-Francisco-Fonts" class="headerlink" title="San Francisco Fonts"></a>San Francisco Fonts</h3><p>OK，简单了解了 <code>system-ui</code>字体族。但是像 <code>-apple-system</code>、<code>BlinkMacSystemFont</code> 没有在最新的标准里出现。它们又代表什么意思呢？</p>
<p>在此之前，先了解下 <code>San Francisco Fonts</code> 。</p>
<p><code>San Francisco Fonts</code> 又叫旧金山字体，是一款西文字体。随着 iOS 9 更新面世，在 WatchOS 中随 Apple Watch 一起悄然发售，并且还将在 Apple TV 上的新 tvOS 中使用。</p>
<p><code>San Francisco Fonts</code> 在 iOS 系统上用于替代升级另外一款西文字体 <code>Helvetica Neue</code>。Apple 做了一些重要的改变，使其成为平台上更好的， 甚至是完美的西文字体。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vODU1NDE0My82MjkyNDYxMi0wNmMwNDMwMC1iZGUzLTExZTktOTM4NS1hZTRkNWE2Y2MwZDkucG5n" title="https://user-images.githubusercontent.com/8554143/62924612-06c04300-bde3-11e9-9385-ae4d5a6cc0d9.png"><img src="https://user-images.githubusercontent.com/8554143/62924612-06c04300-bde3-11e9-9385-ae4d5a6cc0d9.png" alt><i class="fa fa-external-link"></i></span></p>
<h2 id="apple-system-BlinkMacSystemFont"><a href="#apple-system-BlinkMacSystemFont" class="headerlink" title="-apple-system/BlinkMacSystemFont"></a>-apple-system/BlinkMacSystemFont</h2><p>话说回来。正如每个前端开发人员都知道的那样，将一个功能纳入规范是一回事，将其纳入浏览器又是另一回事。</p>
<p>幸运的是，<code>system-ui</code> 的普及很快。 Chrome 和 Safari 都可以在各种平台上完全支持它。只有 Mozilla 和 Windows 相对落后。</p>
<p>看看 <code>system-ui</code> 的兼容性，<span class="exturl" data-url="aHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPXN5c3RlbQ==" title="https://caniuse.com/#search=system">Can i Use – system-ui<i class="fa fa-external-link"></i></span>(图片截取日 2019-08-13)：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vODU1NDE0My82MjkyNTI5MC05Yjc3NzA4MC1iZGU0LTExZTktOTg2NS0xOTVlOGU0NGZjZDkucG5n" title="https://user-images.githubusercontent.com/8554143/62925290-9b777080-bde4-11e9-9865-195e8e44fcd9.png"><img src="https://user-images.githubusercontent.com/8554143/62925290-9b777080-bde4-11e9-9865-195e8e44fcd9.png" alt><i class="fa fa-external-link"></i></span></p>
<p>仔细看上图的最后两行：</p>
<ul>
<li>Supported as the -apple-system value (only on macOS and iOS)</li>
<li>Supported as the BlinkMacSystemFont value (only on macOS)</li>
</ul>
<p>考虑到不同平台及向后兼容，在 macOS 和 iOS 上，我们需要使用 <code>-apple-system</code> 及 <code>BlinkMacSystemFont</code> 来兼容适配 <code>system-ui</code> 标准。</p>
<h3 id="Segoe-UI"><a href="#Segoe-UI" class="headerlink" title="Segoe UI"></a>Segoe UI</h3><p>Segoe UI 是 Windows 从 Vista 开始的默认西文字体族，只有西文，不支持汉字，属于无衬线体。</p>
<p>它也表示一个系列而不是某一款单一字体。使用 <code>font-family: Segoe UI</code> 可以在 Windows 平台及 Windows Phone 上选取最佳的西文字体展示。</p>
<h3 id="Roboto"><a href="#Roboto" class="headerlink" title="Roboto"></a>Roboto</h3><p>Roboto 是为 Android 操作系统设计的一个无衬线字体家族。Google 描述该字体为 “现代的、但平易近人” 和“有感情”的。</p>
<p>这个字体家族包含 Thin、Light、Regular、Medium、Bold、Black 六种粗细及相配的斜体。</p>
<h3 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h3><p>到此，我们可以总结一下了。以 <span class="exturl" data-url="aHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS8=" title="https://css-tricks.com/">CSS-Tricks<i class="fa fa-external-link"></i></span> 网站的 font-family 定义为例子：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attribute">font-family</span>:</span><br><span class="line">    system-ui,-apple-system,BlinkMacSystemFont,segoe ui,Roboto,</span><br><span class="line">    Helvetica,Arial,</span><br><span class="line">    sans-serif,apple color emoji,segoe ui emoji,segoe ui symbol;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>system-ui，使用各个支持平台上的默认系统字体</li>
<li>-apple-system， 在一些稍低版本 Mac OS X 和 iOS 上，它针对旧版上的 Neue Helvetica 和 Lucida Grande 字体，升级使用更为合适的 San Francisco Fonts</li>
<li>BlinkMacSystemFont，针对一些 Mac OS X 上的 Chrome 浏览器，使用系统默认字体</li>
<li>segoe ui，在 Windows 及 Windows Phone 上选取系统默认字体</li>
<li>Roboto，面向 Android 和一些新版的的 Chrome OS</li>
<li>Helvetica,Arial，在针对不同操作系统不同平台设定采用默认系统字体后，针对一些低版本浏览器的降级方案</li>
<li>sans-serif，兜底方案，保证字体风格统一，至少也得是无衬线字体</li>
</ol>
<p>上述 5 个字体族定义，优先级由高到底，可以看到，它们 5 个都并非某个特定字体，基本的核心思想都是选择对应平台上的默认系统字体。</p>
<p>涵盖了 iOS、MAC OS X、Android、Windows、Windows Phone 基本所有用户经常使用的主流操作系统。</p>
<p>使用系统默认字体的主要原因是性能。字体通常是网站上加载的最大 / 最重的资源之一。如果我们可以使用用户机器上已有的字体，我们就完全不需要再去获取字体资源，从而使加载时间明显加快。</p>
<p>并且系统字体的优点在于它与当前操作系统使用的相匹配，因此它的文本展示必然也是一个让人舒适展示效果。</p>
<p>当然，上述 <code>font-family</code> 的定义不一定是最佳的。譬如天猫移动端在 <code>font-family</code> 最前面添加了 <code>&quot;PingFang SC&quot;,miui,..</code>必定也有他们的业务上的考虑。但是一些 fallback 方案向后兼容的思想都是一致的，值得参考学习。</p>
<p>更多的关于字体方面的细节知识，可以看看这几篇文章：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Nob2tjb2NvL2lDU1MvaXNzdWVzLzY=" title="https://github.com/chokcoco/iCSS/issues/6">你该知道的字体 – font-family<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Nob2tjb2NvL2lDU1MvaXNzdWVzLzY5" title="https://github.com/chokcoco/iCSS/issues/69">Web 字体 font-family 再探秘<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuc21hc2hpbmdtYWdhemluZS5jb20vMjAxNS8xMS91c2luZy1zeXN0ZW0tdWktZm9udHMtcHJhY3RpY2FsLWd1aWRlLw==" title="https://www.smashingmagazine.com/2015/11/using-system-ui-fonts-practical-guide/">Using UI System Fonts In Web Design: A Quick Practical Guide<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9mdXJiby5vcmcvMjAxOC8wMy8yOC9zeXN0ZW0tZm9udHMtaW4tY3NzLw==" title="https://furbo.org/2018/03/28/system-fonts-in-css/">System Fonts in CSS<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kZXNpZ25mb3JoYWNrZXJzLmNvbS9ibG9nL3Nhbi1mcmFuY2lzY28tZm9udC8=" title="https://designforhackers.com/blog/san-francisco-font/">Apple’s San Francisco Font<i class="fa fa-external-link"></i></span></li>
</ul>
<h2 id="前端布局的兼容适配"><a href="#前端布局的兼容适配" class="headerlink" title="前端布局的兼容适配"></a>前端布局的兼容适配</h2><p>前端工程师的一大工作内容就是页面布局。无论在 PC 端还是移动端，页面布局的兼容适配都是重中之重。在整个前端发展的历程中，布局的方法也在不断的推陈出新。</p>
<h3 id="布局发展历程"><a href="#布局发展历程" class="headerlink" title="布局发展历程"></a>布局发展历程</h3><p>简单来说，前端的布局发展历程经历了下面几个过程：</p>
<p>表格布局 –&gt; 定位布局 –&gt; 浮动布局 –&gt; flexbox 布局 –&gt; gridbox 布局</p>
<p>每一种布局在特定时期都发挥了重要的作用，而每一种新的布局方式的出现，往往都是因为现有的布局方式已经在该时期已经无法很好的满足开发者的需求，无法满足越来越潮流的页面布局的方式。</p>
<p>以 Flexbox 的出现为例子，在 Flexbox 被大家广为接受使用之前。我们一直在使用定位 + 浮动的布局方式。像下面这个布局：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vODU1NDE0My82MjUzODMwMS0wOTZmZTUwMC1iODg1LTExZTktODJmNS03YWM5MjUwMmY2MTkucG5n" title="https://user-images.githubusercontent.com/8554143/62538301-096fe500-b885-11e9-82f5-7ac92502f619.png"><img src="https://user-images.githubusercontent.com/8554143/62538301-096fe500-b885-11e9-82f5-7ac92502f619.png" alt><i class="fa fa-external-link"></i></span></p>
<p>容器宽度不定，内部三个元素，均分排列且占满整个空间，并且垂直居中。如果使用定位 + 浮动的布局方式，你无法很快想到最佳的解决方式。三个元素并排那么必然需要浮动或者绝对定位，容器宽度不定且中间元素始终居中，需要顾虑的方面就很多了。也许使用 <code>text-align: justufy</code> 可以 hack 实现，等等等等。</p>
<p>然而，使用 flexbox 布局的话，只需要： </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>flexbox 的出现，一次性解决了流动布局，弹性布局，排列方式等多个问题。并且它是简洁的，可控的。</p>
<p>再来看一个例子，水平垂直居中一个元素。使用 flexbox 也许是最便捷的：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><span class="exturl" data-url="aHR0cHM6Ly9jb2RlcGVuLmlvL0Nob2tjb2NvL3Blbi9HYXJQZXY=" title="https://codepen.io/Chokcoco/pen/GarPev">最便捷的垂直居中方式<i class="fa fa-external-link"></i></span></p>
<h3 id="CSS-Grid-Layout"><a href="#CSS-Grid-Layout" class="headerlink" title="CSS Grid Layout"></a>CSS Grid Layout</h3><p>OK，flexbox 已经足够优秀了，为什么 gird 网格布局的出现又是为什么？它解决了什么 flex 布局无法很好解决的问题？</p>
<p>看看下面这张图：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vODU1NDE0My82MjUzOTI3Ny02YmM5ZTUwMC1iODg3LTExZTktOWY3Yi03OGM1MWNkZTMxMmMucG5n" title="https://user-images.githubusercontent.com/8554143/62539277-6bc9e500-b887-11e9-9f7b-78c51cde312c.png"><img src="https://user-images.githubusercontent.com/8554143/62539277-6bc9e500-b887-11e9-9f7b-78c51cde312c.png" alt><i class="fa fa-external-link"></i></span></p>
<p>flexbox 是一维布局，他只能在一条直线上放置你的内容区块；而 grid 是一个二维布局。它除了可以灵活的控制水平方向之外，还能轻易的控制垂直方向的布局模式。对于上图那样的九宫格布局，它就可以轻而易举的完成。</p>
<p>一图以蔽之，flexbox：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vODU1NDE0My82MjU5MTc3OC01MWNkZTgwMC1iOTAzLTExZTktOTAzNy05YzViMjVjOWI4OTQucG5n" title="https://user-images.githubusercontent.com/8554143/62591778-51cde800-b903-11e9-9037-9c5b25c9b894.png"><img src="https://user-images.githubusercontent.com/8554143/62591778-51cde800-b903-11e9-9037-9c5b25c9b894.png" alt><i class="fa fa-external-link"></i></span></p>
<p>gridbox：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vODU1NDE0My82MjU5MTc4NC01Mzk3YWI4MC1iOTAzLTExZTktOWM3MC1lN2Q0MzE2YTNkYTAucG5n" title="https://user-images.githubusercontent.com/8554143/62591784-5397ab80-b903-11e9-9c70-e7d4316a3da0.png"><img src="https://user-images.githubusercontent.com/8554143/62591784-5397ab80-b903-11e9-9c70-e7d4316a3da0.png" alt><i class="fa fa-external-link"></i></span></p>
<blockquote>
<p>图片截取自陈慧晶老师在 2019 第五届 CSS 大会上的分享 – <span class="exturl" data-url="aHR0cHM6Ly93d3cuY2hlbmh1aWppbmcuY29tL3NsaWRlcy81My1jc3Njb25mY24tMjAxOS8jLw==" title="https://www.chenhuijing.com/slides/53-cssconfcn-2019/#/">新时代 CSS 布局<i class="fa fa-external-link"></i></span></p>
</blockquote>
<p>在现阶段，移动端布局应当更多使用 flexbox 去完成（相对那些还在使用 float 布局的），而考虑到未来页面布局的推陈出新。对于 Grid 布局我们应当像前几年对待 flexbox 一样，重视起来，随着兼容性的普及，Grid 布局也会慢慢成为主流。</p>
]]></content>
  </entry>
  <entry>
    <title>几个随机图片API接口</title>
    <url>/posts/3773507a.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote class="blockquote-center"><p><span class="exturl" data-url="aHR0cHM6Ly9zb3VyY2UudW5zcGxhc2guY29tLw==" title="https://source.unsplash.com/">Unsplash Source<i class="fa fa-external-link"></i></span></p>
</blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly91bnNwbGFzaC5pdC8xNjAwLzkwMD9yYW5kb20=" title="https://unsplash.it/1600/900?random">https://unsplash.it/1600/900?random<i class="fa fa-external-link"></i></span>（据说国内加载略慢，我试了一下还好都差不多）</p>
<p><span class="exturl" data-url="aHR0cHM6Ly91cGxvYWRiZXRhLmNvbS9hcGkvcGljdHVyZXMvcmFuZG9tLz9rZXk9QmluZ0V2ZXJ5ZGF5V2FsbHBhcGVyUGljdHVyZQ==" title="https://uploadbeta.com/api/pictures/random/?key=BingEverydayWallpaperPicture">https://uploadbeta.com/api/pictures/random/?key=BingEverydayWallpaperPicture<i class="fa fa-external-link"></i></span>（必应每日图片）<span class="exturl" data-url="aHR0cHM6Ly91cGxvYWRiZXRhLmNvbS9hcGkvcGljdHVyZXMvcmFuZG9t" title="https://uploadbeta.com/api/pictures/random">https://uploadbeta.com/api/pictures/random<i class="fa fa-external-link"></i></span>（必应图库，一些风景图人物图什么的，都是现代风格）</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9zb3VyY2UudW5zcGxhc2guY29tL3JhbmRvbQ==" title="https://source.unsplash.com/random">https://source.unsplash.com/random<i class="fa fa-external-link"></i></span>（风格同上，但这个的图尺寸不是大图）<br><a id="more"></a></p>
<blockquote>
<p>下面是几个二次元的, 都差不多ヽ (´o｀（大部分都在本地测试过，可以放心食用），但是以下这些唯一的问题就是。。有些图片质量参差不齐。。所以要想完全和自己口味的话还是自己做一个吧，有开源代码</p>
</blockquote>
<p>首先最牛逼的大概就是<strong><span class="exturl" data-url="aHR0cDovL2lrbW9lLmNvbS84NTQ4Lmh0bWw=" title="http://ikmoe.com/8548.html">「漫月 API」<i class="fa fa-external-link"></i></span></strong>了，一直被模仿从未被超越那种╮(￣▽￣””)╭</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cueHdib2tlLmNuL2FwaS9hcGkucGhw" title="https://www.xwboke.cn/api/api.php">https://www.xwboke.cn/api/api.php<i class="fa fa-external-link"></i></span> （出处被不小心遗忘在风中了，对不住了 0.0）</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9pbWcueGpoLm1lL3JhbmRvbV9pbWcucGhw" title="https://img.xjh.me/random_img.php">https://img.xjh.me/random_img.php<i class="fa fa-external-link"></i></span> <span class="exturl" data-url="aHR0cHM6Ly93d3cueGpoLm1lLzMwNjkuaHRtbD9yZXBseXRvY29tPTQ4ODg=" title="https://www.xjh.me/3069.html?replytocom=4888">出处 (・ω・) ノ<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cDovL3d3dy5kbW9lLmNjL3JhbmRvbS5waHA=" title="http://www.dmoe.cc/random.php">http://www.dmoe.cc/random.php<i class="fa fa-external-link"></i></span>（1000+）<span class="exturl" data-url="aHR0cDovL3d3dy5kbW9lLmNjLw==" title="http://www.dmoe.cc/">出处 (・ω・) ノ<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cDovL2FjZy5iYWtheXVuLmNuL3JhbmRiZy5waHA=" title="http://acg.bakayun.cn/randbg.php">http://acg.bakayun.cn/randbg.php<i class="fa fa-external-link"></i></span>（6000+ | 东方 project 可选 | 多尺寸）<span class="exturl" data-url="aHR0cDovL2FjZy5iYWtheXVuLmNuLw==" title="http://acg.bakayun.cn/">出处 (・ω・) ノ<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9hY2cueWFud3ouY24vYXBpLnBocA==" title="https://acg.yanwz.cn/api.php">https://acg.yanwz.cn/api.php<i class="fa fa-external-link"></i></span> (400+) <span class="exturl" data-url="aHR0cHM6Ly9hY2cueWFud3ouY24v" title="https://acg.yanwz.cn/">出处 (・ω・) ノ<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cDovL21vZWNlLmNjL2FwbC9pbWcucGhw" title="http://moece.cc/apl/img.php">http://moece.cc/apl/img.php<i class="fa fa-external-link"></i></span>（433+）<span class="exturl" data-url="aHR0cDovL21vZWNlLmNjLw==" title="http://moece.cc/">出处 (・ω・) ノ<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9yYW5kb20uNTJlY3kuY24vcmFuZG9tLnBocA==" title="https://random.52ecy.cn/random.php">https://random.52ecy.cn/random.php<i class="fa fa-external-link"></i></span> (8000+) <span class="exturl" data-url="aHR0cHM6Ly9yYW5kb20uNTJlY3kuY24v" title="https://random.52ecy.cn/">出处 (・ω・) ノ<i class="fa fa-external-link"></i></span>！！这个我用不了，当前接口需要认证啥的 emmmmm</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9hY2cubW9lZHJhZ29uLmNvbS9hcGkucGhw" title="https://acg.moedragon.com/api.php">https://acg.moedragon.com/api.php<i class="fa fa-external-link"></i></span> (1000+) <span class="exturl" data-url="aHR0cHM6Ly9hY2cubW9lZHJhZ29uLmNvbS8=" title="https://acg.moedragon.com/">出处 (・ω・) ノ<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cDovL2FwaS4zZXdsLmNjL2FjZy9pbWcucGhw" title="http://api.3ewl.cc/acg/img.php">http://api.3ewl.cc/acg/img.php<i class="fa fa-external-link"></i></span>（1000+ | 尺寸可选） <span class="exturl" data-url="aHR0cDovL2FwaS4zZXdsLmNjL2FjZy8=" title="http://api.3ewl.cc/acg/">出处 (・ω・) ノ<i class="fa fa-external-link"></i></span> 下面这篇是作者的博客<span class="exturl" data-url="aHR0cDovL3d3dy4zZXdsLmNjLzMyNC5odG1s" title="http://www.3ewl.cc/324.html">随机图片 api–开源<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9hY2cudG91YmllYy5jbi9yYW5kb20ucGhw" title="https://acg.toubiec.cn/random.php">https://acg.toubiec.cn/random.php<i class="fa fa-external-link"></i></span>（1000+） <span class="exturl" data-url="aHR0cHM6Ly9hY2cudG91YmllYy5jbi8=" title="https://acg.toubiec.cn/">出处 (・ω・) ノ<i class="fa fa-external-link"></i></span> 作者开源了 这篇博客里有介绍和源码 先蟹蟹大佬了<span class="exturl" data-url="aHR0cHM6Ly93d3cudG91YmllYy5jbi8xNjQuaHRtbA==" title="https://www.toubiec.cn/164.html">[项目]随机二次元图片 API - 已经开源<i class="fa fa-external-link"></i></span></p>
<p>mark 一下慢慢研究➡️ <span class="exturl" data-url="aHR0cHM6Ly93d3cueGhib2tlLmNvbS8xNC5odG1s" title="https://www.xhboke.com/14.html">一个可在 php 中直接输出随机图片的 API<i class="fa fa-external-link"></i></span></p>
<blockquote>
<p>转载自： <span class="exturl" data-url="aHR0cHM6Ly9sZWZsYWNvbi5naXRodWIuaW8vNmEyYjk4MWYv" title="https://leflacon.github.io/6a2b981f/">几个随机图片API接口(给hexo设置随机背景图片)<i class="fa fa-external-link"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>api</category>
      </categories>
      <tags>
        <tag>转载</tag>
        <tag>图片</tag>
        <tag>api</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML Email的编写</title>
    <url>/posts/106ada5.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote class="blockquote-center"><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81ZGYwYmRjMjUxODgyNTEyNTcyODY3MzM=" title="https://juejin.im/post/5df0bdc25188251257286733">HTML Email的编写<i class="fa fa-external-link"></i></span></p>
</blockquote>
<p>总结回顾</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81ZGU2N2U3NjUxODgyNTEyMjMyMmE5ZTI=" title="https://juejin.im/post/5de67e76518825122322a9e2">这样回答继承，面试官可能更满意<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81ZGU3ZWJkNDUxODgyNTEyN2MyNmZiYzE=" title="https://juejin.im/post/5de7ebd4518825127c26fbc1">箭头函数和普通函数的10个区别<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81ZGVlMTVhMjUxODgyNTEyNWUxYmE4ZTk=" title="https://juejin.im/post/5dee15a2518825125e1ba8e9">html 空白汉字占位符<i class="fa fa-external-link"></i></span></li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81ZGVlNjY5MzZmYjlhMDE2MTcxMWFkNTU=" title="https://juejin.im/post/5dee66936fb9a0161711ad55">我想了解更多判断数组的方式<i class="fa fa-external-link"></i></span></p>
<a id="more"></a>
<h2 id="一、HTML-Email的编写开发场景"><a href="#一、HTML-Email的编写开发场景" class="headerlink" title="一、HTML Email的编写开发场景"></a>一、HTML Email的编写开发场景</h2></li>
<li><p>你下单 可能 电商会给你发一份 详情邮件</p>
</li>
<li>招行可能给你发下你的账单邮件</li>
<li>生日了给你发个邮件</li>
<li>转正了给你发个邮件</li>
<li>入职周年邮件</li>
</ul>
<h2 id="二、遇到的问题"><a href="#二、遇到的问题" class="headerlink" title="二、遇到的问题"></a>二、遇到的问题</h2><h3 id="Email的兼容性很差"><a href="#Email的兼容性很差" class="headerlink" title="Email的兼容性很差"></a>Email的兼容性很差</h3><p>邮件内容所在上下文或者说所在外部容器（以下简称环境）都是由邮箱服务商决定的，不同的邮件服务商对前端样式布局支持都存在在一些差别。这就要求邮件内容需要在任何一种情况下都要正常兼容显示。</p>
<h3 id="Email容器不同"><a href="#Email容器不同" class="headerlink" title="Email容器不同"></a>Email容器不同</h3><p>你写的邮件前端代码可能被放在一个iframe中，那你的内容是被放在body里面的；可能放在一个div中，你的内容就被放在这个div里面。</p>
<h3 id="Email自带设置"><a href="#Email自带设置" class="headerlink" title="Email自带设置"></a>Email自带设置</h3><p>邮箱软件本身设置设置了些css，他可能对你产生未知的影响。可能根本没有申明doctype，即使申明了，也不是你想要的doctype。</p>
<h3 id="避免被嵌套在不正确的容器里"><a href="#避免被嵌套在不正确的容器里" class="headerlink" title="避免被嵌套在不正确的容器里"></a>避免被嵌套在不正确的容器里</h3><p>因为容器可能是body或div，我们邮件内容不应该是一个完整的html。所以邮件内容应该是以div为根节点的html片段。</p>
<h2 id="三、环境（外部容器）"><a href="#三、环境（外部容器）" class="headerlink" title="三、环境（外部容器）"></a>三、环境（外部容器）</h2><p>我们写的邮件代码在不用的邮件服务商下，对应的外部容器不太一样。</p>
<p>QQ邮箱：自己编写的内容被嵌套在一个div中</p>
<p><img src="https://i.loli.net/2019/12/21/aqCZuxpdlKAw2ky.png" alt="16ef47792c6956c9.png"></p>
<p>outlook邮箱：自己编写的内容不知道被嵌套什么元素里了，它本身的元素加上我编写的元素被混在一起了</p>
<p><img src="https://i.loli.net/2019/12/21/3L9tIw6h4xNSzH2.png" alt="16ef47aa05a4f633.png"></p>
<p>其他的邮箱你们可以自己测试一下</p>
<h2 id="四、开发的Doctype"><a href="#四、开发的Doctype" class="headerlink" title="四、开发的Doctype"></a>四、开发的Doctype</h2><p>一个文档类型标记是一种标准通用标记语言的文档类型声明，它的目的是要告诉标准通用标记语言解析器，它应该使用什么样的文档类型定义（DTD）来解析文档。</p>
<p>兼容性最好的Doctype是XHTML 1.0 Strict，事实上Gmail和Hotmail会删掉你的Doctype，换上这个Doctype。使用这个Doctype，也就意味着，不能使用HTML5的语法。</p>
<p><img src="https://i.loli.net/2019/12/21/LHeGnzk9WD5RB2r.png" alt="16ef48167b8d46b2.png"></p>
<p><img src="https://i.loli.net/2019/12/21/IQv2ZlkR3BXFAsw.png" alt="16ef4820bb240263.png"></p>
<h2 id="五、开发的布局"><a href="#五、开发的布局" class="headerlink" title="五、开发的布局"></a>五、开发的布局</h2><ul>
<li>网页的布局（layout）推荐使用表格（table）</li>
<li>css内嵌，不能在head标签中写style，也不能外联。</li>
<li>不能用浮动的方式定位。position：absolute;float:left;等都不行，float在qq邮箱客户端中可以识别，但是在outlook中无法识别。</li>
<li><p>为了保证兼容性，需要把邮件的宽度设置为600px，最大600px；</p>
<p>  <img src="https://i.loli.net/2019/12/21/2bdzMVDwiEBLHWs.png" alt="16ef484d183ceefe.png"></p>
</li>
</ul>
<blockquote>
<p>网页的布局（layout）必须使用表格（table）。首先，放置一个最外层的大表格，用来设置背景。 在内层，放置第二个表格。用来展示内容。第二个table的宽度定为600像素，防止超过客户端的显示宽度。</p>
</blockquote>
<h2 id="六、开发的样式"><a href="#六、开发的样式" class="headerlink" title="六、开发的样式"></a>六、开发的样式</h2><ul>
<li>避免css冲突或被覆盖</li>
<li>尽量使用div、span等无语义标签。</li>
<li>尽量避免CSS属性值的简写形式</li>
<li>font-size:0; 很重要，否则qq邮箱 会自动填写很多空格，影响布局</li>
<li>减少不必要的间隙和空格等存在，影响页面美感  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 错误的写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"font: 8px/14px Arial, sans-serif; margin: 1px 0;"</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 推荐写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"margin-top: 1px; margin-bottom: 1px; margin-left: 0; margin-right: 0;"</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>所有的CSS规则，最好都采用行内样式。因为放置在网页头部的样式，很可能会被客户端删除。客户端对CSS规则的支持情况 另外，不要采用CSS的简写形式，有些客户端不支持。因为环境中可能已经设置了css，比如一些reset、一些.class。 所以我们只能使用行内style来确保我们的效果，并且在内容根节点上设置基础style，并且尽量使用div、span等无语义标签。</p>
</blockquote>
<h2 id="七、开发图片"><a href="#七、开发图片" class="headerlink" title="七、开发图片"></a>七、开发图片</h2><ul>
<li>少用img，邮箱不会过滤你的img标签，但是系统往往会默认不载入陌生来信的图片</li>
<li>需要img的话，一定要写好alt和title；</li>
<li>Outlook中img最高1728px，超过1728 的部分会被截掉</li>
<li>Outlook可能自动缩小img，使其最高位1728px，（上次测试没缩放，直接裁了）</li>
<li>建议剪裁img，堆叠在一起</li>
<li>有些客户端会给img链接加上边框，要去除边框。  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">style</span>=<span class="string">"display:block;</span></span></span><br><span class="line"><span class="tag"><span class="string">                    outline:none; </span></span></span><br><span class="line"><span class="tag"><span class="string">                    text-decoration:none; </span></span></span><br><span class="line"><span class="tag"><span class="string">                    -ms-interpolation-mode: bicubic;</span></span></span><br><span class="line"><span class="tag"><span class="string">                    border:none;"</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>图片是唯一可以引用的外部资源。其他的外部资源，比如样式表文件、字体文件、视频文件等，一概不能引用。 有些客户端会给图片链接加上边框，要去除边框。 需要注意的是，不少客户端默认不显示图片（比如Gmail），所以要确保即使没有图片，主要内容也能被阅读。</p>
</blockquote>
<h2 id="八、开发的background"><a href="#八、开发的background" class="headerlink" title="八、开发的background"></a>八、开发的background</h2><ul>
<li>少用background 推荐尽可能使用切割的img</li>
<li>Gmail也不支持css里面的背景图</li>
<li><p>在outlook2007、Outlook2010中，背景图片将无法显示</p>
<p>  <img src="https://i.loli.net/2019/12/21/mviQVBXIrLYPlkn.jpg" alt="16ef7c5af85ceff2.jpg"></p>
</li>
</ul>
<blockquote>
<p>图片是唯一可以引用的外部资源。其他的外部资源，比如样式表文件、字体文件、视频文件等，一概不能引用。 有些客户端会给图片链接加上边框，要去除边框。 需要注意的是，不少客户端默认不显示图片（比如Gmail），所以要确保即使没有图片，主要内容也能被阅读。</p>
</blockquote>
<h2 id="九、email兼容总结"><a href="#九、email兼容总结" class="headerlink" title="九、email兼容总结"></a>九、email兼容总结</h2><ul>
<li>最好使用TABLE标签布局 ，通过tr td来控制距离 空白区域等</li>
<li>每个标签设置：margin:0;padding:0;font-size:0;（注意拆开写）</li>
<li>设置 width, height</li>
<li>少用img ,少用background</li>
<li>邮件不支持js，a标签慎用</li>
<li>在使用行高前建议添加mso-line-height-rule:exactly</li>
<li>margin:0; padding: 0;colspan=“1” height=“375” 顺序不可换</li>
</ul>
<blockquote>
<p>客户端：foxmail outlook QQ邮箱 为了应付Email的怪癖，花了很多时间测试，确保搞定了所有Outlook的坑洼沟洄 但是….还是不可避免有兼容问题 如果你只要兼容 Foxmail and qq邮箱，那你几乎可以像写web一样写邮件。 由于邮件客户端对css支持各有不同，所以一定要多测试再发送，保证样式的正确。如果出现了不兼容的情况，一定要耐心的使用最简单的方式进行兼容，尽量少用特殊标签及比较复杂的属性。</p>
</blockquote>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>转载</tag>
        <tag>email</tag>
      </tags>
  </entry>
  <entry>
    <title>用 Node.js 把玩一番 Alfred Workflow</title>
    <url>/posts/d2bbb3c7.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NpbmRyZXNvcmh1cy9hbGZ5" title="https://github.com/sindresorhus/alfy">sindresorhus/alfy<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81ZGNlNGMxMWYyNjVkYTBjMDIxMTFjZTk=" title="https://juejin.im/post/5dce4c11f265da0c02111ce9">Node.js库Puppeteer常用API及骚操作总结<i class="fa fa-external-link"></i></span></li>
</ul>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYWxmcmVkYXBwLmNvbS9oZWxwL3dvcmtmbG93cy9pbnB1dHMvc2NyaXB0LWZpbHRlci9qc29uLw==" title="https://www.alfredapp.com/help/workflows/inputs/script-filter/json/">Script Filter JSON Format<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTXVZdW55dW4vcC83MzIzMTI4Lmh0bWw=" title="https://www.cnblogs.com/MuYunyun/p/7323128.html">用 Node.js 把玩一番 Alfred Workflow<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zMzc0NDg1NC9hcnRpY2xlL2RldGFpbHMvODU5OTg4Njc=" title="https://blog.csdn.net/weixin_33744854/article/details/85998867">Node.js 开发 Alfred workflow 初体验<i class="fa fa-external-link"></i></span></li>
</ul>
<blockquote class="blockquote-center"><p>原文地址：<span class="exturl" data-url="aHR0cHM6Ly8xOTkxNDIxLmNuLzIwMTkvMDEvMTMvNDUyMjlkMjMv" title="https://1991421.cn/2019/01/13/45229d23/">写个Alfred Workflow，方便看电视剧<i class="fa fa-external-link"></i></span></p>
</blockquote>
<blockquote>
<p>Alfred鼎鼎大名，有人说，Mac自带Spotlight,不也一样吗？不一样，Alfred最厉害的是workflow，利用它你可以查询GitHub项目，查API文档，查单词，查IP等等。</p>
</blockquote>
<a id="more"></a>
<p>当然除了网上一些的workflow之外，我们往往也都有自己的个性化需求，这时就可以自己尝试写几个。我就有这样的需求，所以花了点时间，把玩了下，这里以一个电视剧检索插件为例，记录下编写中要点。</p>
<h1 id="初始化Workflow"><a href="#初始化Workflow" class="headerlink" title="初始化Workflow"></a>初始化Workflow</h1><p>打开Alfred设定，点击左下角的加号，选择blank Workflow</p>
<p>按照提示，填写名称，分类，描述等。</p>
<p><img src="https://i.loli.net/2019/12/21/ZwoEQYfJMP418Lv.png" alt="2019-01-13-035730.png"></p>
<h2 id="添加ScriptFilter"><a href="#添加ScriptFilter" class="headerlink" title="添加ScriptFilter"></a>添加ScriptFilter</h2><p>我这里因为需要利用脚本去实现，所以选择添加Script filter.<code>右键 =&gt; inputs =&gt; Script Filter</code><br>依次填写信息</p>
<p>这里的language可还算丰富，我考虑使用NodeJS来实现脚本，所以选择bash,利用bash去执行Node，这里填写脚本如下</p>
<pre><code>/usr/local/bin/node yy.js &quot;{query}&quot;
</code></pre><p>{query}指的是在alfred输入框中参数</p>
<p><img src="https://i.loli.net/2019/12/21/OSxbHlNZsrfRUw8.png" alt="2019-01-13-035809.png"></p>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ul>
<li>keyword指的是唤起Alfred，输入的关键词，比如这里我写yy，即输入yy，会进入该插件，参数上，我选择可空</li>
<li>placeholder指的是还没返回结果前的提示信息</li>
</ul>
<h2 id="具体脚本实现"><a href="#具体脚本实现" class="headerlink" title="具体脚本实现"></a>具体脚本实现</h2><p>上面的脚本确保了在用户唤起Alfred，输入yy及参数执行了yy脚本，那么下来就是脚本具体实现，从而返回结果给Alfred了</p>
<pre><code>const cheerio = require(&apos;cheerio&apos;);
const axios = require(&apos;axios&apos;);
const fs = require(&apos;fs&apos;);
const url = &apos;http://ly6080.com.cn&apos;
const keyword = process.argv[2];
console.error(keyword);

async function searchMovies() {
    const res = await axios.get(url + &apos;/index.php?m=vod-search&amp;wd=&apos; + encodeURI(keyword));
    const $ = cheerio.load(res.data);
    const arr = $(&apos;.index-area&apos;).find(&apos;li&apos;);
    const result_array = [];
    for (let i = 0; i &lt; arr.length; i++) {
        const item = arr.eq(i);
        const actors = [];
        item.find(&apos;.actor&apos;).each(function (i, elem) {
            actors.push($(this).text());
        });
        const imgUrl = item.find(&apos;img&apos;).attr(&apos;data-original&apos;);
        const imgName = imgUrl.slice(imgUrl.lastIndexOf(&apos;/&apos;) + 1);
        if (!fs.existsSync(&apos;./thumbs/&apos; + imgName)) {
            const imgData = (await axios.get(imgUrl, { responseType:&quot;arraybuffer&quot; })).data;
            fs.writeFileSync(&apos;./thumbs/&apos; + imgName,imgData);
        }
        result_array.push({
            title: item.find(&apos;.name&apos;).text(),
            subtitle: actors.join(&apos;/&apos;),
            arg: url + item.find(&apos;.link-hover&apos;).attr(&apos;href&apos;),
            icon: {
                path: __dirname + &apos;/thumbs/&apos; + imgName
            }
        })
    }
    console.log(JSON.stringify({ items: result_array }));
}
searchMovies();
</code></pre><h3 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h3><ul>
<li>Alfred对返回结果的结构是有要求的，所以最后console打印的对象结构是必须如此的，具体结构看<span class="exturl" data-url="aHR0cHM6Ly93d3cuYWxmcmVkYXBwLmNvbS9oZWxwL3dvcmtmbG93cy9pbnB1dHMvc2NyaXB0LWZpbHRlci9qc29uLw==" title="https://www.alfredapp.com/help/workflows/inputs/script-filter/json/">官方文档<i class="fa fa-external-link"></i></span></li>
<li>js脚本里的结果，是以log形式传给bash命令，也就是流入alfred，假如注掉最后一句话，会失效</li>
<li>我这里因为想实现电影海报的展示，所以实现了图片的本地缓存化，当然弊端就是延迟明显，为了降低延迟，所以做了点判断，如果有就不再下载。</li>
</ul>
<h2 id="添加action-打开URL"><a href="#添加action-打开URL" class="headerlink" title="添加action-打开URL"></a>添加action-打开URL</h2><p>当前面得到了检索的目标影片信息后，那么就应该是打开URL了，所以选中刚才的Script Filter，右键 =&gt; Insert After =&gt; Actions =&gt; Open URL,<code>query就是上一步结果中的arg</code></p>
<p><img src="https://i.loli.net/2019/12/21/a3gfzOcUuB4ylmV.png" alt="Untitled.png"></p>
<h2 id="添加通知"><a href="#添加通知" class="headerlink" title="添加通知"></a>添加通知</h2><p>为了进一步提升体验，来个通知，右键 =&gt; Insert After =&gt; Outputs =&gt; Post Notification</p>
<h2 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h2><p><img src="https://i.loli.net/2019/12/21/GoqukdJ6S3AfUie.png" alt="2019-01-13-041740.png"></p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>以前为了看电视剧，需要打开浏览器，输入网址，搜索电视，点击观看，总共有4部，现在只需要唤起Alfred，输入<code>yy 超人</code>，选择要看的电视，回车即可以观看。节约点时间，这就再开心不过了。</p>
<p>插件托管进<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsYW5oZy9hbGZyZWQtd29ya2Zsb3dz" title="https://github.com/alanhg/alfred-workflows">alfred-workflows<i class="fa fa-external-link"></i></span></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>效率</tag>
        <tag>Alfred</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim脱离鼠标</title>
    <url>/posts/31d58333.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><img src="https://i.loli.net/2019/11/15/CVtS9vWLOizafFn.jpg" alt></p>
<p>vim有三种模式，基本模式就是用来输入命令的，比如删除跳转等操作就是在基本模式下面；插入模式不用说；命令模式就是按<code>Esc+:</code>进入的模式，之间的切换很容易我就废话了。下面几乎都在基本模式操作。</p>
<a id="more"></a>
<h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><h2 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h2><p><code>h,l,j,k</code>    左右下上<br><code>w,b</code>    移动到下/上一个单词</p>
<p><img src="https://i.loli.net/2019/11/15/fOLKyCErQGSVZRH.gif" alt></p>
<h2 id="快速退出"><a href="#快速退出" class="headerlink" title="快速退出"></a>快速退出</h2><p>普通模式下输入<code>Shift+zz</code>即可保存退出vim</p>
<h2 id="进入插入模式"><a href="#进入插入模式" class="headerlink" title="进入插入模式"></a>进入插入模式</h2><p><code>i</code>    在当前光标处进行编辑<br><code>I</code>，<code>A</code>  在行首/末插入</p>
<p><img src="https://i.loli.net/2019/11/15/4lsb5qE2KzWBZMP.gif" alt></p>
<p><code>a</code> 在光标后插入编辑</p>
<p><code>o</code>，<code>O</code> 在当前行后/前插入一个新行<br><code>cw</code> 删除一个单词，同时进入插入模式</p>
<p><img src="https://i.loli.net/2019/11/15/UaNBcrA56Y8bzqF.gif" alt></p>
<h2 id="文档编辑"><a href="#文档编辑" class="headerlink" title="文档编辑"></a>文档编辑</h2><p>文档编辑的所有命令全部符合一个规律，[操作]+[行号]+定位，三个部分完成一个动作</p>
<p>比如：删除操作代码为<code>d</code>，重复操作代码代表操作当前行，则删除2行就是<code>d2d</code>；</p>
<p>操作和行号也可以互换位置 <code>2dd</code>，可以省略行号<code>dd</code>代表删除一行，多数时候可以不要操作则代表定位 <code>5G</code>代表移动到第五行。</p>
<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p><code>x</code>    反退格键（delete键） <code>X</code>   退格键</p>
<p><img src="https://i.loli.net/2019/11/15/mCqoQVJUlHMzcdi.gif" alt></p>
<p><code>dw</code> 删除一个单词（不适用中文）类似于上一节说的<code>cw</code>，只是删除后还在普通模式  </p>
<p><code>d$</code> 删除至行尾,<code>d^</code> 删除至行首</p>
<p><img src="https://i.loli.net/2019/11/15/V4TzGpsSoAqRHiF.gif" alt></p>
<p><code>dG</code> 删除到文档结尾处 <code>d1G</code> 删至文档首部</p>
<p>小结：<br>前缀（操作） ：<code>d</code>代表删除<br>中缀：行号<br>后缀（定位）：<code>d</code>代表行，<code>G</code>代表尽头, <code>$</code>代表行尾，<code>^</code>代表行首，<code>w</code>代表单词</p>
<h2 id="重复命令"><a href="#重复命令" class="headerlink" title="重复命令"></a>重复命令</h2><p>普通模式下输入dd，删除一行，输入.(小数点)会再次删除一行，除此之外也可以重复其他任意操作</p>
<p><img src="https://i.loli.net/2019/11/15/gF6xUJG7MSQEmuN.gif" alt></p>
<p>使用dw删除一个单词，然后用.命令重复删除单词操作</p>
<p><img src="https://i.loli.net/2019/11/15/DOe1irJRLvFEbXf.gif" alt></p>
<h2 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h2><p>游标跳转位置，不过是没有去掉操作后输入的命令。<br><code>nG</code>(n Shift+g)    游标移动到第 n 行(如果默认没有显示行号，请先进入命令模式，输入:set nu以显示行号)<br>gg    游标移动到到第一行<br>G(Shift+g)    到最后一行</p>
<p><img src="https://i.loli.net/2019/11/15/EKgsbIYjvq5p2DS.gif" alt></p>
<p><code>G</code>代表尽头, <code>$</code>代表行尾，<code>^</code>代表行首，<code>w</code>代表下一个单词，<code>b</code>上一个单词，<code>e</code>当前单词末尾</p>
<p><img src="https://i.loli.net/2019/11/15/DyXZ6VoUai1HwLe.gif" alt></p>
<p><code>f+字母</code> 向后搜索 <code>字母</code>并跳转到第一个匹配的位置<br><code>F+字母</code> 向前搜索<code>字母</code>并跳转到第一个匹配的位置</p>
<p><img src="https://i.loli.net/2019/11/15/Xft1rcjQHNPoesM.gif" alt></p>
<h2 id="复制与粘贴"><a href="#复制与粘贴" class="headerlink" title="复制与粘贴"></a>复制与粘贴</h2><p>复制为<code>y</code>，后可以接定位符，<br><code>yy</code>复制游标所在的整行（3yy表示复制3行）<br><code>y^</code>复制至行首，或<code>y0</code>。不含光标所在处字符。<code>y$</code> 复制至行尾。含光标所在处字符。</p>
<p><img src="https://i.loli.net/2019/12/09/UC3thYuZNXlx4vT.gif" alt="UC3thYuZNXlx4vT.gif"></p>
<p><code>yw</code> 复制一个单词。<br><code>y2w</code> 复制两个单词。<br><code>yG</code> 复制至文本末。<br><code>y1G</code> 复制至文本开头</p>
<p><img src="https://i.loli.net/2019/12/09/nlHL93PTpV2Ge7c.gif" alt="nlHL93PTpV2Ge7c.gif"></p>
<p>使用 <code>p</code> 粘贴<br>p(小写)代表粘贴至光标后（下）<br>P(大写)代表粘贴至光标前（上）</p>
<h2 id="剪切"><a href="#剪切" class="headerlink" title="剪切"></a>剪切</h2><p>我们上面在删除那学到的<code>d</code>操作，其实就是剪切，我们使用<code>ddp</code>就可以交换上下行。</p>
<p><img src="https://i.loli.net/2019/12/09/12OS3CovRXLDciQ.gif" alt="12OS3CovRXLDciQ.gif"></p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>到这里是不是文档操作可以直接脱离鼠标了！<br>移动：<code>h,l,j,k,w,b</code><br>跳转：<code>G</code> <code>nG</code> <code>f/F+字母</code><br>定位：<code>G</code>代表尽头, <code>$</code>代表行尾，<code>^</code>代表行首，<code>w</code>代表下一个单词，<code>b</code>上一个单词，<code>e</code>当前单词末尾<br>操作：<code>y</code> <code>d</code> <code>p</code></p>
<h1 id="进阶操作-替换、撤销、缩进、查找"><a href="#进阶操作-替换、撤销、缩进、查找" class="headerlink" title="进阶操作 - 替换、撤销、缩进、查找"></a>进阶操作 - 替换、撤销、缩进、查找</h1><h2 id="替换和撤销-Undo"><a href="#替换和撤销-Undo" class="headerlink" title="替换和撤销(Undo)"></a>替换和撤销(Undo)</h2><p>替换和Undo命令都是针对普通模式下的操作,这次用到三个字母，<code>r/R</code>,<code>c/C</code>,<code>u/U</code></p>
<p><code>r+&lt;待替换字母&gt;</code> 将游标所在的一个字母替换为其他字母（如下#替换成i）<br><img src="https://i.loli.net/2019/11/15/UgKapqSFrlzuPQ5.gif" alt></p>
<p>当然了，一个一个替换甚是麻烦，不妨使用R连续替换</p>
<p><code>R</code> 连续替换，直到按下<code>Esc</code><br><img src="https://i.loli.net/2019/11/15/laULmjD9MpyeTr2.gif" alt></p>
<p><code>cw</code> 删除一个单词，并进入插入模式</p>
<p><img src="https://i.loli.net/2019/12/09/7NyZmzUu6IhFcAp.gif" alt="7NyZmzUu6IhFcAp.gif"></p>
<p><code>C</code> 删除从游标处开始到当前行尾，并进入插入模式</p>
<p><img src="https://i.loli.net/2019/11/15/BS6yRVDfI2nu7JY.gif" alt></p>
<p><code>u</code> 撤销一次操作（如下，粘贴了Internet单词三次，按u三次，撤销粘贴操作）</p>
<p><img src="https://i.loli.net/2019/11/15/xDhSZ7lrdUXBmPq.gif" alt></p>
<p><code>U</code>(大写) 无论当前行修改了多少次，撤销当前行的所有修改</p>
<p><img src="https://i.loli.net/2019/11/15/O6xgifFTqDJnbep.gif" alt></p>
<p><code>Ctrl+r</code> redo，即撤销undo的操作（如下，删除一个单词，写入123，之后交替u和Ctrl+r，可以观察到重复撤销123输入，再恢复123输入）</p>
<p><img src="https://i.loli.net/2019/11/15/aGld3tHJP4bKr9x.gif" alt></p>
<p>快速缩进在编辑代码时极其有用，快速调整代码缩进非常的爽，缩进操作均在普通模式下有效</p>
<h2 id="使用命令进行快速调整缩进操作"><a href="#使用命令进行快速调整缩进操作" class="headerlink" title="使用命令进行快速调整缩进操作"></a>使用命令进行快速调整缩进操作</h2><p><code>&gt;&gt;</code> 整行将向右缩进</p>
<p><img src="https://i.loli.net/2019/11/15/6Vif12MBTbC9xPF.gif" alt></p>
<p><code>&lt;&lt;</code> 整行向左回退</p>
<p><img src="https://i.loli.net/2019/11/15/rnqf9uLl1hMcD6g.gif" alt></p>
<h2 id="设置缩进字符数"><a href="#设置缩进字符数" class="headerlink" title="设置缩进字符数"></a>设置缩进字符数</h2><p>命令行模式下对<code>shiftwidth</code>值进行设置可以控制缩进和回退的字符数 （可以简写成<code>sw</code>,下面我都用简写）</p>
<p>获取目前的设定值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:set shiftwidth?</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2019/11/15/UtDiNBlZQMCWPxj.gif" alt></p>
<p>设置缩进为n个字符</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:set shiftwidth=n</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2019/12/09/h7VaCBOTjYkZcif.gif" alt="h7VaCBOTjYkZcif.gif"></p>
<p>输入 ESC 回到普通模式，再次尝试 &gt;&gt; 看缩进量是否变化</p>
<p><img src="https://i.loli.net/2019/12/09/utXGNIy8EKTDcjw.gif" alt="utXGNIy8EKTDcjw.gif"></p>
<h2 id="调整文本位置"><a href="#调整文本位置" class="headerlink" title="调整文本位置"></a>调整文本位置</h2><p>命令行模式下输入<code>:le</code>(left)命令使本行内容靠左</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:le</span><br></pre></td></tr></table></figure>
<p>命令行模式下输入<code>:ce</code>(center)命令使本行内容居中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:ce</span><br></pre></td></tr></table></figure>
<p>命令行模式下输入<code>:ri</code>(right)命令使本行文本靠右</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:ri</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2019/12/09/7tCSxlNwQPzk5Yr.gif" alt="7tCSxlNwQPzk5Yr.gif"></p>
<h2 id="快速查找"><a href="#快速查找" class="headerlink" title="快速查找"></a>快速查找</h2><p>普通模式下输入 <code>/</code> 然后键入需要查找的字符串 按回车后就会进行查找。输入<code>n</code> 和 <code>N</code> 可以继续查找。 <code>n</code>是查找下一个内容,<code>N</code>查找上一个内容。</p>
<p><img src="https://i.loli.net/2019/12/09/1WErUvN7jQGBVhH.gif" alt="1WErUvN7jQGBVhH.gif"></p>
<p><code>?</code> 与<code>/</code> 功能相同，只不过<code>?</code>是向上而 <code>/</code> 是向下查找。 <code>:noh</code>退出查找模式</p>
<p><img src="https://i.loli.net/2019/12/09/8MwDn53QUFLNWJf.gif" alt="8MwDn53QUFLNWJf.gif"></p>
<h2 id="高级查找"><a href="#高级查找" class="headerlink" title="高级查找"></a>高级查找</h2><p>普通模式下输入<code>\*</code>寻找游标所在处的单词<br>普通模式下输入<code>\#</code>同上，但 <code>\#</code>是向前（上）找，<code>\*</code>则是向后（下）找</p>
<p><img src="https://i.loli.net/2019/12/09/J9PpXDZfBbd4gWO.gif" alt="J9PpXDZfBbd4gWO.gif"></p>
<p>以上查找<code>n</code>,<code>N</code> 的继续查找命令依然可以用</p>
<h2 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h2><p>速记如下：</p>
<p>替换：<code>r+&lt;待替换字母&gt;</code>,<code>R</code></p>
<p>删除并插入：<code>cw</code>、<code>C</code></p>
<p>撤销：<code>u</code>、<code>U</code>、<code>ctrl+r</code></p>
<p>调整文本位置：<code>:le</code>、<code>:ce</code>、<code>:ri</code></p>
<p>查找：<code>\文本</code>、<code>?文本</code>、<code>n</code>、<code>N</code></p>
<h1 id="高级操作"><a href="#高级操作" class="headerlink" title="高级操作"></a>高级操作</h1><ul>
<li><p>同时修改多个文件、快速在文件之间切换</p>
</li>
<li><p>编辑多个文档时分屏操作</p>
</li>
<li><p>批量注释多行代码、修改配置、区域复制删除</p>
</li>
</ul>
<h2 id="多文件的编辑"><a href="#多文件的编辑" class="headerlink" title="多文件的编辑"></a>多文件的编辑</h2><p>同时编辑两个文件<code>1.txt</code>,<code>2.txt</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim 1.txt 2.txt</span><br></pre></td></tr></table></figure>
<p>查看同时打开了哪些文件 <code>:ls</code>,其中<code>%a</code>表示正在编辑的文件。</p>
<p><img src="https://i.loli.net/2019/12/09/nTudgJYMmS9LyvC.gif" alt="nTudgJYMmS9LyvC.gif"></p>
<p>在文件之间切换 <code>:n</code> , <code>:N</code></p>
<p><img src="https://i.loli.net/2019/12/09/Qh6WtqsBfNJ1nyF.gif" alt="Qh6WtqsBfNJ1nyF.gif"></p>
<p>直接切换到想要编辑的文件 <code>:b 1.txt</code></p>
<p><img src="https://i.loli.net/2019/12/09/OmVtgNLZbAyiTh7.gif" alt="OmVtgNLZbAyiTh7.gif"></p>
<p>当然了我们为什么跳来跳去，因为这可以完成多个文件之间复制粘贴等组合操作。</p>
<h2 id="分屏"><a href="#分屏" class="headerlink" title="分屏"></a>分屏</h2><h3 id="创建分屏"><a href="#创建分屏" class="headerlink" title="创建分屏"></a>创建分屏</h3><p><code>:sp 2.txt</code> 打开新的水平分屏(上下)视窗来编辑<code>2.txt</code></p>
<p><code>:vsp 2.txt</code>打开新的垂直分屏(左右)视窗来编辑<code>2.txt</code></p>
<p><img src="https://i.loli.net/2019/12/09/HukPtK46N15faSW.gif" alt="HukPtK46N15faSW.gif"></p>
<h3 id="分屏跳转与移动分屏"><a href="#分屏跳转与移动分屏" class="headerlink" title="分屏跳转与移动分屏"></a>分屏跳转与移动分屏</h3><p>我先打开了三个文件，<code>1.txt</code> <code>2.txt</code> <code>3.txt</code></p>
<p><img src="https://i.loli.net/2019/12/09/nmwBRMUeVlszdFD.png" alt="nmwBRMUeVlszdFD.png"></p>
<p>现在我分别跳转到各个文件中，删除文件内容。</p>
<p>普通模式下<code>Ctrl+w j</code>移至下面视窗</p>
<p>普通模式下<code>Ctrl+w k</code> 移至上面视窗</p>
<p>普通模式下<code>Ctrl+w h</code> 移至左边视窗</p>
<p>普通模式下<code>Ctrl+w l</code> 移至右边视窗</p>
<p><img src="https://i.loli.net/2019/12/09/zfnJ9dM6eUxubE1.gif" alt="zfnJ9dM6eUxubE1.gif"></p>
<p>现在我垂直打开了三个文件，使用以下命令移动视窗,先把<code>文件3</code>从最左边移动到最右边，再移动下最下边</p>
<p>普通模式下<code>Ctrl+w J</code>将当前视窗移至下面</p>
<p>普通模式下<code>Ctrl+w K</code> 将当前视窗移至上面</p>
<p>普通模式下<code>Ctrl+w H</code> 将当前视窗移至左边</p>
<p>普通模式下<code>Ctrl+w L</code> 将当前视窗移至右边</p>
<p><img src="https://i.loli.net/2019/12/09/1vR7TrWJusl9GF4.gif" alt="1vR7TrWJusl9GF4.gif"></p>
<p>只要位于相应视窗，<code>:q</code> <code>:wq</code> <code>q!</code>退出就可以；<code>wqa</code>或<code>qa!</code>全部退出</p>
<h2 id="可视模式"><a href="#可视模式" class="headerlink" title="可视模式"></a>可视模式</h2><p>可视模式分为三种，也是<code>vim</code>的精髓。分别是行，矩形区域选择，字符段落选择。</p>
<p>和鼠标选择类似，进入可视模式加定位符号就可以快速跳转到想选择的范围，选中以后再进行复制，删除等操作。</p>
<h3 id="行选择"><a href="#行选择" class="headerlink" title="行选择"></a>行选择</h3><p>行选择 <code>Shift+v（小写）</code> , 整行选取，可以上下移动光标选更多的行，再按一次 <code>Shift+v</code> 就可以取消选取。</p>
<p>如下，进入行选择模式，输入<code>4G</code>，跳转到第四行，<code>d</code>删除所选区域。</p>
<p><img src="https://i.loli.net/2019/12/09/JCze4gixO1mIBTs.gif" alt="JCze4gixO1mIBTs.gif"></p>
<h3 id="矩形区域选择"><a href="#矩形区域选择" class="headerlink" title="矩形区域选择"></a>矩形区域选择</h3><p>矩形区域选择<code>Ctrl+v（小写）</code>，按区域选取，可以上下左右移动光标选更多的区域，再按一次 <code>Ctrl+v</code>就可以取消选取。</p>
<p>如下:选择所有的行和第一列所在在区域，<code>shift+i</code>进入插入模式，插入<code>#</code>，双击两次<code>esc</code>，批量注释。然后重复选择动作，输入<code>x</code>删除所选区域。</p>
<p><img src="https://i.loli.net/2019/12/09/CAwQzyofjVR4J8I.gif" alt="CAwQzyofjVR4J8I.gif"></p>
<h3 id="字符选择-段落选择"><a href="#字符选择-段落选择" class="headerlink" title="字符选择(段落选择)"></a>字符选择(段落选择)</h3><p>字符选择 <code>v（小写）</code>，可以移动光标，光标走过的地方就会选取。再次按下<code>v</code>后就会取消选取。</p>
<p>如下：<code>v$</code>选中<code>192.168.1.2</code>退一格为了不选中换行符，到第一行粘贴<code>ip</code>再选中不需要的ip删除掉。</p>
<p><img src="https://i.loli.net/2019/12/09/QNphLTf9uyErmzc.gif" alt="QNphLTf9uyErmzc.gif"></p>
<p>可视化模式和定位符结合使用效果最佳！</p>
<h2 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h2><p>同时编辑多个文件： <code>vim 1.txt 2.txt</code>, 切换文件 <code>:n</code> 、<code>:N</code>、<code>:b 1.txt</code></p>
<p>分屏 <code>:sp 2.txt</code> <code>:vsp 2.txt</code>，跳转<code>Ctrl+w h|j|k|l</code> 移动分屏位</p>
<p>置<code>Ctrl+w H|J|K|L</code></p>
<p>可视模式 <code>Shift+v</code>、<code>Ctrl+v</code>、<code>v</code></p>
<p><code>vim</code>命令比较多，这里只列举最有用的，足以应对全部的场景了，记的越多速度越快！</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvZmpfV3FBeXV3NWxpT0hjOTFEeDNOUQ==" title="https://mp.weixin.qq.com/s/fj_WqAyuw5liOHc91Dx3NQ">Vim高手，从来不用鼠标<i class="fa fa-external-link"></i></span>  </p>
<p><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvSTI1N1ZJeldpc3VIMHRCTEhTNXRRQQ==" title="https://mp.weixin.qq.com/s/I257VIzWisuH0tBLHS5tQA">Vim高手，从来不用鼠标2——替换、撤销、缩进、查找<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvLWJCZ3hway1hMEs1Z2s4ejh3b1NDZw==" title="https://mp.weixin.qq.com/s/-bBgxpk-a0K5gk8z8woSCg">Vim 高级操作一看就会<i class="fa fa-external-link"></i></span></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>工具</tag>
        <tag>开发</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>WebP 可用性探测</title>
    <url>/posts/1f6ad7f6.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vc3BlZWQvd2VicA==" title="https://developers.google.com/speed/webp">webp<i class="fa fa-external-link"></i></span> 是目前 Web 比较流行的解决方案，相对于 Jpeg/png, 基于 VP8 的压缩，有着非常不错的压缩率。</p>
<blockquote>
<p>WebP lossless images are 26% smaller in size compared to PNGs. WebP lossy images are 25-34% smaller than comparable JPEG images at equivalent SSIM quality index</p>
</blockquote>
<p>比较基础的方法，还是检测 UA 白名单来说，毕竟这些版本都是很早就支持。</p>
<p><img src="http://img1.vued.vanthink.cn/webp.png" alt></p>
<a id="more"></a>
<p>这个方法可控性大，而且能够支持 SSR 渲染，在服务端做 UA 判断然后输出对应的图片格式。</p>
<p>当然，常规的另外一种解决方式是，就是远程加载一张 webp 图片观测是否报错</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkWebPSupport</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">	img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; resolve(); &#125;;</span><br><span class="line">    img.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; reject(); &#125;;</span><br><span class="line">    img.src = <span class="string">'http://www.gstatic.com/webp/gallery/1.webp'</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>网络上有一款比较创新的检测方法，利用 canvas 输出图像的方式。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">canUseWebP</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> elem = <span class="built_in">document</span>.createElement(<span class="string">'canvas'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!!(elem.getContext &amp;&amp; elem.getContext(<span class="string">'2d'</span>))) &#123;</span><br><span class="line">        <span class="keyword">return</span> elem.toDataURL(<span class="string">'image/webp'</span>).indexOf(<span class="string">'data:image/webp'</span>) == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="CSS-中嵌入的-背景图"><a href="#CSS-中嵌入的-背景图" class="headerlink" title="CSS 中嵌入的 背景图"></a>CSS 中嵌入的 背景图</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.no-webp</span> <span class="selector-class">.elementWithBackgroundImage</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"image.jpg"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.webp</span> <span class="selector-class">.elementWithBackgroundImage</span>&#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"image.webp"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果用到 背景图的话，我们可以通过跟元素的 class 来进行图片格式的选择</p>
<h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNTU3MzA5Ni9kZXRlY3Rpbmctd2VicC1zdXBwb3J0" title="https://stackoverflow.com/questions/5573096/detecting-webp-support">https://stackoverflow.com/questions/5573096/detecting-webp-support<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS91c2luZy13ZWJwLWltYWdlcy8=" title="https://css-tricks.com/using-webp-images/">Using WebP Images<i class="fa fa-external-link"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>多媒体</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>前端</tag>
        <tag>转载</tag>
        <tag>多媒体</tag>
        <tag>webp</tag>
        <tag>图片</tag>
      </tags>
  </entry>
  <entry>
    <title>Safari和Chrome浏览器真机调试iphone中h5页面</title>
    <url>/posts/6c7d587e.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>现在的前端研发大都采用Mac设备，而移动端app大多沿用混合开发的方式，从而产生了很多原生页面和H5之间的交互问题。经过上次Mac调试安卓app中的H5的经历之后，今天尝试了在mac中调试ios系统的原生浏览器中的页面</p>
<a id="more"></a>
<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><ul>
<li>mac一台</li>
<li>iPhone手机一部</li>
</ul>
<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="iPhone设置"><a href="#iPhone设置" class="headerlink" title="iPhone设置"></a>iPhone设置</h2><p>打开设置–&gt;Safari浏览器–&gt;高级–&gt;开启JavaScript和web检查器</p>
<p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8c1djasx4j30zq0leq9g.jpg" alt></p>
<p>iPhone端的操作全部操作完成</p>
<h2 id="Chrome-浏览器"><a href="#Chrome-浏览器" class="headerlink" title="Chrome 浏览器"></a>Chrome 浏览器</h2><p>没有安装HomeBrew的小伙伴，先安装HomeBrew，不了解HomeBrew的同学可以在 <span class="exturl" data-url="aHR0cHM6Ly93d3cuY2FuaXVzZS5jb20v" title="https://www.caniuse.com/">这里<i class="fa fa-external-link"></i></span> 查看</p>
<ul>
<li><p>安装完成后,依次执行下面代码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew unlink libimobiledevice ios-webkit-debug-proxy usbmuxd</span><br><span class="line">brew uninstall --force libimobiledevice ios-webkit-debug-proxy usbmuxd</span><br><span class="line">brew install --HEAD usbmuxd</span><br><span class="line">brew install --HEAD libimobiledevice</span><br><span class="line">brew install --HEAD ios-webkit-debug-proxy</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装最新版本的adapter</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install remotedebug-ios-webkit-adapter -g</span><br></pre></td></tr></table></figure>
<p>到这一步，mac端的操作就已经完成了，</p>
</li>
<li><p>然后再看iphone的设置</p>
<p>mac上打开终端，执行命令，开启adapter，设置监听端口为9000</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">remotedebug_ios_webkit_adapter --port=9000</span><br></pre></td></tr></table></figure>
<p>  Chrome中打开<code>chrome://inspect/#devices</code>，在configure中添加localhost:9000,可以看到设备出现在列表中。iphone的Safari中的页面，就可以在这里看到，点击inspect，就可以和PC端一样，进行调试啦</p>
<p>  <img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8c1i4pnu6j30qs09k3zd.jpg" alt></p>
</li>
</ul>
<h2 id="Safari浏览器"><a href="#Safari浏览器" class="headerlink" title="Safari浏览器"></a>Safari浏览器</h2><p>Safari浏览器中相对就比较简单啦，iphone端的操作完全一样，打开Safari浏览器，选中系统偏好设置–&gt;高级,勾选在菜单中打开“开发”菜单</p>
<p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8c1j1in1qj314o0pe78k.jpg" alt></p>
<p>连接手机，打开Safari浏览器，选择开发，选中设备，可看到移动端Safari浏览器中打开的网址，点击，就能打开Safari浏览器的开发者工具了。如图所示：<img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8c1jmg4g8j30rm0dj786.jpg" alt></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>工具</tag>
        <tag>调试</tag>
      </tags>
  </entry>
  <entry>
    <title>在浏览器输入URL回车之后发生了什么</title>
    <url>/posts/656a0abb.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote class="blockquote-center"><p>本文作者：4Ark<br>本文链接： <span class="exturl" data-url="aHR0cHM6Ly80YXJrLm1lL3Bvc3QvYjZjN2MwYTIuaHRtbA==" title="https://4ark.me/post/b6c7c0a2.html">https://4ark.me/post/b6c7c0a2.html<i class="fa fa-external-link"></i></span></p>
</blockquote>
<p>这个问题已经是老生常谈了，更是经常被作为面试的压轴题出现，网上也有很多文章，但最近闲的无聊，然后就自己做了一篇笔记，感觉比之前理解更透彻了。</p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这个问题已经是老生常谈了，更是经常被作为面试的压轴题出现，网上也有很多文章，但最近闲的无聊，然后就自己做了一篇笔记，感觉比之前理解更透彻了。</p>
<p>这篇笔记是我这两天看了数十篇文章总结出来的，所以相对全面一点，但由于我是做前端的，所以会比较重点分析浏览器渲染页面那一部分，至于其他部分我会罗列出关键词，感兴趣的可以自行查阅，</p>
<p><strong>注意：</strong>本文的步骤是建立在，请求的是一个简单的 HTTP 请求，没有 HTTPS、HTTP2、最简单的 DNS、没有代理、并且服务器没有任何问题的基础上，尽管这是不切实际的。</p>
<h1 id="大致流程"><a href="#大致流程" class="headerlink" title="大致流程"></a>大致流程</h1><ol>
<li>URL 解析</li>
<li>DNS 查询</li>
<li>TCP 连接</li>
<li>处理请求</li>
<li>接受响应</li>
<li>渲染页面</li>
</ol>
<a id="more"></a>
<h1 id="一、URL-解析"><a href="#一、URL-解析" class="headerlink" title="一、URL 解析"></a>一、URL 解析</h1><p><strong>地址解析：</strong></p>
<p>首先判断你输入的是一个合法的 URL 还是一个待搜索的关键词，并且根据你输入的内容进行自动完成、字符编码等操作。</p>
<p><strong>HSTS</strong></p>
<p>由于安全隐患，会使用 HSTS 强制客户端使用 HTTPS 访问页面。详见：<span class="exturl" data-url="aHR0cHM6Ly93d3cuYmFycmV0bGVlLmNvbS9ibG9nLzIwMTUvMTAvMjIvaHN0cy1pbnRyby8=" title="https://www.barretlee.com/blog/2015/10/22/hsts-intro/">你所不知道的 HSTS<i class="fa fa-external-link"></i></span>。</p>
<p><strong>其他操作</strong></p>
<p>浏览器还会进行一些额外的操作，比如安全检查、访问限制（之前国产浏览器限制 996.icu）。</p>
<p><strong>检查缓存</strong></p>
<p><img src="https://gd4ark-1258805822.cos.ap-guangzhou.myqcloud.com/images/20190822181538.png" alt></p>
<h1 id="二、DNS-查询"><a href="#二、DNS-查询" class="headerlink" title="二、DNS 查询"></a>二、DNS 查询</h1><p><strong>基本步骤</strong></p>
<p><img src="https://gd4ark-1258805822.cos.ap-guangzhou.myqcloud.com/images/20190822181732.png" alt></p>
<p><strong>1. 浏览器缓存</strong></p>
<p>浏览器会先检查是否在缓存中，没有则调用系统库函数进行查询。</p>
<p><strong>2. 操作系统缓存</strong></p>
<p>操作系统也有自己的 DNS 缓存，但在这之前，会向检查域名是否存在本地的 Hosts 文件里，没有则向 DNS 服务器发送查询请求。</p>
<p><strong>3. 路由器缓存</strong></p>
<p>路由器也有自己的缓存。</p>
<p><strong>4. ISP DNS 缓存</strong></p>
<p>ISP DNS 就是在客户端电脑上设置的首选 DNS 服务器，它们在大多数情况下都会有缓存。</p>
<p><strong>5.根域名服务器查询</strong></p>
<p>在前面所有步骤没有缓存的情况下，本地 DNS 服务器会将请求转发到互联网上的根域，下面这个图很好的诠释了整个流程：</p>
<p><img src="https://gd4ark-1258805822.cos.ap-guangzhou.myqcloud.com/images/1604181361-5a1397cca5644_articlex.png" alt></p>
<blockquote>
<p>根域名服务器：<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU2JUEwJUI5JUU3JUI2JUIyJUU1JTlGJTlGJUU1JTkwJThEJUU3JUE4JUIxJUU0JUJDJUJBJUU2JTlDJThEJUU1JTk5JUE4" title="https://zh.wikipedia.org/wiki/%E6%A0%B9%E7%B6%B2%E5%9F%9F%E5%90%8D%E7%A8%B1%E4%BC%BA%E6%9C%8D%E5%99%A8">维基百科<i class="fa fa-external-link"></i></span></p>
</blockquote>
<p><strong>需要注意的点</strong></p>
<ol>
<li>递归方式：一路查下去中间不返回，得到最终结果才返回信息（浏览器到本地 DNS 服务器的过程）</li>
<li>迭代方式，就是本地 DNS 服务器到根域名服务器查询的方式。</li>
<li>什么是 DNS 劫持</li>
<li>前端 dns-prefetch 优化</li>
</ol>
<h1 id="三、TCP-连接"><a href="#三、TCP-连接" class="headerlink" title="三、TCP 连接"></a>三、TCP 连接</h1><p>TCP/IP 分为四层，在发送数据时，每层都要对数据进行封装：</p>
<p><img src="https://gd4ark-1258805822.cos.ap-guangzhou.myqcloud.com/images/20190822182400.png" alt></p>
<h3 id="1-应用层：发送-HTTP-请求"><a href="#1-应用层：发送-HTTP-请求" class="headerlink" title="1. 应用层：发送 HTTP 请求"></a>1. 应用层：发送 HTTP 请求</h3><p>在前面的步骤我们已经得到服务器的 IP 地址，浏览器会开始构造一个 HTTP 报文，其中包括：</p>
<ul>
<li>请求报头（Request Header）：请求方法、目标地址、遵循的协议等等</li>
<li>请求主体（其他参数）</li>
</ul>
<p>其中需要注意的点：</p>
<ul>
<li>浏览器只能发送 GET、POST 方法，而打开网页使用的是 GET 方法</li>
</ul>
<h3 id="2-传输层：TCP-传输报文"><a href="#2-传输层：TCP-传输报文" class="headerlink" title="2. 传输层：TCP 传输报文"></a>2. 传输层：TCP 传输报文</h3><p>传输层会发起一条到达服务器的 TCP 连接，为了方便传输，会对数据进行分割（以报文段为单位），并标记编号，方便服务器接受时能够准确地还原报文信息。</p>
<p>在建立连接前，会先进行 TCP 三次握手。</p>
<blockquote>
<p>关于 TCP/IP 三次握手，网上已经有很多段子和图片生动地描述了。</p>
<p>相关知识点：</p>
<ol>
<li>SYN 泛洪攻击</li>
</ol>
</blockquote>
<h3 id="3-网络层：IP-协议查询-Mac-地址"><a href="#3-网络层：IP-协议查询-Mac-地址" class="headerlink" title="3. 网络层：IP 协议查询 Mac 地址"></a>3. 网络层：IP 协议查询 Mac 地址</h3><p>将数据段打包，并加入源及目标的 IP 地址，并且负责寻找传输路线。</p>
<p>判断目标地址是否与当前地址处于同一网络中，是的话直接根据 Mac 地址发送，否则使用路由表查找下一跳地址，以及使用 ARP 协议查询它的 Mac 地址。</p>
<blockquote>
<p>注意：在 OSI 参考模型中 ARP 协议位于链路层，但在 TCP/IP 中，它位于网络层。</p>
</blockquote>
<h3 id="4-链路层：以太网协议"><a href="#4-链路层：以太网协议" class="headerlink" title="4. 链路层：以太网协议"></a>4. 链路层：以太网协议</h3><p><strong>以太网协议</strong></p>
<p>根据以太网协议将数据分为以“帧”为单位的数据包，每一帧分为两个部分：</p>
<ul>
<li>标头：数据包的发送者、接受者、数据类型</li>
<li>数据：数据包具体内容</li>
</ul>
<p><strong>Mac 地址</strong></p>
<p>以太网规定了连入网络的所有设备都必须具备“网卡”接口，数据包都是从一块网卡传递到另一块网卡，网卡的地址就是 Mac 地址。每一个 Mac 地址都是独一无二的，具备了一对一的能力。</p>
<p><strong>广播</strong></p>
<p>发送数据的方法很原始，直接把数据通过 ARP 协议，向本网络的所有机器发送，接收方根据标头信息与自身 Mac 地址比较，一致就接受，否则丢弃。</p>
<p><strong>注意</strong>：接收方回应是单播。</p>
<blockquote>
<p>相关知识点：</p>
<ol>
<li>ARP 攻击</li>
</ol>
</blockquote>
<h3 id="服务器接受请求"><a href="#服务器接受请求" class="headerlink" title="服务器接受请求"></a><strong>服务器接受请求</strong></h3><p>接受过程就是把以上步骤逆转过来，参见上图。</p>
<h1 id="四、服务器处理请求"><a href="#四、服务器处理请求" class="headerlink" title="四、服务器处理请求"></a>四、服务器处理请求</h1><p><strong>大致流程</strong></p>
<p><img src="https://gd4ark-1258805822.cos.ap-guangzhou.myqcloud.com/images/20190822183251.png" alt></p>
<p><strong>HTTPD</strong></p>
<p>最常见的 HTTPD 有 Linux 上常用的 Apache 和 Nginx，以及 Windows 上的 IIS。</p>
<p>它会监听得到的请求，然后开启一个子进程去处理这个请求。</p>
<p><strong>处理请求</strong></p>
<p>接受 TCP 报文后，会对连接进行处理，对 HTTP 协议进行解析（请求方法、域名、路径等），并且进行一些验证：</p>
<ul>
<li>验证是否配置虚拟主机</li>
<li>验证虚拟主机是否接受此方法</li>
<li>验证该用户可以使用该方法（根据 IP 地址、身份信息等）</li>
</ul>
<p><strong>重定向</strong></p>
<p>假如服务器配置了 HTTP 重定向，就会返回一个 <code>301</code>永久重定向响应，浏览器就会根据响应，重新发送 HTTP 请求（重新执行上面的过程）。</p>
<blockquote>
<p>关于更多：<span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vd29ya2VzdC9wLzM4OTEzMjEuaHRtbA==" title="https://www.cnblogs.com/workest/p/3891321.html">详见这篇文章<i class="fa fa-external-link"></i></span></p>
</blockquote>
<p><strong>URL 重写</strong></p>
<p>然后会查看 URL 重写规则，如果请求的文件是真实存在的，比如图片、html、css、js 文件等，则会直接把这个文件返回。</p>
<p>否则服务器会按照规则把请求重写到 一个 REST 风格的 URL 上。</p>
<p>然后根据动态语言的脚本，来决定调用什么类型的动态文件解释器来处理这个请求。</p>
<p>以 PHP 语言的 MVC 框架举例，它首先会初始化一些环境的参数，根据 URL 由上到下地去匹配路由，然后让路由所定义的方法去处理请求。</p>
<h1 id="五、浏览器接受响应"><a href="#五、浏览器接受响应" class="headerlink" title="五、浏览器接受响应"></a>五、浏览器接受响应</h1><p>浏览器接收到来自服务器的响应资源后，会对资源进行分析。</p>
<p>首先查看 Response header，根据不同状态码做不同的事（比如上面提到的重定向）。</p>
<p>如果响应资源进行了压缩（比如 gzip），还需要进行解压。</p>
<p>然后，对响应资源做缓存。</p>
<p>接下来，根据响应资源里的 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSFRUUC9CYXNpY3Nfb2ZfSFRUUC9NSU1FX3R5cGVz" title="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types">MIME<i class="fa fa-external-link"></i></span> 类型去解析响应内容（比如 HTML、Image 各有不同的解析方式）。</p>
<h1 id="六、渲染页面"><a href="#六、渲染页面" class="headerlink" title="六、渲染页面"></a>六、渲染页面</h1><p><strong>浏览器内核</strong></p>
<p><img src="https://gd4ark-1258805822.cos.ap-guangzhou.myqcloud.com/images/961f7b5d-9e06-4006-ab99-974e8e9e2ba5.png" alt></p>
<p>不同的浏览器内核，渲染过程也不完全相同，但大致流程都差不多。</p>
<p><strong>基本流程</strong></p>
<p><img src="https://gd4ark-1258805822.cos.ap-guangzhou.myqcloud.com/images/20190822183712.png" alt></p>
<h3 id="1-HTML-解析"><a href="#1-HTML-解析" class="headerlink" title="1.HTML 解析"></a>1.HTML 解析</h3><p>首先要知道浏览器解析是从上往下一行一行地解析的。</p>
<p>解析的过程可以分为四个步骤：</p>
<p><strong>1. 解码（encoding）</strong></p>
<p>传输回来的其实都是一些二进制字节数据，浏览器需要根据文件指定编码（例如 UTF-8）转换成字符串，也就是 HTML 代码。</p>
<p><strong>2. 预解析（pre-parsing）</strong></p>
<p>预解析做的事情是提前加载资源，减少处理时间，它会识别一些会请求资源的属性，比如<code>img</code>标签的<code>src</code>属性，并将这个请求加到请求队列中。</p>
<p><strong>3. 符号化（Tokenization）</strong></p>
<p>符号化是词法分析的过程，将输入解析成符号，HTML 符号包括，开始标签、结束标签、属性名和属性值。</p>
<p>它通过一个状态机去识别符号的状态，比如遇到<code>&lt;</code>，<code>&gt;</code>状态都会产生变化。</p>
<p><strong>4. 构建树（tree construction）</strong></p>
<blockquote>
<p>注意：符号化和构建树是并行操作的，也就是说只要解析到一个开始标签，就会创建一个 DOM 节点。</p>
</blockquote>
<p>在上一步符号化中，解析器获得这些标记，然后以合适的方法创建<code>DOM</code>对象并把这些符号插入到<code>DOM</code>对象中。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Web page parsing<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Web page parsing<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is an example Web page.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://gd4ark-1258805822.cos.ap-guangzhou.myqcloud.com/images/1355879024-573db51949951_articlex.png" alt></p>
<p><strong>浏览器容错进制</strong></p>
<p>你从来没有在浏览器看过类似”语法无效”的错误，这是因为浏览器去纠正错误的语法，然后继续工作。</p>
<p><strong>事件</strong></p>
<p>当整个解析的过程完成以后，浏览器会通过<code>DOMContentLoaded</code>事件来通知<code>DOM</code>解析完成。</p>
<h3 id="2-CSS-解析"><a href="#2-CSS-解析" class="headerlink" title="2. CSS 解析"></a>2. CSS 解析</h3><p>一旦浏览器下载了 CSS，CSS 解析器就会处理它遇到的任何 CSS，根据<span class="exturl" data-url="aHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy1zeW50YXgtMy8=" title="https://drafts.csswg.org/css-syntax-3/">语法规范<i class="fa fa-external-link"></i></span>解析出所有的 CSS 并进行标记化，然后我们得到一个规则表。</p>
<p><strong>CSS 匹配规则</strong></p>
<p>在匹配一个节点对应的 CSS 规则时，是按照从右到左的顺序的，例如：<code>div p \{ font-size :14px \}</code>会先寻找所有的<code>p</code>标签然后判断它的父元素是否为<code>div</code>。</p>
<p>所以我们写 CSS 时，尽量用 id 和 class，千万不要过度层叠。</p>
<h3 id="3-渲染树"><a href="#3-渲染树" class="headerlink" title="3. 渲染树"></a>3. 渲染树</h3><p>其实这就是一个 DOM 树和 CSS 规则树合并的过程。</p>
<blockquote>
<p>注意：渲染树会忽略那些不需要渲染的节点，比如设置了<code>display:none</code>的节点。</p>
</blockquote>
<p><strong>计算</strong></p>
<p>通过计算让任何尺寸值都减少到三个可能之一：<code>auto</code>、百分比、px，比如把<code>rem</code>转化为<code>px</code>。</p>
<p><strong>级联</strong></p>
<p>浏览器需要一种方法来确定哪些样式才真正需要应用到对应元素，所以它使用一个叫做<code>specificity</code>的公式，这个公式会通过：</p>
<ol>
<li>标签名、class、id</li>
<li>是否内联样式</li>
<li><code>!important</code></li>
</ol>
<p>然后得出一个权重值，取最高的那个。</p>
<p><strong>渲染阻塞</strong></p>
<p>当遇到一个<code>script</code>标签时，DOM 构建会被暂停，直至脚本完成执行，然后继续构建 DOM 树。</p>
<p>但如果 JS 依赖 CSS 样式，而它还没有被下载和构建时，浏览器就会延迟脚本执行，直至 CSS Rules 被构建。</p>
<p>所有我们知道：</p>
<ul>
<li>CSS 会阻塞 JS 执行</li>
<li>JS 会阻塞后面的 DOM 解析</li>
</ul>
<p>为了避免这种情况，应该以下原则：</p>
<ul>
<li>CSS 资源排在 JavaScript 资源前面</li>
<li>JS 放在 HTML 最底部，也就是 <code>&lt;/body&gt;</code>前</li>
</ul>
<p>另外，如果要改变阻塞模式，可以使用 defer 与 async，详见：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3hpYW95dTJlci9ibG9nL2lzc3Vlcy84" title="https://github.com/xiaoyu2er/blog/issues/8">这篇文章<i class="fa fa-external-link"></i></span></p>
<h3 id="4-布局与绘制"><a href="#4-布局与绘制" class="headerlink" title="4. 布局与绘制"></a>4. 布局与绘制</h3><p>确定渲染树种所有节点的几何属性，比如：位置、大小等等，最后输入一个盒子模型，它能精准地捕获到每个元素在屏幕内的准确位置与大小。</p>
<p>然后遍历渲染树，调用渲染器的 paint() 方法在屏幕上显示其内容。</p>
<h3 id="5-合并渲染层"><a href="#5-合并渲染层" class="headerlink" title="5. 合并渲染层"></a>5. 合并渲染层</h3><p>把以上绘制的所有图片合并，最终输出一张图片。</p>
<h3 id="6-回流与重绘"><a href="#6-回流与重绘" class="headerlink" title="6. 回流与重绘"></a>6. 回流与重绘</h3><p><strong>回流(reflow)</strong></p>
<p>当浏览器发现某个部分发现变化影响了布局时，需要倒回去重新渲染，会从<code>html</code>标签开始递归往下，重新计算位置和大小。</p>
<p>reflow 基本是无法避免的，因为当你滑动一下鼠标、resize 窗口，页面就会产生变化。</p>
<p><strong>重绘(repaint)</strong></p>
<p>改变了某个元素的背景色、文字颜色等等不会影响周围元素的位置变化时，就会发生重绘。</p>
<p>每次重绘后，浏览器还需要合并渲染层并输出到屏幕上。</p>
<p>回流的成本要比重绘高很多，所以我们应该尽量避免产生回流。</p>
<p>比如：</p>
<blockquote>
<p><code>display:none</code> 会触发回流，而 <code>visibility:hidden</code> 只会触发重绘。</p>
</blockquote>
<h3 id="7-JavaScript-编译执行"><a href="#7-JavaScript-编译执行" class="headerlink" title="7. JavaScript 编译执行"></a>7. JavaScript 编译执行</h3><p><strong>大致流程</strong></p>
<p><img src="https://gd4ark-1258805822.cos.ap-guangzhou.myqcloud.com/images/20190822184523.png" alt></p>
<p>可以分为三个阶段：</p>
<h4 id="1-词法分析"><a href="#1-词法分析" class="headerlink" title="1. 词法分析"></a>1. 词法分析</h4><p>JS 脚本加载完毕后，会首先进入语法分析阶段，它首先会分析代码块的语法是否正确，不正确则抛出“语法错误”，停止执行。</p>
<p>几个步骤：</p>
<ul>
<li>分词，例如将<code>var a = 2</code>，，分成<code>var</code>、<code>a</code>、<code>=</code>、<code>2</code>这样的词法单元。</li>
<li>解析，将词法单元转换成抽象语法树（AST）。</li>
<li>代码生成，将抽象语法树转换成机器指令。</li>
</ul>
<h4 id="2-预编译"><a href="#2-预编译" class="headerlink" title="2. 预编译"></a>2. 预编译</h4><p>JS 有三种运行环境：</p>
<ul>
<li>全局环境</li>
<li>函数环境</li>
<li>eval</li>
</ul>
<p>每进入一个不同的运行环境都会创建一个对应的执行上下文，根据不同的上下文环境，形成一个函数调用栈，栈底永远是全局执行上下文，栈顶则永远是当前执行上下文。</p>
<p><strong>创建执行上下文</strong></p>
<p>创建执行上下文的过程中，主要做了以下三件事：</p>
<ul>
<li>创建变量对象<ul>
<li>参数、函数、变量</li>
</ul>
</li>
<li>建立作用域链<ul>
<li>确认当前执行环境是否能访问变量</li>
</ul>
</li>
<li>确定 This 指向</li>
</ul>
<h4 id="3-执行"><a href="#3-执行" class="headerlink" title="3. 执行"></a>3. 执行</h4><p><strong>JS 线程</strong></p>
<p><img src="https://gd4ark-1258805822.cos.ap-guangzhou.myqcloud.com/images/20190822184731.png" alt></p>
<p>虽然 JS 是单线程的，但实际上参与工作的线程一共有四个：</p>
<blockquote>
<p>其中三个只是协助，只有 JS 引擎线程是真正执行的</p>
</blockquote>
<ul>
<li>JS 引擎线程：也叫 JS 内核，负责解析执行 JS 脚本程序的主线程，例如 V8 引擎</li>
<li>事件触发线程：属于浏览器内核线程，主要用于控制事件，例如鼠标、键盘等，当事件被触发时，就会把事件的处理函数推进事件队列，等待 JS 引擎线程执行</li>
<li>定时器触发线程：主要控制<code>setInterval</code>和<code>setTimeout</code>，用来计时，计时完毕后，则把定时器的处理函数推进事件队列中，等待 JS 引擎线程。</li>
<li>HTTP 异步请求线程：通过 XMLHttpRequest 连接后，通过浏览器新开的一个线程，监控 readyState 状态变更时，如果设置了该状态的回调函数，则将该状态的处理函数推进事件队列中，等待 JS 引擎线程执行。</li>
</ul>
<p><strong>注：浏览器对同一域名的并发连接数是有限的，通常为 6 个。</strong></p>
<p><strong>宏任务</strong></p>
<p>分为：</p>
<ul>
<li>同步任务：按照顺序执行，只有前一个任务完成后，才能执行后一个任务</li>
<li>异步任务：不直接执行，只有满足触发条件时，相关的线程将该异步任务推进任务队列中，等待 JS 引擎主线程上的任务执行完毕时才开始执行，例如异步 Ajax、DOM 事件，setTimeout 等。</li>
</ul>
<p><strong>微任务</strong></p>
<p>微任务是 ES6 和 Node 环境下的，主要 API 有：<code>Promise</code>，<code>process.nextTick</code>。</p>
<p>微任务的执行在宏任务的同步任务之后，在异步任务之前。</p>
<p><img src="https://gd4ark-1258805822.cos.ap-guangzhou.myqcloud.com/images/20190822185002.png" alt></p>
<p><strong>代码例子</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'1'</span>) <span class="comment">// 宏任务 同步</span></span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'2'</span>) <span class="comment">// 宏任务 异步</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'3'</span>) <span class="comment">// 宏任务 同步</span></span><br><span class="line">  resolve()</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'4'</span>) <span class="comment">// 微任务</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'5'</span>) <span class="comment">// 宏任务 同步</span></span><br></pre></td></tr></table></figure>
<p>以上代码输出顺序为：1,3,5,4,2</p>
<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NreWxpbmU3NTQ4OS93aGF0LWhhcHBlbnMtd2hlbi16aF9DTg==" title="https://github.com/skyline75489/what-happens-when-zh_CN">what-happens-when-zh_CN<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9hbGlzdGFwYXJ0LmNvbS9hcnRpY2xlL3RhZ3MtdG8tZG9tLw==" title="https://alistapart.com/article/tags-to-dom/">Tags to DOM<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9oZXlpbmd5ZS5naXRodWIuaW8vMjAxOC8wNC8xNi8lRTUlQkQlQkIlRTUlQkElOTUlRTclOTAlODYlRTglQTclQTMlRTYlQjUlOEYlRTglQTclODglRTUlOTklQTglRTclOUElODQlRTclQkMlOTMlRTUlQUQlOTglRTYlOUMlQkElRTUlODglQjYv" title="https://heyingye.github.io/2018/04/16/%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/">彻底理解浏览器的缓存机制<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuaHRtbDVyb2Nrcy5jb20vemgvdHV0b3JpYWxzL2ludGVybmFscy9ob3dicm93c2Vyc3dvcmsvI1RoZV9yZW5kZXJpbmdfZW5naW5l" title="https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/#The_rendering_engine">浏览器的工作原理：新式网络浏览器幕后揭秘<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmZ1bmRlYnVnLmNvbS8yMDE5LzAxLzAzL3VuZGVyc3RhbmQtYnJvd3Nlci1yZW5kZXJpbmcv" title="https://blog.fundebug.com/2019/01/03/understand-browser-rendering/">深入浅出浏览器渲染原理<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9oZXlpbmd5ZS5naXRodWIuaW8vMjAxOC8wMy8xOS9qcyVFNSVCQyU5NSVFNiU5MyU4RSVFNyU5QSU4NCVFNiU4OSVBNyVFOCVBMSU4QyVFOCVCRiU4NyVFNyVBOCU4QiVFRiVCQyU4OCVFNCVCOCU4MCVFRiVCQyU4OS8jJUU5JUEyJTg0JUU3JUJDJTk2JUU4JUFGJTkxJUU5JTk4JUI2JUU2JUFFJUI1" title="https://heyingye.github.io/2018/03/19/js%E5%BC%95%E6%93%8E%E7%9A%84%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89/#%E9%A2%84%E7%BC%96%E8%AF%91%E9%98%B6%E6%AE%B5">js 引擎的执行过程（一）<i class="fa fa-external-link"></i></span></li>
<li>还有一些找不到了~</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>前端</tag>
        <tag>开发</tag>
        <tag>转载</tag>
      </tags>
  </entry>
  <entry>
    <title>滚动吸顶</title>
    <url>/posts/cc24fa55.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote class="blockquote-center"><p>作者：小生方勤链接：<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81Y2FhMGMyZDUxODgyNTQzZmE0MWU0NzjmnaXmupDvvJrmjpjph5HokZfkvZzmnYPlvZLkvZzogIXmiYDmnInjgILllYbkuJrovazovb3or7fogZTns7vkvZzogIXojrflvpfmjojmnYPvvIzpnZ7llYbkuJrovazovb3or7fms6jmmI7lh7rlpITjgII=" title="https://juejin.im/post/5caa0c2d51882543fa41e478来源：掘金著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。">https://juejin.im/post/5caa0c2d51882543fa41e478来源：掘金著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。<i class="fa fa-external-link"></i></span></p>
</blockquote>
<p><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g64zmgmgrdg30gm0j01kz.gif" alt="效果图"></p>
<a id="more"></a>
<h1 id="position-sticky"><a href="#position-sticky" class="headerlink" title="position:sticky"></a>position:sticky</h1><h2 id="粘性定位是什么？"><a href="#粘性定位是什么？" class="headerlink" title="粘性定位是什么？"></a>粘性定位是什么？</h2><p>粘性定位 <code>sticky</code>相当于相对定位 <code>relative</code>和固定定位 <code>fixed</code>的结合；在页面元素滚动过程中，某个元素距离其父元素的距离达到 <code>sticky</code>粘性定位的要求时；元素的相对定位 <code>relative</code>效果变成固定定位 <code>fixed</code>的效果。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQ1NTL3Bvc2l0aW9u" title="https://developer.mozilla.org/zh-CN/docs/Web/CSS/position">MDN 传送门<i class="fa fa-external-link"></i></span></p>
<h2 id="如何使用？"><a href="#如何使用？" class="headerlink" title="如何使用？"></a>如何使用？</h2><p>使用条件：</p>
<ol>
<li>父元素不能 <code>overflow:hidden</code>或者 <code>overflow:auto</code>属性</li>
<li>必须指定 <code>top、bottom、left、right</code>4 个值之一，否则只会处于相对定位</li>
<li>父元素的高度不能低于 <code>sticky</code>元素的高度</li>
<li><code>sticky</code>元素仅在其父元素内生效</li>
</ol>
<p>在需要滚动吸顶的元素加上以下样式便可以实现这个效果：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.sticky</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: -webkit-sticky;</span><br><span class="line">    <span class="attribute">position</span>: sticky;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="这个属性好用吗？"><a href="#这个属性好用吗？" class="headerlink" title="这个属性好用吗？"></a>这个属性好用吗？</h2><p>我们先看下在 Can I use 中看看这个属性的兼容性：<img src="http://ww2.sinaimg.cn/large/006tNc79ly1g64zri8j0yj31b60iajtg.jpg" alt></p>
<p>可以看出这个属性的兼容性并不是很好，因为这个 API 还只是<strong>实验性的属性</strong>。不过这个 API 在 IOS 系统的兼容性还是比较好的。</p>
<p>所以我们在生产环境如果使用这个 API 的时候一般会和下面的几种方式结合使用。</p>
<h1 id="JQuery-的-offset-top"><a href="#JQuery-的-offset-top" class="headerlink" title="JQuery 的 offset().top"></a><strong>JQuery 的</strong> offset().top</h1><p>我们知道 JQuery 中封装了操作 DOM 和读取 DOM 计算属性的 API，基于 <code>offset().top</code> 这个 API 和 <code>scrollTop()</code> 的结合，我们也可以实现滚动吸顶效果。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>, self.handleScrollOne);</span><br><span class="line">...</span><br><span class="line">handleScrollOne: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">let</span> scrollTop = $(<span class="string">'html'</span>).scrollTop();</span><br><span class="line">    <span class="keyword">let</span> offsetTop = $(<span class="string">'.title_box'</span>).offset().top;</span><br><span class="line">    self.titleFixed = scrollTop &gt; offsetTop;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>这样实现固然可以，不过由于 JQuery 慢慢的退出历史的舞台，我们在代码中尽量不使用 JQuery 的 API。我们可以基于 <code>offset().top</code> 的源码自己处理原生 <code>offsetTop</code>。于是乎就有了第三种方式。</p>
<blockquote>
<p>scrolloTop() 有兼容性问题，在微信浏览器、IE、某些 firefox 版本中 $(‘html’).scrollTop() 的值会为 0，于是乎也就有了第三种方案的兼容性写法。</p>
</blockquote>
<h1 id="原生的-offsetTop"><a href="#原生的-offsetTop" class="headerlink" title="原生的 offsetTop"></a><strong>原生的</strong> offsetTop</h1><p>我们知道 <code>offsetTop</code> 是相对定位父级的偏移量，倘若需要滚动吸顶的元素出现定位父级元素，那么 <code>offsetTop</code> 获取的就不是元素距离页面顶部的距离。</p>
<p>我们可以自己对 <code>offsetTop</code> 做以下处理：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">getOffset: <span class="function"><span class="keyword">function</span>(<span class="params">obj,direction</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> offsetL = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> offsetT = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>( obj!== <span class="built_in">window</span>.document.body &amp;&amp; obj !== <span class="literal">null</span> )&#123;</span><br><span class="line">        offsetL += obj.offsetLeft;</span><br><span class="line">        offsetT += obj.offsetTop;</span><br><span class="line">        obj = obj.offsetParent;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(direction === <span class="string">'left'</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> offsetL;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> offsetT;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>, self.handleScrollTwo);</span><br><span class="line">...</span><br><span class="line">handleScrollTwo: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">let</span> scrollTop = <span class="built_in">window</span>.pageYOffset || <span class="built_in">document</span>.documentElement.scrollTop || <span class="built_in">document</span>.body.scrollTop;</span><br><span class="line">    <span class="keyword">let</span> offsetTop = self.getOffset(self.$refs.pride_tab_fixed);</span><br><span class="line">    self.titleFixed = scrollTop &gt; offsetTop;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>你是不是看出了以上两种方式的一些问题？</p>
<blockquote>
<p>我们一定需要使用 <code>scrollTop - offsetTop</code> 的值来实现滚动吸顶的效果吗？答案是否定的。</p>
</blockquote>
<h1 id="obj-getBoundingClientRect-top"><a href="#obj-getBoundingClientRect-top" class="headerlink" title="obj.getBoundingClientRect().top"></a>obj.getBoundingClientRect().top</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>这个 <code>API</code> 可以告诉你页面中某个元素<strong>相对浏览器视窗</strong>上下左右的距离。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>tab 吸顶可以使用 <code>obj.getBoundingClientRect().top</code> 代替 <code>scrollTop - offsetTop</code>,代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;pride_tab_fixed&quot; ref=&quot;pride_tab_fixed&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;pride_tab&quot; :class=&quot;titleFixed == true ? &apos;isFixed&apos; :&apos;&apos;&quot;&gt;</span><br><span class="line">      // some code</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">      titleFixed: false</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  activated()&#123;</span><br><span class="line">    this.titleFixed = false;</span><br><span class="line">    window.addEventListener(&apos;scroll&apos;, this.handleScroll);</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    //滚动监听，头部固定</span><br><span class="line">    handleScroll: function () &#123;</span><br><span class="line">      let offsetTop = this.$refs.pride_tab_fixed.getBoundingClientRect().top;</span><br><span class="line">      this.titleFixed = offsetTop &lt; 0;</span><br><span class="line">      // some code</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h1 id="offsetTop-和-getBoundingClientRect-区别"><a href="#offsetTop-和-getBoundingClientRect-区别" class="headerlink" title="offsetTop 和 getBoundingClientRect() 区别"></a>offsetTop 和 getBoundingClientRect() 区别</h1><h2 id="getBoundingClientRect"><a href="#getBoundingClientRect" class="headerlink" title="getBoundingClientRect()"></a>getBoundingClientRect()</h2><p>用于获得页面中某个元素的左，上，右和下分别相对浏览器视窗的位置。不包含文档卷起来的部分。</p>
<p><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g64zyj0ev4j30lr0dw0sm.jpg" alt="img"></p>
<p>该函数返回一个 <code>object</code>对象，有8个属性：<code>top, right, buttom, left, width, height, x, y</code></p>
<p><img src="http://ww3.sinaimg.cn/large/006tNc79ly1g64zz218yaj308a06pmx1.jpg" alt="img"></p>
<h2 id="offsetTop"><a href="#offsetTop" class="headerlink" title="offsetTop"></a>offsetTop</h2><p>用于获得当前元素到定位父级（ element.offsetParent ）顶部的距离（偏移值）。</p>
<blockquote>
<p>定位父级 <code>offsetParent</code>的定义是：与当前元素最近的 position != static 的父级元素。</p>
</blockquote>
<p><code>offsetTop</code>和 <code>offsetParent</code>方法相结合可以获得该元素到 <code>body</code>上边距的距离。代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">getOffset: <span class="function"><span class="keyword">function</span>(<span class="params">obj,direction</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> offsetL = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> offsetT = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>( obj!== <span class="built_in">window</span>.document.body &amp;&amp; obj !== <span class="literal">null</span> )&#123;</span><br><span class="line">        offsetL += obj.offsetLeft;</span><br><span class="line">        offsetT += obj.offsetTop;</span><br><span class="line">        obj = obj.offsetParent;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(direction === <span class="string">'left'</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> offsetL;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> offsetT;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="延伸知识点"><a href="#延伸知识点" class="headerlink" title="延伸知识点"></a>延伸知识点</h1><h2 id="offsetWidth"><a href="#offsetWidth" class="headerlink" title="offsetWidth"></a>offsetWidth</h2><p>元素在水平方向上占用的空间大小：<br>offsetWidth = border-left + padding-left + width + padding-right + border-right</p>
<h2 id="offsetHeight"><a href="#offsetHeight" class="headerlink" title="offsetHeight"></a>offsetHeight</h2><p>元素在垂直方向上占用的空间大小：<br>offsetHeight = border-top + padding-top + height + padding-bottom + border-bottom</p>
<blockquote>
<p>注：如果存在垂直滚动条，offsetWidth 也包括垂直滚动条的宽度；如果存在水平滚动条，offsetHeight 也包括水平滚动条的高度；</p>
</blockquote>
<h2 id="offsetTop-1"><a href="#offsetTop-1" class="headerlink" title="offsetTop"></a>offsetTop</h2><p>元素的上外边框至 <code>offsetParent</code>元素的上内边框之间的像素距离；</p>
<h2 id="offsetLeft"><a href="#offsetLeft" class="headerlink" title="offsetLeft"></a>offsetLeft</h2><p>元素的左外边框至 <code>offsetParent</code>元素的左内边框之间的像素距离；</p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol>
<li>所有偏移量属性都是只读的；</li>
<li>如果给元素设置了 <code>display:none</code>，则它的偏移量属性都为 0；</li>
<li>每次访问偏移量属性都需要重新计算（<strong>保存变量</strong>）；</li>
<li>在使用的时候可能出现 DOM 没有初始化，就读取了该属性，这个时候会返回 0；对于这个问题我们需要等到 DOM 元素初始化完成后再执行。</li>
</ol>
<h1 id="遇到的两个问题"><a href="#遇到的两个问题" class="headerlink" title="遇到的两个问题"></a>遇到的两个问题</h1><h2 id="吸顶的那一刻伴随抖动"><a href="#吸顶的那一刻伴随抖动" class="headerlink" title="吸顶的那一刻伴随抖动"></a>吸顶的那一刻伴随抖动</h2><p>出现抖动的原因是因为：在吸顶元素 position 变为 fixed 的时候，该元素就脱离了文档流，下一个元素就进行了补位。就是这个补位操作造成了抖动。</p>
<p><strong>解决方案</strong></p>
<p>为这个吸顶元素添加一个等高的父元素，我们监听这个父元素的 <code>getBoundingClientRect().top</code> 值来实现吸顶效果，即：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title_box"</span> <span class="attr">ref</span>=<span class="string">"pride_tab_fixed"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span> <span class="attr">:class</span>=<span class="string">"titleFixed == true ? 'isFixed' :''"</span>&gt;</span></span><br><span class="line">    使用 `obj.getBoundingClientRect().top` 实现</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这个方案就可以解决抖动的 Bug 了。</p>
<h2 id="吸顶效果不能及时响应"><a href="#吸顶效果不能及时响应" class="headerlink" title="吸顶效果不能及时响应"></a>吸顶效果不能及时响应</h2><p>这个问题是我比较头痛，之前我没有在意过这个问题。直到有一天我用美团点外卖的时候，我才开始注意这个问题。</p>
<p><strong>描述：</strong></p>
<ol>
<li>当页面往下滚动时，吸顶元素需要等页面滚动停止之后才会出现吸顶效果</li>
<li>当页面往上滚动时，滚动到吸顶元素恢复文档流位置时吸顶元素不恢复原样，而等页面停止滚动之后才会恢复原样</li>
</ol>
<p><strong>原因：</strong>在 ios 系统上不能实时监听 scroll 滚动监听事件，在滚动停止时才触发其相关的事件。</p>
<p><strong>解决方案：</strong></p>
<p>还记得第一种方案中的 <code>position:sticky</code>吗？这个属性在 IOS6 以上的系统中有良好的兼容性，所以我们可以区分 IOS 和 Android 设备做两种处理。</p>
<blockquote>
<p>IOS 使用 <code>position:sticky</code>，Android 使用滚动监听 <code>getBoundingClientRect().top</code>的值。</p>
</blockquote>
<p>如果 IOS 版本过低呢？这里提供一种思路：<code>window.requestAnimationFrame()</code>。</p>
<h1 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h1><p>到此 4 中滚动吸顶的方式介绍完了，可是这样就真的结束了吗？其实还是有优化的空间的。</p>
<p>我们从两个方向做性能优化（其实是一个方向）：</p>
<ol>
<li>避免过度的 reflow</li>
<li>优化滚动监听事件</li>
</ol>
<h2 id="问题定位过程"><a href="#问题定位过程" class="headerlink" title="问题定位过程"></a>问题定位过程</h2><p>我们知道过度的 reflow 会使页面的性能下降。所以我们需要尽可能的降低 reflow 的次数，给用户更加流畅的感觉。</p>
<blockquote>
<p>有的朋友或许会说这个我知道，可是这和滚动吸顶有什么关系呢？</p>
</blockquote>
<p>不急，你是否还记得滚动吸顶使用了 offsetTop 或者 getBoundingClientRect().top 来获取响应的偏移量呢？</p>
<blockquote>
<p>既然有读取元素的属性就自然会导致页面 reflow。</p>
</blockquote>
<p>因此我们优化的方向就是从减少读取元素属性次数下手，查看代码发现一触发屏幕滚动事件就会调用相关方法读取元素的偏移量。</p>
<h2 id="优化方案"><a href="#优化方案" class="headerlink" title="优化方案"></a>优化方案</h2><p>解决这个问题有以下两个方案：</p>
<ol>
<li>牺牲平滑度满足性能，使用节流控制相关方法的调用</li>
<li>使用 IntersectionObserver 和节流结合，也牺牲了平滑度。</li>
</ol>
<h3 id="第一种方案"><a href="#第一种方案" class="headerlink" title="第一种方案"></a>第一种方案</h3><p>这个方案很常见，不过其带来的副作用也很明显，就是在吸顶效果会有些延迟，如果产品可以接受那就不失为一种好方法。</p>
<p>这样可以控制在一定时间内只读取</p>
<p>这里节流函数就直接是用 <code>lodash.js</code>封装好的 <code>throttle</code>方法。</p>
<p>代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>, _.throttle(self.handleScrollThree, <span class="number">50</span>));</span><br></pre></td></tr></table></figure>
<h3 id="第二种方案"><a href="#第二种方案" class="headerlink" title="第二种方案"></a>第二种方案</h3><p>第二种方案相对来说容易接受一点，就是支持 IntersectionObserver 就用 IntersectionObserver，否则就用 throttle。</p>
<p><strong>我们先讲讲 IntersectionObserver</strong></p>
<blockquote>
<p>IntersectionObserver 可以用来监听元素是否进入了设备的可视区域之内，而不需要频繁的计算来做这个判断。</p>
</blockquote>
<p>通过这个属性我们就可以在元素不在可视范围内，不去读取元素的相对位置，已达到性能优化；当浏览器不支持这个属性的时候就使用 throttle 来处理。</p>
<p>我们看看这个属性的兼容性怎么样：</p>
<p><img src="http://ww4.sinaimg.cn/large/006tNc79ly1g6504tspw0j30jp0b50t0.jpg" alt></p>
<p>大概支持了 60% 以上，在项目中还是可以使用的（你需要做好兼容性处理）。</p>
<blockquote>
<p>关于 IntersectionObserver 如何使用，<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL0ludGVyc2VjdGlvbk9ic2VydmVy" title="https://developer.mozilla.org/zh-CN/docs/Web/API/IntersectionObserver">请看 MDN<i class="fa fa-external-link"></i></span>或者 <span class="exturl" data-url="aHR0cDovL3d3dy5ydWFueWlmZW5nLmNvbS9ibG9nLzIwMTYvMTEvaW50ZXJzZWN0aW9ub2JzZXJ2ZXJfYXBpLmh0bWw=" title="http://www.ruanyifeng.com/blog/2016/11/intersectionobserver_api.html">阮一峰教程<i class="fa fa-external-link"></i></span>。</p>
</blockquote>
<p>使用 IntersectionObserver 和 throttle 优化的代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">IntersectionObserverFun: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">let</span> ele = self.$refs.pride_tab_fixed;</span><br><span class="line">    <span class="keyword">if</span>( !IntersectionObserver )&#123;</span><br><span class="line">        <span class="keyword">let</span> observer = <span class="keyword">new</span> IntersectionObserver(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> offsetTop = ele.getBoundingClientRect().top;</span><br><span class="line">            self.titleFixed = offsetTop &lt; <span class="number">0</span>;</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            threshold: [<span class="number">1</span>]</span><br><span class="line">        &#125;);</span><br><span class="line">        observer.observe(<span class="built_in">document</span>.getElementsByClassName(<span class="string">'title_box'</span>)[<span class="number">0</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>, _.throttle(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> offsetTop = ele.getBoundingClientRect().top;</span><br><span class="line">            self.titleFixed = offsetTop &lt; <span class="number">0</span>;</span><br><span class="line">        &#125;, <span class="number">50</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p><strong>注意</strong></p>
<blockquote>
<p>IntersectionObserver API 是异步的，不随着目标元素的滚动同步触发。</p>
</blockquote>
<p>规格写明，IntersectionObserver的实现，应该采用 requestIdleCallback()。它不会立即执行回调，它会调用 <code>window.requestIdleCallback()</code>来异步的执行我们指定的回调函数，而且还规定了最大的延迟时间是 100 毫秒。</p>
<p><strong>总结：</strong></p>
<blockquote>
<p>这种 IntersectionObserver 和 throttle 结合的方案不失为一种可选择的方案，这种方案的优点就在于可以有效地减少页面 reflow 的风险，不过缺点也是有的，需要牺牲页面的平滑度。具体该如何取舍，就看业务的需要啦。</p>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>前端</tag>
        <tag>开发</tag>
        <tag>转载</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue开发技巧</title>
    <url>/posts/4c0ac24d.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- @import "[TOC]" {cmd="toc" depthFrom=1 depthTo=6 orderedList=false} -->
<!-- code_chunk_output -->
<ol>
<li><a href="#状态共享">状态共享</a></li>
<li><a href="#长列表性能优化">长列表性能优化</a></li>
<li><a href="#去除多余的样式">去除多余的样式</a></li>
<li><a href="#作用域插槽">作用域插槽</a></li>
<li><a href="#属性事件传递">属性事件传递</a></li>
<li><a href="#函数式组件">函数式组件</a></li>
<li><a href="#监听组件的生命周期">监听组件的生命周期</a></li>
<li><a href="#参考链接">参考链接：</a></li>
</ol>
<!-- /code_chunk_output -->
<a id="more"></a>
<h1 id="状态共享"><a href="#状态共享" class="headerlink" title="状态共享"></a>状态共享</h1><p>随着组件的细化，就会遇到多组件状态共享的情况，<code>Vuex</code>当然可以解决这类问题，不过就像<code>Vuex</code>官方文档所说的，如果应用不够大，为避免代码繁琐冗余，最好不要使用它，今天我们介绍的是 vue.js 2.6 新增加的<span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5pbT90YXJnZXQ9aHR0cHMlM0ElMkYlMkZ2dWVqcy5vcmclMkZ2MiUyRmFwaSUyRiUyM1Z1ZS1vYnNlcnZhYmxl" title="https://link.juejin.im?target=https%3A%2F%2Fvuejs.org%2Fv2%2Fapi%2F%23Vue-observable">Observable API<i class="fa fa-external-link"></i></span> ，通过使用这个 api 我们可以应对一些简单的跨组件数据状态共享的情况。</p>
<p>如下这个例子，我们将在组件外创建一个<code>store</code>，然后在<code>App.vue</code>组件里面使用 store.js 提供的<code>store</code>和<code>mutation</code>方法，同理其它组件也可以这样使用，从而实现多个组件共享数据状态。</p>
<p>首先创建一个 store.js，包含一个<code>store</code>和一个<code>mutations</code>，分别用来指向数据和处理方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> store = Vue.observable(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  setCount(count) &#123;</span><br><span class="line">    store.count = count</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后在<code>App.vue</code>里面引入这个 store.js，在组件里面使用引入的数据和方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;img width=<span class="string">"25%"</span> src=<span class="string">"./assets/logo.png"</span>&gt;</span><br><span class="line">    &lt;p&gt;count:&#123;&#123;count&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;button @click="setCount(count+1)"&gt;+1&lt;/</span>button&gt;</span><br><span class="line">    &lt;button @click=<span class="string">"setCount(count-1)"</span>&gt;<span class="number">-1</span>&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">import &#123; store, mutations &#125; from "./</span>store<span class="string">";</span></span><br><span class="line"><span class="string">export default &#123;</span></span><br><span class="line"><span class="string">  name: "</span>App<span class="string">",</span></span><br><span class="line"><span class="string">  computed: &#123;</span></span><br><span class="line"><span class="string">    count() &#123;</span></span><br><span class="line"><span class="string">      return store.count;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  methods: &#123;</span></span><br><span class="line"><span class="string">    setCount: mutations.setCount</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>
<p>你可以点击<span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5pbT90YXJnZXQ9aHR0cHMlM0ElMkYlMkZjb2Rlc2FuZGJveC5pbyUyRnMlMkY0dzBtbzBreW93" title="https://link.juejin.im?target=https%3A%2F%2Fcodesandbox.io%2Fs%2F4w0mo0kyow">在线 DEMO<i class="fa fa-external-link"></i></span>查看最终效果</p>
<h1 id="长列表性能优化"><a href="#长列表性能优化" class="headerlink" title="长列表性能优化"></a>长列表性能优化</h1><p>我们应该都知道<code>vue</code>会通过<code>object.defineProperty</code>对数据进行劫持，来实现视图响应数据的变化，然而有些时候我们的组件就是纯粹的数据展示，不会有任何改变，我们就不需要<code>vue</code>来劫持我们的数据，在大量数据展示的情况下，这能够很明显的减少组件初始化的时间，那如何禁止<code>vue</code>劫持我们的数据呢？可以通过<code>object.freeze</code>方法来冻结一个对象，一旦被冻结的对象就再也不能被修改了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">    users: &#123;&#125;,</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="keyword">async</span> created() &#123;</span><br><span class="line">    <span class="keyword">const</span> users = <span class="keyword">await</span> axios.get(<span class="string">'/api/users'</span>)</span><br><span class="line">    <span class="keyword">this</span>.users = <span class="built_in">Object</span>.freeze(users)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>另外需要说明的是，这里只是冻结了<code>users</code>的值，引用不会被冻结，当我们需要<code>reactive</code>数据的时候，我们可以重新给<code>users</code>赋值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">    users: &#123;&#125;</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="keyword">async</span> created() &#123;</span><br><span class="line">    <span class="keyword">const</span> users = <span class="keyword">await</span> axios.get(<span class="string">"/api/users"</span>);</span><br><span class="line">    <span class="keyword">this</span>.users = <span class="built_in">Object</span>.freeze(users);</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    <span class="comment">// 改变值不会触发视图响应</span></span><br><span class="line">    <span class="keyword">this</span>.data.users[<span class="number">0</span>] = newValue</span><br><span class="line">    <span class="comment">// 改变引用依然会触发视图响应</span></span><br><span class="line">    <span class="keyword">this</span>.data.users = newArray</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="去除多余的样式"><a href="#去除多余的样式" class="headerlink" title="去除多余的样式"></a>去除多余的样式</h1><p>随着项目越来越大，书写的不注意，不自然的就会产生一些多余的 css，小项目还好，一旦项目大了以后，多余的 css 会越来越多，导致包越来越大，从而影响项目运行性能，所以有必要在正式环境去除掉这些多余的 css，这里推荐一个库<span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5pbT90YXJnZXQ9aHR0cHMlM0ElMkYlMkZ3d3cucHVyZ2Vjc3MuY29tJTJG" title="https://link.juejin.im?target=https%3A%2F%2Fwww.purgecss.com%2F">purgecss<i class="fa fa-external-link"></i></span>，支持 CLI、JavascriptApi、Webpack 等多种方式使用，通过这个库，我们可以很容易的去除掉多余的 css。</p>
<p>我做了一个测试，<span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5pbT90YXJnZXQ9aHR0cHMlM0ElMkYlMkZjb2Rlc2FuZGJveC5pbyUyRnMlMkZ6a3EyNThseTQ=" title="https://link.juejin.im?target=https%3A%2F%2Fcodesandbox.io%2Fs%2Fzkq258ly4">在线 DEMO<i class="fa fa-external-link"></i></span></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello Vanilla!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  We use Parcel to bundle this sandbox, you can find more info about Parcel</span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://parceljs.org"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">rel</span>=<span class="string">"noopener noreferrer"</span>&gt;</span>here<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">  li &#123;</span><br><span class="line">    <span class="selector-tag">list-style</span>: <span class="selector-tag">none</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Purgecss <span class="keyword">from</span> <span class="string">'purgecss'</span></span><br><span class="line"><span class="keyword">const</span> purgecss = <span class="keyword">new</span> Purgecss(&#123;</span><br><span class="line">  content: [<span class="string">'**/*.html'</span>],</span><br><span class="line">  css: [<span class="string">'**/*.css'</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> purgecssResult = purgecss.purge()</span><br></pre></td></tr></table></figure>
<p>最终产生的<code>purgecssResult</code>结果如下，可以看到多余的<code>a</code>和<code>ul</code>标签的样式都没了</p>
<p><img src="https://user-gold-cdn.xitu.io/2019/5/21/16ad97db704d6639?imageslim" alt="img"></p>
<h1 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h1><p>利用好作用域插槽可以做一些很有意思的事情，比如定义一个基础布局组件 A，只负责布局，不管数据逻辑，然后另外定义一个组件 B 负责数据处理，布局组件 A 需要数据的时候就去 B 里面去取。假设，某一天我们的布局变了，我们只需要去修改组件 A 就行，而不用去修改组件 B，从而就能充分复用组件 B 的数据处理逻辑，关于这块我之前写过一篇实际案例，可以点击<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YzJkNzAzMGYyNjVkYTYxM2E1NDIzNmY=" title="https://juejin.im/post/5c2d7030f265da613a54236f">这里<i class="fa fa-external-link"></i></span>查看。</p>
<p>这里涉及到的一个最重要的点就是父组件要去获取子组件里面的数据，之前是利用<code>slot-scope</code>，自 vue 2.6.0 起，提供了更好的支持 <code>slot</code> 和 <code>slot-scope</code> 特性的 API 替代方案。</p>
<p>比如，我们定一个名为<code>current-user</code>的组件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span>&gt;</span>&#123;&#123; user.lastName &#125;&#125;<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>父组件引用<code>current-user</code>的组件，但想用名替代姓（老外名字第一个单词是名，后一个单词是姓）：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">current-user</span>&gt;</span></span><br><span class="line">  &#123;&#123; user.firstName &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">current-user</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这种方式不会生效，因为<code>user</code>对象是子组件的数据，在父组件里面我们获取不到，这个时候我们就可以通过<code>v-slot</code> 来实现。</p>
<p>首先在子组件里面，将<code>user</code>作为一个<code>&lt;slot&gt;</code>元素的特性绑定上去：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span> <span class="attr">v-bind:user</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    &#123;&#123; user.lastName &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>之后，我们就可以在父组件引用的时候，给<code>v-slot</code>带一个值来定义我们提供的插槽 prop 的名字：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">current-user</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>=<span class="string">"slotProps"</span>&gt;</span></span><br><span class="line">    &#123;&#123; slotProps.user.firstName &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">current-user</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这种方式还有缩写语法，可以查看<span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5pbT90YXJnZXQ9aHR0cHMlM0ElMkYlMkZjbi52dWVqcy5vcmclMkZ2MiUyRmd1aWRlJTJGY29tcG9uZW50cy1zbG90cy5odG1sJTIzJUU3JThCJUFDJUU1JThEJUEwJUU5JUJCJTk4JUU4JUFFJUE0JUU2JThGJTkyJUU2JUE3JUJEJUU3JTlBJTg0JUU3JUJDJUE5JUU1JTg2JTk5JUU4JUFGJUFEJUU2JUIzJTk1" title="https://link.juejin.im?target=https%3A%2F%2Fcn.vuejs.org%2Fv2%2Fguide%2Fcomponents-slots.html%23%E7%8B%AC%E5%8D%A0%E9%BB%98%E8%AE%A4%E6%8F%92%E6%A7%BD%E7%9A%84%E7%BC%A9%E5%86%99%E8%AF%AD%E6%B3%95">独占默认插槽的缩写语法<i class="fa fa-external-link"></i></span>，最终我们引用的方式如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">current-user</span> <span class="attr">v-slot</span>=<span class="string">"slotProps"</span>&gt;</span></span><br><span class="line">  &#123;&#123; slotProps.user.firstName &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">current-user</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>相比之前<code>slot-scope</code>代码更清晰，更好理解。</p>
<h1 id="属性事件传递"><a href="#属性事件传递" class="headerlink" title="属性事件传递"></a>属性事件传递</h1><p>写过高阶组件的童鞋可能都会碰到过将加工过的属性向下传递的情况，如果碰到属性较多时，需要一个个去传递，非常不友好并且费时，有没有一次性传递的呢（比如 react 里面的<code>{...this.props}</code>）？答案就是<code>v-bind</code>和<code>v-on</code>。</p>
<p>举个例子，假如有一个基础组件<code>BaseList</code>，只有基础的列表展示功能，现在我们想在这基础上增加排序功能，这个时候我们就可以创建一个高阶组件<code>SortList</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- SortList  --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;BaseList v-bind=&quot;$props&quot; v-on=&quot;$listeners&quot;&gt; &lt;!-- ... --&gt; &lt;/BaseList&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import BaseList from &apos;./BaseList&apos;</span><br><span class="line">// 包含了基础的属性定义</span><br><span class="line">import BaseListMixin from &apos;./BaseListMixin&apos;</span><br><span class="line">// 封装了排序的逻辑</span><br><span class="line">import sort from &apos;./sort.js&apos;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  props: BaseListMixin.props,</span><br><span class="line">  components: &#123;</span><br><span class="line">    BaseList,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>可以看到传递属性和事件的方便性，而不用一个个去传递</p>
<h1 id="函数式组件"><a href="#函数式组件" class="headerlink" title="函数式组件"></a>函数式组件</h1><p>函数式组件，即无状态，无法实例化，内部没有任何生命周期处理方法，非常轻量，因而渲染性能高，特别适合用来只依赖外部数据传递而变化的组件。</p>
<p>写法如下：</p>
<ol>
<li>在<code>template</code>标签里面标明<code>functional</code></li>
<li>只接受<code>props</code>值</li>
<li>不需要<code>script</code>标签</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- App.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;List :items=&quot;[&apos;Wonderwoman&apos;, &apos;Ironman&apos;]&quot; :item-click=&quot;item =&gt; (clicked = item)&quot; /&gt;</span><br><span class="line">    &lt;p&gt;Clicked hero: &#123;&#123; clicked &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import List from &apos;./List&apos;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &apos;App&apos;,</span><br><span class="line">  data: () =&gt; (&#123; clicked: &apos;&apos; &#125;),</span><br><span class="line">  components: &#123; List &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- List.vue 函数式组件 --&gt;</span><br><span class="line">&lt;template functional&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p v-for=&quot;item in props.items&quot; @click=&quot;props.itemClick(item)&quot;&gt;</span><br><span class="line">      &#123;&#123; item &#125;&#125;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
<h1 id="监听组件的生命周期"><a href="#监听组件的生命周期" class="headerlink" title="监听组件的生命周期"></a>监听组件的生命周期</h1><p>比如有父组件<code>Parent</code>和子组件<code>Child</code>，如果父组件监听到子组件挂载<code>mounted</code>就做一些逻辑处理，常规的写法可能如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// Parent.vue</span><br><span class="line">&lt;Child @mounted=&quot;doSomething&quot; /&gt;</span><br><span class="line"></span><br><span class="line">// Child.vue mounted() &#123; this.$emit(&quot;mounted&quot;); &#125;</span><br></pre></td></tr></table></figure>
<p>这里提供一种特别简单的方式，子组件不需要任何处理，只需要在父组件引用的时候通过<code>@hook</code>来监听即可，代码重写如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Child</span> @<span class="attr">hook:mounted</span>=<span class="string">"doSomething"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>当然这里不仅仅是可以监听<code>mounted</code>，其它的生命周期事件，例如：<code>created</code>，<code>updated</code>等都可以，是不是特别方便~</p>
<h1 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h1><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5pbT90YXJnZXQ9aHR0cHMlM0ElMkYlMkZ2dWVkb3NlLnRpcHMlMkZ0aXBz" title="https://link.juejin.im?target=https%3A%2F%2Fvuedose.tips%2Ftips">vueTips<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5pbT90YXJnZXQ9aHR0cHMlM0ElMkYlMkZhbGxpZ2F0b3IuaW8lMkZ2dWVqcyUyRg==" title="https://link.juejin.im?target=https%3A%2F%2Falligator.io%2Fvuejs%2F">vuePost<i class="fa fa-external-link"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>前端</tag>
        <tag>开发</tag>
        <tag>vue</tag>
        <tag>转载</tag>
      </tags>
  </entry>
  <entry>
    <title>JS技巧</title>
    <url>/posts/554f088e.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- @import "[TOC]" {cmd="toc" depthFrom=1 depthTo=6 orderedList=false} -->
<!-- code_chunk_output -->
<ol>
<li><a href="#字符串">字符串</a><ol>
<li><a href="#格式化金钱">格式化金钱</a></li>
<li><a href="#生成随机id">生成随机ID</a></li>
<li><a href="#生成随机hex色值">生成随机HEX色值</a></li>
<li><a href="#生成星级评分">生成星级评分</a></li>
<li><a href="#操作url查询参数">操作URL查询参数</a></li>
</ol>
</li>
<li><a href="#数值">数值</a><ol>
<li><a href="#取整代替正数的mathfloor代替负数的mathceil">取整：代替正数的<code>Math.floor()</code>，代替负数的<code>Math.ceil()</code></a></li>
<li><a href="#补零">补零</a></li>
<li><a href="#转数值只对nullfalse数值字符串有效">转数值：只对<code>null、&quot;&quot;、false、数值字符串</code>有效</a></li>
<li><a href="#时间戳">时间戳</a></li>
<li><a href="#精确小数">精确小数</a></li>
<li><a href="#判断奇偶">判断奇偶</a></li>
<li><a href="#取最小最大值">取最小最大值</a></li>
</ol>
</li>
<li><a href="#函数">函数</a><ol>
<li><a href="#一次性函数适用于运行一些只需执行一次的初始化代码">一次性函数：<code>适用于运行一些只需执行一次的初始化代码</code></a></li>
<li><a href="#惰性载入函数函数内判断分支较多较复杂时可大大节约资源开销">惰性载入函数：<code>函数内判断分支较多较复杂时可大大节约资源开销</code></a></li>
<li><a href="#优雅处理asyncawait参数">优雅处理Async/Await参数</a></li>
</ol>
</li>
<li><a href="#dom">DOM</a><ol>
<li><a href="#显示全部dom边框调试页面元素边界时使用">显示全部DOM边框：<code>调试页面元素边界时使用</code></a></li>
<li><a href="#自适应页面页面基于一张设计图但需做多款机型自适应元素尺寸使用rem进行设置">自适应页面：<code>页面基于一张设计图但需做多款机型自适应，元素尺寸使用rem进行设置</code></a></li>
<li><a href="#阻止冒泡">阻止冒泡</a></li>
<li><a href="#阻止默认行为">阻止默认行为</a></li>
</ol>
</li>
</ol>
<!-- /code_chunk_output -->
<a id="more"></a>
<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="格式化金钱"><a href="#格式化金钱" class="headerlink" title="格式化金钱"></a>格式化金钱</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> thousandNum = <span class="function"><span class="params">num</span> =&gt;</span> num.toString().replace(<span class="regexp">/\B(?=(\d&#123;3&#125;)+(?!\d))/g</span>, <span class="string">","</span>);</span><br><span class="line"><span class="keyword">const</span> money = thousandNum(<span class="number">19941112</span>);</span><br><span class="line"><span class="comment">// money =&gt; "19,941,112"</span></span><br></pre></td></tr></table></figure>
<h2 id="生成随机ID"><a href="#生成随机ID" class="headerlink" title="生成随机ID"></a>生成随机ID</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> randomId = <span class="function"><span class="params">len</span> =&gt;</span> <span class="built_in">Math</span>.random().toString(<span class="number">36</span>).substr(<span class="number">3</span>, len);</span><br><span class="line"><span class="keyword">const</span> id = randomId(<span class="number">10</span>);</span><br><span class="line"><span class="comment">// id =&gt; "jg7zpgiqva"</span></span><br></pre></td></tr></table></figure>
<h2 id="生成随机HEX色值"><a href="#生成随机HEX色值" class="headerlink" title="生成随机HEX色值"></a>生成随机HEX色值</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> randomColor = <span class="function"><span class="params">()</span> =&gt;</span> <span class="string">"##"</span> + <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">0xffffff</span>).toString(<span class="number">16</span>).padEnd(<span class="number">6</span>, <span class="string">"0"</span>);</span><br><span class="line"><span class="keyword">const</span> color = randomColor();</span><br><span class="line"><span class="comment">// color =&gt; "##f03665"</span></span><br></pre></td></tr></table></figure>
<h2 id="生成星级评分"><a href="#生成星级评分" class="headerlink" title="生成星级评分"></a>生成星级评分</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> startScore = <span class="function"><span class="params">rate</span> =&gt;</span> <span class="string">"★★★★★☆☆☆☆☆"</span>.slice(<span class="number">5</span> - rate, <span class="number">10</span> - rate);</span><br><span class="line"><span class="keyword">const</span> start = startScore(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// start =&gt; "★★★"</span></span><br></pre></td></tr></table></figure>
<h2 id="操作URL查询参数"><a href="#操作URL查询参数" class="headerlink" title="操作URL查询参数"></a>操作URL查询参数</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// https://developer.mozilla.org/zh-CN/docs/Web/API/URLSearchParams</span></span><br><span class="line"><span class="keyword">const</span> params = <span class="keyword">new</span> URLSearchParams(location.search.replace(<span class="regexp">/\?/ig</span>, <span class="string">""</span>)); </span><br><span class="line"><span class="comment">// location.search = "?name=yajun&amp;sex=female"</span></span><br><span class="line">params.has(<span class="string">"yajun"</span>); <span class="comment">// true</span></span><br><span class="line">params.get(<span class="string">"sex"</span>); <span class="comment">// "female"</span></span><br></pre></td></tr></table></figure>
<h1 id="数值"><a href="#数值" class="headerlink" title="数值"></a>数值</h1><h2 id="取整：代替正数的Math-floor-，代替负数的Math-ceil"><a href="#取整：代替正数的Math-floor-，代替负数的Math-ceil" class="headerlink" title="取整：代替正数的Math.floor()，代替负数的Math.ceil()"></a>取整：代替正数的<code>Math.floor()</code>，代替负数的<code>Math.ceil()</code></h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> num1 = ~~ <span class="number">1.69</span>;</span><br><span class="line"><span class="keyword">const</span> num2 = <span class="number">1.69</span> | <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> num3 = <span class="number">1.69</span> &gt;&gt; <span class="number">0</span>;</span><br><span class="line"><span class="comment">// num1 num2 num3 =&gt; 1 1 1</span></span><br></pre></td></tr></table></figure>
<h2 id="补零"><a href="#补零" class="headerlink" title="补零"></a>补零</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fillZero = <span class="function">(<span class="params">num, len</span>) =&gt;</span> num.toString().padStart(len, <span class="string">"0"</span>);</span><br><span class="line"><span class="keyword">const</span> num = fillZero(<span class="number">169</span>, <span class="number">5</span>);</span><br><span class="line"><span class="comment">// num =&gt; "00169"</span></span><br></pre></td></tr></table></figure>
<h2 id="转数值：只对null、-quot-quot-、false、数值字符串有效"><a href="#转数值：只对null、-quot-quot-、false、数值字符串有效" class="headerlink" title="转数值：只对null、&quot;&quot;、false、数值字符串有效"></a>转数值：只对<code>null、&quot;&quot;、false、数值字符串</code>有效</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> num1 = +<span class="literal">null</span>;</span><br><span class="line"><span class="keyword">const</span> num2 = +<span class="string">""</span>;</span><br><span class="line"><span class="keyword">const</span> num3 = +<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">const</span> num4 = +<span class="string">"169"</span>;</span><br><span class="line"><span class="comment">// num1 num2 num3 num4 =&gt; 0 0 0 169</span></span><br></pre></td></tr></table></figure>
<h2 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> timestamp = +<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"2019-03-31"</span>);</span><br><span class="line"><span class="comment">// timestamp =&gt; 1553990400000</span></span><br></pre></td></tr></table></figure>
<h2 id="精确小数"><a href="#精确小数" class="headerlink" title="精确小数"></a>精确小数</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> roundNum = <span class="function">(<span class="params">num, decimal</span>) =&gt;</span> <span class="built_in">Math</span>.round(num * <span class="number">10</span> ** decimal) / <span class="number">10</span> ** decimal;</span><br><span class="line"><span class="keyword">const</span> num = roundNum(<span class="number">1.69</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment">// num =&gt; 1.7</span></span><br></pre></td></tr></table></figure>
<h2 id="判断奇偶"><a href="#判断奇偶" class="headerlink" title="判断奇偶"></a>判断奇偶</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> odd = !!(num &amp; <span class="number">1</span>);</span><br><span class="line"><span class="comment">// odd =&gt; false</span></span><br></pre></td></tr></table></figure>
<h2 id="取最小最大值"><a href="#取最小最大值" class="headerlink" title="取最小最大值"></a>取最小最大值</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">const</span> min = <span class="built_in">Math</span>.min(...arr);</span><br><span class="line"><span class="keyword">const</span> max = <span class="built_in">Math</span>.max(...arr);</span><br><span class="line"><span class="comment">// min max =&gt; 0 2</span></span><br></pre></td></tr></table></figure>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="一次性函数：适用于运行一些只需执行一次的初始化代码"><a href="#一次性函数：适用于运行一些只需执行一次的初始化代码" class="headerlink" title="一次性函数：适用于运行一些只需执行一次的初始化代码"></a>一次性函数：<code>适用于运行一些只需执行一次的初始化代码</code></h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"x"</span>);</span><br><span class="line">    Func = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"y"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="惰性载入函数：函数内判断分支较多较复杂时可大大节约资源开销"><a href="#惰性载入函数：函数内判断分支较多较复杂时可大大节约资源开销" class="headerlink" title="惰性载入函数：函数内判断分支较多较复杂时可大大节约资源开销"></a>惰性载入函数：<code>函数内判断分支较多较复杂时可大大节约资源开销</code></h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a === b) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"x"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"y"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 换成</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a === b) &#123;</span><br><span class="line">        Func = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"x"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Func = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"y"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Func();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="优雅处理Async-Await参数"><a href="#优雅处理Async-Await参数" class="headerlink" title="优雅处理Async/Await参数"></a>优雅处理Async/Await参数</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">AsyncTo</span>(<span class="params">promise</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> promise.then(<span class="function"><span class="params">data</span> =&gt;</span> [<span class="literal">null</span>, data]).catch(<span class="function"><span class="params">err</span> =&gt;</span> [err]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> [err, res] = <span class="keyword">await</span> AsyncTo(Func());</span><br></pre></td></tr></table></figure>
<h1 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h1><h2 id="显示全部DOM边框：调试页面元素边界时使用"><a href="#显示全部DOM边框：调试页面元素边界时使用" class="headerlink" title="显示全部DOM边框：调试页面元素边界时使用"></a>显示全部DOM边框：<code>调试页面元素边界时使用</code></h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[].forEach.call($$(<span class="string">"*"</span>), dom =&gt; &#123;</span><br><span class="line">    dom.style.outline = <span class="string">"1px solid ##"</span> + (~~(<span class="built_in">Math</span>.random() * (<span class="number">1</span> &lt;&lt; <span class="number">24</span>))).toString(<span class="number">16</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="自适应页面：页面基于一张设计图但需做多款机型自适应，元素尺寸使用rem进行设置"><a href="#自适应页面：页面基于一张设计图但需做多款机型自适应，元素尺寸使用rem进行设置" class="headerlink" title="自适应页面：页面基于一张设计图但需做多款机型自适应，元素尺寸使用rem进行设置"></a>自适应页面：<code>页面基于一张设计图但需做多款机型自适应，元素尺寸使用rem进行设置</code></h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">AutoResponse</span>(<span class="params">width = <span class="number">750</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> target = <span class="built_in">document</span>.documentElement;</span><br><span class="line">    target.clientWidth &gt;= <span class="number">600</span></span><br><span class="line">        ? (target.style.fontSize = <span class="string">"80px"</span>)</span><br><span class="line">        : (target.style.fontSize = target.clientWidth / width * <span class="number">100</span> + <span class="string">"px"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="阻止冒泡"><a href="#阻止冒泡" class="headerlink" title="阻止冒泡"></a>阻止冒泡</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stopBubble</span>(<span class="params">e</span>) </span>&#123; </span><br><span class="line">    <span class="comment">//如果提供了事件对象，则这是一个非IE浏览器 </span></span><br><span class="line">    <span class="keyword">if</span> ( e &amp;&amp; e.stopPropagation ) </span><br><span class="line">        <span class="comment">//因此它支持W3C的stopPropagation()方法 </span></span><br><span class="line">        e.stopPropagation(); </span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="comment">//否则，我们需要使用IE的方式来取消事件冒泡 </span></span><br><span class="line">        <span class="built_in">window</span>.event.cancelBubble = <span class="literal">true</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="阻止默认行为"><a href="#阻止默认行为" class="headerlink" title="阻止默认行为"></a>阻止默认行为</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//阻止浏览器的默认行为 </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stopDefault</span>(<span class="params"> e </span>) </span>&#123; </span><br><span class="line">    <span class="comment">//阻止默认浏览器动作(W3C) </span></span><br><span class="line">    <span class="keyword">if</span> ( e &amp;&amp; e.preventDefault ) </span><br><span class="line">        e.preventDefault(); </span><br><span class="line">    <span class="comment">//IE中阻止函数器默认动作的方式 </span></span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="built_in">window</span>.event.returnValue = <span class="literal">false</span>; </span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>代码片段</category>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>代码片段</tag>
        <tag>javascript</tag>
        <tag>技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>vue ssr 服务器端渲染</title>
    <url>/posts/fb1b66be.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="ssr是什么"><a href="#ssr是什么" class="headerlink" title="ssr是什么"></a>ssr是什么</h1><p>简单来讲，ssr是指vue中的服务端渲染</p>
<p>默认vue开发打包生成是普通的客户端渲染，将vue打包成js然后在html中引入进而渲染DOM和操作DOM。而服务端渲染是将vue渲染成html后再发送至客户端，中间会有一系列匹配工作</p>
<h1 id="为什么用ssr"><a href="#为什么用ssr" class="headerlink" title="为什么用ssr"></a>为什么用ssr</h1><p>截两张图你就明白了</p>
<p>默认方式源代码:</p>
<p><img src="https://i.loli.net/2019/05/08/5cd23ad12ba7e.jpg" alt></p>
<p>ssr方式源代码:</p>
<p><img src="https://i.loli.net/2019/05/08/5cd23ad21b239.jpg" alt></p>
<p>也就是说使用默认方式，当在搜索引擎搜索你的站点关键词时可能就搜不到你的站点，这对一些需要被erveryone熟知的站点是致命的。</p>
<p>除此之外服务端渲染也能更好的解决浏览器兼容的问题，并且在性能上也帮客户端做了很多事情</p>
<a id="more"></a>
<h1 id="如何开发ssr项目"><a href="#如何开发ssr项目" class="headerlink" title="如何开发ssr项目"></a>如何开发ssr项目</h1><p>两种方式，自己搭建或者使用官方框架<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL251eHQvbnV4dC5qcw==" title="https://github.com/nuxt/nuxt.js">Nuxt.js<i class="fa fa-external-link"></i></span>，我当时是自己搭的，参考了官方示例<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS1oYWNrZXJuZXdzLTIuMA==" title="https://github.com/vuejs/vue-hackernews-2.0">vue-hackernews-2.0<i class="fa fa-external-link"></i></span>，基本方式都是相同的，打包出对应route的bundle，与template合并，生成html string，展示</p>
<h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h2 id="客户端展示异常，服务端报错-window-alert-document-is-undefined"><a href="#客户端展示异常，服务端报错-window-alert-document-is-undefined" class="headerlink" title="客户端展示异常，服务端报错 window/alert/document is undefined"></a>客户端展示异常，服务端报错 <code>window/alert/document is undefined</code></h2><h3 id="jsdom"><a href="#jsdom" class="headerlink" title="jsdom"></a>jsdom</h3><p>服务端没有<code>window/alert/document</code>这种东西，需要自行定义，建议方式引入第三方包<code>jsdom</code>辅助定义</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//https://github.com/vuejs/vue-hackernews-2.0/issues/52#issuecomment-255594303</span></span><br><span class="line"><span class="keyword">const</span> &#123; JSDOM &#125; = <span class="built_in">require</span>(<span class="string">'jsdom'</span>)</span><br><span class="line"><span class="keyword">const</span> dom = <span class="keyword">new</span> JSDOM(<span class="string">'&lt;!doctype html&gt;&lt;html&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;'</span>,</span><br><span class="line">&#123; <span class="attr">url</span>: <span class="string">'http://localhost'</span> &#125;)</span><br><span class="line"></span><br><span class="line">global.window = dom.window</span><br><span class="line">global.document = <span class="built_in">window</span>.document</span><br><span class="line">global.navigator = <span class="built_in">window</span>.navigator</span><br></pre></td></tr></table></figure>
<h3 id="官方解决方案"><a href="#官方解决方案" class="headerlink" title="官方解决方案"></a><span class="exturl" data-url="aHR0cHM6Ly96aC5udXh0anMub3JnL2ZhcS93aW5kb3ctZG9jdW1lbnQtdW5kZWZpbmVkLw==" title="https://zh.nuxtjs.org/faq/window-document-undefined/">官方解决方案<i class="fa fa-external-link"></i></span></h3><p><img src="https://i.loli.net/2019/05/08/5cd23ad316b29.jpg" alt="官方解决方案"></p>
<h3 id="组件二次封装"><a href="#组件二次封装" class="headerlink" title="组件二次封装"></a>组件二次封装</h3><p>创建<code>~/plugins/index.js</code>文件，将组件挂载到全局</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> MyComponent <span class="keyword">from</span> <span class="string">'~/components/MyComponent'</span></span><br><span class="line"></span><br><span class="line">Vue.component(<span class="string">'MyComponent'</span>, MyComponent)</span><br></pre></td></tr></table></figure>
<p>然后根据运行环境加载组件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">'undefined'</span>)&#123;</span><br><span class="line">	<span class="built_in">require</span>(<span class="string">'~/plugins/index.js'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YjdlMjZmZWU1MWQ0NTM4ZDEyYzg4MzY=" title="https://juejin.im/post/5b7e26fee51d4538d12c8836">https://juejin.im/post/5b7e26fee51d4538d12c8836<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9taXlhbGVlLmdpdGh1Yi5pby8yMDE4LzAxLzAzL2Jsb2cyMDE4LTAxLTAzLw==" title="https://miyalee.github.io/2018/01/03/blog2018-01-03/">https://miyalee.github.io/2018/01/03/blog2018-01-03/<i class="fa fa-external-link"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>前端</tag>
        <tag>开发</tag>
        <tag>ssr</tag>
      </tags>
  </entry>
  <entry>
    <title>vue开发项目完全指南</title>
    <url>/posts/65e66eaf.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote class="blockquote-center"><p>转载自: <span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxODYxOTU3Ng==" title="https://segmentfault.com/a/1190000018619576">https://segmentfault.com/a/1190000018619576<i class="fa fa-external-link"></i></span></p>
</blockquote>
<p>这篇文章总结了vue项目的所遇到的问题，包括跨域、用户认证、接口统一管理、路由配置、兼容性处理，性能优化等内容。</p>
<p>项目github地址 :</p>
<ul>
<li>前端 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2h1YW5neWFuZ3RlbmcvdnVlMi10ZW1wbGF0ZQ==" title="https://github.com/huangyangteng/vue2-template">https://github.com/huangyangt…<i class="fa fa-external-link"></i></span></li>
<li>后端: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2h1YW5neWFuZ3RlbmcvdnVlMi10ZW1wbGF0ZS1zZXJ2ZXI=" title="https://github.com/huangyangteng/vue2-template-server">https://github.com/huangyangt…<i class="fa fa-external-link"></i></span></li>
</ul>
<p><img src="https://i.loli.net/2019/05/08/5cd23b0ccd527.jpg" alt></p>
<a id="more"></a>
<!-- @import "[TOC]" {cmd="toc" depthFrom=1 depthTo=6 orderedList=false} -->
<!-- code_chunk_output -->
<ol>
<li><a href="#一环境依赖安装">一、环境依赖安装</a><ol>
<li><a href="#node环境">node环境</a><ol>
<li><a href="#node和npm环境的安装">node和npm环境的安装</a></li>
<li><a href="#为npm更改源">为npm更改源</a><ol>
<li><a href="#使用cnpm代替npm">使用cnpm代替npm</a></li>
<li><a href="#为npm更换源">为npm更换源</a></li>
</ol>
</li>
<li><a href="#管理更新nodejs的版本">管理(更新)nodejs的版本</a><ol>
<li><a href="#使用n管理nodejs版本">使用n管理nodejs版本</a></li>
</ol>
</li>
<li><a href="#packagejson文件详解">package.json文件详解</a></li>
</ol>
</li>
<li><a href="#vue脚手架">vue脚手架</a><ol>
<li><a href="#vue-cli2x安装">vue-cli2.x安装</a></li>
<li><a href="#vue-cli3x安装及配置仅供参考">vue-cli3.x安装及配置(仅供参考)</a></li>
</ol>
</li>
</ol>
</li>
<li><a href="#二开发">二、开发</a><ol>
<li><a href="#前后端交互报文定义以及数据api接口">前后端交互报文定义以及数据api接口</a><ol>
<li><a href="#前后端交互报文定义"><strong>前后端交互报文定义</strong></a></li>
<li><a href="#项目中使用的后台api定义如下">项目中使用的后台api定义如下</a><ol>
<li><a href="#测试api是否可用"><code>测试api是否可用</code></a></li>
<li><a href="#注册"><code>注册</code></a></li>
<li><a href="#登录"><code>登录</code></a></li>
<li><a href="#获取当前用户信息"><code>获取当前用户信息</code></a></li>
</ol>
</li>
</ol>
</li>
<li><a href="#项目文件介绍">项目文件介绍</a><ol>
<li><a href="#整个文件介绍httpsilolinet201905085cd23b0f68ccejpg">整个文件介绍：<img src="https://i.loli.net/2019/05/08/5cd23b0f68cce.jpg" alt></a></li>
<li><a href="#src目录介绍">src目录介绍</a></li>
</ol>
</li>
<li><a href="#跨域axios配置与api管理">跨域、axios配置与api管理</a><ol>
<li><a href="#配置跨域">配置跨域</a></li>
<li><a href="#生产环境去除apis前缀">生产环境去除/apis前缀</a></li>
<li><a href="#api统一管理">api统一管理</a></li>
</ol>
</li>
<li><a href="#路由配置">路由配置</a><ol>
<li><a href="#最简配置">最简配置</a></li>
<li><a href="#配置路由懒加载">配置路由懒加载</a></li>
<li><a href="#配置history模式">配置history模式</a></li>
</ol>
</li>
<li><a href="#权限管理">权限管理</a><ol>
<li><a href="#token验证">token验证</a></li>
<li><a href="#对页面的访问权限">对页面的访问权限</a></li>
</ol>
</li>
<li><a href="#将界面交给第三方ui库">将界面交给第三方UI库</a><ol>
<li><a href="#iview的安装与引入">iview的安装与引入</a><ol>
<li><a href="#安装">安装</a></li>
<li><a href="#按需引入组件">按需引入组件</a></li>
<li><a href="#自定义主题">自定义主题</a></li>
</ol>
</li>
</ol>
</li>
<li><a href="#兼容性处理">兼容性处理</a><ol>
<li><a href="#对ie8及以下浏览器的跳转处理">对ie8及以下浏览器的跳转处理</a></li>
<li><a href="#兼容ie9">兼容ie9</a><ol>
<li><a href="#es6兼容">ES6兼容</a></li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
<li><a href="#三优化">三、优化</a><ol>
<li><a href="#webpack3x优化打包速度">webpack3.x优化打包速度</a><ol>
<li><a href="#替换代码压缩工具">替换代码压缩工具</a></li>
<li><a href="#happypack开启多核构建项目">happypack开启多核构建项目</a></li>
<li><a href="#hardsourcewebpackplugin节省70的时间">hardSourceWebpackPlugin节省70%的时间</a></li>
</ol>
</li>
<li><a href="#webpack3x优化首屏加载速度">webpack3.x优化首屏加载速度</a><ol>
<li><a href="#maclinux安装">mac/linux安装</a><ol>
<li><a href="#nginx常用命令">nginx常用命令</a></li>
<li><a href="#nginx配置静态文件服务器">nginx配置静态文件服务器</a></li>
<li><a href="#优化首屏加载速度">优化首屏加载速度</a></li>
</ol>
</li>
<li><a href="#预渲染">预渲染</a><ol>
<li><a href="#预渲染注意事项">预渲染注意事项</a></li>
</ol>
</li>
<li><a href="#配置gzip压缩">配置gzip压缩</a></li>
</ol>
</li>
</ol>
</li>
<li><a href="#四部署">四、部署</a><ol>
<li><a href="#nginx配置反向代理">nginx配置反向代理</a></li>
<li><a href="#持续部署">持续部署</a><ol>
<li><a href="#jenkins安装与启动">jenkins安装与启动</a></li>
<li><a href="#jenkins初始化">jenkins初始化</a></li>
<li><a href="#创建任务">创建任务</a></li>
<li><a href="#安装插件">安装插件</a></li>
<li><a href="#实现git钩子功能">实现git钩子功能</a></li>
<li><a href="#实现自动化构建">实现自动化构建</a></li>
</ol>
</li>
</ol>
</li>
</ol>
<!-- /code_chunk_output -->
<h1 id="一、环境依赖安装"><a href="#一、环境依赖安装" class="headerlink" title="一、环境依赖安装"></a>一、环境依赖安装</h1><h2 id="node环境"><a href="#node环境" class="headerlink" title="node环境"></a>node环境</h2><h3 id="node和npm环境的安装"><a href="#node和npm环境的安装" class="headerlink" title="node和npm环境的安装"></a>node和npm环境的安装</h3><blockquote>
<p>根据以下教程安装，然后设置好环境变量</p>
</blockquote>
<p><span class="exturl" data-url="aHR0cDovL3d3dy5ydW5vb2IuY29tL25vZGVqcy9ub2RlanMtaW5zdGFsbC1zZXR1cC5odG1s" title="http://www.runoob.com/nodejs/nodejs-install-setup.html">http://www.runoob.com/nodejs/…<i class="fa fa-external-link"></i></span></p>
<p>视频教程 <span class="exturl" data-url="aHR0cDovL2dpdGh1Yi5saWFveHVlZmVuZy5jb20vc2luYXdlaWJvcHkvdmlkZW8vbm9kZS9pbnN0YWxsLW5vZGUubXA0" title="http://github.liaoxuefeng.com/sinaweibopy/video/node/install-node.mp4">http://github.liaoxuefeng.com….<i class="fa fa-external-link"></i></span></p>
<p>centos如果装不上看这里：<span class="exturl" data-url="aHR0cHM6Ly93d3cucm9zZWhvc3RpbmcuY29tL2Jsb2cvaG93LXRvLWluc3RhbGwtbm9kZS1qcy1hbmQtbnBtLW9uLWNlbnRvcy03Lw==" title="https://www.rosehosting.com/blog/how-to-install-node-js-and-npm-on-centos-7/">https://www.rosehosting.com/b…<i class="fa fa-external-link"></i></span></p>
<h3 id="为npm更改源"><a href="#为npm更改源" class="headerlink" title="为npm更改源"></a>为npm更改源</h3><blockquote>
<p>npm默认使用的源的服务器在国外下载速度慢，所以需要更换源</p>
<p>以下两种方法任选一种</p>
</blockquote>
<h4 id="使用cnpm代替npm"><a href="#使用cnpm代替npm" class="headerlink" title="使用cnpm代替npm"></a>使用cnpm代替npm</h4><blockquote>
<p>参考链接：<span class="exturl" data-url="aHR0cHM6Ly9ucG0udGFvYmFvLm9yZy8=" title="https://npm.taobao.org/">https://npm.taobao.org/<i class="fa fa-external-link"></i></span></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装完cnpm，之后再按照依赖就要使用cnpm</span></span><br><span class="line">cnpm install [包名]</span><br></pre></td></tr></table></figure>
<h4 id="为npm更换源"><a href="#为npm更换源" class="headerlink" title="为npm更换源"></a>为npm更换源</h4><blockquote>
<p>参考链接 <span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAwNDQ0NDI4Mw==" title="https://segmentfault.com/a/1190000004444283">https://segmentfault.com/a/11…<i class="fa fa-external-link"></i></span></p>
</blockquote>
<p>修改源为淘宝的源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry http://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure>
<p>我们在发布自己包的时候需要将官方的源改回来</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmjs.org/</span><br></pre></td></tr></table></figure>
<h3 id="管理-更新-nodejs的版本"><a href="#管理-更新-nodejs的版本" class="headerlink" title="管理(更新)nodejs的版本"></a>管理(更新)nodejs的版本</h3><blockquote>
<p>切换nodejs版本有两种方式，分别是<code>nvm</code>和<code>n</code>,n更简单推荐使用</p>
</blockquote>
<h4 id="使用n管理nodejs版本"><a href="#使用n管理nodejs版本" class="headerlink" title="使用n管理nodejs版本"></a>使用n管理nodejs版本</h4><blockquote>
<p>参考链接 <span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9jNjQuLg==" title="https://www.jianshu.com/p/c64..">https://www.jianshu.com/p/c64..<i class="fa fa-external-link"></i></span>.</p>
<p>官网 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RqL24=" title="https://github.com/tj/n">https://github.com/tj/n<i class="fa fa-external-link"></i></span></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装</span></span><br><span class="line">npm install -g n</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用n下载所需node版本</span></span><br><span class="line">n 版本号</span><br><span class="line"><span class="comment">#下载最新版本</span></span><br><span class="line">n latest</span><br><span class="line"><span class="comment"># 切换版本</span></span><br><span class="line">输入 n，</span><br><span class="line">然后选中所需版本</span><br><span class="line"><span class="comment">#以指定的版本来执行版本</span></span><br><span class="line">n use 7.4.0 index.js</span><br></pre></td></tr></table></figure>
<p>linux使用n安装新版本nodejs之后，如果<code>node -v</code>还是原来的版本，那么就需要改变一下环境变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim .bash_profile</span><br><span class="line"><span class="built_in">export</span> NODE_HOME=/usr/<span class="built_in">local</span>     <span class="comment">#NODE_HOME改成新版本nodejs安装的目录，如果找不到，find / -name node</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$NODE_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> NODE_PATH=<span class="variable">$NODE_HOME</span>/lib/node_modules:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>
<p>修改环境变量参考：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lpNDEyL2FydGljbGUvZGV0YWlscy8xMTUyMzUyNQ==" title="https://blog.csdn.net/yi412/article/details/11523525">https://blog.csdn.net/yi412/a…<i class="fa fa-external-link"></i></span></p>
<h3 id="package-json文件详解"><a href="#package-json文件详解" class="headerlink" title="package.json文件详解"></a>package.json文件详解</h3><blockquote>
<p>参考文档 <span class="exturl" data-url="aHR0cDovL2phdmFzY3JpcHQucnVhbnlpZmVuZy5jb20vbm9kZWpzL3BhY2thZ2Vqc29uLmh0bWw=" title="http://javascript.ruanyifeng.com/nodejs/packagejson.html">http://javascript.ruanyifeng….<i class="fa fa-external-link"></i></span></p>
</blockquote>
<h2 id="vue脚手架"><a href="#vue脚手架" class="headerlink" title="vue脚手架"></a>vue脚手架</h2><blockquote>
<p>vue-cli目前已经更新到3版本，vue-cli3把webpack相关的配置隐藏起来了，所有的配置都在vue.config.js文件夹中，所以使用vue-cli3需要的webpack水平较高，建议使用vue-cli2</p>
</blockquote>
<h3 id="vue-cli2-x安装"><a href="#vue-cli2-x安装" class="headerlink" title="vue-cli2.x安装"></a>vue-cli2.x安装</h3><p>参考链接：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS1jbGkvdHJlZS92MiN2dWUtY2xpLS0=" title="https://github.com/vuejs/vue-cli/tree/v2#vue-cli--">https://github.com/vuejs/vue-…<i class="fa fa-external-link"></i></span></p>
<p>安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g vue-cli</span><br></pre></td></tr></table></figure>
<p>用法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vue init &lt; template-name &gt; &lt; project-name &gt;</span><br></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vue init webpack my-project</span><br></pre></td></tr></table></figure>
<p>目前可用的模块包括：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzLXRlbXBsYXRlcy93ZWJwYWNr" title="https://github.com/vuejs-templates/webpack">webpack<i class="fa fa-external-link"></i></span> - 一个功能齐全的Webpack + vue-loader设置，具有热重载，linting，测试和css提取功能。</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzLXRlbXBsYXRlcy93ZWJwYWNrLXNpbXBsZQ==" title="https://github.com/vuejs-templates/webpack-simple">webpack-simple<i class="fa fa-external-link"></i></span> - 一个简单的Webpack + vue-loader设置，用于快速原型设计。</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzLXRlbXBsYXRlcy9icm93c2VyaWZ5" title="https://github.com/vuejs-templates/browserify">browserify<i class="fa fa-external-link"></i></span> -全功能Browserify + vueify设置用热重装载，linting＆单元测试。</li>
<li>browserify <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzLXRlbXBsYXRlcy9icm93c2VyaWZ5LXNpbXBsZQ==" title="https://github.com/vuejs-templates/browserify-simple">-simple<i class="fa fa-external-link"></i></span> - 一个简单的Browserify + vueify设置，用于快速原型设计。</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzLXRlbXBsYXRlcy9wd2E=" title="https://github.com/vuejs-templates/pwa">pwa<i class="fa fa-external-link"></i></span> - 基于webpack模板的vue-cli的PWA模板</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzLXRlbXBsYXRlcy9zaW1wbGU=" title="https://github.com/vuejs-templates/simple">simple<i class="fa fa-external-link"></i></span> - 单个HTML文件中最简单的Vue设置</li>
</ul>
<h3 id="vue-cli3-x安装及配置-仅供参考"><a href="#vue-cli3-x安装及配置-仅供参考" class="headerlink" title="vue-cli3.x安装及配置(仅供参考)"></a>vue-cli3.x安装及配置(仅供参考)</h3><p>vue-cli3x的官方文档：<span class="exturl" data-url="aHR0cHM6Ly9jbGkudnVlanMub3JnLw==" title="https://cli.vuejs.org/">https://cli.vuejs.org/<i class="fa fa-external-link"></i></span></p>
<p>Vue-cli3 中vue.config.js文件配置参考文档：<span class="exturl" data-url="aHR0cHM6Ly9jbGkudnVlanMub3JnL3poL2NvbmZpZy8jaW50ZWdyaXR5" title="https://cli.vuejs.org/zh/config/#integrity">https://cli.vuejs.org/zh/conf…<i class="fa fa-external-link"></i></span></p>
<p>Vue CLI 的包名称由 <code>vue-cli</code> 改成了 <code>@vue/cli</code>。 如果你已经全局安装了旧版本的 <code>vue-cli</code>(1.x 或 2.x)，你需要先通过 <code>npm uninstall vue-cli -g</code> 或 <code>yarn global remove vue-cli</code> 卸载它。</p>
<p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure>
<p>安装了vue-cli3如果还想使用vue-cli2的init功能,需要安装一个桥接功能</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g @vue/cli-init</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vue.config.js 配置说明</span></span><br><span class="line"><span class="comment">//官方vue.config.js 参考文档 https://cli.vuejs.org/zh/config/#css-loaderoptions</span></span><br><span class="line"><span class="comment">// 这里只列一部分，具体配置参考文档</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 部署生产环境和开发环境下的URL。</span></span><br><span class="line">  <span class="comment">// 默认情况下，Vue CLI 会假设你的应用是被部署在一个域名的根路径上</span></span><br><span class="line">  <span class="comment">//例如 https://www.my-app.com/。如果应用被部署在一个子路径上，你就需要用这个选项指定这个子路径。例如，如果你的应用被部署在 https://www.my-app.com/my-app/，则设置 baseUrl 为 /my-app/。</span></span><br><span class="line">  baseUrl: process.env.NODE_ENV === <span class="string">"production"</span> ? <span class="string">"./"</span> : <span class="string">"/"</span>,</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// outputDir: 在npm run build 或 yarn build 时 ，生成文件的目录名称（要和baseUrl的生产环境路径一致）</span></span><br><span class="line">  outputDir: <span class="string">"dist"</span>,</span><br><span class="line">  <span class="comment">//用于放置生成的静态资源 (js、css、img、fonts) 的；（项目打包之后，静态资源会放在这个文件夹下）</span></span><br><span class="line">  assetsDir: <span class="string">"assets"</span>,</span><br><span class="line">  <span class="comment">//指定生成的 index.html 的输出路径  (打包之后，改变系统默认的index.html的文件名)</span></span><br><span class="line">  <span class="comment">// indexPath: "myIndex.html",</span></span><br><span class="line">  <span class="comment">//默认情况下，生成的静态资源在它们的文件名中包含了 hash 以便更好的控制缓存。你可以通过将这个选项设为 false 来关闭文件名哈希。(false的时候就是让原来的文件名不改变)</span></span><br><span class="line">  filenameHashing: <span class="literal">false</span>,</span><br><span class="line"> </span><br><span class="line">  <span class="comment">//   lintOnSave：&#123; type:Boolean default:true &#125; 问你是否使用eslint</span></span><br><span class="line">  <span class="string">`lintOnSave`</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">//如果你想要在生产构建时禁用 eslint-loader，你可以用如下配置</span></span><br><span class="line">  <span class="comment">// lintOnSave: process.env.NODE_ENV !== 'production',</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">//是否使用包含运行时编译器的 Vue 构建版本。设置为 true 后你就可以在 Vue 组件中使用 template 选项了，但是这会让你的应用额外增加 10kb 左右。(默认false)</span></span><br><span class="line">  <span class="comment">// runtimeCompiler: false,</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 如果你不需要生产环境的 source map，可以将其设置为 false 以加速生产环境构建。</span></span><br><span class="line"><span class="comment">   *  打包之后发现map文件过大，项目文件体积很大，设置为false就可以不输出map文件</span></span><br><span class="line"><span class="comment">   *  map文件的作用在于：项目打包后，代码都是经过压缩加密的，如果运行时报错，输出的错误信息无法准确得知是哪里的代码报错。</span></span><br><span class="line"><span class="comment">   *  有了map就可以像未加密的代码一样，准确的输出是哪一行哪一列有错。</span></span><br><span class="line"><span class="comment">   * */</span></span><br><span class="line">  productionSourceMap: <span class="literal">false</span>,</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 它支持webPack-dev-server的所有选项</span></span><br><span class="line">  devServer: &#123;</span><br><span class="line">    host: <span class="string">"localhost"</span>,</span><br><span class="line">    port: <span class="number">1111</span>, <span class="comment">// 端口号</span></span><br><span class="line">    https: <span class="literal">false</span>, <span class="comment">// https:&#123;type:Boolean&#125;</span></span><br><span class="line">    open: <span class="literal">true</span>, <span class="comment">//配置自动启动浏览器</span></span><br><span class="line">    <span class="comment">// proxy: 'http://localhost:4000' // 配置跨域处理,只有一个代理</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 配置多个代理</span></span><br><span class="line">    proxy: &#123;</span><br><span class="line">      <span class="string">"/api"</span>: &#123;</span><br><span class="line">        target: <span class="string">"&lt;url&gt;"</span>,</span><br><span class="line">        ws: <span class="literal">true</span>,</span><br><span class="line">        changeOrigin: <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"/foo"</span>: &#123;</span><br><span class="line">        target: <span class="string">"&lt;other_url&gt;"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="二、开发"><a href="#二、开发" class="headerlink" title="二、开发"></a>二、开发</h1><blockquote>
<p>以下内容依赖环境为 ： vue-cli 版本2.9.x</p>
<p>项目github地址 :</p>
<ul>
<li>前端 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2h1YW5neWFuZ3RlbmcvdnVlMi10ZW1wbGF0ZQ==" title="https://github.com/huangyangteng/vue2-template">https://github.com/huangyangt…<i class="fa fa-external-link"></i></span></li>
<li>后端: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2h1YW5neWFuZ3RlbmcvdnVlMi10ZW1wbGF0ZS1zZXJ2ZXI=" title="https://github.com/huangyangteng/vue2-template-server">https://github.com/huangyangt…<i class="fa fa-external-link"></i></span></li>
</ul>
</blockquote>
<p>安装完以上依赖后，就可以开始一个项目了,我们先看下后端api的定义</p>
<h2 id="前后端交互报文定义以及数据api接口"><a href="#前后端交互报文定义以及数据api接口" class="headerlink" title="前后端交互报文定义以及数据api接口"></a>前后端交互报文定义以及数据api接口</h2><h3 id="前后端交互报文定义"><a href="#前后端交互报文定义" class="headerlink" title="前后端交互报文定义"></a><strong>前后端交互报文定义</strong></h3><p>请求</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">http request header&#123; //除登录注册以外的请求，发起请求时要在请求头中加入token</span><br><span class="line">    <span class="attribute">authorization:jwt</span></span><br><span class="line"><span class="attribute">&#125;</span></span><br><span class="line">http request body&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>返回</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">http response header&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">http response body&#123;</span><br><span class="line">    <span class="attribute">code:业务处理状态码</span></span><br><span class="line">    msg:业务处理描述</span><br><span class="line">    token:jwt token</span><br><span class="line">    <span class="attribute">data:业务数据</span></span><br><span class="line"><span class="attribute">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="项目中使用的后台api定义如下"><a href="#项目中使用的后台api定义如下" class="headerlink" title="项目中使用的后台api定义如下"></a>项目中使用的后台api定义如下</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注：服务器端的host为118.24.85.97，端口为22222</span><br></pre></td></tr></table></figure>
<h4 id="测试api是否可用"><a href="#测试api是否可用" class="headerlink" title="测试api是否可用"></a><code>测试api是否可用</code></h4><ol>
<li>uri: <span class="exturl" data-url="aHR0cDovLzExOC4yNC44NS45Ny8=" title="http://118.24.85.97/">http://118.24.85.97<i class="fa fa-external-link"></i></span>:22222/api</li>
<li>描述：测试接口是否能用，能用的话返回 ‘API WORDS’字符串</li>
<li>请求类型 GET</li>
<li>请求参数 无</li>
<li>返回值 {‘Api Works’}</li>
</ol>
<h4 id="注册"><a href="#注册" class="headerlink" title="注册"></a><code>注册</code></h4><ol>
<li>uri: <span class="exturl" data-url="aHR0cDovLzExOC4yNC44NS45Ny8=" title="http://118.24.85.97/">http://118.24.85.97<i class="fa fa-external-link"></i></span>:22222/api/users/reg</li>
<li>描述:注册</li>
<li>请求类型 POST</li>
<li>请求参数</li>
</ol>
<table>
<thead>
<tr>
<th>序号</th>
<th>参数名</th>
<th>是否必填</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>name</td>
<td>y</td>
<td>用户名</td>
</tr>
<tr>
<td>2</td>
<td>pass</td>
<td>y</td>
<td>密码</td>
</tr>
</tbody>
</table>
<ol>
<li>返回参数 不重要</li>
</ol>
<h4 id="登录"><a href="#登录" class="headerlink" title="登录"></a><code>登录</code></h4><ol>
<li>uri: <span class="exturl" data-url="aHR0cDovLzExOC4yNC44NS45Ny8=" title="http://118.24.85.97/">http://118.24.85.97<i class="fa fa-external-link"></i></span>:22222/api/users/login</li>
<li>描述:登录</li>
<li>请求类型 POST</li>
<li>请求参数</li>
</ol>
<table>
<thead>
<tr>
<th>序号</th>
<th>参数名</th>
<th>是否必填</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>name</td>
<td>y</td>
<td>用户名</td>
</tr>
<tr>
<td>2</td>
<td>pass</td>
<td>y</td>
<td>密码</td>
</tr>
</tbody>
</table>
<ol>
<li>返回参数</li>
</ol>
<table>
<thead>
<tr>
<th>序号</th>
<th>参数名</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>msg</td>
<td>ok</td>
</tr>
<tr>
<td>2</td>
<td>token</td>
<td>用于验证用户身份的token</td>
</tr>
</tbody>
</table>
<h4 id="获取当前用户信息"><a href="#获取当前用户信息" class="headerlink" title="获取当前用户信息"></a><code>获取当前用户信息</code></h4><ol>
<li>uri: <span class="exturl" data-url="aHR0cDovLzExOC4yNC44NS45Ny8=" title="http://118.24.85.97/">http://118.24.85.97<i class="fa fa-external-link"></i></span>:22222/api/users/current</li>
<li>描述:获取用户信息</li>
<li>请求类型 GET</li>
<li>请求参数 无</li>
<li>返回参数</li>
</ol>
<table>
<thead>
<tr>
<th>序号</th>
<th>参数名</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>id</td>
<td>用户id</td>
</tr>
<tr>
<td>2</td>
<td>token</td>
<td>用于验证用户身份的token</td>
</tr>
</tbody>
</table>
<p>##初始化项目</p>
<p>在终端中输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vue init webpack vue2_template</span><br></pre></td></tr></table></figure>
<p>然后会有一些选项让你选,按照项目需求选择，例如我不需要eslint,unit test，就可以选No，现在选no将来如果需要的话也可以自己安装</p>
<p><img src="https://i.loli.net/2019/05/08/5cd23b0d9e7e9.jpg" alt></p>
<p>安装完成之后，按照提示切换到相应目录，执行相应指令，然后在浏览器打开网址，这样一个简单的vue项目就启动起来了</p>
<p><img src="https://i.loli.net/2019/05/08/5cd23b0e7b20b.jpg" alt></p>
<h2 id="项目文件介绍"><a href="#项目文件介绍" class="headerlink" title="项目文件介绍"></a>项目文件介绍</h2><h3 id="整个文件介绍："><a href="#整个文件介绍：" class="headerlink" title="整个文件介绍："></a>整个文件介绍：<img src="https://i.loli.net/2019/05/08/5cd23b0f68cce.jpg" alt></h3><p>注意：</p>
<ol>
<li>开发主要使用src文件夹</li>
<li>webpack的配置文件配置文件详解看这里：<span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxNDgwNDgyNg==" title="https://segmentfault.com/a/1190000014804826">https://segmentfault.com/a/11…<i class="fa fa-external-link"></i></span></li>
<li>package.json配置详解 <span class="exturl" data-url="aHR0cDovL2phdmFzY3JpcHQucnVhbnlpZmVuZy5jb20vbm9kZWpzL3BhY2thZ2Vqc29uLmh0bWw=" title="http://javascript.ruanyifeng.com/nodejs/packagejson.html">http://javascript.ruanyifeng….<i class="fa fa-external-link"></i></span></li>
</ol>
<h3 id="src目录介绍"><a href="#src目录介绍" class="headerlink" title="src目录介绍"></a>src目录介绍</h3><p>首先在src目录下新建一个文件夹views,用来放我们的主要页面，然后在assets文件夹中建立fonts styles imgs，用来存放相应的资源，建完之后，文件夹如下 <img src="https://i.loli.net/2019/05/08/5cd23b101a388.jpg" alt></p>
<h2 id="跨域、axios配置与api管理"><a href="#跨域、axios配置与api管理" class="headerlink" title="跨域、axios配置与api管理"></a>跨域、axios配置与api管理</h2><p>在这个项目中，我们使用axios进行数据请求</p>
<blockquote>
<p>axios中文文档： <span class="exturl" data-url="aHR0cHM6Ly93d3cua2FuY2xvdWQuY24veXVueWUvYXhpb3MvMjM0ODQ1" title="https://www.kancloud.cn/yunye/axios/234845">https://www.kancloud.cn/yunye…<i class="fa fa-external-link"></i></span></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装axios</span></span><br><span class="line">npm/cnpm i axios -S      <span class="comment"># -S 指安装到package.json中的dependencies中</span></span><br></pre></td></tr></table></figure>
<p>安装完成后，我们要在main.js中引入,然后测试一下是否成功引入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//main.js文件</span><br><span class="line">import axios from <span class="string">'axios'</span></span><br><span class="line"></span><br><span class="line">axios.get(<span class="string">'https://api.github.com/users?since=10'</span>)   //使用github接口做一下测试</span><br><span class="line">  .<span class="keyword">then</span>(res=&gt;console.log(res))</span><br><span class="line">  .catch(err=&gt;console.log(err))</span><br></pre></td></tr></table></figure>
<p>浏览器显示以下信息，说明引入成功 <img src="https://i.loli.net/2019/05/08/5cd23b10c2755.jpg" alt></p>
<p>github提供的接口配置了cors，所以我们能够能够在浏览器正常访问到，但cors兼容性最低到ie10，而且后台不一定会配置cors，所以在开发时我们需要配置一下跨域</p>
<p>参考链接：</p>
<ol>
<li>cors详解 <span class="exturl" data-url="aHR0cDovL3d3dy5ydWFueWlmZW5nLmNvbS9ibG9nLzIwMTYvMDQvY29ycy5odG1s" title="http://www.ruanyifeng.com/blog/2016/04/cors.html">http://www.ruanyifeng.com/blo…<i class="fa fa-external-link"></i></span></li>
</ol>
<h3 id="配置跨域"><a href="#配置跨域" class="headerlink" title="配置跨域"></a>配置跨域</h3><blockquote>
<p>参考文档：<span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxNzkwNTAzMA==" title="https://segmentfault.com/a/1190000017905030">https://segmentfault.com/a/11…<i class="fa fa-external-link"></i></span></p>
</blockquote>
<p>先找个没有设置cors的api使用axios访问一下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.get(<span class="string">'http://118.24.85.97:22222/api'</span>)</span><br><span class="line">.then(<span class="function"><span class="params">res</span>=&gt;</span><span class="built_in">console</span>.log(res))</span><br><span class="line">.catch(<span class="function"><span class="params">err</span>=&gt;</span><span class="built_in">console</span>.log(err))</span><br></pre></td></tr></table></figure>
<p>浏览器会因为同源策略报错 <img src="https://i.loli.net/2019/05/08/5cd23b1181b7c.jpg" alt></p>
<p>下面进行跨域的配置</p>
<blockquote>
<p>配置目录 config/index.js 13行</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">proxyTable: &#123;</span><br><span class="line">  <span class="string">'/apis'</span>:&#123;</span><br><span class="line">    target:<span class="string">'http://118.24.85.97:22222'</span>,<span class="comment">//后台地址 proxyTable  把/apis映射成target 即 /apis=http://118.24.85.97:22222</span></span><br><span class="line">    changeOrigin:<span class="literal">true</span>,<span class="comment">//是否跨域</span></span><br><span class="line">    pathRewrite:&#123;</span><br><span class="line">      <span class="string">'^/apis'</span>:<span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再进行访问数据时就要在接口前面加上/apis(/apis就相当于<span class="exturl" data-url="aHR0cDovLzExOC4yNC44NS45Ny8=" title="http://118.24.85.97/">http://118.24.85.97<i class="fa fa-external-link"></i></span>:22222)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.get(<span class="string">'/apis/api'</span>)</span><br><span class="line">.then(<span class="function"><span class="params">res</span>=&gt;</span><span class="built_in">console</span>.log(res))</span><br><span class="line">.catch(<span class="function"><span class="params">err</span>=&gt;</span><span class="built_in">console</span>.log(err))</span><br></pre></td></tr></table></figure>
<p>然后就发现浏览器访问成功了 <img src="https://i.loli.net/2019/05/08/5cd23b1211dba.jpg" alt></p>
<p>proxyTable原理：跨域是浏览器禁止的，服务端并不禁止跨域 ，所以浏览器可以发给自己的服务端然后，由自己的服务端再转发给要跨域的服务端，做一层代理。proxyTable使用的是<code>http-proxy-middleware</code>中间件，内部用的是http-proxy</p>
<p>以上配置的跨域是开发环境下的，在生产环境就自动失效了，而且这样配置我们开发时访问接口时，都要写成<code>/apis/xxx/xxx</code>格式，在部署到服务器中时，我们要把/apis拿掉，才能访问到正确的url。有两种方法，一种是在开发环境中设置(通过axios的baseURL)，另一种是在服务器上修改nginx的配置设置。</p>
<h3 id="生产环境去除-apis前缀"><a href="#生产环境去除-apis前缀" class="headerlink" title="生产环境去除/apis前缀"></a>生产环境去除/apis前缀</h3><p>在这里详细说下第一种方式，原理是这样的：</p>
<p>通过检测是开发环境和生产环境，设置不同的baseURL,使生产环境和开发环境都能正确访问url</p>
<p>在src目录下新建一个<code>apis</code>目录,然后在apis目录下新建一个<code>api.config.js</code>文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断是否是生产环境</span></span><br><span class="line"><span class="comment">//webpack在开发环境和生产环境分别执行不同的js文件，process.env.NODE_ENV设置了不同的值，process.env.NODE_ENV在生产环境中值为'production'(这个值是在build/build.js中第4行设置的)</span></span><br><span class="line"><span class="keyword">var</span> isPro = process.env.NODE_ENV=== <span class="string">'production'</span></span><br><span class="line"><span class="comment">// 如果是生产环境 我们就使用服务器的uri，如果是开发环境，我们就添加/apis前缀</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    baseUrl: isPro ? <span class="string">'http://118.24.85.97:22222'</span> : <span class="string">'/apis'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在main.js中引入这个文件，然后设置axios的<code>baseURL</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入api.config.js文件，然后设置axios的baseURL</span></span><br><span class="line"><span class="keyword">import</span> apiConfig <span class="keyword">from</span> <span class="string">'./apis/api.config'</span></span><br><span class="line">axios.defaults.baseURL=apiConfig.baseUrl</span><br></pre></td></tr></table></figure>
<p>再来测试一下不加/apis的接口</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.get(<span class="string">'/api'</span>)</span><br><span class="line">.then(<span class="function"><span class="params">res</span>=&gt;</span><span class="built_in">console</span>.log(res))</span><br><span class="line">.catch(<span class="function"><span class="params">err</span>=&gt;</span><span class="built_in">console</span>.log(err))</span><br></pre></td></tr></table></figure>
<p>浏览器显示是ok的。这样我们以后使用axios访问接口就可以不加/apis了，打包后访问也不用手动去除/apis</p>
<h3 id="api统一管理"><a href="#api统一管理" class="headerlink" title="api统一管理"></a>api统一管理</h3><blockquote>
<p>在vue项目开发过程中，会涉及到很多接口的处理，当项目足够大时，就需要统一管理接口。</p>
<p>具体方法应该挺多的，这里只介绍一种：使用axios+async/await进行接口的统一管理</p>
</blockquote>
<p>一般来说，后台的接口是分模块的，例如我们后台的测试接口</p>
<ul>
<li>身份认证 /api/login /api/reg</li>
<li>用户信息 /v1/api/user</li>
</ul>
<p>我们首先在src目录下新建一个apis文件夹，后台提供的所有接口都在这里定义</p>
<p>第二步，按照后台提供的模块新建js文件，我们新建<code>user.js</code> <code>auth.js</code></p>
<p>第三步，引入axios，做相应的配置</p>
<p>在apis目录下新建一个http.js，在里面做axios相应的配置</p>
<ol>
<li>我们上文中是在main.js文件引入的axios,设置的baseURL，以上代码可以去除，改为在http.js中引入</li>
<li>我们做的主要是：引入axios,创建一个axios的实例(实例的功能和axios一样)</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">import</span> apiConfig <span class="keyword">from</span> <span class="string">'./api.config'</span></span><br><span class="line"><span class="comment">//创建axios的一个实例</span></span><br><span class="line"><span class="keyword">var</span> instance = axios.create(&#123;</span><br><span class="line">    baseURL:apiConfig.baseUrl,</span><br><span class="line">    timeout: <span class="number">6000</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------- 一、请求拦截器 后面介绍</span></span><br><span class="line">instance.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对请求错误做些什么</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//----------------- 二、响应拦截器 后面介绍</span></span><br><span class="line">instance.interceptors.response.use(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> response.data;</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对响应错误做点什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用es6的export default导出了一个函数，导出的函数代替axios去帮我们请求数据，</span></span><br><span class="line"><span class="comment"> * 函数的参数及返回值如下：</span></span><br><span class="line"><span class="comment"> * @param &#123;String&#125; method  请求的方法：get、post、delete、put</span></span><br><span class="line"><span class="comment"> * @param &#123;String&#125; url     请求的url:</span></span><br><span class="line"><span class="comment"> * @param &#123;Object&#125; data    请求的参数</span></span><br><span class="line"><span class="comment"> * @returns &#123;Promise&#125;     返回一个promise对象，其实就相当于axios请求数据的返回值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params">method, url, data = null</span>) </span>&#123;</span><br><span class="line">    method = method.toLowerCase();</span><br><span class="line">    <span class="keyword">if</span> (method == <span class="string">'post'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> instance.post(url, data)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method == <span class="string">'get'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> instance.get(url, &#123; <span class="attr">params</span>: data &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method == <span class="string">'delete'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> instance.delete(url, &#123; <span class="attr">params</span>: data &#125;)</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(method == <span class="string">'put'</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> instance.put(url,data)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.error(<span class="string">'未知的method'</span>+method)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第四步，在<code>apis/xxx.js</code>文件中引入http.js导出的函数，拿其中一个文件<code>auth.js</code>说明</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//auth.js 用于定义用户的登录、注册、注销等</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> req <span class="keyword">from</span> <span class="string">'./http.js'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义接口</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在这里定义了一个登陆的接口，把登陆的接口暴露出去给组件使用</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> LOGIN =<span class="function"><span class="params">params</span>=&gt;</span>req(<span class="string">'post'</span>,<span class="string">'/api/users/login'</span>,params)</span><br><span class="line"><span class="comment">//这里使用了箭头函数，转换一下写法：</span></span><br><span class="line"><span class="comment">// export const LOGIN=function(params)&#123;</span></span><br><span class="line"><span class="comment">//   return req('post','/api/login',params)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义注册接口</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> REG =<span class="function"><span class="params">params</span>=&gt;</span>req(<span class="string">'post'</span>,<span class="string">'/api/users/reg'</span>,params)</span><br></pre></td></tr></table></figure>
<p>最后一步，在需要用的该api的组件中引入并调用,我们在App.vue文件中测试下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;登录&lt;/h2&gt;</span><br><span class="line">    用户名&lt;input type=&quot;text&quot; v-model=&quot;user&quot;&gt;</span><br><span class="line">    密码&lt;input type=&quot;password&quot; v-model=&quot;pass&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;button&quot; @click=&quot;reg&quot; value=&quot;注册&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;button&quot; @click=&quot;login&quot; value=&quot;登录&quot;&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;LOGIN,REG&#125; from &apos;../../apis/auth.js&apos;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      user:&apos;&apos;,</span><br><span class="line">      pass:&apos;&apos;,</span><br><span class="line">      err:[]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    async reg()&#123;</span><br><span class="line">      try &#123;</span><br><span class="line">        const data = await REG(&#123; name: this.user,pass: this.pass &#125;)</span><br><span class="line">        console.log(data)</span><br><span class="line">        alert(JSON.stringify(data))</span><br><span class="line">        this.cleanForm()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      &#125; catch (error) &#123;</span><br><span class="line">        console.log(error)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    async login()&#123;</span><br><span class="line">      try &#123;</span><br><span class="line">        const data = await LOGIN(&#123; name: this.user,pass: this.pass &#125;)</span><br><span class="line">        alert(JSON.stringify(data))</span><br><span class="line">        this.cleanForm()</span><br><span class="line">      &#125; catch (error) &#123;</span><br><span class="line">        console.log(error)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    cleanForm()&#123;</span><br><span class="line">      this.user=&apos;&apos;</span><br><span class="line">      this.pass=&apos;&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>注：如果要打开Login.vue,需要配置对应的路由</p>
<p>上面的代码引入了<code>auth.js</code>定义的api，并在对应的方法中使用。代码中用到了async/await,其实很简单，可以假设async是个标识，说明这个函数中有异步请求，await翻译为’等’,后面接一个异步请求，等后面的异步请求执行完成之后，会把结果赋给<code>=</code>左边的值</p>
<blockquote>
<p>参考链接 <span class="exturl" data-url="aHR0cDovL3d3dy5ydW5vb2IuY29tL3czY25vdGUvZXM2LWFzeW5jLmh0bWw=" title="http://www.runoob.com/w3cnote/es6-async.html">http://www.runoob.com/w3cnote…<i class="fa fa-external-link"></i></span></p>
</blockquote>
<p>总结一下，像上面那样定义接口虽然麻烦点，但有两个好处：</p>
<ol>
<li>代码看起来规范，所有的接口都在一个文件夹定义，不用分散的各个组件，维护起来简单，例如后台的一些url变了，改起来也方便</li>
<li>可以做到接口一次定义，到处使用</li>
</ol>
<h2 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h2><blockquote>
<p>Vue Router官方文档 <span class="exturl" data-url="aHR0cHM6Ly9yb3V0ZXIudnVlanMub3JnL3poLw==" title="https://router.vuejs.org/zh/">https://router.vuejs.org/zh/<i class="fa fa-external-link"></i></span></p>
<p>前端路由原理：<span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxODIxOTcwNQ==" title="https://segmentfault.com/a/1190000018219705">https://segmentfault.com/a/11…<i class="fa fa-external-link"></i></span></p>
</blockquote>
<h3 id="最简配置"><a href="#最简配置" class="headerlink" title="最简配置"></a>最简配置</h3><blockquote>
<p>路由的配置文件在router/index.js文件中</p>
<p>先引入文件，再进行配置</p>
</blockquote>
<p>首先在<code>views目录中新建以下页面</code>，主页(Home/Home.vue),登录页(Login/Login.vue),测试页(Test/Test.vue)</p>
<p>然后配置下路由</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="comment">//@表示 src目录 webpack的配置在webpack.base.conf.js第29行 alias&#123;'@':resolve('src')&#125;</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'@/views/Home/Home.vue'</span></span><br><span class="line"><span class="keyword">import</span> Login <span class="keyword">from</span> <span class="string">'@/views/Login/Login.vue'</span></span><br><span class="line"><span class="keyword">import</span> Test <span class="keyword">from</span> <span class="string">'@/views/Test/Test.vue'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  routes: [<span class="comment">//路由规则</span></span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/'</span>,</span><br><span class="line">      name: <span class="string">'Home'</span>,</span><br><span class="line">      component: Home</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path:<span class="string">'/login'</span>,</span><br><span class="line">      name:<span class="string">'Login'</span>,</span><br><span class="line">      component:Login</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path:<span class="string">'/test'</span>,</span><br><span class="line">      name:<span class="string">'Test'</span>,</span><br><span class="line">      component:Test</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>路由规则在<code>routes</code>中进行配置,<code>routes</code>是一个数组，接受一系列路由规则，每个路由规则是一个对象，包括路径、路由名字，和路径匹配的组件，建议给每个路由加个名字，在后面可能会用到。</p>
<p>打开浏览器，输入相应的url查看配置的路由是否正确,不正确的话检查下自己的配置</p>
<h3 id="配置路由懒加载"><a href="#配置路由懒加载" class="headerlink" title="配置路由懒加载"></a>配置路由懒加载</h3><blockquote>
<p>参考文档：</p>
<p>路由懒加载官方文档：<span class="exturl" data-url="aHR0cHM6Ly9yb3V0ZXIudnVlanMub3JnL3poL2d1aWRlL2FkdmFuY2VkL2xhenktbG9hZGluZy5odG1s" title="https://router.vuejs.org/zh/guide/advanced/lazy-loading.html">https://router.vuejs.org/zh/g…<i class="fa fa-external-link"></i></span></p>
<p>webpack之mainfest解读：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lvdW50aC9ibG9nL2lzc3Vlcy8z" title="https://github.com/younth/blog/issues/3">https://github.com/younth/blo…<i class="fa fa-external-link"></i></span></p>
</blockquote>
<p>当打包构建应用时，Javascript 包会变得非常大，影响页面加载。如果我们能把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，这样就更加高效了。所以，懒加载的含义是当路由被访问时再去加载对应的js代码。</p>
<p>首先，不做路由懒加载的情况下，我们打包一下（切换到项目目录，执行<code>npm run build</code>）,然后会发现项目下生产了3个js文件</p>
<p><img src="https://i.loli.net/2019/05/08/5cd23b12ad655.jpg" alt></p>
<p>简单介绍一下作用：</p>
<ol>
<li>vendor.js 第三方库，一般是 node_modules里面的依赖进行打包 体积最大</li>
<li>app.js 入口js打包的结果，即我们编写的所有代码都会打包进去</li>
<li>manifest.js 主要是一些异步加载的实现方法（通过建立script方式动态引入js），内容上包含异步js的文件名和路径。</li>
</ol>
<p>然后我们实现一下路由懒加载 <code>@/router/router.js</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="comment">// import Home from '@/views/Home/Home.vue'</span></span><br><span class="line"><span class="comment">// import Login from '@/views/Login/Login.vue'</span></span><br><span class="line"><span class="comment">// import Test from '@/views/Test/Test.vue'</span></span><br><span class="line"><span class="comment">// 懒加载方式</span></span><br><span class="line"><span class="keyword">const</span> Home=<span class="function"><span class="params">()</span>=&gt;</span><span class="keyword">import</span>(<span class="string">'@/views/Home/Home.vue'</span>)</span><br><span class="line"><span class="keyword">const</span> Login=<span class="function"><span class="params">()</span>=&gt;</span><span class="keyword">import</span>(<span class="string">'@/views/Login/Login.vue'</span>)</span><br><span class="line"><span class="keyword">const</span> Test=<span class="function"><span class="params">()</span>=&gt;</span><span class="keyword">import</span>(<span class="string">'@/views/Test/Test.vue'</span>)</span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/'</span>,</span><br><span class="line">      name: <span class="string">'Home'</span>,</span><br><span class="line">      component: Home</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path:<span class="string">'/login'</span>,</span><br><span class="line">      name:<span class="string">'Login'</span>,</span><br><span class="line">      component:Login</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path:<span class="string">'/test'</span>,</span><br><span class="line">      name:<span class="string">'Test'</span>,</span><br><span class="line">      component:Test</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>懒加载只是改变了一下组件的引用方式，由原来的直接引入变成异步引入，当我们访问对应的路由path时，才会加载相应的路由组件。</p>
<p>配置完成后再执行一次打包，结果如下：<img src="https://i.loli.net/2019/05/08/5cd23b136d294.jpg" alt></p>
<p>我们会发现目录中多出来3个js文件,并且<code>app.js</code>文件变小了。这说明配置了懒加载之后，app.js中其他组件的内容被抽离出来，分配到各自的js文件中。配置懒加载之后，刚开始打开页面只会加载app.js文件，只有在用户点击相应路由时，才会加载对应的js代码。当我们的业务代码非常多时，懒加载是个很好的选择。</p>
<h3 id="配置history模式"><a href="#配置history模式" class="headerlink" title="配置history模式"></a>配置history模式</h3><blockquote>
<p>官方文档：<span class="exturl" data-url="aHR0cHM6Ly9yb3V0ZXIudnVlanMub3JnL3poL2d1aWRlL2Vzc2VudGlhbHMvaGlzdG9yeS1tb2RlLmh0bWw=" title="https://router.vuejs.org/zh/guide/essentials/history-mode.html">https://router.vuejs.org/zh/g…<i class="fa fa-external-link"></i></span></p>
</blockquote>
<p>配置history模式有两个原因，一是因为hash模式看很丑，二是因为预加载要用到History模式，配置非常简单,只需要配置属性<code>mode</code>的值为’history’</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  mode: <span class="string">'history'</span>,</span><br><span class="line">  routes: [...]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>不过这种方式需要后台的支持，当匹配不到url时，返回url/index.html页面</p>
<p>nginx配置如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">  try_files $uri /index.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h2><blockquote>
<p>参考链接：</p>
<p>json web token入门教程 <span class="exturl" data-url="aHR0cDovL3d3dy5ydWFueWlmZW5nLmNvbS9ibG9nLzIwMTgvMDcvanNvbl93ZWJfdG9rZW4tdHV0b3JpYWwuaHRtbA==" title="http://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html">http://www.ruanyifeng.com/blo…<i class="fa fa-external-link"></i></span></p>
<p>jwt官网 <span class="exturl" data-url="aHR0cHM6Ly9qd3QuaW8v" title="https://jwt.io/">https://jwt.io/<i class="fa fa-external-link"></i></span></p>
</blockquote>
<h3 id="token验证"><a href="#token验证" class="headerlink" title="token验证"></a>token验证</h3><p>我们通过jwt进行用户认证，jwt的原理是：服务器认证以后，生成一个json对象，发回给用户.</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"id"</span>:<span class="string">"001"</span>,</span><br><span class="line">    <span class="attr">"姓名"</span>:<span class="string">"小明"</span>,</span><br><span class="line">    <span class="attr">"角色"</span>:<span class="string">"管理员"</span>,</span><br><span class="line">    <span class="attr">"到期时间"</span>:<span class="string">"2019年3月3日12时30分"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以后用户与服务端通信的时候，都要发回这个json对象。服务器完全靠这个对象认定用户身份(一般是通过这个对象的中id去数据库请求数据)。为了防止用户篡改数据，服务器会在生成这个对象的时候，加上签名。就像这种形式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c</span><br></pre></td></tr></table></figure>
<p>关于JWT保存更新的业务流程如下：</p>
<ol>
<li>保存：登录后保存token</li>
<li>添加：每次发送请求之前检查token是否存在，存在，添加到请求头中，发送请求</li>
<li>更新：每次发送请求服务器返回数据之后更新token</li>
</ol>
<p>主要逻辑包括：</p>
<ol>
<li>登录之后，在<code>localStorage</code>中保存token</li>
<li>每次发送请求之前，使用axios请求拦截器将token放到请求头中</li>
<li>每次发送请求服务器返回数据之后在axios的响应拦截器中更新token</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.登录之后保存token login.vue</span></span><br><span class="line"><span class="keyword">async</span> login()&#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> LOGIN(&#123; <span class="attr">name</span>: <span class="keyword">this</span>.user,<span class="attr">pass</span>: <span class="keyword">this</span>.pass &#125;)</span><br><span class="line">    <span class="comment">//保存token</span></span><br><span class="line">    localStorage.setItem(<span class="string">'token'</span>,data.token)</span><br><span class="line">    <span class="comment">//查看是否保存成功</span></span><br><span class="line">    <span class="built_in">console</span>.log(localStorage.getItem(<span class="string">'token'</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//每次发送请求之前，讲token放到请求头中 api/http.js</span></span><br><span class="line"><span class="comment">//---使用axios的请求拦截器，每次发送请求之前拦截一下</span></span><br><span class="line">instance.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 给头添加token</span></span><br><span class="line">    <span class="keyword">if</span> (localStorage.getItem(<span class="string">'token'</span>))&#123;<span class="comment">//存在token,加入头</span></span><br><span class="line">        config.headers.authorization=localStorage.getItem(<span class="string">'token'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对请求错误做些什么</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//完成之后，记得发送一个请求，看看是否正确添加token</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//---响应拦截器，服务器响应后先到达这里</span></span><br><span class="line">instance.interceptors.response.use(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(response.data.code==<span class="string">'2000'</span>)&#123;<span class="comment">//成功响应，更新token</span></span><br><span class="line">      <span class="keyword">if</span>(response.data.token)&#123;</span><br><span class="line">        localStorage.setItem(<span class="string">'token'</span>,response.data.token)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//错误处理 根据不同的状态码，进行错误处理  </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> response.data;</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对响应错误做点什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="对页面的访问权限"><a href="#对页面的访问权限" class="headerlink" title="对页面的访问权限"></a>对页面的访问权限</h3><p>除了对token的操作，我们还要判断用户有没有权限访问这个页面(有些页面是用户必须登录才能访问的)，具体配置要使用Vue Router的导航守卫</p>
<blockquote>
<p>参考链接：<span class="exturl" data-url="aHR0cHM6Ly9yb3V0ZXIudnVlanMub3JnL3poL2d1aWRlL2FkdmFuY2VkL25hdmlnYXRpb24tZ3VhcmRzLmh0bWw=" title="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html">https://router.vuejs.org/zh/g…<i class="fa fa-external-link"></i></span></p>
</blockquote>
<p>在全局前置守卫中进行验证</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在router/index.js进行配置</span></span><br><span class="line"><span class="comment">//在每次进行路由跳转之前进行</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;<span class="comment">//增加登录验证</span></span><br><span class="line">  <span class="keyword">const</span> isLogin=localStorage.getItem(<span class="string">'token'</span>)?<span class="literal">true</span>:<span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span>(to.path==<span class="string">'/login'</span>)&#123;<span class="comment">//如果是登录页面，不需要token</span></span><br><span class="line">    next();</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;<span class="comment">//如果不是登录页面就要判断是否登录</span></span><br><span class="line">    isLogin?next():next(<span class="string">'/login'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="将界面交给第三方UI库"><a href="#将界面交给第三方UI库" class="headerlink" title="将界面交给第三方UI库"></a>将界面交给第三方UI库</h2><blockquote>
<p>iview官网:<span class="exturl" data-url="aHR0cHM6Ly93d3cuaXZpZXd1aS5jb20v" title="https://www.iviewui.com/">https://www.iviewui.com/<i class="fa fa-external-link"></i></span></p>
</blockquote>
<p>为节省开发时间，我们往往会使用一些第三方ui库，比如iview elementui等</p>
<p>我们在这里只介绍iview,其他ui库大同小异</p>
<h3 id="iview的安装与引入"><a href="#iview的安装与引入" class="headerlink" title="iview的安装与引入"></a>iview的安装与引入</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm i iview --save</span><br></pre></td></tr></table></figure>
<h4 id="按需引入组件"><a href="#按需引入组件" class="headerlink" title="按需引入组件"></a>按需引入组件</h4><p>官网说，需要下载插件才能按需引入，<span class="exturl" data-url="aHR0cHM6Ly93d3cuaXZpZXd1aS5jb20vZG9jcy9ndWlkZS9zdGFydCNBWFlZ" title="https://www.iviewui.com/docs/guide/start#AXYY">官网说明<i class="fa fa-external-link"></i></span>，但是不下好像也可以正常引入</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在main.js文件中引入项目需要的组件</span></span><br><span class="line"><span class="keyword">import</span> &#123;Button,Table,Message&#125; <span class="keyword">from</span> <span class="string">'iview'</span></span><br><span class="line"><span class="comment">//然后注册组件</span></span><br><span class="line">Vue.component(<span class="string">'Button'</span>,Button)</span><br><span class="line">Vue.component(<span class="string">'Table'</span>,Table)</span><br><span class="line">Vue.component(<span class="string">'Message'</span>,Message)</span><br></pre></td></tr></table></figure>
<p>这样注册的话太繁琐，所以需要优化一下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;Button,Table,Message&#125; <span class="keyword">from</span> <span class="string">'iview'</span></span><br><span class="line"><span class="keyword">const</span> iviewComs=&#123;Button,Table,Message&#125;</span><br><span class="line"><span class="built_in">Object</span>.keys(iviewComs).forEach(<span class="function"><span class="params">key</span>=&gt;</span>&#123;Vue.component(key,component[key])&#125;)</span><br></pre></td></tr></table></figure>
<p>代码都写在main.js中显得太拥挤，我们可以把代码拿出去，写成一个插件</p>
<p>我们在components文件夹中新建一个文件<code>iview-coms</code>，用来放iview中引入的组件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//components/iview-coms.js  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;Button,Table,Message&#125; <span class="keyword">from</span> <span class="string">'iview'</span></span><br><span class="line"><span class="keyword">const</span> components=&#123;Button,Table,Message&#125;</span><br><span class="line"><span class="keyword">const</span> install = <span class="function"><span class="keyword">function</span>(<span class="params">Vue, opts = &#123;&#125;</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">Object</span>.keys(components).forEach(<span class="function"><span class="params">key</span>=&gt;</span>&#123;</span><br><span class="line">    Vue.component(key,components[key])</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> install</span><br></pre></td></tr></table></figure>
<p>然后在main.js中引入,<code>use</code>这个插件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> iviewComs <span class="keyword">from</span> <span class="string">'./components/iview-coms'</span></span><br><span class="line">Vue.use(iviewComs)</span><br></pre></td></tr></table></figure>
<p>ok了，接下来看自定义主题</p>
<h4 id="自定义主题"><a href="#自定义主题" class="headerlink" title="自定义主题"></a>自定义主题</h4><p>官网链接：<span class="exturl" data-url="aHR0cHM6Ly93d3cuaXZpZXd1aS5jb20vZG9jcy9ndWlkZS90aGVtZQ==" title="https://www.iviewui.com/docs/guide/theme">https://www.iviewui.com/docs/…<i class="fa fa-external-link"></i></span></p>
<p>原理很简单，就是把ivew的less文件引入，并且覆盖掉，然后在main.js文件中引入自己的less文件</p>
<p>首先，我们需要下载解析less文件的loader ,<code>less</code>和<code>less-loader</code>，这里有个坑，下载less的时候要下载3版本以下的，不然会报一堆错误</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm i less@2.7.2 less-loader -D</span><br></pre></td></tr></table></figure>
<p>下载完就ok了，不需要在webpack中进行配置，因为已经配置好了</p>
<p>然后，在assets/styles/base.less(没有需要自己新建)中，引入iview的样式文件,并且覆盖掉</p>
<p>默认变量列表：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2l2aWV3L2l2aWV3L2Jsb2IvMi4wL3NyYy9zdHlsZXMvY3VzdG9tLmxlc3M=" title="https://github.com/iview/iview/blob/2.0/src/styles/custom.less">https://github.com/iview/ivie…<i class="fa fa-external-link"></i></span></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*assets/styles/base.less*/</span></span><br><span class="line"><span class="comment">/*------ 引入iview样式*/</span></span><br><span class="line">@<span class="keyword">import</span> <span class="string">'~iview/src/styles/index.less'</span>;</span><br><span class="line"><span class="comment">/*------ 覆盖iview的样式*/</span></span><br><span class="line">@primary-color: #E91E63;</span><br><span class="line">@<span class="keyword">error</span>-<span class="keyword">color</span> : #FF3300;</span><br></pre></td></tr></table></figure>
<p>最后在main.js引入该less文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./assets/styles/base.less'</span></span><br></pre></td></tr></table></figure>
<p>此时，引入的组件就可以在.vue文件中使用了，看一下效果：<img src="https://i.loli.net/2019/05/08/5cd23b8241ec6.png" alt></p>
<p>ok了。最后还要补充一下，在项目开发过程中，不可避免的要覆盖iview默认的样式，我们分为两种情况，一种是全局覆盖，一种是局部覆盖。</p>
<p>全局覆盖的话我们要新建一个less文件，比如叫<code>cover-iview.less</code>所有覆盖iview样式的代码都放在这里,然后在base.less中引入这个文件。</p>
<p>局部覆盖的话要注意不要影响到别的样式，所以要充分利用less的作用域,例如我们只需要改home页面下的iview按钮样式，我们可以这样：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.home</span>&#123;</span><br><span class="line">    <span class="selector-class">.ivu-btn</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>##开发中注意问题</p>
<p>###编写自己的工具库插件</p>
<blockquote>
<p>参考文档：</p>
<p>vue插件说明:<span class="exturl" data-url="aHR0cHM6Ly9jbi52dWVqcy5vcmcvdjIvZ3VpZGUvcGx1Z2lucy5odG1s" title="https://cn.vuejs.org/v2/guide/plugins.html">https://cn.vuejs.org/v2/guide…<i class="fa fa-external-link"></i></span></p>
</blockquote>
<p>项目中往往会使用一些通用的函数，比如获取当前时间、时间格式转化，防抖，节流等，我们可以把这个公用的部分封装成插件，在main.js中引入。</p>
<p>首先，在src目录下新建<code>utils</code>文件夹，在里面新建<code>index.js</code>,<code>utils.js</code>文件</p>
<p>我们在<code>utils.js</code>中编写自己的工具库，然后导出</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Utils</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">this</span>.d=<span class="keyword">new</span> <span class="built_in">Date</span>();<span class="comment">//date对象</span></span><br><span class="line">        <span class="keyword">this</span>.instance=<span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> getInstance()&#123;<span class="comment">//单例模式</span></span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">this</span>.instance)&#123;</span><br><span class="line">            <span class="keyword">this</span>.instance = <span class="keyword">new</span> Utils();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pick(obj,arr)&#123;<span class="comment">//pick(&#123; a: 1, b: '2', 'c': 3 &#125;, ['a', 'c'])  =&gt;&#123;a:1,c:3&#125;</span></span><br><span class="line">       <span class="keyword">return</span> arr.reduce(<span class="function">(<span class="params">acc,curr</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (curr <span class="keyword">in</span> obj &amp;&amp; (acc[curr] = obj[curr]), acc)</span><br><span class="line">        &#125;,&#123;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dateFormat(datetime,pattern=<span class="string">""</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> vWeek = [<span class="string">"星期天"</span>,<span class="string">"星期一"</span>,<span class="string">"星期二"</span>,<span class="string">"星期三"</span>,<span class="string">"星期四"</span>,<span class="string">"星期五"</span>,<span class="string">"星期六"</span>];</span><br><span class="line">        <span class="keyword">let</span> dt=<span class="keyword">new</span> <span class="built_in">Date</span>(datetime);</span><br><span class="line">        <span class="keyword">let</span> y=dt.getFullYear();</span><br><span class="line">        <span class="keyword">let</span> m=(dt.getMonth()+<span class="number">1</span>).toString().padStart(<span class="number">2</span>,<span class="string">'0'</span>);</span><br><span class="line">        <span class="keyword">let</span> d=dt.getDate().toString().padStart(<span class="number">2</span>,<span class="string">'0'</span>);</span><br><span class="line">        <span class="keyword">let</span> hh=dt.getHours().toString().padStart(<span class="number">2</span>,<span class="string">'0'</span>);</span><br><span class="line">        <span class="keyword">let</span> mm=dt.getMinutes().toString().padStart(<span class="number">2</span>,<span class="string">'0'</span>);</span><br><span class="line">        <span class="keyword">let</span> ss=dt.getSeconds().toString().padStart(<span class="number">2</span>,<span class="string">'0'</span>);</span><br><span class="line">        <span class="keyword">let</span> vWeek_s = dt.getDay();<span class="comment">//星期</span></span><br><span class="line">        <span class="keyword">if</span>(pattern.toLowerCase() === <span class="string">'yyyy-mm-dd'</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;y&#125;</span>-<span class="subst">$&#123;m&#125;</span>-<span class="subst">$&#123;d&#125;</span>`</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(pattern.toLowerCase() === <span class="string">'mm-dd'</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;m&#125;</span>-<span class="subst">$&#123;d&#125;</span>`</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(pattern.toLowerCase() === <span class="string">'yyyymmddhhmmss'</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;y&#125;</span><span class="subst">$&#123;m&#125;</span><span class="subst">$&#123;d&#125;</span><span class="subst">$&#123;hh&#125;</span><span class="subst">$&#123;mm&#125;</span><span class="subst">$&#123;ss&#125;</span>`</span></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;y&#125;</span>-<span class="subst">$&#123;m&#125;</span>-<span class="subst">$&#123;d&#125;</span> <span class="subst">$&#123;hh&#125;</span>:<span class="subst">$&#123;mm&#125;</span>:<span class="subst">$&#123;ss&#125;</span> <span class="subst">$&#123;vWeek[vWeek_s]&#125;</span>`</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> UTIL = Utils.getInstance();</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(UTIL.dateFormat(new Date(),'yyyymmddhhmmss')) //=&gt;20190312110722</span></span><br><span class="line"><span class="comment">// console.log(UTIL.dateFormat(new Date()))//=&gt;2019-03-12 11:07:22 星期二</span></span><br><span class="line"><span class="comment">// console.log(UTIL.pick(&#123; a: 1, b: '2', 'c': 3 &#125;, ['a', 'c']))//=&gt;&#123;a:1,c:3&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> UTIL;</span><br></pre></td></tr></table></figure>
<p>然后在index.js中编写插件，导出</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//utils/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> UTIL <span class="keyword">from</span> <span class="string">'./utils.js'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> UtilPlugin=&#123;&#125;</span><br><span class="line"></span><br><span class="line">UtilPlugin.install=<span class="function"><span class="keyword">function</span>(<span class="params">Vue,options</span>)</span>&#123;<span class="comment">//插件必须有install方法，接受两个参数，一个是Vue构造器,一个是参数</span></span><br><span class="line">  Vue.prototype.$utils=UTIL<span class="comment">//在vue prototype上添加实例方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> UtilPlugin</span><br></pre></td></tr></table></figure>
<p>最后在main.js中引入并use插件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// utils</span></span><br><span class="line"><span class="keyword">import</span> Util <span class="keyword">from</span> <span class="string">'./utils/index'</span></span><br><span class="line">Vue.use(Util)</span><br><span class="line"><span class="built_in">console</span>.log(Vue.prototype.$util)<span class="comment">//打印下是否引入成功</span></span><br></pre></td></tr></table></figure>
<p>之后就可以在组件中通过使用<code>this.$utils</code>调用方法了</p>
<h2 id="兼容性处理"><a href="#兼容性处理" class="headerlink" title="兼容性处理"></a>兼容性处理</h2><blockquote>
<p>我们的目标是兼容到ie9,对ie8及以下的浏览器做相应的跳转处理(跳转到浏览器下载界面)</p>
<p>兼容性对一个程序来说是非常重要的，兼容性测试越早越好</p>
</blockquote>
<p><img src="https://i.loli.net/2019/05/08/5cd23b4d084a4.png" alt></p>
<h3 id="对ie8及以下浏览器的跳转处理"><a href="#对ie8及以下浏览器的跳转处理" class="headerlink" title="对ie8及以下浏览器的跳转处理"></a>对ie8及以下浏览器的跳转处理</h3><p>在项目根目录下中的html中head中加入下面代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if lte IE 8]&gt;&lt;script&gt;window.location.href="https://support.dmeng.net/upgrade-your-browser.html?referrer="+encodeURIComponent(window.location.href);&lt;/script&gt;&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure>
<p>目的是检测ie浏览器的版本，如果低于&lt;=ie8，就跳转到下面这个页面 <img src="https://i.loli.net/2019/05/08/5cd23b6314ae7.png" alt></p>
<h3 id="兼容ie9"><a href="#兼容ie9" class="headerlink" title="兼容ie9"></a>兼容ie9</h3><blockquote>
<p>参考链接：<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YjI4NjhiNDZmYjlhMDBlNmY2NWY4N2U=" title="https://juejin.im/post/5b2868b46fb9a00e6f65f87e">https://juejin.im/post/5b2868…<i class="fa fa-external-link"></i></span></p>
</blockquote>
<h4 id="ES6兼容"><a href="#ES6兼容" class="headerlink" title="ES6兼容"></a>ES6兼容</h4><p>我们把浏览器调到ie9,然后看控制台报错信息 <img src="https://i.loli.net/2019/05/08/5cd23b6e9d3ae.png" alt></p>
<p>报这个错的原因是es6的新对象，新表达式，ie9不支持，为解决这个问题，我们需要引入<code>babel-polyfill</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm i babel-polyfill -D</span><br></pre></td></tr></table></figure>
<p>安装完成之后，在main.js文件中引入</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'babel-polyfill'</span></span><br></pre></td></tr></table></figure>
<p>在项目使用 <code>vue-cli</code> 生成的代码中，根目录有一个 <code>.babelrc</code> 文件，这是项目使用 babel 的配置文件。在默认生成的模板内容中，增加 <code>&quot;useBuiltIns&quot;: &quot;entry&quot;</code> 的设置内容，这是一个指定哪些内容需要被 polyfill(兼容) 的设置</p>
<p>useBuiltIns 有三个设置选项</p>
<ul>
<li><code>false</code> - 不做任何操作</li>
<li><code>entry</code> - 根据浏览器版本的支持，将 polyfill 需求拆分引入，仅引入有浏览器不支持的polyfill</li>
<li><code>usage</code> - 检测代码中 <code>ES6/7/8</code> 等的使用情况，仅仅加载代码中用到的 polyfill</li>
</ul>
<p>####建立自己的polyfill</p>
<p>加入这些代码后，工程中大部分代码已可以兼容到ie9版本,但还是会有少部分不兼容的特性，例如<code>requestAnimationFrame</code>、<code>classList</code>等。对于这些内容，我们需要自己定义polyfill来解决，在src目录下新建一个文件夹polyfill,然后在polyfill文件夹下面建一个polyfill.js，我们在polyfill.js中加入我们的兼容代码</p>
<p>然后在main.js中引入这个文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./polyfill/polyfill'</span></span><br></pre></td></tr></table></figure>
<p>解决兼容方式的正确姿势是：<code>拿到ie9浏览器下的报错信息，去goole或者baidu搜索，得到polyfill,然后加入到自己的polyfill.js文件中</code></p>
<h1 id="三、优化"><a href="#三、优化" class="headerlink" title="三、优化"></a>三、优化</h1><h2 id="webpack3-x优化打包速度"><a href="#webpack3-x优化打包速度" class="headerlink" title="webpack3.x优化打包速度"></a>webpack3.x优化打包速度</h2><p>我们执行一下<code>npm run build</code>，结果如下：<img src="https://i.loli.net/2019/05/08/5cd23b92a9498.png" alt></p>
<p>整个打包过程花了32s左右，现在我们的项目只是引入了相关的依赖，一些业务逻辑还没有写，打包速度就那么慢了，等到我们写完整个项目，打包速度还会继续变长，所以我们需要优化一下。</p>
<blockquote>
<p>优化打包速度，我们修改的主要是<code>webpack.prod.conf.js</code>文件</p>
</blockquote>
<h3 id="替换代码压缩工具"><a href="#替换代码压缩工具" class="headerlink" title="替换代码压缩工具"></a>替换代码压缩工具</h3><p>Webpack 默认提供的 UglifyJS 插件，由于采用单线程压缩，速度慢 ；</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvd2VicGFjay1wYXJhbGxlbC11Z2xpZnktcGx1Z2lu" title="https://www.npmjs.com/package/webpack-parallel-uglify-plugin">webpack-parallel-uglify-plugin<i class="fa fa-external-link"></i></span> 插件可以并行运行 UglifyJS 插件，更加充分而合理的使用 CPU 资源，这可以大大减少的构建时间；</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//安装</span></span><br><span class="line">cnpm i webpack-parallel-uglify-plugin -D</span><br><span class="line"><span class="comment">//配置 webpack.prod.conf.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//首先删除项目中的 UglifyJsPlugin插件及配置,第二次打包时提高速度，要把.cache文件加入到gitignore中</span></span><br><span class="line"><span class="comment">// new webpack.optimize.UglifyJsPlugin(&#123;</span></span><br><span class="line"><span class="comment">//   compress: &#123;</span></span><br><span class="line"><span class="comment">//     warnings: false,</span></span><br><span class="line"><span class="comment">//     drop_console: true</span></span><br><span class="line"><span class="comment">//   &#125;,</span></span><br><span class="line"><span class="comment">//   sourceMap: true</span></span><br><span class="line"><span class="comment">// &#125;),</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//然后引入并使用我们刚才装的插件</span></span><br></pre></td></tr></table></figure>
<p>==注意：版本控制工具提交时，要忽略.<code>cache</code>文件==</p>
<p>配置完后我们执行<code>npm run build</code>,发现打包速度降到了23s<br><img src="https://i.loli.net/2019/05/08/5cd23bae1c64b.jpg" alt></p>
<p>再执行一次<code>npm run build</code>,发现打包速度降到了12s<br><img src="https://i.loli.net/2019/05/08/5cd23bae8de3b.jpg" alt></p>
<p>时间降低那么多是因为文件没有改动，直接利用了缓存中的js文件</p>
<h3 id="happypack开启多核构建项目"><a href="#happypack开启多核构建项目" class="headerlink" title="happypack开启多核构建项目"></a>happypack开启多核构建项目</h3><p>一般node.js是单线程执行编译，而happypack则是启动node的多线程进行构建，大大提高了构建速度。</p>
<p>首先安装，</p>
<p>修改<code>webpack.base.conf.js</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> HappyPack = <span class="built_in">require</span>(<span class="string">'happypack'</span>);</span><br><span class="line"><span class="keyword">const</span> os = <span class="built_in">require</span>(<span class="string">'os'</span>);</span><br><span class="line"><span class="keyword">const</span> happyThreadPool = HappyPack.ThreadPool(&#123; <span class="attr">size</span>: os.cpus().length &#125;);</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="comment">// 增加plugins</span></span><br><span class="line"> plugins: [</span><br><span class="line">  <span class="keyword">new</span> HappyPack(&#123;</span><br><span class="line">    id: <span class="string">'happy-babel-js'</span>,</span><br><span class="line">    loaders: [<span class="string">'babel-loader?cacheDirectory=true'</span>],</span><br><span class="line">    threadPool: happyThreadPool,</span><br><span class="line">  &#125;)</span><br><span class="line">]</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="comment">// 修改对应loader</span></span><br><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">  loader: <span class="string">'happypack/loader?id=happy-babel-js'</span>,</span><br><span class="line">  include: [resolve(<span class="string">'src'</span>), resolve(<span class="string">'test'</span>)],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置完成，执行<code>npm run build</code></p>
<p><img src="https://i.loli.net/2019/05/08/5cd23baf0a13b.jpg" alt></p>
<p>what??并没有提高速度 不要用这个鬼东西了</p>
<h3 id="hardSourceWebpackPlugin节省70-的时间"><a href="#hardSourceWebpackPlugin节省70-的时间" class="headerlink" title="hardSourceWebpackPlugin节省70%的时间"></a>hardSourceWebpackPlugin节省70%的时间</h3><blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL216Z29kZGFyZC9oYXJkLXNvdXJjZS13ZWJwYWNrLXBsdWdpbg==" title="https://github.com/mzgoddard/hard-source-webpack-plugin">https://github.com/mzgoddard/…<i class="fa fa-external-link"></i></span></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装</span></span><br><span class="line">cnpm install --save-dev hard-source-webpack-plugin</span><br></pre></td></tr></table></figure>
<p>使用，在webpack.prod.conf.js中引入并使用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> HardSourceWebpackPlugin = <span class="built_in">require</span>(<span class="string">'hard-source-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  context: <span class="comment">// ...</span></span><br><span class="line">  entry: <span class="comment">// ...</span></span><br><span class="line">  output: <span class="comment">// ...</span></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HardSourceWebpackPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果：<img src="https://i.loli.net/2019/05/08/5cd23bafa7aef.jpg" alt></p>
<p>注：要第二次打包才生效</p>
<p>总结下，使用了三个插件，我们的打包速度从30s降低到4s,awesome!</p>
<h2 id="webpack3-x优化首屏加载速度"><a href="#webpack3-x优化首屏加载速度" class="headerlink" title="webpack3.x优化首屏加载速度"></a>webpack3.x优化首屏加载速度</h2><p>首先要说明一下，首屏加载速度优化针对的是打包后dist文件。我们如果要在本地进行测试的话，需要本地有个服务器，我们在这里使用nginx。</p>
<p>###本地安装nginx</p>
<blockquote>
<p>下载地址： <span class="exturl" data-url="aHR0cDovL25naW54Lm9yZy9lbi9kb3dubG9hZC5odG1s" title="http://nginx.org/en/download.html">http://nginx.org/en/download….<i class="fa fa-external-link"></i></span></p>
</blockquote>
<p>在官网上找到自己系统适合的nginx版本，下载到本地</p>
<p>####window安装</p>
<ol>
<li>解压文件</li>
<li>双击运行nginx.exe，在任务管理器中出现nginx的进程，则表示安装成功</li>
</ol>
<h4 id="mac-linux安装"><a href="#mac-linux安装" class="headerlink" title="mac/linux安装"></a>mac/linux安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.解压文件</span></span><br><span class="line">tar -xzf nginx-1.14.0.tar.gz  <span class="comment">#mac可以使用解压缩工具解压，不必用命令行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2. 配置安装路径   --prefix指定安装路径  假设我要装到/usr/local/nginx文件夹中</span></span><br><span class="line">./configure --prefix=/Users/best9/<span class="built_in">local</span>/nginx</span><br><span class="line"></span><br><span class="line"><span class="comment">#编译</span></span><br><span class="line">make</span><br><span class="line"></span><br><span class="line"><span class="comment">##安装</span></span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<p>安装完成后进入到<code>—prefix</code>指定的文件夹中，执行<code>ll</code>,会发现文件夹下有以下目录</p>
<p><img src="https://i.loli.net/2019/05/08/5cd23bb0751ec.jpg" alt></p>
<p>我们要关心就是我上面标出来的三个目录</p>
<p>进到sbin目录中，启动nginx程序</p>
<p><img src="https://i.loli.net/2019/05/08/5cd23bb11aba5.jpg" alt></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> sbin</span><br><span class="line"><span class="comment">#需要使用root权限，否则会报错  报错信息可以在日志中查看到,错误日志目录 /logs/error.log</span></span><br><span class="line">sudo ./nginx</span><br></pre></td></tr></table></figure>
<p>正常的话，nginx会默认在localhost:80端口启动，在浏览器访问<code>localhost</code>，就会显示默认界面</p>
<p><img src="https://i.loli.net/2019/05/08/5cd23bb2094c4.jpg" alt></p>
<p>如果电脑的80端口被占用的话，在<code>conf/nginx.conf</code>文件中修改端口</p>
<h3 id="nginx常用命令"><a href="#nginx常用命令" class="headerlink" title="nginx常用命令"></a>nginx常用命令</h3><p>nginx使用-s发送信号操作运行中的进程,常用命令如下：</p>
<p>注意：使用命令需要在<code>sbin</code>目录下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#启动nginx</span></span><br><span class="line">./nginx</span><br><span class="line"><span class="comment">#立即停止服务 -s stop</span></span><br><span class="line">./nginx -s stop</span><br><span class="line"><span class="comment">#优雅地停止服务 -s quit</span></span><br><span class="line">./nginx -s quit</span><br><span class="line"><span class="comment">#重启服务 -s reload</span></span><br><span class="line">./nginx -s reload</span><br></pre></td></tr></table></figure>
<h3 id="nginx配置静态文件服务器"><a href="#nginx配置静态文件服务器" class="headerlink" title="nginx配置静态文件服务器"></a>nginx配置静态文件服务器</h3><blockquote>
<p>我们在这里使用nginx配置一个最简单的静态文件服务器，更复杂的配置稍后再讲</p>
</blockquote>
<p>nginx的配置文件地址：<code>conf/nginx.conf</code></p>
<p>使用vim或者其他编辑器打开该文件，修改配置文件第43-45行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim conf/nginx.conf</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2019/05/08/5cd23bb2c93c9.jpg" alt></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">  alias /Users/best9/github/vue2_template/dist;  #访问/相当于访问alias配置的目录    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置完成后保存，然后重启服务</p>
<p><code>sudo ./sbin/nginx -s reload</code> 要使用root权限重启</p>
<p>打开浏览器访问localhost</p>
<p><img src="https://i.loli.net/2019/05/08/5cd23bb39b8ba.jpg" alt></p>
<p>因为没有登录，会自动跳转到登录界面</p>
<p>到这里静态文件服务器就配置好了，但我们刷新下页面，会报错404</p>
<p><img src="https://i.loli.net/2019/05/08/5cd23bb44e5fb.jpg" alt></p>
<p>这是因为我们使用了vue router的history模式，我们需要在nginx中加入以下配置</p>
<p><img src="https://i.loli.net/2019/05/08/5cd23be88d4ef.jpg" alt></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">  try_files $uri $uri/  <span class="regexp">/index.html;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>
<p>然后重启nginx，再刷新页面就没问题了</p>
<h3 id="优化首屏加载速度"><a href="#优化首屏加载速度" class="headerlink" title="优化首屏加载速度"></a>优化首屏加载速度</h3><p>以上步骤就绪后，我们就可以来优化加载速度了</p>
<p>打开chrome的devTools面板，切换到<code>Network</code>，禁用浏览器缓存，刷新测试下加载速度，发现整个应用加载大约需要1.97s,如下图：</p>
<p><img src="https://i.loli.net/2019/05/08/5cd23be980a73.jpg" alt></p>
<p>把网络环境切换到<code>Fast 3G</code>,再测试一次，发现加载用了7.56s，白屏时间6.89s</p>
<p><img src="https://i.loli.net/2019/05/08/5cd23bea8f44b.jpg" alt></p>
<p>我们使用预渲染插件进行优化</p>
<h4 id="预渲染"><a href="#预渲染" class="headerlink" title="预渲染"></a>预渲染</h4><blockquote>
<p>使用插件：prerender-spa-plugin</p>
<p>参考链接：<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81OWQ0OWQ5NzZmYjlhMDBhNTcxZDY1MWQ=" title="https://juejin.im/post/59d49d976fb9a00a571d651d">https://juejin.im/post/59d49d…<i class="fa fa-external-link"></i></span></p>
</blockquote>
<p>首先，安装 <code>prerender-spa-plugin</code>，安装时件略长，因为其依赖了 <code>phantomjs</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install prerender-spa-plugin --save-dev</span><br></pre></td></tr></table></figure>
<p>我们只在生产环境中进行预渲染，修改<code>build/webpack.prod.conf.js</code>，在配置插件的地方加入如下代码。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入 预渲染插件</span></span><br><span class="line"><span class="keyword">const</span> PrerenderSpaP=<span class="built_in">require</span>(<span class="string">'prerender-spa-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//在plugins中配置</span></span><br><span class="line"><span class="keyword">new</span> PrerenderSpaP(</span><br><span class="line">  <span class="comment">// 输出目录的绝对路径</span></span><br><span class="line">  path.join(__dirname,<span class="string">'../dist'</span>),</span><br><span class="line">  <span class="comment">//预渲染路由</span></span><br><span class="line">  [<span class="string">'/home'</span>,<span class="string">'/login'</span>]</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>再次执行打包，然后再进行测试：</p>
<p><img src="https://i.loli.net/2019/05/08/5cd23beb9aa6d.jpg" alt></p>
<p>发现白屏时间为4.10s，在弱网环境下，使用预渲染，大约能缩减2.5秒的白屏时间</p>
<h5 id="预渲染注意事项"><a href="#预渲染注意事项" class="headerlink" title="预渲染注意事项"></a>预渲染注意事项</h5><ul>
<li>预渲染的路由不能是动态加载的，否则会报webpackJsonp is not define的错误，要想解决这个错误，可以看这里 <span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vZW50cnkvNTkxMWE0ODdhYzUwMmU0NTAyODRjYWY4" title="https://juejin.im/entry/5911a487ac502e450284caf8">https://juejin.im/entry/5911a…<i class="fa fa-external-link"></i></span></li>
<li>预渲染的路由不能是需要权限才能访问的页面。预渲染的机制是在本地跑一个chromium浏览器，然后去爬取你预渲染页面的Html，如果你的页面需要权限(登录)才能进入，就爬不到，也不会报错，最终只会渲染不需要权限的页面</li>
</ul>
<p>举个例子：</p>
<p>插件配置如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> PrerenderPlugin(&#123;</span><br><span class="line">    staticDir:path.join(__dirname,<span class="string">'../dist'</span>)</span><br><span class="line">    routes:[<span class="string">'/'</span>,<span class="string">'/about'</span>,<span class="string">'/login'</span>]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>路由配置如下：</p>
<p><img src="https://image.xuebin.me/006tKfTcgy1g1cjycq2i8j31320u0jv7.jpg" alt></p>
<h4 id="配置gzip压缩"><a href="#配置gzip压缩" class="headerlink" title="配置gzip压缩"></a>配置gzip压缩</h4><blockquote>
<p>gzip官方文档 <span class="exturl" data-url="aHR0cDovL25naW54Lm9yZy9lbi9kb2NzL2h0dHAvbmd4X2h0dHBfZ3ppcF9tb2R1bGUuaHRtbA==" title="http://nginx.org/en/docs/http/ngx_http_gzip_module.html">http://nginx.org/en/docs/http…<i class="fa fa-external-link"></i></span></p>
</blockquote>
<p>nginx默认是关闭gzip的，我们需要自己打开，并进行一些配置：</p>
<p><img src="https://image.xuebin.me/006tKfTcgy1g1cjyuzrfxj30rq02ojrq.jpg" alt></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">gzip:on;  #打开gzip,关闭为off</span><br><span class="line">gzip_min_length 1;  #小于gzip_min_length，不进行压缩(默认单位为byte)</span><br><span class="line">gzip_comp_level 2;  #压缩级别</span><br><span class="line">gzip_types text/plain text/css application/javascript text/javascript image/jpeg image/gif image/png;#指定类型进行gzip压缩</span><br></pre></td></tr></table></figure>
<p>配置完成后，我们再测试一下加载速度：</p>
<p><img src="https://image.xuebin.me/006tKfTcgy1g1cjzaj357j31hc0b7mzs.jpg" alt></p>
<p>发现白屏时间为1.95s,加载文件的体积也变小了</p>
<h1 id="四、部署"><a href="#四、部署" class="headerlink" title="四、部署"></a>四、部署</h1><h2 id="nginx配置反向代理"><a href="#nginx配置反向代理" class="headerlink" title="nginx配置反向代理"></a>nginx配置反向代理</h2><blockquote>
<p>我们要在本地部署测试，所以后台的地址是127.0.0.1:22222</p>
</blockquote>
<p>项目开发完成后需要部署到服务器，因为是前后端分离，所以前端的应用部署到nginx,后端的应用部署到自己对应的服务器，所以我们需要配置一下，把后端的服务器变成上游服务，nginx做反向代理服务器</p>
<blockquote>
<p>反向代理：服务器根据客户端的请求，从其关系的一组或多组后端服务器上获取资源，然后将这些资源返回给客户端。</p>
</blockquote>
<p>由于上游服务器(后台服务器)要处理非常复杂的逻辑，所以性能不怎么样，我们使用nginx作为反向代理服务器后，可以将请求按照负载均衡算法代理给多台上游服务器。配置如下：</p>
<p><img src="https://image.xuebin.me/006tKfTcly1g1ck018u5cj30r10c6wgn.jpg" alt></p>
<p>以上配置是将所有的请求转发给上游服务器，但如果我们只想将动态请求转发给上游服务器，静态资源由nginx自己处理，就可以这样做：</p>
<p>判断是否是后台api(根据location的匹配规则),如果是的话，就进行转发</p>
<p>匹配规则看这里：<span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNTIzODM3Ny9uZ2lueC1sb2NhdGlvbi1wcmlvcml0eQ==" title="https://stackoverflow.com/questions/5238377/nginx-location-priority">https://stackoverflow.com/que…<i class="fa fa-external-link"></i></span></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">upstream local&#123;</span><br><span class="line">    server 127.0.0.1:22222;  #假设在本地部署</span><br><span class="line">&#125;</span><br><span class="line">server&#123;</span><br><span class="line">    listen:<span class="number">80</span>;</span><br><span class="line">    server_name localhost;</span><br><span class="line">    location ~ /api/ &#123;  #以`/api/`开头的uri就行转发，否则不转发 ~代表正则表达式匹配</span><br><span class="line">        proxy_set_header: Host $host;</span><br><span class="line">        proxy_set_header: X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_pass http:<span class="comment">//local;</span></span><br><span class="line">    &#125;    </span><br><span class="line">    location / &#123;</span><br><span class="line">        #.. alias index等配置 </span><br><span class="line">          </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>这里需要注意一个问题</strong>：proxy_pass是转发请求的模块，当你访问<code>localhost:80/api/users/login</code>时，会被转发到<code>local</code>的地址，即<code>127.0.0.1:22222/api/users/login</code>,所以开发环境下访问后台接口的URI要写你部署到nginx的URI，而不是真正的后台地址(因为被转发了)</p>
<p>前端配置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//apis/api.config.js</span></span><br><span class="line"><span class="comment">//判断是否是生产环境</span></span><br><span class="line"><span class="keyword">var</span> isPro = process.env.NODE_ENV=== <span class="string">'production'</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    baseUrl: isPro ? <span class="string">'http://localhost:80'</span> : <span class="string">'/apis'</span><span class="comment">//生产环境下的baseURl是nginx的hoost:port</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="持续部署"><a href="#持续部署" class="headerlink" title="持续部署"></a>持续部署</h2><p>项目做完需要发布到服务器，但每次手动打包，然后ftp传上去的话就太麻烦了，所以我们的需求是：git或者svn提交后，自动打包发布到服务器。使用的工具是jenkins.</p>
<blockquote>
<p>参考文档：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YWQxOTguLg==" title="https://juejin.im/post/5ad198..">https://juejin.im/post/5ad198..<i class="fa fa-external-link"></i></span>.</p>
<p>官网：<span class="exturl" data-url="aHR0cHM6Ly9qZW5raW5zLmlvLw==" title="https://jenkins.io/">https://jenkins.io/<i class="fa fa-external-link"></i></span></p>
</blockquote>
<h3 id="jenkins安装与启动"><a href="#jenkins安装与启动" class="headerlink" title="jenkins安装与启动"></a>jenkins安装与启动</h3><blockquote>
<p>jenkins一般情况下会装在服务器，但如果是同一个局域网的话，装在本机也可以</p>
</blockquote>
<p>linux:</p>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ZlbmdsYWlsZWEvYXJ0aWNsZS9kZXRhaWxzLzI1OTE5MzY3KHVidW50dQ==" title="https://blog.csdn.net/fenglailea/article/details/25919367(ubuntu">https://blog.csdn.net/fenglai…<i class="fa fa-external-link"></i></span>)</li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC84YTc3MDEwZGFmYzY=" title="https://www.jianshu.com/p/8a77010dafc6">https://www.jianshu.com/p/8a7…<i class="fa fa-external-link"></i></span> (centos)</li>
<li>配置文件地址 /etc/sysconfig/jenkins</li>
<li>工作空间 /var/lib/jenkins</li>
</ol>
<p>windows下：</p>
<ol>
<li>从Jenkins官网<span class="exturl" data-url="aHR0cHM6Ly9qZW5raW5zLmlvL2Rvd25sb2FkL3RoYW5rLXlvdS1kb3dubG9hZGluZy13aW5kb3dzLWluc3RhbGxlci1zdGFibGUv" title="https://jenkins.io/download/thank-you-downloading-windows-installer-stable/">下载<i class="fa fa-external-link"></i></span>最新war文件。</li>
<li>运行<code>java -jar jenkins.war</code>即可。</li>
</ol>
<p>mac:</p>
<ol>
<li>从官网<span class="exturl" data-url="aHR0cHM6Ly9qZW5raW5zLmlvL2Rvd25sb2FkL3RoYW5rLXlvdS1kb3dubG9hZGluZy1vc3gtaW5zdGFsbGVyLw==" title="https://jenkins.io/download/thank-you-downloading-osx-installer/">下载<i class="fa fa-external-link"></i></span>pkg文件</li>
<li>双击安装，安装之后自己就会启动</li>
</ol>
<h3 id="jenkins初始化"><a href="#jenkins初始化" class="headerlink" title="jenkins初始化"></a>jenkins初始化</h3><ol>
<li>jenkins的默认端口是8080,启动成功后在浏览器打开。</li>
<li>进入后会让我们输管理员密码，打开网页上提示路径下的文件，复制密码粘贴输入即可。</li>
<li>然后会让安装需要的插件，此处选默认即可，等待安装完成。</li>
<li>创建一个管理员账户。</li>
<li>上面都完成后会看到这个界面。</li>
</ol>
<p><img src="https://image.xuebin.me/006tKfTcly1g1ck0fbaj6j30hn0a9mx5.jpg" alt></p>
<h3 id="创建任务"><a href="#创建任务" class="headerlink" title="创建任务"></a>创建任务</h3><p>在主页上点击<code>创建</code></p>
<p><img src="https://image.xuebin.me/006tKfTcly1g1ck0y0543j31510jpdip.jpg" alt></p>
<p>直接点<code>保存</code>，然后去安装插件</p>
<p><img src="https://image.xuebin.me/006tKfTcly1g1ck1al8ukj315s0osdho.jpg" alt></p>
<h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>首先返回主页，然后点击左侧菜单 <code>系统管理</code>-&gt;<code>插件管理</code></p>
<p><img src="https://image.xuebin.me/006tKfTcly1g1ck1pyssmj31fy0u0wji.jpg" alt></p>
<p>需要安装的插件有：</p>
<ul>
<li>Generic Webhook Trigger 实现git提交触发更新功能</li>
<li>Publish Over SSH 实现服务器部署功能</li>
<li>nvm wrapper 引入node</li>
</ul>
<p>安装插件的方式：</p>
<p><img src="https://image.xuebin.me/006tKfTcly1g1ck2y5ew7j31f40mo77a.jpg" alt></p>
<p>安装完插件之后重启一下jenkins(安装完插件后，有个重启的选项，勾选即可)</p>
<h3 id="实现git钩子功能"><a href="#实现git钩子功能" class="headerlink" title="实现git钩子功能"></a>实现git钩子功能</h3><blockquote>
<p>当我们向github/码云等远程仓库push我们的代码时，jenkins能知道我们提交了代码，这是自动构建自动部署的前提，钩子的实现原理是在远端仓库上配置一个Jenkins服务器的接口地址，当本地向远端仓库发起push时，远端仓库会向配置的Jenkins服务器的接口地址发起一个带参数的请求，jenkins收到后开始工作</p>
</blockquote>
<p>打开创建的项目(进入工程-&gt;点击<code>配置</code>)</p>
<p><img src="https://image.xuebin.me/006tKfTcly1g1ck49b13mj31fj0u0n10.jpg" alt></p>
<p>构建触发器</p>
<p>勾选 Generic Webhook Trigger</p>
<p><img src="https://image.xuebin.me/006tKfTcly1g1ck53a0bxj313w0eidhd.jpg" alt></p>
<p>github仓库配置钩子：</p>
<p>进入github项目中该项目页面，点击<code>setting</code>-&gt;<code>webhooks</code>,添加payload URL，</p>
<p>URL格式为 <code>http://&lt;User ID&gt;:&lt;API Token&gt;@&lt;Jenkins IP地址&gt;:端口/generic-webhook-trigger/invoke</code> userid和api token在jenkins的<code>系统管理</code>-<code>管理用户</code>-<code>选择你的用户点进去</code>-<code>左侧设置</code>里</p>
<p><img src="https://image.xuebin.me/006tKfTcly1g1ck5m3yxwj31ru0u07ds.jpg" alt></p>
<h3 id="实现自动化构建"><a href="#实现自动化构建" class="headerlink" title="实现自动化构建"></a>实现自动化构建</h3><p>自动化构建：jenkins实现安装依赖，打包(npm install &amp;&amp; npm run build),此外还可以执行一些测试行为</p>
<p>点击<code>构建环境</code>,勾选<code>nvm</code>，输入node版本</p>
<p><img src="https://image.xuebin.me/006tKfTcly1g1ck64qy4sj31gk0rkdjs.jpg" alt></p>
<p>点击<code>构建</code>,选择<code>执行shell</code>,输入执行命令，多个命令使用&amp;&amp;分开</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry http://registry.npm.taobao.org/ &amp;&amp;</span><br><span class="line">npm install &amp;&amp; </span><br><span class="line">npm run build</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>前端</tag>
        <tag>开发</tag>
        <tag>vue</tag>
        <tag>转载</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack4配置</title>
    <url>/posts/81e824f6.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="webpack-核心概念"><a href="#webpack-核心概念" class="headerlink" title="webpack 核心概念"></a>webpack 核心概念</h1><ul>
<li><p><strong>Entry</strong>: 入口</p>
</li>
<li><p><strong>Module</strong>:模块，webpack中一切皆是模块</p>
</li>
<li><p><strong>Chunk</strong>:代码库，一个chunk由十多个模块组合而成，用于代码合并与分割</p>
</li>
<li><p><strong>Loader</strong>:模块转换器，用于把模块原内容按照需求转换成新内容</p>
</li>
<li><p><strong>Plugin</strong>:扩展插件，在webpack构建流程中的特定时机注入扩展逻辑来改变构建结果或做你想要做的事情</p>
</li>
<li><p><strong>Output</strong>: 输出结果</p>
</li>
</ul>
<a id="more"></a>
<h1 id="webpack流程"><a href="#webpack流程" class="headerlink" title="webpack流程"></a>webpack流程</h1><p>webpack启动后会从 Entry 里配置的 Module 开始递归解析 Entry 依赖的所有Module.每找到一个Module,就会根据配置的Loader去找出对应的转换规则，对Module进行转换后，再解析出当前的Module依赖的Module.这些模块会以Entry为单位进行分组，一个Entry和其所有依赖的Module被分到一个组也就是一个Chunk。最好Webpack会把所有Chunk转换成文件输出。在整个流程中Webpack会在恰当的时机执行Plugin里定义的逻辑。</p>
<p>下面我们开始从零开始配置一个支持打包图片,CSS,LESS,SASS,支持ES6/ES7和JSX语法，并对代码进行压缩的webpack配置.</p>
<h2 id="最简webpack配置"><a href="#最简webpack配置" class="headerlink" title="最简webpack配置"></a>最简webpack配置</h2><p>首先初始化npm和安装webpack的依赖:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm init -y</span><br><span class="line">npm install --save-dev webpack webpack-cli</span><br></pre></td></tr></table></figure>
<p>配置 webpack.config.js 文件如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">const path = require(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    entry: path.resolve(__dirname, <span class="string">'src/index.js'</span>),</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">        filename: <span class="string">'bundle.js'</span>,</span><br><span class="line">        publicPath: <span class="string">'/'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>说明:</strong> publicPath 上线时配置的是cdn的地址。</p>
</blockquote>
<p>使用命令进行打包:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">webpack --mode production</span><br></pre></td></tr></table></figure>
<p>也可以将其配置到 package.json 中的 scripts 字段.</p>
<p>入口文件为 src/index.js, 打包输出到 dist/bundle.js.</p>
<h2 id="使用模板-html"><a href="#使用模板-html" class="headerlink" title="使用模板 html"></a>使用模板 html</h2><p>html-webpack-plugin 可以指定template模板文件，将会在output目录下，生成html文件，并引入打包后的js.</p>
<p>安装依赖:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save-dev html-webpack-plugin</span><br></pre></td></tr></table></figure>
<p>在 webpack.config.js 增加 plugins 配置:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">const HtmlWebpackPlugin = require(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    //...other code</span><br><span class="line">    plugins: [</span><br><span class="line">        new HtmlWebpackPlugin(&#123;</span><br><span class="line">            template: path.resolve(__dirname, <span class="string">'src/index.html'</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>HtmlWebpackPlugin 还有一些其它的参数,如title(html的title),minify(是否要压缩),filename(dist中生成的html的文件名)等</p>
<h2 id="配置-webpack-dev-server"><a href="#配置-webpack-dev-server" class="headerlink" title="配置 webpack-dev-server"></a>配置 webpack-dev-server</h2><p>webpack-dev-server提供了一个简单的Web服务器和实时热更新的能力</p>
<p>安装依赖:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save-dev webpack-dev-server</span><br></pre></td></tr></table></figure>
<p>在 webpack.config.js 增加 devServer 配置:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">const path = require(<span class="string">'path'</span>);</span><br><span class="line">const HtmlWebpackPlugin = require(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    //...other code</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        contentBase: <span class="string">'./dist'</span>,</span><br><span class="line">        port: <span class="string">'8080'</span>,</span><br><span class="line">        host: <span class="string">'localhost'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 package.json 的 scripts 字段中增加:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">webpack-dev-server --mode development</span><br></pre></td></tr></table></figure>
<p>之后，我们就可以通过 npm run dev , 来启动服务。</p>
<p>更多 webpack-dev-server 的知识，请访问: <span class="exturl" data-url="aHR0cHM6Ly93ZWJwYWNrLmpzLm9yZy9jb25maWd1cmF0aW9uL2Rldi1zZXJ2ZXIv" title="https://webpack.js.org/configuration/dev-server/">webpack.js.org/configurati…<i class="fa fa-external-link"></i></span></p>
<h2 id="支持加载css文件"><a href="#支持加载css文件" class="headerlink" title="支持加载css文件"></a>支持加载css文件</h2><p>通过使用不同的 style-loader 和 css-loader, 可以将 css 文件转换成JS文件类型。</p>
<p>安装依赖:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save-dev style-loader css-loader</span><br></pre></td></tr></table></figure>
<p>在 webpack.config.js 中增加 loader 的配置。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">//other code</span></span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css/</span>,</span><br><span class="line">                use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>],</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">                include: path.resolve(__dirname, <span class="string">'src'</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>loader 可以配置以下参数:</p>
<ul>
<li>test: 匹配处理文件的扩展名的正则表达式</li>
<li>use: loader名称</li>
<li>include/exclude: 手动指定必须处理的文件夹或屏蔽不需要处理的文件夹</li>
<li>query: 为loader提供额外的设置选项</li>
</ul>
<p>如果需要给loader传参，那么可以使用use+loader的方式,如:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">//other code</span></span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">            use: [&#123;</span><br><span class="line">                        loader: <span class="string">'style-loader'</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            insertAt: <span class="string">'top'</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="string">'css-loader'</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="comment">//....</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="支持加载图片"><a href="#支持加载图片" class="headerlink" title="支持加载图片"></a>支持加载图片</h2><ul>
<li>file-loader: 解决CSS等文件中的引入图片路径问题</li>
<li>url-loader: 当图片小于limit的时候会把图片Base64编码，大于limit参数的时候还是使用file-loader进行拷贝</li>
</ul>
<p><strong>如果希望图片存放在单独的目录下，那么需要指定outputPath</strong></p>
<p>安装依赖:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save-dev url-loder file-loader</span><br></pre></td></tr></table></figure>
<p>在 webpack.config.js 中增加 loader 的配置(增加在 module.rules 的数组中)。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">//other code</span></span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(gif|jpg|png|bmp|eot|woff|woff2|ttf|svg)/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'url-loader'</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            limit: <span class="number">8192</span>,</span><br><span class="line">                            outputPath: <span class="string">'images'</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="支持编译less和sass"><a href="#支持编译less和sass" class="headerlink" title="支持编译less和sass"></a>支持编译less和sass</h2><p>有些前端同事可能习惯于使用less或者是sass编写css，那么也需要在 webpack 中进行配置。</p>
<p>安装对应的依赖:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save-dev less less-loader</span><br><span class="line">npm install --save-dev node-sass sass-loader</span><br></pre></td></tr></table></figure>
<p>在 webpack.config.js 中增加 loader 的配置(module.rules 数组中)。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">//other code</span></span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.less/</span>,</span><br><span class="line">                use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>, <span class="string">'less-loader'</span>],</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">                include: path.resolve(__dirname, <span class="string">'src'</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.scss/</span>,</span><br><span class="line">                use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>, <span class="string">'sass-loader'</span>],</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">                include: path.resolve(__dirname, <span class="string">'src'</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="支持转义-ES6-ES7-JSX"><a href="#支持转义-ES6-ES7-JSX" class="headerlink" title="支持转义 ES6/ES7/JSX"></a>支持转义 ES6/ES7/JSX</h2><p>ES6/ES7/JSX 转义需要 Babel 的依赖，支持装饰器。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save-dev @babel/core babel-loader @babel/preset-env @babel/preset-react @babel/plugin-proposal-decorators @babel/plugin-proposal-object-rest-spread</span><br></pre></td></tr></table></figure>
<p>在 webpack.config.js 中增加 loader 的配置(module.rules 数组中)。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">//other code</span></span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.jsx?$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            presets: [<span class="string">'@babel/preset-env'</span>, <span class="string">'@babel/react'</span>],</span><br><span class="line">                            plugins: [</span><br><span class="line">                                [<span class="built_in">require</span>(<span class="string">"@babel/plugin-proposal-decorators"</span>), &#123; <span class="string">"legacy"</span>: <span class="literal">true</span> &#125;]</span><br><span class="line">                            ]</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ],</span><br><span class="line">                include: path.resolve(__dirname, <span class="string">'src'</span>),</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="压缩JS文件"><a href="#压缩JS文件" class="headerlink" title="压缩JS文件"></a>压缩JS文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save-dev uglifyjs-webpack-plugin</span><br><span class="line">npm install --save-dev optimize-css-assets-webpack-plugin</span><br></pre></td></tr></table></figure>
<p>在 webpack.config.js 中增加 optimization 的配置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> UglifyWebpackPlugin = <span class="built_in">require</span>(<span class="string">'uglifyjs-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">//other code</span></span><br><span class="line">    optimization: &#123;</span><br><span class="line">        minimizer: [</span><br><span class="line">            <span class="keyword">new</span> UglifyWebpackPlugin(&#123;</span><br><span class="line">                parallel: <span class="number">4</span></span><br><span class="line">            &#125;)</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="分离CSS-如果CSS文件较大的话"><a href="#分离CSS-如果CSS文件较大的话" class="headerlink" title="分离CSS(如果CSS文件较大的话)"></a>分离CSS(如果CSS文件较大的话)</h2><p>因为CSS的下载和JS可以并行，当一个HTML文件很大的时候，可以把CSS单独提取出来加载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save-dev mini-css-extract-plugin</span><br></pre></td></tr></table></figure>
<p>在 webpack.config.js 中增加 plugins 的配置,并且将 ‘style-loader’ 修改为 { loader: MiniCssExtractPlugin.loader}。</p>
<p>CSS打包在单独目录，那么配置filename。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">//other code</span></span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css/</span>,</span><br><span class="line">                use: [&#123; <span class="attr">loader</span>: MiniCssExtractPlugin.loader&#125;, <span class="string">'css-loader'</span>],</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">                include: path.resolve(__dirname, <span class="string">'src'</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.less/</span>,</span><br><span class="line">                use: [&#123; <span class="attr">loader</span>: MiniCssExtractPlugin.loader &#125;, <span class="string">'css-loader'</span>, <span class="string">'less-loader'</span>],</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">                include: path.resolve(__dirname, <span class="string">'src'</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.scss/</span>,</span><br><span class="line">                use: [&#123; <span class="attr">loader</span>: MiniCssExtractPlugin.loader &#125;, <span class="string">'css-loader'</span>, <span class="string">'sass-loader'</span>],</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">                include: path.resolve(__dirname, <span class="string">'src'</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">            filename: <span class="string">'css/[name].css'</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="压缩CSS文件"><a href="#压缩CSS文件" class="headerlink" title="压缩CSS文件"></a>压缩CSS文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save-dev optimize-css-assets-webpack-plugin</span><br></pre></td></tr></table></figure>
<p>在 webpack.config.js 中的 optimization 中增加配置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> OptimizeCssAssetsWebpackPlugin = <span class="built_in">require</span>(<span class="string">'optimize-css-assets-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">//other code</span></span><br><span class="line">    optimization: &#123;</span><br><span class="line">        minimizer: [</span><br><span class="line">            <span class="keyword">new</span> OptimizeCssAssetsWebpackPlugin()</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="打包前先清空输出目录"><a href="#打包前先清空输出目录" class="headerlink" title="打包前先清空输出目录"></a>打包前先清空输出目录</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save-dev clean-webpack-plugin</span><br></pre></td></tr></table></figure>
<p>在 webpack.config.js 中增加 plugins 的配置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> CleanWebpackPlugin = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">//other code</span></span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> CleanWebpackPlugin()</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>至此，webpack配置已经基本能满足需求。</p>
<h1 id="完整webpack-config-js和package-json文件"><a href="#完整webpack-config-js和package-json文件" class="headerlink" title="完整webpack.config.js和package.json文件"></a>完整webpack.config.js和package.json文件</h1><h2 id="webpack-config-js文件"><a href="#webpack-config-js文件" class="headerlink" title="webpack.config.js文件"></a>webpack.config.js文件</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> htmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> UglifyWebpackPlugin = <span class="built_in">require</span>(<span class="string">'uglifyjs-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> CleanWebpackPlugin = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> OptimizeCssAssetsWebpackPlugin = <span class="built_in">require</span>(<span class="string">'optimize-css-assets-webpack-plugin'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: path.resolve(__dirname, <span class="string">'src/index.js'</span>),</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">        filename: <span class="string">'bundle.js'</span>,</span><br><span class="line">        publicPath: <span class="string">'/'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        contentBase: <span class="string">'./dist'</span>,</span><br><span class="line">        port: <span class="string">'8080'</span>,</span><br><span class="line">        host: <span class="string">'localhost'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.jsx?$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            presets: [<span class="string">'@babel/preset-env'</span>, <span class="string">'@babel/react'</span>],</span><br><span class="line">                            plugins: [</span><br><span class="line">                                [<span class="built_in">require</span>(<span class="string">"@babel/plugin-proposal-decorators"</span>), &#123; <span class="string">"legacy"</span>: <span class="literal">true</span> &#125;]</span><br><span class="line">                            ]</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ],</span><br><span class="line">                include: path.resolve(__dirname, <span class="string">'src'</span>),</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css/</span>,</span><br><span class="line">                use: [&#123; <span class="attr">loader</span>: MiniCssExtractPlugin.loader&#125;, <span class="string">'css-loader'</span>],</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">                include: path.resolve(__dirname, <span class="string">'src'</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.less/</span>,</span><br><span class="line">                use: [&#123; <span class="attr">loader</span>: MiniCssExtractPlugin.loader &#125;, <span class="string">'css-loader'</span>, <span class="string">'less-loader'</span>],</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">                include: path.resolve(__dirname, <span class="string">'src'</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.scss/</span>,</span><br><span class="line">                use: [&#123; <span class="attr">loader</span>: MiniCssExtractPlugin.loader &#125;, <span class="string">'css-loader'</span>, <span class="string">'sass-loader'</span>],</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">                include: path.resolve(__dirname, <span class="string">'src'</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(gif|jpg|png|bmp|eot|woff|woff2|ttf|svg)/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'url-loader'</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            limit: <span class="number">1024</span>,</span><br><span class="line">                            outputPath: <span class="string">'images'</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    optimization: &#123;</span><br><span class="line">        minimizer: [</span><br><span class="line">            <span class="keyword">new</span> UglifyWebpackPlugin(&#123;</span><br><span class="line">                parallel: <span class="number">4</span></span><br><span class="line">            &#125;),</span><br><span class="line">            <span class="keyword">new</span> OptimizeCssAssetsWebpackPlugin()</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> htmlWebpackPlugin(&#123;</span><br><span class="line">            template: path.resolve(__dirname, <span class="string">'src/index.html'</span>),</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">            filename: <span class="string">'css/[name].css'</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> CleanWebpackPlugin()</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="package-json文件"><a href="#package-json文件" class="headerlink" title="package.json文件"></a>package.json文件</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"webpk"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"webpack.config.js"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>,</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"webpack --mode production"</span>,</span><br><span class="line">    <span class="attr">"dev"</span>: <span class="string">"webpack-dev-server --mode development"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"keywords"</span>: [],</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"@babel/core"</span>: <span class="string">"^7.4.0"</span>,</span><br><span class="line">    <span class="attr">"@babel/plugin-proposal-decorators"</span>: <span class="string">"^7.4.0"</span>,</span><br><span class="line">    <span class="attr">"@babel/plugin-proposal-object-rest-spread"</span>: <span class="string">"^7.4.0"</span>,</span><br><span class="line">    <span class="attr">"@babel/preset-env"</span>: <span class="string">"^7.4.1"</span>,</span><br><span class="line">    <span class="attr">"@babel/preset-react"</span>: <span class="string">"^7.0.0"</span>,</span><br><span class="line">    <span class="attr">"babel-loader"</span>: <span class="string">"^8.0.5"</span>,</span><br><span class="line">    <span class="attr">"clean-webpack-plugin"</span>: <span class="string">"^2.0.1"</span>,</span><br><span class="line">    <span class="attr">"css-loader"</span>: <span class="string">"^2.1.1"</span>,</span><br><span class="line">    <span class="attr">"file-loader"</span>: <span class="string">"^3.0.1"</span>,</span><br><span class="line">    <span class="attr">"html-webpack-plugin"</span>: <span class="string">"^3.2.0"</span>,</span><br><span class="line">    <span class="attr">"less"</span>: <span class="string">"^3.9.0"</span>,</span><br><span class="line">    <span class="attr">"less-loader"</span>: <span class="string">"^4.1.0"</span>,</span><br><span class="line">    <span class="attr">"mini-css-extract-plugin"</span>: <span class="string">"^0.5.0"</span>,</span><br><span class="line">    <span class="attr">"node-sass"</span>: <span class="string">"^4.11.0"</span>,</span><br><span class="line">    <span class="attr">"optimize-css-assets-webpack-plugin"</span>: <span class="string">"^5.0.1"</span>,</span><br><span class="line">    <span class="attr">"sass-loader"</span>: <span class="string">"^7.1.0"</span>,</span><br><span class="line">    <span class="attr">"style-loader"</span>: <span class="string">"^0.23.1"</span>,</span><br><span class="line">    <span class="attr">"uglifyjs-webpack-plugin"</span>: <span class="string">"^2.1.2"</span>,</span><br><span class="line">    <span class="attr">"url-loader"</span>: <span class="string">"^1.1.2"</span>,</span><br><span class="line">    <span class="attr">"webpack"</span>: <span class="string">"^4.29.6"</span>,</span><br><span class="line">    <span class="attr">"webpack-cli"</span>: <span class="string">"^3.3.0"</span>,</span><br><span class="line">    <span class="attr">"webpack-dev-server"</span>: <span class="string">"^3.2.1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"react"</span>: <span class="string">"^16.8.4"</span>,</span><br><span class="line">    <span class="attr">"react-dom"</span>: <span class="string">"^16.8.4"</span>,</span><br><span class="line">    <span class="attr">"react-redux"</span>: <span class="string">"^6.0.1"</span>,</span><br><span class="line">    <span class="attr">"redux"</span>: <span class="string">"^4.0.1"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>更多loader和plugin的参数可以参考: </p>
<ul>
<li><span class="exturl" data-url="aHR0cDovL3d3dy53ZWJwYWNranMuY29tL2xvYWRlcnMv" title="http://www.webpackjs.com/loaders/">www.webpackjs.com/loaders/<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL3d3dy53ZWJwYWNranMuY29tL3BsdWdpbnMv" title="http://www.webpackjs.com/plugins/">www.webpackjs.com/plugins/<i class="fa fa-external-link"></i></span></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>前端</tag>
        <tag>开发</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac开机启动项</title>
    <url>/posts/c2d2b2bf.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>相比于Linux开机启动设置的简单方便–配置<code>rc.local</code>文件即可，mac设置开机启动略显麻烦。</p>
<p>如果是使用homebrew安装软件自然不用考虑开机启动这回事，但有时候想执行自己的脚本或者有特殊需求，就不得不自己处理开机启动了。</p>
<a id="more"></a>
<h1 id="使用登录项添加可执行脚本-推荐"><a href="#使用登录项添加可执行脚本-推荐" class="headerlink" title="使用登录项添加可执行脚本(推荐)"></a>使用登录项添加可执行脚本(推荐)</h1><p>在用户的家目录编写一个sh脚本，例如：</p>
<p>test.sh</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在用户的家目录创建一个文件</span></span><br><span class="line">touch ~/haha.txt</span><br></pre></td></tr></table></figure>
<p>添加可执行权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod 777 test.sh</span><br></pre></td></tr></table></figure>
<p><img src="https://img2018.cnblogs.com/blog/1219668/201908/1219668-20190819173502114-2052532113.png" alt></p>
<p>进入<code>设置</code>-&gt;<code>用户与群组</code>-&gt;<code>登录项</code>，点+号，选择test.sh文件即可。</p>
<p>重启电脑，验证是否新建了文件，如存在说明配置成功，修改该文件内容为你想要的配置。</p>
<p>该文件将会在开机时执行，可在命令行中执行的开机启动项均可在此文件中配置。</p>
<blockquote>
<p>PS: 开机后会显示一个“进程已结束”的终端，不太爽，需要进入终端的<code>偏好设置</code>-&gt;<code>shell</code>选项卡-&gt;<code>当shell退出时</code>, 选择“关闭窗口”。这样开机时就不会出现一个终端了</p>
</blockquote>
<h1 id="Creating-a-login-hook"><a href="#Creating-a-login-hook" class="headerlink" title="Creating a login hook"></a>Creating a login hook</h1><blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0LmFwcGxlLmNvbS9lbi11cy9IVDI0MjA=" title="https://support.apple.com/en-us/HT2420">https://support.apple.com/en-us/HT2420<i class="fa fa-external-link"></i></span></p>
</blockquote>
<p>打开<code>/etc/ttys</code>文件</p>
<p>找到<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#console &quot;/System/Library/CoreServices/loginwindow.app/Contents/MacOS/loginwindow&quot; vt100 on secure window=/System/Library/CoreServices/WindowServer onoption=&quot;/usr/libexec/getty std.9600&quot;</span><br></pre></td></tr></table></figure></p>
<p>修改为<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#console &quot;/System/Library/CoreServices/loginwindow.app/Contents/MacOS/loginwindow -LoginHook /path/to/script&quot; vt100 on secure window=/System/Library/CoreServices/WindowServer onoption=&quot;/usr/libexec/getty std.9600&quot;</span><br></pre></td></tr></table></figure></p>
<p>其中 <code>/path/to/script</code> 是脚本文件的完整路径</p>
<h1 id="launchctl加载plist文件"><a href="#launchctl加载plist文件" class="headerlink" title="launchctl加载plist文件"></a>launchctl加载plist文件</h1><blockquote>
<p><span class="exturl" data-url="aHR0cDovL2xhdW5jaGVkLnplcm93aWR0aC5jb20v" title="http://launched.zerowidth.com/">launchd.plist generator<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuc29tYS16b25lLmNvbS9MYXVuY2hDb250cm9sLw==" title="https://www.soma-zone.com/LaunchControl/">LaunchControl<i class="fa fa-external-link"></i></span></p>
</blockquote>
<p>macOS开机启动一般使用launchctl加载plist文件</p>
<h2 id="Mac系统-plist文件分布的目录"><a href="#Mac系统-plist文件分布的目录" class="headerlink" title="Mac系统.plist文件分布的目录"></a>Mac系统.plist文件分布的目录</h2><table>
<thead>
<tr>
<th>目录</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>~/Library/Preferences</td>
<td>当前用户设置的进程</td>
</tr>
<tr>
<td>~/Library/LaunchAgents</td>
<td>单用户普通程序</td>
</tr>
<tr>
<td>/Library/LaunchAgents</td>
<td>单用户管理员程序</td>
</tr>
<tr>
<td>/Library/LaunchDaemons</td>
<td>多用户管理员程序</td>
</tr>
<tr>
<td>/System/Library/LaunchAgents</td>
<td>OS X 级单用户程序</td>
</tr>
<tr>
<td>/System/Library/LaunchDaemons</td>
<td>OS X 级多用户程序</td>
</tr>
</tbody>
</table>
<p>建议放在 ~/Library/LaunchAgents 下面。</p>
<p>下面再来理解几个基础概念：</p>
<ul>
<li><p>/System/Library和/Library和~/Library目录的区别？</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/System/Library 目录是存放Apple自己开发的软件。</span><br><span class="line">/Library 目录是系统管理员存放的第三方软件。</span><br><span class="line">~/Library/ 是用户自己存放的第三方软件。</span><br></pre></td></tr></table></figure>
</li>
<li><p>LaunchDaemons和LaunchAgents的区别？</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LaunchDaemons 是用户未登陆前就启动的服务（守护进程）。</span><br><span class="line">LaunchAgents 是用户登陆后启动的服务（守护进程）。</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="plist文件示例"><a href="#plist文件示例" class="headerlink" title="plist文件示例"></a>plist文件示例</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE plist PUBLIC -//Apple Computer//DTD PLIST 1.0//EN</span></span><br><span class="line"><span class="meta">http://www.apple.com/DTDs/PropertyList-1.0.dtd &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">"1.0"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>Label<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.example.exampled<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>ProgramArguments<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">string</span>&gt;</span>exampled<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>KeepAlive<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>RunAtLoad<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>launchd.plist的部分键值说明，完整版见<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2xlZ2FjeS9saWJyYXJ5L2RvY3VtZW50YXRpb24vRGFyd2luL1JlZmVyZW5jZS9NYW5QYWdlcy9tYW41L2xhdW5jaGQucGxpc3QuNS5odG1sIy8vYXBwbGVfcmVmL2RvYy9tYW4vNS9sYXVuY2hkLnBsaXN0" title="https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man5/launchd.plist.5.html#//apple_ref/doc/man/5/launchd.plist">launchd.plist(5)<i class="fa fa-external-link"></i></span></p>
<h2 id="Label-必须"><a href="#Label-必须" class="headerlink" title="Label (必须)"></a>Label (必须)</h2><p>该项服务的名称</p>
<h2 id="ProgramArguments"><a href="#ProgramArguments" class="headerlink" title="ProgramArguments"></a>ProgramArguments</h2><p>指定可执行文件路径及其参数，比如执行<code>ls -a</code>，对应到该配置中，应该写作：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>ProgramArguments<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">string</span>&gt;</span>ls<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">string</span>&gt;</span>-a<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="RunAtLoad-可选"><a href="#RunAtLoad-可选" class="headerlink" title="RunAtLoad (可选)"></a>RunAtLoad (可选)</h2><p>标识launchd在加载完该项服务之后立即启动路径指定的可执行文件。默认值为 false,设置为 true 即可实现开机运行脚本文件。</p>
<h2 id="StartCalendarInterval-可选"><a href="#StartCalendarInterval-可选" class="headerlink" title="StartCalendarInterval (可选)"></a>StartCalendarInterval (可选)</h2><p>该关键字可以用来设置定时执行可执行程序，可使用 Month, Day, Hour, Minute, Second等子关键字，它可以指定脚本在多少月，天，小时，分钟，秒，星期几等时间上执行，若缺少某个关键字则表示任意该时间点，类似于 Unix 的 Crontab 计划任务的设置方式，比如在该例子中设置为每小时的20分的时候执行该命令。</p>
<h2 id="KeepAlive（可选）"><a href="#KeepAlive（可选）" class="headerlink" title="KeepAlive（可选）"></a>KeepAlive（可选）</h2><p>是否保持持续运行</p>
<p>所有key关键字详细使用说明可以在Mac OS X终端下使用命令 man launchd.plist 查询</p>
<h1 id="命令行操作"><a href="#命令行操作" class="headerlink" title="命令行操作"></a>命令行操作</h1><h2 id="检查plist语法是否正确"><a href="#检查plist语法是否正确" class="headerlink" title="检查plist语法是否正确"></a>检查plist语法是否正确</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">plutil ~/Library/LaunchAgents/example.plist</span><br></pre></td></tr></table></figure>
<h2 id="载入配置-使配置生效"><a href="#载入配置-使配置生效" class="headerlink" title="载入配置, 使配置生效"></a>载入配置, 使配置生效</h2><blockquote>
<p>-w选项会将plist文件中无效的key覆盖掉，建议加上</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">launchctl load -w ~/Library/LaunchAgents/example.plist</span><br></pre></td></tr></table></figure>
<h2 id="卸载配置"><a href="#卸载配置" class="headerlink" title="卸载配置"></a>卸载配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">launchctl unload -w ~/Library/LaunchAgents/example.plist</span><br></pre></td></tr></table></figure>
<h2 id="查看服务运行状态"><a href="#查看服务运行状态" class="headerlink" title="查看服务运行状态"></a>查看服务运行状态</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">launchctl list</span><br></pre></td></tr></table></figure>
<h2 id="修改文件权限"><a href="#修改文件权限" class="headerlink" title="修改文件权限"></a>修改<span class="exturl" data-url="aHR0cHM6Ly9zczY0LmNvbS9iYXNoL2NobW9kLmh0bWw=" title="https://ss64.com/bash/chmod.html">文件权限<i class="fa fa-external-link"></i></span></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod 644 ~/Library/LaunchAgents/example.plist</span><br></pre></td></tr></table></figure>
<h2 id="启动自启动项"><a href="#启动自启动项" class="headerlink" title="启动自启动项"></a>启动自启动项</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">launchctl start example</span><br></pre></td></tr></table></figure>
<h2 id="结束自启动项"><a href="#结束自启动项" class="headerlink" title="结束自启动项"></a>结束自启动项</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">launchctl stop example</span><br></pre></td></tr></table></figure>
<h1 id="Homebrew安装的程序可使用Homebrew-Services设置开机启动"><a href="#Homebrew安装的程序可使用Homebrew-Services设置开机启动" class="headerlink" title="Homebrew安装的程序可使用Homebrew Services设置开机启动"></a>Homebrew安装的程序可使用<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0hvbWVicmV3L2hvbWVicmV3LXNlcnZpY2Vz" title="https://github.com/Homebrew/homebrew-services">Homebrew Services<i class="fa fa-external-link"></i></span>设置开机启动</h1><h2 id="设置开机启动"><a href="#设置开机启动" class="headerlink" title="设置开机启动"></a>设置开机启动</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果用Homebrew安装了mysq</span></span><br><span class="line">brew services start mysql</span><br></pre></td></tr></table></figure>
<h2 id="只运行不开机启动"><a href="#只运行不开机启动" class="headerlink" title="只运行不开机启动"></a>只运行不开机启动</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew services run mysql</span><br></pre></td></tr></table></figure>
<h2 id="停止运行不再开机启动-存疑，未验证）"><a href="#停止运行不再开机启动-存疑，未验证）" class="headerlink" title="停止运行不再开机启动(存疑，未验证）"></a>停止运行不再开机启动(存疑，未验证）</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew services stop mysql</span><br></pre></td></tr></table></figure>
<p>注意Homebrew安装的程序不全都支持这种方式，如果命令执行失败，请手动配置plist文件，使用launchctl工具添加启动项。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC80OWRhYmQ4ZWM5YmI=" title="https://www.jianshu.com/p/49dabd8ec9bb">https://www.jianshu.com/p/49dabd8ec9bb<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9lZWU4YTdkZTE3OWM=" title="https://www.jianshu.com/p/eee8a7de179c">https://www.jianshu.com/p/eee8a7de179c<i class="fa fa-external-link"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>mac</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>开机启动</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx</title>
    <url>/posts/9de3336.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="nginx-是什么？"><a href="#nginx-是什么？" class="headerlink" title="nginx 是什么？"></a>nginx 是什么？</h1><p>nginx 是俄罗斯人 Igor Sysoev 为俄罗斯访问量第二的 Rambler.ru 站点开发的一个十分轻量级的 HTTP 服务器。它是一个高性能的 HTTP 和反向代理服务器，同时也可以作为 IMAP/POP3/SMTP 的代理服务器。nginx 使用的是 BSD 许可。</p>
<p>Nginx 以事件驱动的方式编写，所以有非常好的性能，同时也是一个非常高效的反向代理、负载平衡。</p>
<p>Nginx 因为它的稳定性、丰富的模块库、灵活的配置和低系统资源的消耗而闻名。</p>
<p>nginx 适合用来做 mongrel clusters 的前端 HTTP 响应。</p>
<a id="more"></a>
<h1 id="为什么要用-nginx，nginx-有什么特点？"><a href="#为什么要用-nginx，nginx-有什么特点？" class="headerlink" title="为什么要用 nginx，nginx 有什么特点？"></a>为什么要用 nginx，nginx 有什么特点？</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY3RvbGliLmNvbS90b3BpY3MtMTAxMDAwLmh0bWw=" title="https://www.ctolib.com/topics-101000.html">nginx 的特点<i class="fa fa-external-link"></i></span>：</p>
<ul>
<li>核心特点：高并发请求的同时保持高效的服务</li>
<li>热部署</li>
<li>低内存消耗</li>
<li>处理响应请求很快</li>
<li>具有很高的可靠性</li>
</ul>
<p>同时，nginx 也可以实现高效的反向代理、负载均衡。</p>
<p>前端可以用 nginx 做些什么？</p>
<ul>
<li>搭建静态资源服务器</li>
<li>反向代理分发后端服务（可以和 nodejs 搭配实现前后端分离）和跨域问题</li>
<li>根据 User Agent 来重定向站点</li>
<li>开发环境或测试环境切换（切换 host）</li>
<li>url 重写，使用 rewrie 规则本地映射</li>
<li>资源内容篡改</li>
<li>获取 cookie 做分流</li>
<li>资源合并</li>
<li>gzip 压缩</li>
<li>压缩图片</li>
<li>sourceMap 调试</li>
</ul>
<h1 id="如何安装-nginx？"><a href="#如何安装-nginx？" class="headerlink" title="如何安装 nginx？"></a>如何安装 nginx？</h1><h2 id="mac-安装"><a href="#mac-安装" class="headerlink" title="mac 安装"></a>mac 安装</h2><p>安装<span class="exturl" data-url="aHR0cHM6Ly9icmV3LnNoLw==" title="https://brew.sh/">brew<i class="fa fa-external-link"></i></span>之后，执行命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo brew install nginx</span><br></pre></td></tr></table></figure>
<h2 id="windows-安装"><a href="#windows-安装" class="headerlink" title="windows 安装"></a>windows 安装</h2><p>下载： <span class="exturl" data-url="aHR0cDovL25naW54Lm9yZy8=" title="http://nginx.org/">nginx 官网<i class="fa fa-external-link"></i></span></p>
<ol>
<li>解压运行：解压至<code>c:\nginx</code>，运行<code>nginx.exe</code>(即<code>nginx -c conf\nginx.conf</code>)，默认使用 80 端口，日志见文件夹<code>C:\nginx\logs</code></li>
<li>关闭：<code>nginx -s stop</code> 或<code>taskkill /F /IM nginx.exe &gt; nul</code></li>
</ol>
<p><em>【注意】以下皆以 mac 为例。</em></p>
<h1 id="nginx-如何启动、重启、关闭？"><a href="#nginx-如何启动、重启、关闭？" class="headerlink" title="nginx 如何启动、重启、关闭？"></a>nginx 如何启动、重启、关闭？</h1><h2 id="查看-nginx-版本"><a href="#查看-nginx-版本" class="headerlink" title="查看 nginx 版本"></a>查看 nginx 版本</h2><p><code>nginx -v</code></p>
<h2 id="启动-nginx-服务"><a href="#启动-nginx-服务" class="headerlink" title="启动 nginx 服务"></a>启动 nginx 服务</h2><ul>
<li>方法一：运行命令：<code>sudo brew services start nginx</code></li>
<li>方法二：运行命令：<code>nginx</code></li>
</ul>
<p>访问<span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdC8=" title="http://localhost/">http://localhost<i class="fa fa-external-link"></i></span>:8080<br>出现如下界面则表示安装成功：<img src="https://image.xuebin.me/006tKfTcly1g19bjj2al3j30yg0bnmzd.jpg" alt></p>
<h2 id="关闭-nginx-服务"><a href="#关闭-nginx-服务" class="headerlink" title="关闭 nginx 服务"></a>关闭 nginx 服务</h2><ul>
<li>方法一：运行命令：<code>sudo brew services stop nginx</code></li>
<li>方法二：运行命令： <code>nginx -s stop</code></li>
<li>方法三：<br>运行命令：<code>ps -ef | grep nginx</code>，找到 master 对应的进程号。<br>快速停止：<code>kill -TERM nginx进程号</code>或<code>kill -INT nginx进程号</code><br>从容停止： <code>kill -QUIT nginx进程号</code><br>强制停止所有 nginx 进程：<code>pkill -9 nginx</code></li>
</ul>
<h2 id="重启-nginx-服务"><a href="#重启-nginx-服务" class="headerlink" title="重启 nginx 服务"></a>重启 nginx 服务</h2><p>方法一：<code>nginx -s reload</code><br>方法二： 平滑重启命令： <code>kill -HUP nginx进程号</code></p>
<h2 id="nginx-信号控制"><a href="#nginx-信号控制" class="headerlink" title="nginx 信号控制"></a>nginx 信号控制</h2><ul>
<li><code>TERM,INT</code> 快速关闭</li>
<li><code>QUIT</code> 从容关闭</li>
<li><code>HUP</code> 平滑重启，重新加载配置文件</li>
<li><code>USR1</code> 重新打开日志文件，在切割日志时用途较大</li>
<li><code>USR2</code> 平滑升级可执行程序</li>
<li><code>WINCH</code> 从容关闭工作进程</li>
</ul>
<h1 id="如何查看-nginx-的配置文件-nginx-conf-的路径和安装路径？"><a href="#如何查看-nginx-的配置文件-nginx-conf-的路径和安装路径？" class="headerlink" title="如何查看 nginx 的配置文件 nginx.conf 的路径和安装路径？"></a>如何查看 nginx 的配置文件 nginx.conf 的路径和安装路径？</h1><p>查看配置文件位置和测试配置文件语法，运行命令<code>nginx -t</code>:<img src="https://image.xuebin.me/006tKfTcly1g19bm00hknj30uo030glv.jpg" alt></p>
<p>查看 nginx 安装路径：<br>因为是使用 brew 安装的，所以使用 brew 命令：<code>brew info nginx</code>:<img src="https://image.xuebin.me/006tKfTcly1g19bnnssyqj30v90u0q8h.jpg" alt></p>
<h1 id="nginx-conf-基本配置有哪些？"><a href="#nginx-conf-基本配置有哪些？" class="headerlink" title="nginx.conf 基本配置有哪些？"></a>nginx.conf 基本配置有哪些？</h1><p>nginx 配置文件主要分成四个部分：</p>
<ul>
<li>main，全局设置，影响其它部分所有设置</li>
<li>server，主机服务相关设置，主要用于指定虚拟主机域名、IP 和端口</li>
<li>location，URL 匹配特定位置后的设置，反向代理、内容篡改相关设置</li>
<li>upstream，上游服务器设置，负载均衡相关配置</li>
</ul>
<p>他们之间的关系式：server 继承 main，location 继承 server；upstream 既不会继承指令也不会被继承。</p>
<p>如下是一份通用的配置和详解：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#定义 Nginx 运行的用户和用户组,默认由 nobody 账号运行, windows 下面可以注释掉。</span><br><span class="line">user  nobody;</span><br><span class="line"></span><br><span class="line">#nginx进程数，建议设置为等于CPU总核心数。可以和worker_cpu_affinity配合</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]</span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line"></span><br><span class="line">#进程文件，window下可以注释掉</span><br><span class="line">#pid        logs/nginx.pid;</span><br><span class="line"></span><br><span class="line"># 一个nginx进程打开的最多文件描述符(句柄)数目，理论值应该是最多打开文件数（系统的值ulimit -n）与nginx进程数相除，</span><br><span class="line"># 但是nginx分配请求并不均匀，所以建议与ulimit -n的值保持一致。</span><br><span class="line">worker_rlimit_nofile 65535;</span><br><span class="line"></span><br><span class="line">#工作模式与连接数上限</span><br><span class="line">events &#123;</span><br><span class="line">    # 参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ];</span><br><span class="line">    # epoll模型是Linux 2.6以上版本内核中的高性能网络I/O模型，如果跑在FreeBSD上面，就用kqueue模型。</span><br><span class="line">   #use epoll;</span><br><span class="line">   #connections 20000;  # 每个进程允许的最多连接数</span><br><span class="line">   # 单个进程最大连接数（最大连接数=连接数*进程数）该值受系统进程最大打开文件数限制，需要使用命令ulimit -n 查看当前设置</span><br><span class="line">   worker_connections 65535;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#设定http服务器</span><br><span class="line">http &#123;</span><br><span class="line">    #文件扩展名与文件类型映射表</span><br><span class="line">    #include 是个主模块指令，可以将配置文件拆分并引用，可以减少主配置文件的复杂度</span><br><span class="line">    include       mime.types;</span><br><span class="line">    #默认文件类型</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    #charset utf-8; #默认编码</span><br><span class="line"></span><br><span class="line">    #定义虚拟主机日志的格式</span><br><span class="line">    # 日志格式设置:</span><br><span class="line">    #     $remote_addr与$http_x_forwarded_for用以记录客户端的ip地址；</span><br><span class="line">    #     $remote_user：用来记录客户端用户名称；</span><br><span class="line">    #     $time_local： 用来记录访问时间与时区；</span><br><span class="line">    #     $request： 用来记录请求的url与http协议；</span><br><span class="line">    #     $status： 用来记录请求状态；成功是200，</span><br><span class="line">    #     $body_bytes_sent ：记录发送给客户端文件主体内容大小；</span><br><span class="line">    #     $http_referer：用来记录从那个页面链接访问过来的；</span><br><span class="line">    #     $http_user_agent：记录客户浏览器的相关信息；</span><br><span class="line">    #log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">    #                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">    #                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line"></span><br><span class="line">    #定义虚拟主机访问日志</span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。</span><br><span class="line">    sendfile        on;</span><br><span class="line">    #autoindex on; #开启目录列表访问，合适下载服务器，默认关闭。</span><br><span class="line"></span><br><span class="line">    #防止网络阻塞</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #长连接超时时间，单位是秒，默认为0</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    # gzip压缩功能设置</span><br><span class="line">    gzip on; #开启gzip压缩输出</span><br><span class="line">    gzip_min_length 1k; #最小压缩文件大小</span><br><span class="line">    gzip_buffers    4 16k; #压缩缓冲区</span><br><span class="line">    gzip_http_version 1.0; #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）</span><br><span class="line">    gzip_comp_level 6; #压缩等级</span><br><span class="line">    #压缩类型，默认就已经包含text/html，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。</span><br><span class="line">    gzip_types text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml;</span><br><span class="line">    gzip_vary on; //和http头有关系，加个vary头，给代理服务器用的，有的浏览器支持压缩，有的不支持，所以避免浪费不支持的也压缩，所以根据客户端的HTTP头来判断，是否需要压缩</span><br><span class="line">    #limit_zone crawler $binary_remote_addr 10m; #开启限制IP连接数的时候需要使用</span><br><span class="line"></span><br><span class="line">    # http_proxy服务全局设置</span><br><span class="line">    client_max_body_size   10m;</span><br><span class="line">    client_body_buffer_size   128k;</span><br><span class="line">    proxy_connect_timeout   75;</span><br><span class="line">    proxy_send_timeout   75;</span><br><span class="line">    proxy_read_timeout   75;</span><br><span class="line">    proxy_buffer_size   4k;</span><br><span class="line">    proxy_buffers   4 32k;</span><br><span class="line">    proxy_busy_buffers_size   64k;</span><br><span class="line">    proxy_temp_file_write_size  64k;</span><br><span class="line">    proxy_temp_path   /usr/local/nginx/proxy_temp 1 2;</span><br><span class="line"></span><br><span class="line">   # 设定负载均衡后台服务器列表</span><br><span class="line">    upstream  backend.com  &#123;</span><br><span class="line">        #ip_hash; # 指定支持的调度算法</span><br><span class="line">        # upstream 的负载均衡，weight 是权重，可以根据机器配置定义权重。weigth 参数表示权值，权值越高被分配到的几率越大。</span><br><span class="line">        server   192.168.10.100:8080 max_fails=2 fail_timeout=30s ;</span><br><span class="line">        server   192.168.10.101:8080 max_fails=2 fail_timeout=30s ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #虚拟主机的配置</span><br><span class="line">    server &#123;</span><br><span class="line">        #监听端口</span><br><span class="line">        listen       80;</span><br><span class="line">        #域名可以有多个，用空格隔开</span><br><span class="line">        server_name  localhost fontend.com;</span><br><span class="line">        # Server Side Include，通常称为服务器端嵌入</span><br><span class="line">        #ssi on;</span><br><span class="line">        #默认编码</span><br><span class="line">        #charset utf-8;</span><br><span class="line">        #定义本虚拟主机的访问日志</span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        # 因为所有的地址都以 / 开头，所以这条规则将匹配到所有请求</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">       # 图片缓存时间设置</span><br><span class="line">       location ~ .*.(gif|jpg|jpeg|png|bmp|swf)$ &#123;</span><br><span class="line">          expires 10d;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       # JS和CSS缓存时间设置</span><br><span class="line">       location ~ .*.(js|css)?$ &#123;</span><br><span class="line">          expires 1h;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">        #代理配置</span><br><span class="line">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">        #location /proxy/ &#123;</span><br><span class="line">        #    proxy_pass   http://127.0.0.1;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    root           html;</span><br><span class="line">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        #    fastcgi_index  index.php;</span><br><span class="line">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">        #    include        fastcgi_params;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # deny access to .htaccess files, if Apache&apos;s document root</span><br><span class="line">        # concurs with nginx&apos;s one</span><br><span class="line">        #</span><br><span class="line">        #location ~ /\.ht &#123;</span><br><span class="line">        #    deny  all;</span><br><span class="line">        #&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       8000;</span><br><span class="line">    #    listen       somename:8080;</span><br><span class="line">    #    server_name  somename  alias  another.alias;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">    # HTTPS server</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       443 ssl;</span><br><span class="line">    #    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #    ssl_certificate      cert.pem;</span><br><span class="line">    #    ssl_certificate_key  cert.key;</span><br><span class="line"></span><br><span class="line">    #    ssl_session_cache    shared:SSL:1m;</span><br><span class="line">    #    ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">    #    ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">    # 导入多个外部server</span><br><span class="line">    include servers/*;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="匹配-location"><a href="#匹配-location" class="headerlink" title="匹配 location"></a>匹配 location</h2><p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location  = / &#123;</span><br><span class="line">  # 精确匹配 / ，主机名后面不能带任何字符串</span><br><span class="line">  [ configuration A ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location  / &#123;</span><br><span class="line">  # 因为所有的地址都以 / 开头，所以这条规则将匹配到所有请求</span><br><span class="line">  # 但是正则和最长字符串会优先匹配</span><br><span class="line">  [ configuration B ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location /documents/ &#123;</span><br><span class="line">  # 匹配任何以 /documents/ 开头的地址，匹配符合以后，还要继续往下搜索</span><br><span class="line">  # 只有后面的正则表达式没有匹配到时，这一条才会采用这一条</span><br><span class="line">  [ configuration C ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~ /documents/Abc &#123;</span><br><span class="line">  # 匹配任何以 /documents/ 开头的地址，匹配符合以后，还要继续往下搜索</span><br><span class="line">  # 只有后面的正则表达式没有匹配到时，这一条才会采用这一条</span><br><span class="line">  [ configuration CC ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ^~ /images/ &#123;</span><br><span class="line">  # 匹配任何以 /images/ 开头的地址，匹配符合以后，停止往下搜索正则，采用这一条。</span><br><span class="line">  [ configuration D ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~* \.(gif|jpg|jpeg)$ &#123;</span><br><span class="line">  # 匹配所有以 gif,jpg或jpeg 结尾的请求</span><br><span class="line">  # 然而，所有请求 /images/ 下的图片会被 config D 处理，因为 ^~ 到达不了这一条正则</span><br><span class="line">  [ configuration E ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location /images/ &#123;</span><br><span class="line">  # 字符匹配到 /images/，继续往下，会发现 ^~ 存在</span><br><span class="line">  [ configuration F ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location /images/abc &#123;</span><br><span class="line">  # 最长字符匹配到 /images/abc，继续往下，会发现 ^~ 存在</span><br><span class="line">  # F与G的放置顺序是没有关系的</span><br><span class="line">  [ configuration G ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~ /images/abc/ &#123;</span><br><span class="line">  # 只有去掉 config D 才有效：先最长匹配 config G 开头的地址，继续往下搜索，匹配到这一条正则，采用</span><br><span class="line">    [ configuration H ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~* /js/.*/\.js</span><br></pre></td></tr></table></figure>
<ul>
<li>以<code>=</code>开头表示精确匹配</li>
<li><code>^~</code> 开头表示 uri 以某个常规字符串开头，不是正则匹配</li>
<li><code>~</code>开头表示区分大小写的正则匹配;</li>
<li><code>~*</code> 开头表示不区分大小写的正则匹配</li>
<li><code>/</code> 通用匹配, 如果没有其它匹配,任何请求都会匹配到</li>
</ul>
<p>优先级：<br>(location =) &gt; (location 完整路径) &gt; (location ^~ 路径) &gt; (location ~,~* 正则顺序) &gt; (location 部分起始路径) &gt; (/)</p>
<h2 id="配置反向代理"><a href="#配置反向代理" class="headerlink" title="配置反向代理"></a>配置反向代理</h2><p>详解：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 对 “/” 启用反向代理</span><br><span class="line">location / &#123;</span><br><span class="line">  proxy_pass http://127.0.0.1:3000;  # 设置要代理的 uri，注意最后的 /。可以是 Unix 域套接字路径，也可以是正则表达式。</span><br><span class="line">  proxy_redirect off; # 设置后端服务器“Location”响应头和“Refresh”响应头的替换文本</span><br><span class="line">  proxy_set_header X-Real-IP $remote_addr; # 获取用户的真实 IP 地址</span><br><span class="line">  #后端的Web服务器可以通过 X-Forwarded-For 获取用户真实IP，多个 nginx 反代的情况下，例如 CDN。参见：http://gong1208.iteye.com/blog/1559835 和 http://bbs.linuxtone.org/thread-9050-1-1.html</span><br><span class="line">  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">  #以下是一些反向代理的配置，可选。</span><br><span class="line">  proxy_set_header Host $host; # 允许重新定义或者添加发往后端服务器的请求头。</span><br><span class="line"></span><br><span class="line">  client_max_body_size 10m; #允许客户端请求的最大单文件字节数</span><br><span class="line">  client_body_buffer_size 128k; #缓冲区代理缓冲用户端请求的最大字节数，</span><br><span class="line">  proxy_connect_timeout 90; #nginx跟后端服务器连接超时时间(代理连接超时)</span><br><span class="line">  proxy_send_timeout 90; #后端服务器数据回传时间(代理发送超时)</span><br><span class="line">  proxy_read_timeout 90; #连接成功后，后端服务器响应时间(代理接收超时)</span><br><span class="line">  proxy_buffer_size 4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小</span><br><span class="line">  proxy_buffers 4 32k; #proxy_buffers缓冲区，网页平均在32k以下的设置</span><br><span class="line">  proxy_busy_buffers_size 64k; #高负荷下缓冲大小（proxy_buffers*2）</span><br><span class="line">  proxy_temp_file_write_size 64k;</span><br><span class="line">  #设定缓存文件夹大小，大于这个值，将从upstream服务器传</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>举例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location ^~ /service/ &#123;</span><br><span class="line">  proxy_pass http://192.168.60.245:8080/;</span><br><span class="line">  proxy_redirect      default;</span><br><span class="line">  proxy_set_header    Host $host</span><br><span class="line">  proxy_set_header    X-Real-IP $remote_addr;</span><br><span class="line">  proxy_set_header    X-Forwarded-For  $proxy_add_x_forwarded_for;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>简化：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location /proxy/ &#123;</span><br><span class="line">  proxy_pass http://backend.com/;</span><br><span class="line">  proxy_redirect      default;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="配置-rewrite"><a href="#配置-rewrite" class="headerlink" title="配置 rewrite"></a>配置 rewrite</h2><p>rewrite 功能就是集合正则表达式和标志位实现 url 重写和重定向。rewrite 只能放在 server{}、location{}、if(){}块中，并且只能对域名后边的出去传递参数外的字符串起作用。如 URL：<br><code>http://microloan-sms-platform.yxapp.xyz/proxy/sms/task/querydeleted?page=1&amp;pagesize=10</code><br>只对/proxy/sms/task/querydeleted 进行重写。</p>
<p>如果相对域名或参数字符串起作用，可以使用全局变量匹配，也可以使用 proxy_pass 反向代理。</p>
<p>表明看 rewrite 和 location 功能有点像，都能实现跳转，主要区别在于 rewrite 是在同一域名内更改获取资源的路径，而 location 是对一类路径做控制访问或反向代理，可以 proxy_pass 到其他机器。很多情况下 rewrite 也会写在 location 里，它们的执行顺序是：</p>
<ul>
<li>执行 server 块的 rewrite 指令</li>
<li>执行 location 匹配</li>
<li>执行选定的 location 中的 rewrite 指令</li>
</ul>
<p>如果其中某步 URI 被重写，则重新循环执行 1-3，直到找到真实存在的文件；循环超过 10 次，则返回 500 Internal Server Error 错误。</p>
<p>rewrite 规则后边，通常会带有 flag 标志位：</p>
<ul>
<li><code>last</code> : 相当于 Apache 的[L]标记，表示完成 rewrite</li>
<li><code>break</code> : 停止执行当前虚拟主机的后续 rewrite 指令集</li>
<li><code>redirect</code> : 返回<code>302</code>临时重定向，地址栏会显示跳转后的地址</li>
<li><code>permanent</code> : 返回<code>301</code>永久重定向，地址栏会显示跳转后的地址</li>
</ul>
<p><code>last</code> 和 <code>break</code> 区别：</p>
<ul>
<li><code>last</code>一般写在<code>server</code>和<code>if</code>中，而<code>break</code>一般使用在<code>location</code>中</li>
<li><code>last</code>不终止重写后的 url 匹配，即新的 url 会再从<code>server</code>走一遍匹配流程，而<code>break</code>终止重写后的匹配</li>
<li><code>break</code>和<code>last</code>都能组织继续执行后面的 rewrite 指令</li>
</ul>
<p>rewrite 常用正则：</p>
<ul>
<li><code>.</code> ： 匹配除换行符以外的任意字符</li>
<li><code>?</code> ： 重复 0 次或 1 次</li>
<li><code>+</code> ： 重复 1 次或更多次</li>
<li><code>*</code> ： 重复 0 次或更多次</li>
<li><code>\d</code> ：匹配数字</li>
<li><code>^</code> ： 匹配字符串的开始</li>
<li><code>$</code> ： 匹配字符串的介绍</li>
<li><code>{n}</code> ： 重复 n 次</li>
<li><code>{n,}</code> ： 重复 n 次或更多次</li>
<li><code>[c]</code> ： 匹配单个字符 c</li>
<li><code>[a-z]</code> ： 匹配 a-z 小写字母的任意一个</li>
</ul>
<p>可以使用<code>()</code>来进行分组，可以通过<code>$1</code>的形式来引用。</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location /proxy/ &#123;</span><br><span class="line">        proxy_pass http://microloan-notification-web.yxapp.in;</span><br><span class="line">        rewrite /proxy/(.*)$ /$1 break;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="配置负载均衡"><a href="#配置负载均衡" class="headerlink" title="配置负载均衡"></a>配置负载均衡</h2><p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">upstream test.net&#123;</span><br><span class="line">   ip_hash;</span><br><span class="line">   server 192.168.11.1:80;</span><br><span class="line">   server 192.168.11.11:80  down;</span><br><span class="line">   server 192.168.11.123:8009  max_fails=3  fail_timeout=20s;</span><br><span class="line">   server 192.168.11.1234:8080;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>upstream 是 Nginx 的 HTTP Upstream 模块，这个模块通过一个简单的调度算法来实现客户端 IP 到后端服务器的负载均衡。<br>Nginx 的负载均衡模块目前支持 4 种调度算法：</p>
<ul>
<li><code>轮询（默认）</code>。每个请求按时间顺序逐一分配到不同的后端服务器，如果后端某台服务器宕机，故障系统被自动剔除，使用户访问不受影响。Weight 指定轮询权值，Weight 值越大，分配到的访问机率越高，主要用于后端每个服务器性能不均的情况下。</li>
<li><code>ip_hash</code>。每个请求按访问 IP 的 hash 结果分配，这样来自同一个 IP 的访客固定访问一个后端服务器，有效解决了动态网页存在的 session 共享问题。</li>
<li><code>fair</code>。这是比上面两个更加智能的负载均衡算法。此种算法可以依据页面大小和加载时间长短智能地进行负载均衡，也就是根据后端服务器的响应时间来分配请求，响应时间短的优先分配。Nginx 本身是不支持 fair 的，如果需要使用这种调度算法，必须下载 Nginx 的 upstream_fair 模块。</li>
<li><code>url_hash</code>。此方法按访问 url 的 hash 结果来分配请求，使每个 url 定向到同一个后端服务器，可以进一步提高后端缓存服务器的效率。Nginx 本身是不支持 url_hash 的，如果需要使用这种调度算法，必须安装 Nginx 的 hash 软件包。</li>
</ul>
<p>upstream 可以设定每个后端服务器在负载均衡调度中的状态，支持的状态参数:</p>
<ul>
<li><code>down</code>，表示当前的 server 暂时不参与负载均衡</li>
<li><code>backup</code>，预留的备份机器。当其他所有的非 backup 机器出现故障或者忙的时候，才会请求<code>backup</code>机器，因此这台机器的压力最轻。</li>
<li><code>max_fails</code>，允许请求失败的次数，默认为<code>1</code>。当超过最大次数时，返回<code>proxy_next_upstream</code> 模块定义的错误。</li>
<li><code>fail_timeout</code>，在经历了<code>max_fails</code>次失败后，暂停服务的时间。<code>max_fails</code>可以和<code>fail_timeout</code>一起使用。</li>
</ul>
<p><strong>注，当负载调度算法为 ip_hash 时，后端服务器在负载均衡调度中的状态不能是 weight 和 backup。</strong></p>
<h2 id="设置页面缓存"><a href="#设置页面缓存" class="headerlink" title="设置页面缓存"></a>设置页面缓存</h2><p>页面缓存设置指令：</p>
<ul>
<li><p><code>proxy_cache_path</code>: 指定缓存的路径和一些其他参数，缓存的数据存储在文件中，并且使用代理 url 的哈希值作为关键字与文件名。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">proxy_cache_path /data/nginx/cache/webserver levels=1:2 keys_zone=webserver:20m max_size=1g;</span><br></pre></td></tr></table></figure>
<p><code>levels</code>参数指定缓存的子目录数。<code>keys_zone</code>指定活动的 key 和元数据存储在共享池（webserver 为共享池名称，20m 位共享池大小），<code>inactive</code>参数指定的时间内缓存的数据没有被请求则被删除，默认 inactive 为 10 分钟<code>·max_size</code>指定缓存空间的大小。</p>
</li>
<li><p><code>proxy_cache</code>: 设置一个缓存区域的名称，一个相同的区域可以在不同的地方使用。</p>
</li>
<li><code>proxy_cache_valid</code>: 为不同的应答设置不同的缓存时间。</li>
</ul>
<h2 id="设置读写分离"><a href="#设置读写分离" class="headerlink" title="设置读写分离"></a>设置读写分离</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        #charset koi8-r;</span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line">        location / &#123;</span><br><span class="line">                proxy_pass http://192.128.133.202;</span><br><span class="line">                if ($request_method = &quot;PUT&quot;)&#123;</span><br><span class="line">                        proxy_pass http://192.128.18.201;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="开机启动"><a href="#开机启动" class="headerlink" title="开机启动"></a>开机启动</h1><blockquote>
<p>当我们在 Mac 上使用 homebrew 安装 nginx，mysql，php 的时候，遗憾的是 nginx 默认监听的是 8080 端口，而当我们将端口修改为 Web 服务器通用的 80 端口时，却导致 nginx 无法在开机的时候自启。。。</p>
</blockquote>
<ul>
<li><p>通过 homebrew 安装 nginx 后，我们可以在 nginx 软件的安装目录<code>/usr/local/Cellar/nginx</code>下看到有一个<code>homebrew.mxcl.nginx.plist</code>文件。在 Mac 系统上, <code>.plist</code>文件就是服务开机启动的配置文件。</p>
</li>
<li><p>由于 nginx 监听<code>80</code>端口，必须在开机启动的时候，以管理员权限执行，所以需要将此文件复制一份置于<code>/Library/LaunchDaemons</code>目录之下。注意权限需要和<code>/Library/LaunchDaemons</code>目录下的其他文件权限保持一致，通常是<code>644</code>, 文件所有者为<code>root:wheel</code>，否则真的会报错误的。</p>
</li>
<li>然后使用<code>launchctl load -w /Library/LaunchDaemons/homebrew.mxcl.nginx.plist</code> 加载 nginx 服务到系统启动服务中即可。</li>
</ul>
<p><strong>命令：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># [可选]先查看此目录是否存在，不存在执行此命令新建</span></span><br><span class="line">mkdir -p ~/Library/LaunchDaemons</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝homebrew.mxcl.nginx.plist文件</span></span><br><span class="line">sudo cp /usr/<span class="built_in">local</span>/Cellar/nginx/*.plist /Library/LaunchDaemons</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载启动服务</span></span><br><span class="line">sudo launchctl load -w /Library/LaunchDaemons/homebrew.mxcl.nginx.plist</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置nginx权限</span></span><br><span class="line">sudo chown root:wheel /usr/<span class="built_in">local</span>/Cellar/nginx/&#123;nginx版本&#125;/bin/nginx</span><br></pre></td></tr></table></figure>
<h1 id="完整-nginx-配置举例"><a href="#完整-nginx-配置举例" class="headerlink" title="完整 nginx 配置举例"></a>完整 nginx 配置举例</h1><blockquote>
<p>nginx 配置主文件: /usr/local/etc/nginx/nginx.conf</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">user root owner;</span><br><span class="line"><span class="comment">#user  nobody;</span></span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line"><span class="comment"># pid        /logs/nginx/nginx.pid;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># events-模块（工作模式&amp;连接上限）: https://www.zybuluo.com/phper/note/89391#events-%E6%A8%A1%E5%9D%97</span></span><br><span class="line">events &#123;</span><br><span class="line">    use kqueue; <span class="comment">#mac平台</span></span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># # 这个将为打开文件指定缓存，默认是没有启用的，max指定缓存数量，建议和打开文件数一致，inactive是指经过多长时间文件没被请求后删除缓存。</span></span><br><span class="line"><span class="comment"># open_file_cache max=65535 inactive=60s;</span></span><br><span class="line"><span class="comment"># # 检查缓存有效信息的频率。</span></span><br><span class="line"><span class="comment"># open_file_cache_valid 80s;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    underscores_in_headers on; <span class="comment"># 开启变量下划线支持</span></span><br><span class="line"></span><br><span class="line">    client_max_body_size 24M;</span><br><span class="line">    client_body_buffer_size 256k;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 日志格式设置: https://juejin.im/post/59f94f626fb9a045023af34c</span></span><br><span class="line">    <span class="comment"># $remote_addr             客户端地址                                    211.28.65.253</span></span><br><span class="line">    <span class="comment"># $remote_user             客户端用户名称                                --</span></span><br><span class="line">    <span class="comment"># $time_local              访问时间和时区                                18/Jul/2012:17:00:01 +0800</span></span><br><span class="line">    <span class="comment"># $request                 请求的URI和HTTP协议                           "GET /article-10000.html HTTP/1.1"</span></span><br><span class="line">    <span class="comment"># $http_host               请求地址，即浏览器中你输入的地址（IP或域名）       www.wang.com 192.168.100.100</span></span><br><span class="line">    <span class="comment"># $status                  HTTP请求状态                                  200</span></span><br><span class="line">    <span class="comment"># $upstream_status         upstream状态                                 200</span></span><br><span class="line">    <span class="comment"># $body_bytes_sent         发送给客户端文件内容大小                        1547</span></span><br><span class="line">    <span class="comment"># $http_referer            url跳转来源                                   https://www.baidu.com/</span></span><br><span class="line">    <span class="comment"># $http_user_agent         用户终端浏览器等信息                           "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; SV1; GTB7.0; .NET4.0C;</span></span><br><span class="line">    <span class="comment"># $ssl_protocol            SSL协议版本                                   TLSv1</span></span><br><span class="line">    <span class="comment"># $ssl_cipher              交换数据中的算法                               RC4-SHA</span></span><br><span class="line">    <span class="comment"># $upstream_addr           后台upstream的地址，即真正提供服务的主机地址      10.10.10.100:80</span></span><br><span class="line">    <span class="comment"># $request_time            整个请求的总时间                               0.205</span></span><br><span class="line">    <span class="comment"># $upstream_response_time  请求过程中，upstream响应时间                    0.002</span></span><br><span class="line">    log_format  main  <span class="string">'remote_addr:                     $remote_addr\n'</span></span><br><span class="line">                        <span class="string">'remote_user:                   $remote_user\n'</span></span><br><span class="line">                        <span class="string">'time_local:                    $time_local\n'</span></span><br><span class="line">                        <span class="string">'request:                       $request\n'</span></span><br><span class="line">                        <span class="string">'status:                        $status\n'</span></span><br><span class="line">                        <span class="string">'body_bytes_sent:               $body_bytes_sent\n'</span></span><br><span class="line">                        <span class="string">'http_referer:                  $http_referer\n'</span></span><br><span class="line">                        <span class="string">'http_user_agent:               $http_user_agent\n'</span></span><br><span class="line">                        <span class="string">'http_x_forwarded_for:          $http_x_forwarded_for\n'</span></span><br><span class="line">                        <span class="string">'request_body:                  $request_body\n'</span></span><br><span class="line">                        <span class="string">'------------------------------------------------------------------------'</span>;</span><br><span class="line"></span><br><span class="line">    log_format  porxy  <span class="string">'http_x_forwarded_for:           $http_x_forwarded_for\n'</span></span><br><span class="line">                        <span class="string">'remote_user:                   $remote_user\n'</span></span><br><span class="line">                        <span class="string">'time_local:                    $time_local\n'</span></span><br><span class="line">                        <span class="string">'http_host:                     $http_host\n'</span></span><br><span class="line">                        <span class="string">'request:                       $request\n'</span></span><br><span class="line">                        <span class="string">'status:                        $status\n'</span></span><br><span class="line">                        <span class="string">'body_bytes_sent:               $body_bytes_sent\n'</span></span><br><span class="line">                        <span class="string">'http_referer:                  $http_referer\n'</span></span><br><span class="line">                        <span class="string">'http_user_agent:               $http_user_agent\n'</span></span><br><span class="line">                        <span class="string">'proxy_protocol_addr:           $proxy_protocol_addr\n'</span></span><br><span class="line">                        <span class="string">'request_body:                  $request_body\n'</span></span><br><span class="line">                        <span class="string">'porxy_url:                     $porxy_url\n'</span></span><br><span class="line">                        <span class="string">'------------------------------------------------------------------------'</span>;</span><br><span class="line"></span><br><span class="line">    log_format log404 <span class="string">'$status [$time_local] $remote_addr $host$request_uri $sent_http_location'</span>;</span><br><span class="line"></span><br><span class="line">    access_log  /logs/nginx/access.log  main;</span><br><span class="line">    <span class="comment"># error_log  /logs/nginx/error.log;</span></span><br><span class="line">    <span class="comment"># error_log  /logs/nginx/error.log  notice;</span></span><br><span class="line">    error_log  /logs/nginx/error.log  info;</span><br><span class="line"></span><br><span class="line">    access_log      on;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    <span class="comment"># tcp_nopush     on;</span></span><br><span class="line">    <span class="comment"># fastcgi_intercept_errors on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># keepalive_timeout  0;</span></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># # gzip压缩功能设置</span></span><br><span class="line">    <span class="comment"># gzip on;</span></span><br><span class="line"></span><br><span class="line">    proxy_redirect off; <span class="comment"># 关闭后端返回的header修改 </span></span><br><span class="line">    proxy_set_header Host <span class="variable">$host</span>; <span class="comment"># 修改发送到后端的header的host </span></span><br><span class="line">    proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>; <span class="comment"># 设置真实ip </span></span><br><span class="line">    proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    proxy_connect_timeout 60; <span class="comment"># 代理服务器和后端真实服务器握手连接超时时间</span></span><br><span class="line">    proxy_read_timeout 600; <span class="comment"># 后端服务器回传数据给Nginx的时间，需要在设置的时间范围内发送完所有数据，否则Nginx将断开连接</span></span><br><span class="line">    proxy_send_timeout 600; <span class="comment"># 代理服务器和后端服务器连接成功后，等待后端服务器响应时间</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># # 负载均衡: https://www.zybuluo.com/phper/note/90310#3%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1</span></span><br><span class="line">    <span class="comment"># # 设定负载均衡后台服务器列表 </span></span><br><span class="line">    <span class="comment"># upstream  backend  &#123; </span></span><br><span class="line">    <span class="comment">#     #ip_hash; # 记录并访问上一次访问过的服务器</span></span><br><span class="line">    <span class="comment">#     server   192.168.0.100:8080 weight=10 max_fails=2 fail_timeout=30s;</span></span><br><span class="line">    <span class="comment">#     server   192.168.0.101:8080 weight=10 max_fails=2 fail_timeout=30s;</span></span><br><span class="line">    <span class="comment"># &#125;</span></span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       1024;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#charset koi8-r;</span></span><br><span class="line">        charset utf-8;</span><br><span class="line"></span><br><span class="line">        access_log  /logs/nginx/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># location匹配: https://segmentfault.com/a/1190000013267839</span></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#error_page  404              /404.html;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        error_page   500 502 503 504 404 403 /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span></span><br><span class="line">        <span class="comment"># location ~ \.php$ &#123;</span></span><br><span class="line">        <span class="comment">#     proxy_pass   http://127.0.0.1;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#     ### 下面都是次要关注项</span></span><br><span class="line">        <span class="comment">#     proxy_set_header Host $host; # 修改发送到后端的header的host </span></span><br><span class="line">        <span class="comment">#     proxy_set_header X-Real-IP $remote_addr; # 设置真实ip </span></span><br><span class="line">        <span class="comment">#     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # 经过的IP列表</span></span><br><span class="line">        <span class="comment">#     proxy_method POST;</span></span><br><span class="line">        <span class="comment">#     # 指定不转发的头部字段</span></span><br><span class="line">        <span class="comment">#     proxy_hide_header Cache-Control;</span></span><br><span class="line">        <span class="comment">#     proxy_hide_header Other-Header;</span></span><br><span class="line">        <span class="comment">#     # 指定转发的头部字段</span></span><br><span class="line">        <span class="comment">#     proxy_pass_header Server-IP;</span></span><br><span class="line">        <span class="comment">#     proxy_pass_header Server-Name;</span></span><br><span class="line">        <span class="comment">#     # 是否转发包体</span></span><br><span class="line">        <span class="comment">#     proxy_pass_request_body on | off;</span></span><br><span class="line">        <span class="comment">#     # 是否转发头部</span></span><br><span class="line">        <span class="comment">#     proxy_pass_request_headers on | off;</span></span><br><span class="line">        <span class="comment">#     # 显形/隐形 URI，上游发生重定向时，Nginx 是否同步更改 uri</span></span><br><span class="line">        <span class="comment">#     proxy_redirect on | off;</span></span><br><span class="line">        <span class="comment"># &#125;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">        <span class="comment">#    root           html;</span></span><br><span class="line">        <span class="comment">#    fastcgi_pass   127.0.0.1:9000;</span></span><br><span class="line">        <span class="comment">#    fastcgi_index  index.php;</span></span><br><span class="line">        <span class="comment">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span></span><br><span class="line">        <span class="comment">#    include        fastcgi_params;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># deny access to .htaccess files, if Apache's document root</span></span><br><span class="line">        <span class="comment"># concurs with nginx's one</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ /\.ht &#123;</span></span><br><span class="line">        <span class="comment">#    deny  all;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># another virtual host using mix of IP-, name-, and port-based configuration</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#server &#123;</span></span><br><span class="line">    <span class="comment">#    listen       8000;</span></span><br><span class="line">    <span class="comment">#    listen       somename:8080;</span></span><br><span class="line">    <span class="comment">#    server_name  somename  alias  another.alias;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    location / &#123;</span></span><br><span class="line">    <span class="comment">#        root   html;</span></span><br><span class="line">    <span class="comment">#        index  index.html index.htm;</span></span><br><span class="line">    <span class="comment">#    &#125;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># HTTPS server</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#server &#123;</span></span><br><span class="line">    <span class="comment">#    listen       443 ssl;</span></span><br><span class="line">    <span class="comment">#    server_name  localhost;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_certificate      cert.pem;</span></span><br><span class="line">    <span class="comment">#    ssl_certificate_key  cert.key;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_session_cache    shared:SSL:1m;</span></span><br><span class="line">    <span class="comment">#    ssl_session_timeout  5m;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span></span><br><span class="line">    <span class="comment">#    ssl_prefer_server_ciphers  on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    location / &#123;</span></span><br><span class="line">    <span class="comment">#        root   html;</span></span><br><span class="line">    <span class="comment">#        index  index.html index.htm;</span></span><br><span class="line">    <span class="comment">#    &#125;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    include servers/*;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>外部 server 配置: /usr/local/etc/nginx/servers/dev.conf</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Location 配置demo</span></span><br><span class="line"><span class="comment"># https://segmentfault.com/a/1190000009651161</span></span><br><span class="line"></span><br><span class="line">upstream  rd_header  &#123; </span><br><span class="line">    server rd5-dev.zhaopin.com;</span><br><span class="line">    <span class="comment"># server rd5-pre.zhaopin.com;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">upstream  bole_api  &#123; </span><br><span class="line">    server 192.168.214.110:8089 weight=10 max_fails=2 fail_timeout=30s;</span><br><span class="line">    <span class="comment"># server bole-api-dev.zhaopin.com weight=10 max_fails=2 fail_timeout=30s;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line"></span><br><span class="line">    server_name *.zhaopin.com;</span><br><span class="line">    resolver 127.0.0.1 ipv6=off;</span><br><span class="line"></span><br><span class="line">    access_log  /logs/nginx/<span class="variable">$http_host</span>.access.log  porxy;</span><br><span class="line">    error_log  /logs/nginx/zhaopin.error.log;</span><br><span class="line"></span><br><span class="line">    location ~ /api/rd/rd55/head &#123;</span><br><span class="line">        proxy_pass http://rd_header;</span><br><span class="line"></span><br><span class="line">        proxy_set_header Host  <span class="variable">$host</span>;</span><br><span class="line">        proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ /bolemanage/(.*) &#123;</span><br><span class="line">        proxy_pass http://bole_api/bolemanage/<span class="variable">$1</span>?<span class="variable">$args</span>;</span><br><span class="line"></span><br><span class="line">        proxy_set_header Host  bole-api-dev.zhaopin.com;</span><br><span class="line">        proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        resolver 127.0.0.1 ipv6=off;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$http_host</span> ~* ^(.*-<span class="built_in">local</span>)(\.zhaopin\.com)$) &#123;</span><br><span class="line">            <span class="built_in">set</span> <span class="variable">$porxy_url</span> <span class="variable">$1</span><span class="variable">$2</span>:8000;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># proxy_pass http://$porxy_url; </span></span><br><span class="line">        proxy_pass http://127.0.0.1:8000;</span><br><span class="line"></span><br><span class="line">        access_log  /logs/nginx/<span class="variable">$porxy_url</span>.access.log  porxy;</span><br><span class="line">        error_log  /logs/nginx/zhaopin-porxy_url.error.log;</span><br><span class="line"></span><br><span class="line">        proxy_set_header Host <span class="variable">$http_host</span>:8000;</span><br><span class="line">        proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page  404 403       https://github.com/404;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># server &#123;</span></span><br><span class="line"><span class="comment">#     listen 80;</span></span><br><span class="line"><span class="comment">#     server_name rd5-dev.zhaopin.com;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#     location /api/rd/rd55/head &#123;</span></span><br><span class="line"><span class="comment">#         proxy_pass http://rd5-pre.zhaopin.com;</span></span><br><span class="line"><span class="comment">#     &#125;</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># server &#123;</span></span><br><span class="line"><span class="comment">#     listen 80;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#     # 泛域名解析</span></span><br><span class="line"><span class="comment">#     server_name *.zhaopin.com;</span></span><br><span class="line"><span class="comment">#     resolver 127.0.0.1 ipv6=off;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#     # 最末级域名作为localhost端口号</span></span><br><span class="line"><span class="comment">#     if ($host ~* ^([^\.]+)\.([^\.]+\.[^\.]+)$) &#123;</span></span><br><span class="line"><span class="comment">#     set $subdomain $1;</span></span><br><span class="line"><span class="comment">#     set $domain $2;</span></span><br><span class="line"><span class="comment">#     set $porxy_url 127.0.0.1:$1;</span></span><br><span class="line"><span class="comment">#     &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#     access_log  /logs/nginx/$subdomain.zhaopin.access.log  porxy;</span></span><br><span class="line"><span class="comment">#     error_log  /logs/nginx/zhaopin.error.log;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#     location / &#123;</span></span><br><span class="line"><span class="comment">#     proxy_pass http://$porxy_url;</span></span><br><span class="line"><span class="comment">#     &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#     error_page  404 403       https://github.com/404;</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br></pre></td></tr></table></figure>
<h1 id="采坑"><a href="#采坑" class="headerlink" title="采坑"></a>采坑</h1><ul>
<li><p>本机可以访问，但是局域网内其他电脑无法访问</p>
<blockquote>
<p>检查防火墙配置</p>
</blockquote>
</li>
<li><p>启动权限错误，不想通过sudo启动</p>
<p>在使用nginx -t检查nginx配置文件时出现这个错误:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> /usr/<span class="built_in">local</span>/nginx/sbin/nginx -t</span></span><br><span class="line">nginx: [warn] the "user" directive makes sense only if the master process runs with super-user privileges, ignored in /usr/local/nginx/conf/nginx.conf:2</span><br></pre></td></tr></table></figure>
<p>nginx的所有者是root<br>我们都知道nginx的主进程需要使用root来运行,而子进程可以使用普通用户运行,<br>普通用户如果不使用<code>sudo</code>命令运行nginx时则需要获取<code>SUID</code>权限才能在nginx运行时将身份切换为root,否则就是用自己的身份来执行nginx,而恰巧在这个nginx.conf文件中设置了ssl的证书的放置位置在一些普通用户不能读取的位置或者一些普通用户不能读取的目录,所以出现了权限的错误.<br>解决的方法我总结了两种,一种是使用<code>sudo</code>来运行nginx,另一种是给nginx赋予<code>SUID</code>权限,让普通用户在执行nginx时将身份提升为nginx的所有者也就是root</p>
<blockquote>
<p><strong>给nginx赋予<code>SUID</code>权限</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> $ sudo chmod u+s /usr/<span class="built_in">local</span>/nginx/sbin/nginx</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> //或者$ sudo chmod 4755 /usr/<span class="built_in">local</span>/nginx/sbin/nginx</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> $ ll /usr/<span class="built_in">local</span>/nginx/sbin/nginx</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> -rwsr-xr-x 1 root root 8641260 Sep  7 14:33 /usr/<span class="built_in">local</span>/nginx/sbin/nginx</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>但是由于<code>SUID</code>权限是linux中比较危险的一种程序,假设要执行的程序的所有者是root,那么任何非sudo用户都可以在运行这个程序的时候身份都变为了root,所以这个程序可以让任何人以root身份执行,有点心里慌慌.<br>还是用<code>sudo</code>执行好一些吧,至少只有在<code>sudoers</code>列表中的用户才能以root权限执行,还必须在命令前敲<code>sudo</code>来提醒一下自己,感觉安全性是提高了不少.</p>
</blockquote>
</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><span class="exturl" data-url="aHR0cDovL3d3dy5uZ2lueC5jbi9kb2Mv" title="http://www.nginx.cn/doc/">Nginx 中文文档<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL2ltd2ViLmlvL3RvcGljLzU2Mzg2OTcyZDEyYjIzMGMyNmUxYTE3ZA==" title="http://imweb.io/topic/56386972d12b230c26e1a17d">Nginx 能为前端开发带来什么？<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYXJheXpvdS5jb20vMjAxNi8wOS8yMC8lRTUlODklOEQlRTclQUIlQUYlRTUlQjclQTUlRTclQTglOEIlRTUlQjglODglRTUlQkElOTQlRTglQUYlQTUlRTclOUYlQTUlRTklODElOTMlRTclOUElODRuZ2lueC8=" title="https://www.arayzou.com/2016/09/20/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%BA%94%E8%AF%A5%E7%9F%A5%E9%81%93%E7%9A%84nginx/">前端工程师应该知道的 Nginx<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuaXRzbnMub3JnL2FydGljbGUvMg==" title="https://www.itsns.org/article/2">前端 Nginx https SSL proxy + 后端 Nginx http 应用的布署教程<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAwMjc5NzYwNiNhcnRpY2xlSGVhZGVyMA==" title="https://segmentfault.com/a/1190000002797606#articleHeader0">nginx 配置 location 总结及 rewrite 规则写法<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAwMjc5NzYwMSNhcnRpY2xlSGVhZGVyMw==" title="https://segmentfault.com/a/1190000002797601#articleHeader3">nginx 服务器安装及配置文件详解<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL2ZyZWVsb2RhLmJsb2cuNTFjdG8uY29tLzIwMzM1ODEvMTI4ODU1Mw==" title="http://freeloda.blog.51cto.com/2033581/1288553">Nginx 反向代理、负载均衡、页面缓存、URL 重写及读写分离详解<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05pY2tfcGhwL2FydGljbGUvZGV0YWlscy81Mzg2ODg0NQ==" title="https://blog.csdn.net/Nick_php/article/details/53868845">Mac 通过 Homebrew 安装 nginx 并设置开机启动配置<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vZGFseTIwMDgvcC81MzY3NzAwLmh0bWw=" title="https://www.cnblogs.com/daly2008/p/5367700.html">mac 下 nginx 加入开机启动<i class="fa fa-external-link"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode 插件开发</title>
    <url>/posts/a0508b9c.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote>
<p>应用商店地址: <span class="exturl" data-url="aHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPU1yTGVvLnpwbQ==" title="https://marketplace.visualstudio.com/items?itemName=MrLeo.zpm">https://marketplace.visualstudio.com/items?itemName=MrLeo.zpm<i class="fa fa-external-link"></i></span></p>
</blockquote>
<p>每个程序猿都有很多自己的代码片段，没到使用的时候都是 Ctrl+C &amp; Ctrl+V 粘过来粘过去，对于一个爱偷懒的程序猿，这样的重复工作能不能减少呢。</p>
<p>工欲善其事必先利其器。vscode 作为优秀的开发工具，给我的日常开发工作提供了极大的便利。其拓展机制更是如此。</p>
<p>于是便想着自己来开发这么个东西来管理自己的代码片段，一方面方便后边自己使用，一方面也能学习下 vscode 的插件开发、发布方法，另一方面要是发布后对其他人有所帮助就更好了。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9saWlrZWQuZ2l0aHViLmlvL1ZTLUNvZGUtRXh0ZW5zaW9uLURvYy1aSC8jLw==" title="https://liiked.github.io/VS-Code-Extension-Doc-ZH/#/">VS Code 插件开发文档-中文版<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL2Jsb2cuaGFvamkubWUvdnNjb2RlLXBsdWdpbi1vdmVydmlldy5odG1s" title="http://blog.haoji.me/vscode-plugin-overview.html">VSCode 插件开发全攻略<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tLw==" title="https://marketplace.visualstudio.com/">插件市场<i class="fa fa-external-link"></i></span> / <span class="exturl" data-url="aHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL21hbmFnZQ==" title="https://marketplace.visualstudio.com/manage">插件管理<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YzI5ZTFiN2U1MWQ0NTM1ZjA1YTUzZDQ=" title="https://juejin.im/post/5c29e1b7e51d4535f05a53d4">使用 Webapck 优化 VS Code 插件加载性能<i class="fa fa-external-link"></i></span><a id="more"></a>
</li>
</ul>
<h1 id="vscode-插件开发、发布主要流程"><a href="#vscode-插件开发、发布主要流程" class="headerlink" title="vscode 插件开发、发布主要流程"></a>vscode 插件开发、发布主要流程</h1><ol>
<li>插件开发前的准备：vscode、nodejs、vscode 插件生产工具、git、微软账号</li>
<li>插件开发：插件构思、<span class="exturl" data-url="aHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20vYXBpL2dldC1zdGFydGVkL3lvdXItZmlyc3QtZXh0ZW5zaW9u" title="https://code.visualstudio.com/api/get-started/your-first-extension">官方文档<i class="fa fa-external-link"></i></span>查阅</li>
<li>插件发布：打包、上传、<span class="exturl" data-url="aHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tLw==" title="https://marketplace.visualstudio.com/">插件市场<i class="fa fa-external-link"></i></span>操作</li>
<li>插件维护：更新迭代后打包、上传、<span class="exturl" data-url="aHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tLw==" title="https://marketplace.visualstudio.com/">插件市场<i class="fa fa-external-link"></i></span>操作</li>
</ol>
<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>vscode、nodejs、git、微软账号，这个的准备无需多说。</p>
<p>vscode 插件生产工具：<span class="exturl" data-url="aHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20vYXBpL2dldC1zdGFydGVkL3lvdXItZmlyc3QtZXh0ZW5zaW9u" title="https://code.visualstudio.com/api/get-started/your-first-extension">官方推荐<i class="fa fa-external-link"></i></span>使用 Yeoman 和 VS Code Extension Generator。用如下命令安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 插件生成器</span></span><br><span class="line">npm install -g yo generator-code</span><br></pre></td></tr></table></figure>
<p>至此开发所需的准备已做好。</p>
<h1 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化代码</span></span><br><span class="line">yo code</span><br></pre></td></tr></table></figure>
<p>结果如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yo code</span><br><span class="line"></span><br><span class="line">     _-----_     ╭──────────────────────────╮</span><br><span class="line">    |       |    │   Welcome to the Visual  │</span><br><span class="line">    |--(o)--|    │   Studio Code Extension  │</span><br><span class="line">   `---------´   │        generator!        │</span><br><span class="line">    ( _´U`_ )    ╰──────────────────────────╯</span><br><span class="line">    /___A___\   /</span><br><span class="line">     |  ~  |</span><br><span class="line">   __<span class="string">'.___.'</span>__</span><br><span class="line"> ´   `  |° ´ Y `</span><br><span class="line"></span><br><span class="line">? What <span class="built_in">type</span> of extension <span class="keyword">do</span> you want to create? (Use arrow keys)</span><br><span class="line">&gt; New Extension (TypeScript)</span><br><span class="line">  New Extension (JavaScript)</span><br><span class="line">  New Color Theme</span><br><span class="line">  New Language Support</span><br><span class="line">  New Code Snippets</span><br><span class="line">  New Keymap</span><br><span class="line">  New Extension Pack</span><br><span class="line">(Move up and down to reveal more choices)</span><br></pre></td></tr></table></figure>
<p>在 os 系统上通过上下键来选择要创建的类型，在 win 上输入 1、2、3 后按回车来选择。</p>
<p>其余步骤根据提示即可。得到如下结构目录结构：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── .vscode                              // 资源配置文件</span><br><span class="line">├── CHANGELOG.md                         // 更改记录文件，会展示到vscode插件市场</span><br><span class="line">├── README.md                            // 插件介绍文件，会展示到vscode插件市场</span><br><span class="line">├── logo.png                             // 插件图标</span><br><span class="line">├── package.json                         // 资源配置文件</span><br><span class="line">├── snippets                             // 存放所有片段</span><br><span class="line">│   └── javascript.json                  // javascript的代码片段</span><br><span class="line">└── vsc-extension-quickstart.md</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>ps：</strong>其余项目类型的文档目录可能会有所差别，以生成的文件目录为准。在 snippet 拓展项目下，最重要的就是<code></code>snippets/*.json<code>和</code>package.json`</p>
</blockquote>
<p>如果不知道如何编写 snippet 文件，可以使用<span class="exturl" data-url="aHR0cHM6Ly9zbmlwcGV0LWdlbmVyYXRvci5hcHAv" title="https://snippet-generator.app/">snippet-generator<i class="fa fa-external-link"></i></span>生成你需要的代码片段</p>
<p>如果想知道具体 vscode 支持的代码片段格式，可以阅读：<span class="exturl" data-url="aHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20vZG9jcy9lZGl0b3IvdXNlcmRlZmluZWRzbmlwcGV0cw==" title="https://code.visualstudio.com/docs/editor/userdefinedsnippets">Creating your own snippets<i class="fa fa-external-link"></i></span></p>
<p>开发其他 vscode 插件，可以查阅文档<span class="exturl" data-url="aHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20vYXBpL3JlZmVyZW5jZXMvdnNjb2RlLWFwaQ==" title="https://code.visualstudio.com/api/references/vscode-api">vscode-api<i class="fa fa-external-link"></i></span></p>
<p>添加不同语言的代码片段，只需要在<code>snippets</code>文件夹中添加对应语言的<code>.json</code>文件，然后向<code>package.json</code>文件的<code>contributes.snippets</code>属性中添加片段文件路径并制定应用的语言 👇</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "name": "zpm-snippet", // 插件的名称必须用全小写无空格的字母组成。</span><br><span class="line">  "displayName": "zpm-snippet", // 插件市场所显示的插件名称。</span><br><span class="line">  "description": "智联 ZPFE API 项目 VSCode 代码片段", // 简单地描述一下你的插件是做什么的。</span><br><span class="line">  "version": "0.0.10", // 版本号</span><br><span class="line">  "publisher": "MrLeo", // 发行方名称</span><br><span class="line">  "icon": "logo.png", // 应用图标</span><br><span class="line">  // 插件市场所显示的插件关联的github仓库</span><br><span class="line">  "repository": &#123;</span><br><span class="line">    "type": "git",</span><br><span class="line">    "url": "https://github.com/MrLeo/zpm-snippet.git"</span><br><span class="line">  &#125;,</span><br><span class="line">  // 一个至少包含vscode字段的对象，其值必须兼容 VS Code版本。</span><br><span class="line">  // 不可以是*。</span><br><span class="line">  // 例如：^0.10.5 表明最小兼容0.10.5版本的VS Code。</span><br><span class="line">  "engines": &#123;</span><br><span class="line">    "vscode": "^1.31.0"</span><br><span class="line">  &#125;,</span><br><span class="line">  // 你想要使用的插件分类，可选值有：[Programming Languages, Snippets,</span><br><span class="line">  // Linters, Themes, Debuggers, Formatters, Keymaps, SCM Providers,</span><br><span class="line">  // Other, Extension Packs, Language Packs]</span><br><span class="line">  "categories": ["Snippets"],</span><br><span class="line">  // 描述插件发布内容的对象。</span><br><span class="line">  "contributes": &#123;</span><br><span class="line">    "snippets": [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"language"</span>: <span class="string">"javascript"</span>,</span><br><span class="line">        <span class="attr">"path"</span>: <span class="string">"./snippets/javascript.json"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>更多插件清单文件说明：<span class="exturl" data-url="aHR0cHM6Ly9saWlrZWQuZ2l0aHViLmlvL1ZTLUNvZGUtRXh0ZW5zaW9uLURvYy1aSC8jL2V4dGVuc2liaWxpdHktcmVmZXJlbmNlL2V4dGVuc2lvbi1tYW5pZmVzdA==" title="https://liiked.github.io/VS-Code-Extension-Doc-ZH/#/extensibility-reference/extension-manifest">package.json<i class="fa fa-external-link"></i></span></p>
</blockquote>
<h1 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装打包&amp;发布工具</span></span><br><span class="line">npm install -g vsce</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打包插件</span></span><br><span class="line">vsce package</span><br></pre></td></tr></table></figure>
<p>打包成功后会在根目录下得到：<code>zpm-snippet-0.0.10.vsix</code>文件</p>
<h1 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h1><h2 id="方式一：vsce-publish-工具发布"><a href="#方式一：vsce-publish-工具发布" class="headerlink" title="方式一：vsce publish 工具发布"></a>方式一：<code>vsce publish</code> 工具发布</h2><blockquote>
<p>用 vsce 的<code>vsce publish</code>工具来发布，但是需要在官网配置<code>Personal Access Token</code>较为繁琐。</p>
<p>可参考<span class="exturl" data-url="aHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20vYXBpL3dvcmtpbmctd2l0aC1leHRlbnNpb25zL3B1Ymxpc2hpbmctZXh0ZW5zaW9u" title="https://code.visualstudio.com/api/working-with-extensions/publishing-extension">官方教程<i class="fa fa-external-link"></i></span> / <span class="exturl" data-url="aHR0cDovL2Jsb2cuaGFvamkubWUvdnNjb2RlLXBsdWdpbi1wdWJsaXNoLmh0bWwjZmEtYnUteWluZy15b25nLXNoaS1jaGFuZw==" title="http://blog.haoji.me/vscode-plugin-publish.html#fa-bu-ying-yong-shi-chang">发布应用市场<i class="fa fa-external-link"></i></span></p>
</blockquote>
<p>Visual Studio Code 的应用市场基于微软自己的<code>Azure DevOps</code>，插件的身份验证、托管和管理都是在这里。</p>
<ul>
<li>要发布到应用市场首先得有应用市场的<code>publisher</code>账号；</li>
<li>而要有发布账号首先得有<code>Azure DevOps</code>组织；</li>
<li>而创建组织之前，首先得创建<code>Azure</code>账号；</li>
<li>创建<code>Azure</code>账号首先得有<code>Microsoft</code>账号；</li>
</ul>
<p>是不是有点晕，梳理一下：</p>
<ul>
<li>一个 Microsoft 账号可以创建多个<code>Azure</code>组织；</li>
<li>一个组织可以创建多个<code>publisher</code>账号；</li>
<li>同时一个组织可以创建多个<code>PAT</code>（<code>Personal Access Token</code>，个人访问令牌）；</li>
</ul>
<h3 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a>注册账号</h3><p>首先访问 <span class="exturl" data-url="aHR0cHM6Ly9sb2dpbi5saXZlLmNvbS8=" title="https://login.live.com/">https://login.live.com/<i class="fa fa-external-link"></i></span> 登录你的<code>Microsoft</code>账号，没有的先注册一个：</p>
<p><img src="https://image.xuebin.me/006tKfTcly1g12cbrd34fj30g30de42t.jpg" alt></p>
<p>然后访问： <span class="exturl" data-url="aHR0cHM6Ly9ha2EubXMvU2lnbnVwQXp1cmVEZXZPcHM=" title="https://aka.ms/SignupAzureDevOps">https://aka.ms/SignupAzureDevOps<i class="fa fa-external-link"></i></span> ，如果你从来没有使用过 Azure，那么会看到如下提示：</p>
<p><img src="https://image.xuebin.me/006tKfTcly1g12ccc4lz1j30db0963yx.jpg" alt></p>
<p>点击继续，默认会创建一个以邮箱前缀为名的组织。</p>
<h3 id="创建令牌"><a href="#创建令牌" class="headerlink" title="创建令牌"></a>创建令牌</h3><p>默认进入组织的主页后，点击右上角的<code>Security</code>：</p>
<p><img src="https://image.xuebin.me/006tKfTcly1g12cdmzbtoj30ks0gv3zw.jpg" alt></p>
<p>点击创建新的个人访问令牌，这里特别要注意<code>Organization</code>要选择<code>all accessible organizations</code>，<code>Scopes</code>要选择<code>Full access</code>，否则后面发布会失败。</p>
<p><img src="https://image.xuebin.me/006tKfTcly1g12ce9wnf9j30hr0dy3zx.jpg" alt></p>
<p>创建令牌成功后你需要本地记下来，因为网站是不会帮你保存的。</p>
<h3 id="创建发布账号"><a href="#创建发布账号" class="headerlink" title="创建发布账号"></a>创建发布账号</h3><p>获得个人访问令牌后，使用<code>vsce</code>以下命令创建新的发布者：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vsce create-publisher your-publisher-name</span><br></pre></td></tr></table></figure>
<p><code>your-publisher-name</code>必须是字母数字下划线，这是全网唯一的账号，然后会依次要求输入昵称、邮箱、令牌：</p>
<p><img src="https://image.xuebin.me/006tKfTcly1g12cgxdqauj30xc086wfr.jpg" alt></p>
<p>创建成功后会默认登录这个账号，接下来你可以直接发布了，</p>
<p>当然，如果你是在其它地方创建的，可以试用<code>vsce login your-publisher-name</code>来登录。</p>
<p>除了用命令之外，你还可以使用网页版创建发布账号：<span class="exturl" data-url="aHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL21hbmFnZQ==" title="https://marketplace.visualstudio.com/manage">https://marketplace.visualstudio.com/manage<i class="fa fa-external-link"></i></span></p>
<h3 id="发布-1"><a href="#发布-1" class="headerlink" title="发布"></a>发布</h3><p>发布很简单：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vsce publish</span><br></pre></td></tr></table></figure>
<p><img src="https://image.xuebin.me/006tKfTcly1g12ci26vzcj30uc072myr.jpg" alt="img"></p>
<p>发布成功后大概需要过几分钟才能在应用市场搜到。过几分钟就可以访问网页版的插件主页：<span class="exturl" data-url="aHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPU1yTGVvLnpwbS1zbmlwcGV0" title="https://marketplace.visualstudio.com/items?itemName=MrLeo.zpm-snippet">https://marketplace.visualstudio.com/items?itemName=MrLeo.zpm-snippet<i class="fa fa-external-link"></i></span></p>
<h3 id="增量发布"><a href="#增量发布" class="headerlink" title="增量发布"></a>增量发布</h3><p>版本号：<code>major.minor.patch</code></p>
<p>如果想让发布之后版本号的 patch 自增，例如：<code>1.0.2</code> -&gt; <code>1.0.3</code>，可以这样：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vsce publish patch</span><br></pre></td></tr></table></figure>
<p>执行这个命令后会自动修改<code>package.json</code>里面的版本号。同理，<code>vsce publish minor</code>也是可以的。</p>
<h3 id="取消发布"><a href="#取消发布" class="headerlink" title="取消发布"></a>取消发布</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vsce unpublish (publisher name).(extension name)</span><br></pre></td></tr></table></figure>
<h2 id="方式二：在官网直接上传发布"><a href="#方式二：在官网直接上传发布" class="headerlink" title="方式二：在官网直接上传发布"></a>方式二：在官网直接上传发布</h2><h3 id="在插件市场官网创建发布人"><a href="#在插件市场官网创建发布人" class="headerlink" title="在插件市场官网创建发布人"></a>在<span class="exturl" data-url="aHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL21hbmFnZS9wdWJsaXNoZXJzLw==" title="https://marketplace.visualstudio.com/manage/publishers/">插件市场官网<i class="fa fa-external-link"></i></span>创建发布人</h3><p><img src="https://image.xuebin.me/006tKfTcly1g0zv5eor8hj30yg07dwg3.jpg" alt></p>
<p><img src="https://image.xuebin.me/006tKfTcly1g0zuxvhq1rj30y107zmy9.jpg" alt="image-20190312113750984"></p>
<h3 id="上传插件"><a href="#上传插件" class="headerlink" title="上传插件"></a>上传插件</h3><p><img src="https://image.xuebin.me/006tKfTcly1g0zv4jpijaj30xs07imxd.jpg" alt><br><img src="https://image.xuebin.me/006tKfTcly1g0zv5qseo2j30wx0gc3zq.jpg" alt></p>
<p>上传后点击确定即可发布成功。</p>
<h2 id="发布注意事项"><a href="#发布注意事项" class="headerlink" title="发布注意事项"></a>发布注意事项</h2><ul>
<li><code>README.md</code>文件默认会显示在插件主页；</li>
<li><code>README.md</code>中的资源必须全部是<code>HTTPS</code>的，如果是<code>HTTP</code>会发布失败；</li>
<li><code>CHANGELOG.md</code>会显示在变更选项卡；</li>
<li>如果代码是放在 git 仓库并且设置了 repository 字段，发布前必须先提交 git，否则会提示<code>Git working directory not clean</code>；</li>
</ul>
<p>另外，如前面所说，如果<code>Organization</code>没有选择<code>all accessible organizations</code>，或者<code>Scopes</code>没有选择<code>Full access</code>，发布的时候可能会报如下错误：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Error: Failed Request: Unauthorized(401) - https://marketplace.visualstudio.com/_apis/gallery</span><br><span class="line">Be sure to use a Personal Access Token <span class="built_in">which</span> has access to **all accessible accounts**.</span><br><span class="line">See https://code.visualstudio.com/docs/tools/vscecli<span class="comment">#_common-questions for more information.</span></span><br></pre></td></tr></table></figure>
<h1 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h1><ul>
<li><p>在插件市场官网看状态</p>
<p><img src="https://image.xuebin.me/006tKfTcly1g0zv8cg750j30x107x3yz.jpg" alt></p>
</li>
<li><p>在插件市场官网搜索</p>
<p><img src="https://image.xuebin.me/006tKfTcly1g0zv8eai49j30x70cptaf.jpg" alt></p>
</li>
<li><p>在 vscode 插件页搜索</p>
<p><img src="https://image.xuebin.me/006tKfTcly1g0zv8h3w76j30yg0f5ab4.jpg" alt></p>
</li>
</ul>
<h1 id="维护"><a href="#维护" class="headerlink" title="维护"></a>维护</h1><p>在发现 bug 和新功能开发完成后，需要更新插件，只需要将新生产的.vsix 包上传到官网即可。</p>
<p><img src="https://image.xuebin.me/006tKfTcly1g0zv9v8qcwj30yb0bmdgi.jpg" alt></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>vscode</tag>
        <tag>snippet</tag>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title>实现npm run tag自动为当前git版本生成tag标签</title>
    <url>/posts/dbc584b2.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>因为公司上线Jenkins构建规定根据固定规则的tag进行筛选构建，每次上线都要手敲一长串的tag甚是麻烦，作为一个爱偷懒的程序猿，能用自动化完成的工作一定不手动。</p>
<a id="more"></a>
<p>作为前端，node环境应该是必须的，废话不多说，直接上代码👇</p>
<blockquote>
<p>运行脚本会自动检查安装依赖包 <code>npm install --save-dev shelljs inquirer chalk simple-git semver</code></p>
<p>运行方式：</p>
<ol>
<li>直接<code>node tag</code></li>
<li>package.json 文件的 <code>scripts</code> 属性中添加: <code>&quot;tag&quot;: &quot;node ./tag&quot;</code></li>
</ol>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Company: 智联招聘</span></span><br><span class="line"><span class="comment"> * @Author: xuebin.me</span></span><br><span class="line"><span class="comment"> * @LastEditors: Leo</span></span><br><span class="line"><span class="comment"> * @version: 0.0.0</span></span><br><span class="line"><span class="comment"> * @Description: Git自动生成Tag</span></span><br><span class="line"><span class="comment"> * @Date: 2019-03-09 17:06:50</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2019-03-10 12:18:16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/* eslint-disable */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> log = <span class="built_in">console</span>.log</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> _exec = <span class="built_in">require</span>(<span class="string">'child_process'</span>).exec</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([</span><br><span class="line">  checkPackage(<span class="string">'shelljs'</span>),</span><br><span class="line">  checkPackage(<span class="string">'inquirer'</span>),</span><br><span class="line">  checkPackage(<span class="string">'chalk'</span>),</span><br><span class="line">  checkPackage(<span class="string">'simple-git'</span>),</span><br><span class="line">  checkPackage(<span class="string">'semver'</span>),</span><br><span class="line">]).then(<span class="function"><span class="params">()</span> =&gt;</span> app())</span><br><span class="line"></span><br><span class="line"><span class="comment">// #region 检查并自动安装依赖包</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检查并自动安装依赖包</span></span><br><span class="line"><span class="comment"> * https://sourcegraph.com/github.com/vuejs/vue-cli/-/blob/packages/@vue/cli/lib/util/installDeps.js</span></span><br><span class="line"><span class="comment"> * @param &#123;*&#125; package 依赖包名</span></span><br><span class="line"><span class="comment"> * @returns</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkPackage</span>(<span class="params">package</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.exists(path.resolve(<span class="string">`<span class="subst">$&#123;process.cwd()&#125;</span>/node_modules/<span class="subst">$&#123;package&#125;</span>/`</span>), exists =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (!exists) &#123;</span><br><span class="line">        log(<span class="string">'📦  正在安装依赖包: '</span>, package, <span class="string">'...'</span>)</span><br><span class="line">        log(<span class="string">''</span>)</span><br><span class="line">        <span class="keyword">let</span> cwd = <span class="string">`npm install --save-dev <span class="subst">$&#123;package&#125;</span>`</span></span><br><span class="line">        <span class="keyword">const</span> child = _exec(cwd, &#123; <span class="attr">silent</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">        child.stdout.on(<span class="string">'data'</span>, buffer =&gt; process.stdout.write(buffer))</span><br><span class="line">        child.on(<span class="string">'close'</span>, code =&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span> (code !== <span class="number">0</span>) &#123;</span><br><span class="line">            reject(<span class="string">`command failed: <span class="subst">$&#123;cwd&#125;</span>`</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">          &#125;</span><br><span class="line">          resolve()</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        resolve()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// #endregion</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">app</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// #region 引入依赖包</span></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'shelljs/global'</span>)</span><br><span class="line">  <span class="keyword">const</span> inquirer = <span class="built_in">require</span>(<span class="string">'inquirer'</span>)</span><br><span class="line">  <span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>)</span><br><span class="line">  <span class="keyword">const</span> git = <span class="built_in">require</span>(<span class="string">'simple-git/promise'</span>)(process.cwd())</span><br><span class="line">  <span class="comment">// #endregion</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// #region 获取本地package.json文件配置</span></span><br><span class="line">  <span class="keyword">const</span> packageJsonPath = path.resolve(process.cwd(), <span class="string">'package.json'</span>) <span class="comment">// 获取package文件路径</span></span><br><span class="line">  <span class="keyword">const</span> packageJson = <span class="built_in">require</span>(packageJsonPath) <span class="comment">// 获取当前的package文件配置</span></span><br><span class="line">  <span class="keyword">const</span> envConfig = &#123; <span class="attr">master</span>: <span class="string">'version'</span>, <span class="attr">pre</span>: <span class="string">'version_pre'</span>, <span class="attr">dev</span>: <span class="string">'version_dev'</span> &#125; <span class="comment">// 配置不同环境的version属性名</span></span><br><span class="line">  <span class="comment">// #endregion</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// #region 命令行交互</span></span><br><span class="line">  log(<span class="string">''</span>)</span><br><span class="line">  inquirer</span><br><span class="line">    .prompt([</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">'baseline'</span>,</span><br><span class="line">        message: <span class="string">`选择Tag基线:`</span>,</span><br><span class="line">        type: <span class="string">'list'</span>,</span><br><span class="line">        <span class="keyword">default</span>: <span class="number">1</span>,</span><br><span class="line">        choices: [</span><br><span class="line">          &#123; <span class="attr">name</span>: <span class="string">'根据package.json文件的version生成并更新文件'</span>, <span class="attr">value</span>: <span class="string">'package'</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">name</span>: <span class="string">'根据最新的Tag生成'</span>, <span class="attr">value</span>: <span class="string">'tag'</span> &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">'env'</span>,</span><br><span class="line">        message: <span class="string">`选择环境:`</span>,</span><br><span class="line">        type: <span class="string">'list'</span>,</span><br><span class="line">        <span class="keyword">default</span>: <span class="number">2</span>,</span><br><span class="line">        choices: [<span class="string">'all'</span>, <span class="string">'master'</span>, <span class="string">'pre'</span>, <span class="string">'dev'</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">    ])</span><br><span class="line">    .then(<span class="keyword">async</span> (&#123; baseline, env &#125;) =&gt; &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (baseline === <span class="string">'package'</span>) &#123;</span><br><span class="line">          <span class="keyword">await</span> addTagByPackage(env)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">await</span> addTagByTags(env)</span><br><span class="line">        &#125;</span><br><span class="line">        git.push()</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="comment">// #endregion</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// #region 根据Tag列表添加Tag</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 根据Tag列表添加Tag</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * @param &#123;*&#125; env</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">addTagByTags</span>(<span class="params">env</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// const tags = fs.readdirSync('./.git/refs/tags') // 同步版本的readdir</span></span><br><span class="line">    <span class="keyword">await</span> commitAllFiles()</span><br><span class="line">    <span class="keyword">await</span> git.pull(&#123; <span class="string">'--rebase'</span>: <span class="string">'true'</span> &#125;)</span><br><span class="line">    <span class="keyword">const</span> tags = <span class="keyword">await</span> git.tags()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> addTagSingle = <span class="keyword">async</span> envName =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">`^<span class="subst">$&#123;envName&#125;</span>`</span>)</span><br><span class="line">      <span class="keyword">let</span> envTags = tags.all.filter(<span class="function"><span class="params">tag</span> =&gt;</span> reg.test(tag))</span><br><span class="line">      <span class="keyword">let</span> lastTag = envTags[envTags.length - <span class="number">1</span>] || <span class="string">`<span class="subst">$&#123;envName&#125;</span>-v0.0.0-19000101`</span></span><br><span class="line">      log(chalk<span class="string">`&#123;gray 🏷  仓库最新的Tag: <span class="subst">$&#123;lastTag&#125;</span>&#125;`</span>)</span><br><span class="line">      <span class="keyword">let</span> lastVsersion = lastTag.split(<span class="string">'-'</span>)[<span class="number">1</span>].substring(<span class="number">1</span>)</span><br><span class="line">      <span class="keyword">let</span> version = <span class="keyword">await</span> generateNewTag(envName, lastVsersion)</span><br><span class="line">      log(chalk<span class="string">`&#123;gray 🏷  生成最新的Tag: <span class="subst">$&#123;version.tag&#125;</span>&#125;`</span>)</span><br><span class="line">      <span class="keyword">await</span> createTag([version])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (env === <span class="string">'all'</span>) &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="built_in">Promise</span>.all(<span class="built_in">Object</span>.keys(envConfig).map(<span class="function"><span class="params">key</span> =&gt;</span> addTagSingle(key)))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">await</span> addTagSingle(env)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// #endregion</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// #region 根据package.json添加tag</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 根据package.json添加tag</span></span><br><span class="line"><span class="comment">   * @param &#123;*&#125; env master|pre|dev|all</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">addTagByPackage</span>(<span class="params">env</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// #region 生成对应环境的最新version和tag</span></span><br><span class="line">      <span class="keyword">let</span> versionsPromise</span><br><span class="line">      <span class="keyword">if</span> (env === <span class="string">'all'</span>) &#123;</span><br><span class="line">        versionsPromise = <span class="built_in">Object</span>.keys(envConfig).map(<span class="function"><span class="params">key</span> =&gt;</span></span><br><span class="line">          generateNewTag(key, packageJson[envConfig[key]] || packageJson.version),</span><br><span class="line">        )</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        versionsPromise = [generateNewTag(env, packageJson[envConfig[env]] || packageJson.version)]</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> versions = <span class="keyword">await</span> <span class="built_in">Promise</span>.all(versionsPromise)</span><br><span class="line">      <span class="comment">// #endregion</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// #region 更新本地package.json文件，并将更新后的package信息写入本地文件中</span></span><br><span class="line">      versions.forEach(<span class="function">(<span class="params">&#123; version, env &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        packageJson[envConfig[env]] = version</span><br><span class="line">        log(chalk<span class="string">`&#123;green 📦  package.json 文件添加属性 =&gt; <span class="subst">$&#123;envConfig[env]&#125;</span>: <span class="subst">$&#123;version&#125;</span>&#125;`</span>)</span><br><span class="line">      &#125;) <span class="comment">// 更新package对应环境的version</span></span><br><span class="line">      fs.writeFileSync(packageJsonPath, <span class="built_in">JSON</span>.stringify(packageJson, <span class="literal">null</span>, <span class="string">'  '</span>))</span><br><span class="line">      <span class="comment">// #endregion</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// #region commit package.json 文件的修改</span></span><br><span class="line">      <span class="keyword">const</span> version = versions[<span class="number">0</span>].version</span><br><span class="line">      <span class="keyword">const</span> date = formatTime(<span class="keyword">new</span> <span class="built_in">Date</span>())</span><br><span class="line">      <span class="keyword">const</span> newTagsStr = versions.map(<span class="function"><span class="params">version</span> =&gt;</span> version.tag).join(<span class="string">' / '</span>)</span><br><span class="line">      log(chalk<span class="string">`&#123;gray ➕  暂存package.json文件变更&#125;`</span>)</span><br><span class="line">      <span class="keyword">await</span> git.add(<span class="string">'./package.json'</span>)</span><br><span class="line">      log(chalk<span class="string">`&#123;gray ✔️  提交package.json文件变更&#125;`</span>)</span><br><span class="line">      <span class="keyword">await</span> git.commit(<span class="string">`Relase version <span class="subst">$&#123;version&#125;</span> in <span class="subst">$&#123;date&#125;</span> by <span class="subst">$&#123;newTagsStr&#125;</span>`</span>)</span><br><span class="line">      log(chalk<span class="string">`&#123;green 👌  package.json文件操作完成&#125;`</span>)</span><br><span class="line">      <span class="comment">// #endregion</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">await</span> commitAllFiles()</span><br><span class="line">      <span class="keyword">await</span> createTag(versions)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      log(chalk<span class="string">`&#123;red <span class="subst">$&#123;error.message&#125;</span>&#125;`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// #endregion</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// #region 创建Tag</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 创建Tag</span></span><br><span class="line"><span class="comment">   * @param &#123;*&#125; versions</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">createTag</span>(<span class="params">versions</span>) </span>&#123;</span><br><span class="line">    log(chalk<span class="string">`&#123;green 🔀  更新本地仓库&#125;`</span>)</span><br><span class="line">    <span class="keyword">await</span> git.pull(&#123; <span class="string">'--rebase'</span>: <span class="string">'true'</span> &#125;)</span><br><span class="line"></span><br><span class="line">    versions.forEach(<span class="keyword">async</span> version =&gt; &#123;</span><br><span class="line">      log(chalk<span class="string">`&#123;green 🏷  创建标签 <span class="subst">$&#123;version.tag&#125;</span>&#125;`</span>)</span><br><span class="line">      <span class="keyword">await</span> git.addTag(version.tag)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// #endregion</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// #region commit 所有未提交的文件</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * commit 所有未提交的文件</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">commitAllFiles</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> statusSummary = <span class="keyword">await</span> git.status()</span><br><span class="line">    <span class="keyword">if</span> (statusSummary.files.length) &#123;</span><br><span class="line">      log(chalk<span class="string">`&#123;red 🚨  有未提交的文件变更&#125;`</span>)</span><br><span class="line">      log(chalk<span class="string">`&#123;gray ➕  暂存未提交的文件变更&#125;`</span>)</span><br><span class="line">      <span class="keyword">await</span> git.add(<span class="string">'./*'</span>)</span><br><span class="line">      log(chalk<span class="string">`&#123;gray ✔️  提交未提交的文件变更&#125;`</span>)</span><br><span class="line">      <span class="keyword">await</span> git.commit(<span class="string">'🚀'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// #endregion</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// #region 生成新Tag</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生成新Tag</span></span><br><span class="line"><span class="comment">   * @param &#123;*&#125; env master|pre|dev|all</span></span><br><span class="line"><span class="comment">   * @param &#123;*&#125; version</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">generateNewTag</span>(<span class="params">env = <span class="string">'pre'</span>, version = <span class="string">'0.0.0'</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> semver = <span class="built_in">require</span>(<span class="string">'semver'</span>)</span><br><span class="line">      <span class="comment">// const major = semver.major(version)</span></span><br><span class="line">      <span class="keyword">const</span> minor = semver.minor(version)</span><br><span class="line">      <span class="keyword">const</span> patch = semver.patch(version)</span><br><span class="line">      <span class="keyword">const</span> date = formatTime(<span class="keyword">new</span> <span class="built_in">Date</span>(), <span class="string">'&#123;y&#125;&#123;m&#125;&#123;d&#125;'</span>)</span><br><span class="line">      <span class="keyword">const</span> config = &#123; env, version, <span class="attr">tag</span>: <span class="string">`<span class="subst">$&#123;env&#125;</span>-v<span class="subst">$&#123;version&#125;</span>-<span class="subst">$&#123;date&#125;</span>`</span> &#125;</span><br><span class="line">      <span class="keyword">if</span> (patch &gt;= <span class="number">99</span>) &#123;</span><br><span class="line">        config.version = semver.inc(version, <span class="string">'minor'</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (minor &gt;= <span class="number">99</span>) &#123;</span><br><span class="line">        config.version = semver.inc(version, <span class="string">'major'</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        config.version = semver.inc(version, <span class="string">'patch'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      config.tag = <span class="string">`<span class="subst">$&#123;env&#125;</span>-v<span class="subst">$&#123;config.version&#125;</span>-<span class="subst">$&#123;date&#125;</span>`</span></span><br><span class="line">      resolve(config)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// const Bump = require('bump-regex') // 为git的version添加自动增长版本号组件</span></span><br><span class="line">      <span class="comment">// Bump(`version:$&#123;version&#125;`, (err, out) =&gt; &#123;</span></span><br><span class="line">      <span class="comment">//   if (out) &#123;</span></span><br><span class="line">      <span class="comment">//     const date = formatTime(new Date(), '&#123;y&#125;&#123;m&#125;&#123;d&#125;')</span></span><br><span class="line">      <span class="comment">//     resolve(&#123;</span></span><br><span class="line">      <span class="comment">//       env,</span></span><br><span class="line">      <span class="comment">//       version: out.new,</span></span><br><span class="line">      <span class="comment">//       tag: `$&#123;env&#125;-v$&#123;out.new&#125;-$&#123;date&#125;`</span></span><br><span class="line">      <span class="comment">//     &#125;)</span></span><br><span class="line">      <span class="comment">//   &#125; else &#123;</span></span><br><span class="line">      <span class="comment">//     reject(err)</span></span><br><span class="line">      <span class="comment">//   &#125;</span></span><br><span class="line">      <span class="comment">// &#125;)</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// #endregion</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// #region 格式化时间</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 格式化时间</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * @param  &#123;time&#125; 时间</span></span><br><span class="line"><span class="comment">   * @param  &#123;cFormat&#125; 格式</span></span><br><span class="line"><span class="comment">   * @return &#123;String&#125; 字符串</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * @example formatTime('2018-1-29', '&#123;y&#125;/&#123;m&#125;/&#123;d&#125; &#123;h&#125;:&#123;i&#125;:&#123;s&#125;') // -&gt; 2018/01/29 00:00:00</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">formatTime</span>(<span class="params">time, cFormat</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">arguments</span>.length === <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">`<span class="subst">$&#123;time&#125;</span>`</span>.length === <span class="number">10</span>) &#123;</span><br><span class="line">      time = +time * <span class="number">1000</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> format = cFormat || <span class="string">'&#123;y&#125;-&#123;m&#125;-&#123;d&#125; &#123;h&#125;:&#123;i&#125;:&#123;s&#125;'</span></span><br><span class="line">    <span class="keyword">let</span> date</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> time === <span class="string">'object'</span>) &#123;</span><br><span class="line">      date = time</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      date = <span class="keyword">new</span> <span class="built_in">Date</span>(time)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> formatObj = &#123;</span><br><span class="line">      y: date.getFullYear(),</span><br><span class="line">      m: date.getMonth() + <span class="number">1</span>,</span><br><span class="line">      d: date.getDate(),</span><br><span class="line">      h: date.getHours(),</span><br><span class="line">      i: date.getMinutes(),</span><br><span class="line">      s: date.getSeconds(),</span><br><span class="line">      a: date.getDay(),</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> time_str = format.replace(<span class="regexp">/&#123;(y|m|d|h|i|s|a)+&#125;/g</span>, (result, key) =&gt; &#123;</span><br><span class="line">      <span class="keyword">let</span> value = formatObj[key]</span><br><span class="line">      <span class="keyword">if</span> (key === <span class="string">'a'</span>) <span class="keyword">return</span> [<span class="string">'一'</span>, <span class="string">'二'</span>, <span class="string">'三'</span>, <span class="string">'四'</span>, <span class="string">'五'</span>, <span class="string">'六'</span>, <span class="string">'日'</span>][value - <span class="number">1</span>]</span><br><span class="line">      <span class="keyword">if</span> (result.length &gt; <span class="number">0</span> &amp;&amp; value &lt; <span class="number">10</span>) &#123;</span><br><span class="line">        value = <span class="string">`0<span class="subst">$&#123;value&#125;</span>`</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> value || <span class="number">0</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> time_str</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// #endregion</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// #region 获取git版本</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 获取git版本</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getGitVersion</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> gitHEAD = fs.readFileSync(<span class="string">'.git/HEAD'</span>, <span class="string">'utf-8'</span>).trim() <span class="comment">// ref: refs/heads/develop</span></span><br><span class="line">    <span class="keyword">const</span> ref = gitHEAD.split(<span class="string">': '</span>)[<span class="number">1</span>] <span class="comment">// refs/heads/develop</span></span><br><span class="line">    <span class="keyword">const</span> develop = gitHEAD.split(<span class="string">'/'</span>)[<span class="number">2</span>] <span class="comment">// 环境：develop</span></span><br><span class="line">    <span class="keyword">const</span> gitVersion = fs.readFileSync(<span class="string">`.git/<span class="subst">$&#123;ref&#125;</span>`</span>, <span class="string">'utf-8'</span>).trim() <span class="comment">// git版本号，例如：6ceb0ab5059d01fd444cf4e78467cc2dd1184a66</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">`"<span class="subst">$&#123;develop&#125;</span>: <span class="subst">$&#123;gitVersion&#125;</span>"`</span> <span class="comment">// 例如dev环境: "develop: 6ceb0ab5059d01fd444cf4e78467cc2dd1184a66"</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// #endregion</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// #region shelljs直接执行Git脚本更新tag</span></span><br><span class="line">  <span class="comment">// const commitMessage = `"chore(package.json): bump version to $&#123;version&#125;"`</span></span><br><span class="line">  <span class="comment">// const relaseMessage = `Relase version $&#123;version&#125; in $&#123;formatTime(new Date())&#125;`</span></span><br><span class="line">  <span class="comment">// const cmd = `git add package.json</span></span><br><span class="line">  <span class="comment">// &amp;&amp; git commit -m $&#123;commitMessage&#125;</span></span><br><span class="line">  <span class="comment">// &amp;&amp; git tag -a $&#123;tag&#125; -m $&#123;relaseMessage&#125;</span></span><br><span class="line">  <span class="comment">// &amp;&amp; git push origin master</span></span><br><span class="line">  <span class="comment">// &amp;&amp; git push origin --tags`</span></span><br><span class="line">  <span class="comment">// console.log('TCL: cmd', cmd)</span></span><br><span class="line">  <span class="comment">// exec(cmd)</span></span><br><span class="line">  <span class="comment">// #endregion</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>node</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>前端</tag>
        <tag>开发</tag>
        <tag>node</tag>
        <tag>git</tag>
        <tag>cli</tag>
      </tags>
  </entry>
  <entry>
    <title>@vue/cli 3 搭建组件库并发布npm</title>
    <url>/posts/43109cf3.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>市面上目前已有各种各样的 UI 组件库，比如 Element 和 iView，他们的强大毋庸置疑。但是我们面临的情况是需求越来越复杂，当它们不能再满足我们需求的时候，这个时候就有必要开发一套属于自己团队的组件库了。</p>
<p>所以本文的目的就是让读者能通过此文，小能做一个简单的插件供人使用，大能架构和维护一个组件库不在话下。</p>
<a id="more"></a>
<h1 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h1><p>如何通过新版脚手架创建项目，这里就不提了，自行看官方文档。</p>
<ul>
<li>Vue-cli3: 新版脚手架的库模式，可以让我们很轻松的创建打包一个库</li>
<li>npm：组件库将存放在 npm</li>
<li>webpack：修改配置需要一点 webapck 的知识。</li>
</ul>
<h1 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h1><p>想要搭建一个组件库，我们必须先要有一个大概的思路。</p>
<ol>
<li>规划目录结构</li>
<li>配置项目以支持目录结构</li>
<li>编写组件</li>
<li>编写示例</li>
<li>配置使用库模式打包编译</li>
<li>发布到 npm</li>
</ol>
<h1 id="规划目录结构"><a href="#规划目录结构" class="headerlink" title="规划目录结构"></a>规划目录结构</h1><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>在指定目录中使用命令创建一个默认的项目，或者根据自己需要自己选择。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vue create .</span><br></pre></td></tr></table></figure>
<h2 id="调整目录"><a href="#调整目录" class="headerlink" title="调整目录"></a>调整目录</h2><p>我们需要一个目录存放组件，一个目录存放示例，按照以下方式对目录进行改造。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">...</span><br><span class="line">|-- examples      // 原 src 目录，改成 examples 用作示例展示</span><br><span class="line">|-- packages      // 新增 packages 用于编写存放组件</span><br><span class="line">...</span><br><span class="line">.</span><br></pre></td></tr></table></figure>
<p><img src="https://image.xuebin.me/006tKfTcly1g0yqox7ipkj30bm0dg3yz.jpg" alt></p>
<h1 id="配置项目以支持新的目录结构"><a href="#配置项目以支持新的目录结构" class="headerlink" title="配置项目以支持新的目录结构"></a>配置项目以支持新的目录结构</h1><p>我们通过上一步的目录改造后，会遇到两个问题。</p>
<ol>
<li><code>src</code>目录更名为<code>examples</code>，导致项目无法运行</li>
<li>新增<code>packages</code>目录，该目录未加入<code>webpack</code>编译</li>
</ol>
<p><strong>注：cli3 提供一个可选的 vue.config.js 配置文件。如果这个文件存在则他会被自动加载，所有的对项目和 webpack 的配置，都在这个文件中。</strong></p>
<h2 id="重新配置入口，修改配置中的-pages-选项"><a href="#重新配置入口，修改配置中的-pages-选项" class="headerlink" title="重新配置入口，修改配置中的 pages 选项"></a>重新配置入口，修改配置中的 <code>pages</code> 选项</h2><p>新版 Vue CLI 支持使用 <code>vue.config.js</code> 中的 <code>pages</code> 选项构建一个多页面的应用。</p>
<p>这里使用 <code>pages</code> 修改入口到 <code>examples</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 修改 src 目录 为 examples 目录</span></span><br><span class="line">  pages: &#123;</span><br><span class="line">    index: &#123;</span><br><span class="line">      entry: <span class="string">'examples/main.js'</span>,</span><br><span class="line">      template: <span class="string">'public/index.html'</span>,</span><br><span class="line">      filename: <span class="string">'index.html'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="支持对-packages-目录的处理，修改配置中的-chainWebpack-选项"><a href="#支持对-packages-目录的处理，修改配置中的-chainWebpack-选项" class="headerlink" title="支持对 packages 目录的处理，修改配置中的 chainWebpack 选项"></a>支持对 <code>packages</code> 目录的处理，修改配置中的 <code>chainWebpack</code> 选项</h2><p><code>packages</code> 是我们新增的一个目录，默认是不被 webpack 处理的，所以需要添加配置对该目录的支持。</p>
<p><code>chainWebpack</code> 是一个函数，会接收一个基于 <code>webpack-chain</code> 的 <code>ChainableConfig</code> 实例。允许对内部的 <code>webpack</code> 配置进行更细粒度的修改。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 修改 src 为 examples</span></span><br><span class="line">  pages: &#123;</span><br><span class="line">    index: &#123;</span><br><span class="line">      entry: <span class="string">'examples/main.js'</span>,</span><br><span class="line">      template: <span class="string">'public/index.html'</span>,</span><br><span class="line">      filename: <span class="string">'index.html'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 扩展 webpack 配置，使 packages 加入编译</span></span><br><span class="line">  chainWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    config.module</span><br><span class="line">      .rule(<span class="string">'js'</span>)</span><br><span class="line">      .include.add(<span class="string">'/packages'</span>)</span><br><span class="line">      .end()</span><br><span class="line">      .use(<span class="string">'babel'</span>)</span><br><span class="line">      .loader(<span class="string">'babel-loader'</span>)</span><br><span class="line">      .tap(<span class="function"><span class="params">options</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 修改它的选项...</span></span><br><span class="line">        <span class="keyword">return</span> options</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><span class="exturl" data-url="aHR0cHM6Ly9jbGkudnVlanMub3JnL3poL2d1aWRlL3dlYnBhY2suaHRtbCMlRTklOTMlQkUlRTUlQkMlOEYlRTYlOTMlOEQlRTQlQkQlOUMtJUU5JUFCJTk4JUU3JUJBJUE3" title="https://cli.vuejs.org/zh/guide/webpack.html#%E9%93%BE%E5%BC%8F%E6%93%8D%E4%BD%9C-%E9%AB%98%E7%BA%A7">链式操作<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL25ldXRyaW5vanMvd2VicGFjay1jaGFpbg==" title="https://github.com/neutrinojs/webpack-chain">webpack-chain<i class="fa fa-external-link"></i></span></p>
<h1 id="编写组件"><a href="#编写组件" class="headerlink" title="编写组件"></a>编写组件</h1><h2 id="创建一个新组件"><a href="#创建一个新组件" class="headerlink" title="创建一个新组件"></a>创建一个新组件</h2><ol>
<li>在 <code>packages</code> 目录下，所有的单个组件都以文件夹的形式存储，所有这里创建一个目录 <code>color-picker/</code></li>
<li>在 <code>color-picker/</code> 目录下创建 <code>src/</code> 目录存储组件源码</li>
<li>在 <code>/color-picker</code> 目录下创建 <code>index.js</code> 文件对外提供对组件的引用。</li>
</ol>
<p><img src="https://image.xuebin.me/006tKfTcly1g0ytnidlzgj30fc0k2754.jpg" alt></p>
<p>修改 <code>/packages/color-picker/index.js</code>文件，对外提供引用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># /packages/color-picker/index.js</span><br><span class="line">// 导入组件，组件必须声明 name</span><br><span class="line">import colorPicker from &apos;./src/color-picker.vue&apos;</span><br><span class="line"></span><br><span class="line">// 为组件提供 install 安装方法，供按需引入</span><br><span class="line">colorPicker.install = function (Vue) &#123;</span><br><span class="line">  Vue.component(colorPicker.name, colorPicker)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 默认导出组件</span><br><span class="line">export default colorPicker</span><br></pre></td></tr></table></figure>
<h2 id="整合所有的组件，对外导出，即一个完整的组件库"><a href="#整合所有的组件，对外导出，即一个完整的组件库" class="headerlink" title="整合所有的组件，对外导出，即一个完整的组件库"></a>整合所有的组件，对外导出，即一个完整的组件库</h2><p>修改 <code>/packages/index.js</code> 文件，对整个组件库进行导出。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入颜色选择器组件</span></span><br><span class="line"><span class="keyword">import</span> colorPicker <span class="keyword">from</span> <span class="string">'./color-picker'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 存储组件列表</span></span><br><span class="line"><span class="keyword">const</span> components = [colorPicker]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义 install 方法，接收 Vue 作为参数。如果使用 use 注册插件，则所有的组件都将被注册</span></span><br><span class="line"><span class="keyword">const</span> install = <span class="function"><span class="keyword">function</span>(<span class="params">Vue</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 判断是否安装</span></span><br><span class="line">  <span class="keyword">if</span> (install.installed) <span class="keyword">return</span></span><br><span class="line">  <span class="comment">// 遍历注册全局组件</span></span><br><span class="line">  components.map(<span class="function"><span class="params">component</span> =&gt;</span> Vue.component(component.name, component))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否是直接引入文件</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">'undefined'</span> &amp;&amp; <span class="built_in">window</span>.Vue) &#123;</span><br><span class="line">  install(<span class="built_in">window</span>.Vue)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// 导出的对象必须具有 install，才能被 Vue.use() 方法安装</span></span><br><span class="line">  install,</span><br><span class="line">  <span class="comment">// 以下是具体的组件列表</span></span><br><span class="line">  colorPicker,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="编写示例"><a href="#编写示例" class="headerlink" title="编写示例"></a>编写示例</h1><h2 id="在示例中导入组件库"><a href="#在示例中导入组件库" class="headerlink" title="在示例中导入组件库"></a>在示例中导入组件库</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入组件库</span></span><br><span class="line"><span class="keyword">import</span> ColorPicker <span class="keyword">from</span> <span class="string">'./../packages/index'</span></span><br><span class="line"><span class="comment">// 注册组件库</span></span><br><span class="line">Vue.use(ColorPicker)</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure>
<h2 id="在示例中使用组件库中的组件"><a href="#在示例中使用组件库中的组件" class="headerlink" title="在示例中使用组件库中的组件"></a>在示例中使用组件库中的组件</h2><p>在上一步用使用 <code>Vue.use()</code> 全局注册后，即可在任意页面直接使用了，而不需另外引入。当然也可以按需引入。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;colorPicker v-model=&quot;color&quot; v-on:change=&quot;headleChangeColor&quot;&gt;&lt;/colorPicker&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      color: &apos;#ff0000&apos;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    headleChangeColor() &#123;</span><br><span class="line">      console.log(&apos;颜色改变&apos;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h1 id="发布到-npm，方便直接在项目中引用"><a href="#发布到-npm，方便直接在项目中引用" class="headerlink" title="发布到 npm，方便直接在项目中引用"></a>发布到 npm，方便直接在项目中引用</h1><p>到此为止我们一个完整的组件库已经开发完成了，接下来就是发布到 <code>npm</code> 以供后期使用。</p>
<h2 id="package-json-中新增一条编译为库的命令"><a href="#package-json-中新增一条编译为库的命令" class="headerlink" title="package.json 中新增一条编译为库的命令"></a><code>package.json</code> 中新增一条编译为库的命令</h2><p>在库模式中，Vue 是外置的，这意味着即使在代码中引入了 Vue，打包后的文件也是不包含 Vue 的。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9jbGkudnVlanMub3JnL3poL2d1aWRlL2J1aWxkLXRhcmdldHMuaHRtbCMlRTUlQkElOTM=" title="https://cli.vuejs.org/zh/guide/build-targets.html#%E5%BA%93">Vue Cli3 构建目标：库<i class="fa fa-external-link"></i></span></p>
<p><strong>以下我们在 scripts 中新增一条命令 npm run lib</strong></p>
<ul>
<li><code>--target</code>: 构建目标，默认为应用模式。这里修改为 <code>lib</code> 启用库模式。</li>
<li><code>--dest</code> : 输出目录，默认 <code>dist</code>。这里我们改成 <code>lib</code></li>
<li><code>[entry]</code>: 最后一个参数为入口文件，默认为 <code>src/App.vue</code>。这里我们指定编译 <code>packages/</code> 组件库目录。</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">	// ...</span><br><span class="line">	"lib": "vue-cli-service build --target lib --name vcolorpicker --dest lib packages/index.js"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>执行编译库命令</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm run lib</span><br></pre></td></tr></table></figure>
<p><img src="https://image.xuebin.me/006tKfTcly1g0ytwsz7byj30tg086wja.jpg" alt></p>
<h2 id="配置-package-json-文件中发布到-npm-的字段"><a href="#配置-package-json-文件中发布到-npm-的字段" class="headerlink" title="配置 package.json 文件中发布到 npm 的字段"></a>配置 <code>package.json</code> 文件中发布到 npm 的字段</h2><ul>
<li><code>name</code>: 包名，该名字是唯一的。可在 npm 官网搜索名字，如果存在则需换个名字。</li>
<li><code>version</code>: 版本号，每次发布至 npm 需要修改版本号，不能和历史版本号相同。</li>
<li><code>description</code>: 描述。</li>
<li><code>main</code>: 入口文件，该字段需指向我们最终编译后的包文件。</li>
<li><code>keyword</code>：关键字，以空格分离希望用户最终搜索的词。</li>
<li><code>author</code>：作者</li>
<li><code>private</code>：是否私有，需要修改为 false 才能发布到 npm</li>
<li><code>license</code>： 开源协议</li>
</ul>
<p>以下为参考设置</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"vcolorpicker"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"0.1.5"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"基于 Vue 的颜色选择器"</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"lib/vcolorpicker.umd.min.js"</span>,</span><br><span class="line">  <span class="attr">"keyword"</span>: <span class="string">"vcolorpicker colorpicker color-picker"</span>,</span><br><span class="line">  <span class="attr">"private"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="添加-npmignore-文件，设置忽略发布文件"><a href="#添加-npmignore-文件，设置忽略发布文件" class="headerlink" title="添加 .npmignore 文件，设置忽略发布文件"></a>添加 <code>.npmignore</code> 文件，设置忽略发布文件</h2><p>我们发布到 npm 中，只有编译后的 <code>lib</code> 目录、package.json、README.md 才是需要被发布的。所以我们需要设置忽略目录和文件。</p>
<p>和 <code>.gitignore</code> 的语法一样，具体需要提交什么文件，看各自的实际情况。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 忽略目录</span><br><span class="line">examples/</span><br><span class="line">packages/</span><br><span class="line">public/</span><br><span class="line"></span><br><span class="line"># 忽略指定文件</span><br><span class="line">vue.config.js</span><br><span class="line">babel.config.js</span><br><span class="line">*.map</span><br></pre></td></tr></table></figure>
<h2 id="登录到登录到-npm"><a href="#登录到登录到-npm" class="headerlink" title="登录到登录到 npm"></a>登录到登录到 npm</h2><p>首先需要到 npm 上注册一个账号，注册过程略。</p>
<p>如果配置了淘宝镜像，先设置回 npm 镜像：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm config <span class="built_in">set</span> registry http://registry.npmjs.org</span><br></pre></td></tr></table></figure>
<p>然后在终端执行登录命令，输入用户名、密码、邮箱即可登录。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm login</span><br></pre></td></tr></table></figure>
<p><img src="https://image.xuebin.me/006tKfTcly1g0yu1xprimj30k403w76s.jpg" alt></p>
<h2 id="发布到-npm"><a href="#发布到-npm" class="headerlink" title="发布到 npm"></a>发布到 npm</h2><p>执行发布命令，发布组件到 npm</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm publish</span><br></pre></td></tr></table></figure>
<p><img src="https://image.xuebin.me/006tKfTcly1g0yu3kehc6j30rg0igtmp.jpg" alt></p>
<h2 id="发布成功"><a href="#发布成功" class="headerlink" title="发布成功"></a>发布成功</h2><p>发布成功后稍等几分钟，即可在 npm 官网搜索到。以下是刚提交的 <code>vcolorpicker</code></p>
<p><img src="https://image.xuebin.me/006tKfTcly1g0yu7h3oyfj315i0u0414.jpg" alt></p>
<h2 id="使用新发布的组件库"><a href="#使用新发布的组件库" class="headerlink" title="使用新发布的组件库"></a>使用新发布的组件库</h2><p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install vcolorpicker -S</span><br></pre></td></tr></table></figure>
<p>使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 在 main.js 引入并注册 import vcolorpicker from &apos;vcolorpicker&apos; Vue.use(vcolorpicker) //</span><br><span class="line">在组件中使用</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;colorPicker v-model=&quot;color&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      color: &apos;#ff0000&apos;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YmJhYjlkZTUxODgyNTVjOGMwY2IwZTM=" title="https://juejin.im/post/5bbab9de5188255c8c0cb0e3">详解：Vue cli3 库模式搭建组件库并发布到 npm<i class="fa fa-external-link"></i></span></p>
</blockquote>
<h1 id="切换-npm-版本"><a href="#切换-npm-版本" class="headerlink" title="切换 npm 版本"></a>切换 npm 版本</h1><p>如果不小心把<code>1.0.0-alpha.1</code>直接<code>npm publish</code>了，我们该怎么办？</p>
<h2 id="查看当前的-tag-和对应的-version。"><a href="#查看当前的-tag-和对应的-version。" class="headerlink" title="查看当前的 tag 和对应的 version。"></a>查看当前的 tag 和对应的 version。</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm dist-tag ls</span><br></pre></td></tr></table></figure>
<p>通过这个命令，我们可以得到这样的结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">latest: 1.0.0</span><br><span class="line">next: 1.0.0-alpha.0</span><br></pre></td></tr></table></figure>
<p>如果我们不小心发布了一个<code>1.0.0-alpha.1</code>到<code>latest</code>，那么我们会得到：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">latest: 1.0.0-alpha.1</span><br><span class="line">next: 1.0.0-alpha.0</span><br></pre></td></tr></table></figure>
<p>这个时候我们只要切一下 tag 就可以挽回局面了。</p>
<h2 id="查看-my-package-发布过的所有版本号"><a href="#查看-my-package-发布过的所有版本号" class="headerlink" title="查看 my-package 发布过的所有版本号"></a>查看 my-package 发布过的所有版本号</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm view my-package versions</span><br></pre></td></tr></table></figure>
<p>通过这个命令可以得到一个数组：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">	<span class="string">'0.1.0'</span>,</span><br><span class="line">  <span class="string">'1.0.0'</span>,</span><br><span class="line">  <span class="string">'1.0.0-alpha.0'</span>,</span><br><span class="line">  <span class="string">'1.0.0-alpha.1'</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h2 id="给-my-package-设置-tag，对应到版本-version"><a href="#给-my-package-设置-tag，对应到版本-version" class="headerlink" title="给 my-package 设置 tag，对应到版本 version"></a>给 my-package 设置 tag，对应到版本 version</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm dist-tag add my-package@version tag</span><br></pre></td></tr></table></figure>
<p>如：</p>
<ol>
<li><p>把原来的 1.0.0 设置成最新的正式版</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm dist-tag add my-package@1.0.0 latest</span><br></pre></td></tr></table></figure>
</li>
<li><p>把 1.0.0-alpha.1 更新到最新的测试版</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm dist-tag add my-package@1.0.0-alpha.1 next</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>老板再也不用担心我搞出线上故障了。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><blockquote class="blockquote-center"><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxNjg5MDQwNA==" title="https://segmentfault.com/a/1190000016890404">基于@vue/cli 3 搭建属于自己的组件库<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81ZDY3MjM4ZDZmYjlhMDZiMTgyOWNkY2M=" title="https://juejin.im/post/5d67238d6fb9a06b1829cdcc">Vue CLI3搭建组件库并用npm发布实战操作<i class="fa fa-external-link"></i></span></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>前端</tag>
        <tag>开发</tag>
        <tag>npm</tag>
        <tag>vue</tag>
        <tag>cli</tag>
        <tag>组件库</tag>
      </tags>
  </entry>
  <entry>
    <title>flutter学习</title>
    <url>/posts/595a1d75.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><ul>
<li><p>Flutter: <span class="exturl" data-url="aHR0cHM6Ly9mbHV0dGVyLmlvLw==" title="https://flutter.io/">英文<i class="fa fa-external-link"></i></span> / <span class="exturl" data-url="aHR0cHM6Ly9mbHV0dGVyY2hpbmEuY2x1Yi8=" title="https://flutterchina.club/">中文<i class="fa fa-external-link"></i></span></p>
</li>
<li><p>Dart: <span class="exturl" data-url="aHR0cHM6Ly93d3cuZGFydGxhbmcub3JnLw==" title="https://www.dartlang.org/">英文<i class="fa fa-external-link"></i></span> / <span class="exturl" data-url="aHR0cDovL3d3dy5kYXJ0ZG9jLmNu" title="http://www.dartdoc.cn">中文<i class="fa fa-external-link"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmZsdXR0ZXIua2ltL3dpZGdldHMvd2lkZ2V0cy1saWJyYXJ5Lmh0bWw=" title="https://docs.flutter.kim/widgets/widgets-library.html">flutter-widgets 的官方库地址<i class="fa fa-external-link"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cDovL2RvYy5mbHV0dGVyLWRldi5jbi93aWRnZXRzLw==" title="http://doc.flutter-dev.cn/widgets/">flutter-widgets 的官方目录集<i class="fa fa-external-link"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9ib29rLmZsdXR0ZXJjaGluYS5jbHVi" title="https://book.flutterchina.club">Flutter 实战<i class="fa fa-external-link"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YzQxYWY0NjZmYjlhMDRhMGUyZDdkNTE=" title="https://juejin.im/post/5c41af466fb9a04a0e2d7d51">用前端 最舒服的躺姿 “搞定” Flutter<i class="fa fa-external-link"></i></span> / <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvZmx1dHRlci1nbw==" title="https://github.com/alibaba/flutter-go">flutter-go<i class="fa fa-external-link"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC81NTMyOTYzMQ==" title="https://zhuanlan.zhihu.com/p/55329631">为前端工程师准备的 Flutter 入门指南<i class="fa fa-external-link"></i></span></p>
</li>
<li><p>…</p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vdGFnL0ZsdXR0ZXI=" title="https://juejin.im/tag/Flutter">掘金 - Flutter<i class="fa fa-external-link"></i></span></p>
</li>
</ul>
<a id="more"></a>
<h1 id="Widgets"><a href="#Widgets" class="headerlink" title="Widgets"></a>Widgets</h1><h2 id="StatelessWidget"><a href="#StatelessWidget" class="headerlink" title="StatelessWidget"></a>StatelessWidget</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MaterialApp(...);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="StatefulWidget"><a href="#StatefulWidget" class="headerlink" title="StatefulWidget"></a>StatefulWidget</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomePage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  _MyHomePageState createState() =&gt; _MyHomePageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyHomePageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyHomePage</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Scaffold(...)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="flutter-widgets-的官方目录集"><a href="#flutter-widgets-的官方目录集" class="headerlink" title="flutter-widgets 的官方目录集"></a><span class="exturl" data-url="aHR0cDovL2RvYy5mbHV0dGVyLWRldi5jbi93aWRnZXRzLw==" title="http://doc.flutter-dev.cn/widgets/">flutter-widgets 的官方目录集<i class="fa fa-external-link"></i></span></h2><p><img src="https://image.xuebin.me/006tNc79ly1g02fza8b2ij30ni3m5gyb.jpg" alt="widgets目录"></p>
]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>开发</tag>
        <tag>flutter</tag>
        <tag>移动端</tag>
      </tags>
  </entry>
  <entry>
    <title>git仓库删除所有提交历史记录，成为一个干净的新仓库</title>
    <url>/posts/522d93cd.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="清空git历史"><a href="#清空git历史" class="headerlink" title="清空git历史"></a>清空git历史</h1><ol>
<li><p>Checkout </p>
<p><code>git checkout --orphan latest_branch</code></p>
</li>
<li><p>Add all the files</p>
<p><code>git add -A</code></p>
</li>
<li><p>Commit the changes</p>
<p><code>git commit -am &quot;commit message&quot;</code></p>
</li>
<li><p>Delete the branch</p>
<p><code>git branch -D master</code></p>
</li>
<li><p>Rename the current branch to master</p>
<p><code>git branch -m master</code></p>
</li>
<li><p>Finally, force update your repository</p>
<p><code>git push -f origin master</code></p>
</li>
</ol>
<blockquote>
<p>PS: this will not keep your old commit history around</p>
</blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTM3MTY2NTgvaG93LXRvLWRlbGV0ZS1hbGwtY29tbWl0LWhpc3RvcnktaW4tZ2l0aHVi" title="https://stackoverflow.com/questions/13716658/how-to-delete-all-commit-history-in-github">how to delete all commit history in github<i class="fa fa-external-link"></i></span></p>
<h1 id="撤销commit"><a href="#撤销commit" class="headerlink" title="撤销commit"></a><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1Y2hhb3N6L2FydGljbGUvZGV0YWlscy81MjE3MDEwNQ==" title="https://blog.csdn.net/fuchaosz/article/details/52170105">撤销commit<i class="fa fa-external-link"></i></span></h1><p>使用 <code>git reflog</code> 查看之前 commit 的版本号</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git reset --hard 版本号</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意，此命令会导致本地代码版本回退为之前 commit 的代码的版本</p>
</blockquote>
<p>覆盖远端的版本信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push --force</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：本地分支回滚后，版本将落后远程分支，必须使用强制推送覆盖远程分支，否则无法推送到远程分支</p>
</blockquote>
<a id="more"></a>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>会写诗的程序猿</title>
    <url>/posts/5d06bcd0.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div class="note success">
            <p><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvNXRwWERTQ3VEeVJtSC0zVktsRDlidw==" title="https://mp.weixin.qq.com/s/5tpXDSCuDyRmH-3VKlD9bw">如果工程师会写诗，世界该是什么样？<i class="fa fa-external-link"></i></span></p>
          </div>
<a id="more"></a>
<blockquote class="blockquote-center"><p><strong>吐槽、自黑，是荣码生活的调味剂</strong></p>
</blockquote>
<blockquote>
<p>剪不断，</p>
<p>理还乱，</p>
<p>是需求，</p>
<p>别是一般滋味在心头。</p>
<p>——青波</p>
</blockquote>
<blockquote>
<p>众里寻他千百度</p>
<p>蓦然回首</p>
<p>BUG却在鼠标右下处</p>
<p>——稼轩</p>
</blockquote>
<blockquote>
<p>窗前明月光，人前屏幕亮；</p>
<p>举头望明月，低头继续码。</p>
<p>——Lucifer</p>
</blockquote>
<blockquote>
<p>摸摸自己的头</p>
<p>唉</p>
<p>真滑</p>
<p>——匿名</p>
</blockquote>
<blockquote class="blockquote-center"><p><strong>即使如此，</strong></p>
<p><strong>我们依然停不了对这份事业的热爱：</strong></p>
</blockquote>
<blockquote>
<p>请不要叫我“程序员”</p>
<p>请叫我“爱码士”</p>
<p>——AiXieShi</p>
</blockquote>
<blockquote>
<p>只是想沉浸在代码的海洋</p>
<p>毕竟</p>
<p>电脑是一个单纯的小孩</p>
<p>只要顺着她的小脾气就好</p>
<p>比起带着面具的大人要好很多</p>
<p>——大名叫李鑫</p>
</blockquote>
<blockquote>
<p>戴着耳机</p>
<p>听着电音</p>
<p>敲键盘撸代码</p>
<p>没有太多的杂念</p>
<p>一个人也挺好</p>
<p>还有代码陪着我</p>
<p>——ls、封尘</p>
</blockquote>
<blockquote>
<p>我们写的不只是代码</p>
<p>而是我们读过的书</p>
<p>看过的电影</p>
<p>听过的音乐</p>
<p>走过的路</p>
<p>爱过的人</p>
<p>——薛晨Aaron</p>
</blockquote>
<blockquote class="blockquote-center"><p><strong>对于生命的另一半，</strong></p>
<p><strong>我们也有朴实的期许：</strong></p>
</blockquote>
<blockquote>
<p>代码如山寥寥知己</p>
<p>码农汉子惺惺相惜</p>
<p>——magic</p>
</blockquote>
<blockquote>
<p>面向对象面向君</p>
<p>不负代码不负卿</p>
<p>——桃子</p>
</blockquote>
<blockquote>
<p>你是我一生调不好的BUG</p>
<p>时时刻刻在寻找</p>
<p>——菁华浮梦</p>
</blockquote>
<blockquote>
<p>你是我的私有变量</p>
<p>只有我可以调用</p>
<p>——七秒钟</p>
</blockquote>
<blockquote>
<p>像一棵茂盛的树</p>
<p>叶片交错，不遮挡彼此的阳光</p>
<p>枝干延伸，生长出无数的可能</p>
<p>这是我喜欢的代码</p>
<p>也是我向往的另一半</p>
<p>——匿名</p>
</blockquote>
<blockquote>
<p>嘘～</p>
<p>爱是用心码</p>
<p>不要说话</p>
<p>——做自己</p>
</blockquote>
<div style="text-align: center;"><br>▼<br></div>

<p>每位有爱的工程师</p>
<p>骨子里都是一位诗人</p>
<p>代码如诗</p>
<p>一写就是整个世界</p>
]]></content>
      <categories>
        <category>程序猿</category>
      </categories>
      <tags>
        <tag>程序员</tag>
        <tag>诗</tag>
      </tags>
  </entry>
  <entry>
    <title>在sourceTree中使用rebase合并分支</title>
    <url>/posts/cc0c94d4.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><code>git merge</code> vs <code>git rebase</code></p>
<div class="note ">
            <ol><li>完成功能分支之后先不 merge，而是 <code>git checkout 主分支</code> 回到主干分支去 <code>git pull --rebase</code></li><li>如果主干有更新，<code>git rebase 分支</code> 更新主分支的内容到功能分支来预检一下，看看在加入了最近别人的改动之后我的功能是否依然 OK（在这个过程中可能会有冲突处理，解决冲突之后使用 <code>git add .</code> 更新索引，更新完之后不需要执行 commit，只要执行 <code>git rebase --continue</code> 应用余下的补丁即可）</li><li>一切就绪之后再次 <code>git fetch</code> 主干看看有没有变动（因为在第二步的进行期间没准又有人 push 了新的变化），有的话重复第二部</li><li>合并功能分支到主干然后 push，收工。</li></ol>
          </div>
<a id="more"></a>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9sZWFybmdpdGJyYW5jaGluZy5qcy5vcmcv" title="https://learngitbranching.js.org/">git 命令在线学习<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL3EvMTAxMDAwMDAwNzcwNDU3Mw==" title="https://segmentfault.com/q/1010000007704573">用 git 整合分支的时候，大家更常用的是变基操作(git rebase)还是合并操作(git merge)，你们觉得哪个比较好？<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly94aWFvemh1YW5sYW4uY29tL3RvcGljLzY4NzMyMTA1NDk=" title="https://xiaozhuanlan.com/topic/6873210549">在 sourceTree 中使用 rebase （变基）<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vZW50cnkvNTk3MDg2ODQ1MTg4MjUyNjQ1NTcyZWJk" title="https://juejin.im/entry/597086845188252645572ebd">Git - 使用 rebase 命令保持主分支树的整洁<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YjRkNjYxMjUxODgyNTFhY2U3NWJhMjc=" title="https://juejin.im/post/5b4d66125188251ace75ba27">git 的 GUI 工具 Sourcetree 使用及命令行对比<i class="fa fa-external-link"></i></span></li>
</ul>
<h1 id="在-sourceTree-中使用-rebase-（变基）"><a href="#在-sourceTree-中使用-rebase-（变基）" class="headerlink" title="在 sourceTree 中使用 rebase （变基）"></a>在 sourceTree 中使用 rebase （变基）</h1><p>原始状态</p>
<p><img src="https://image.xuebin.me/006tNbRwgy1fy69b0529uj30sy0pg41h.jpg" alt></p>
<p>假如我们要在 master 分支上进行开发，在远端的 master 分支上右键，检出 一个自己的开发分支 dev-1</p>
<p><img src="https://image.xuebin.me/006tNbRwgy1fy69bjs148j30t20v2ae7.jpg" alt="img"></p>
<p><img src="https://image.xuebin.me/006tNbRwgy1fy69c5ndkcj30u40r2diy.jpg" alt="img"></p>
<p>做一些开发，提交到本地，不要推送（push）到远端<br>切换到 master 分支，拉取远端的 master 更新，（这里另一个同事在 master 分支上提交了 dev 2 的更新）</p>
<p><img src="https://image.xuebin.me/006tNbRwgy1fy69cyad02j30zk0ec0xz.jpg" alt="img"></p>
<p>切换到自己的开发分支 dev-1<br>选中 master 分支，右键，选择 将当前变更变基到 master</p>
<p><img src="https://image.xuebin.me/006tNbRwgy1fy69daffwqj30ta0mm0wn.jpg" alt="img"></p>
<p>如果有冲突则合并冲突，<br>点击左上角的加号，选择 继续变基</p>
<p><img src="https://image.xuebin.me/006tNbRwgy1fy69dg5ei0j30zk0g4434.jpg" alt="img"></p>
<p>此时我们的本地更新是基于最新的 master 分支</p>
<p><img src="https://image.xuebin.me/006tNbRwgy1fy69dkjpc8j30uo0h20vf.jpg" alt="img"></p>
<p>最后’推送’我们的开发分支 dev-1 到远端<br>切换到 master 分支，点击 拉取，拉取 dev-1 的更新到 master 分支</p>
<p><img src="https://image.xuebin.me/006tNbRwgy1fy69doxd6zj30ym0h00vp.jpg" alt="img"></p>
<p>再推送 master 分支，就保证了 git 分支的整洁</p>
<p><img src="https://image.xuebin.me/006tNbRwgy1fy69dtpcenj30zk0fstbx.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>sourcetree</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>观察者模式 vs 发布订阅模式</title>
    <url>/posts/a7b35846.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote>
<p><strong>观察者模式（Observer pattern），和发布订阅模式（Publish–subscribe pattern），到底有什么不同？</strong></p>
</blockquote>
<a id="more"></a>
<h1 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h1><p>所谓观察者模式，其实就是为了实现<strong>松耦合(loosely coupled)</strong>。</p>
<p>用《Head First 设计模式》里的气象站为例子，每当气象测量数据有更新，<code>changed()</code>方法就会被调用，于是我们可以在<code>changed()</code>方法里面，更新气象仪器上的数据，比如温度、气压等等。</p>
<p>但是这样写有个问题，就是如果以后我们想在<code>changed()</code>方法被调用时，更新更多的信息，比如说湿度，那就要去修改<code>changed()</code>方法的代码，这就是紧耦合的坏处。</p>
<p><strong>怎么解决呢？使用观察者模式，面向接口编程，实现松耦合。</strong></p>
<p>观察者模式里面，<code>changed()</code>方法所在的实例对象，就是被观察者（Subject，或者叫 Observable），它只需维护一套观察者（Observer）的集合，这些 Observer 实现相同的接口，Subject 只需要知道，通知 Observer 时，需要调用哪个统一方法就好了：</p>
<p><img src="https://image.xuebin.me/006tNbRwly1fy09liy7x2j31170dtt8q.jpg" alt></p>
<h1 id="发布订阅模式"><a href="#发布订阅模式" class="headerlink" title="发布订阅模式"></a>发布订阅模式</h1><p>大概很多人都和我一样，觉得发布订阅模式里的 Publisher，就是观察者模式里的 Subject，而 Subscriber，就是 Observer。Publisher 变化时，就主动去通知 Subscriber。</p>
<p>其实并不是。</p>
<p><strong>在发布订阅模式里，发布者，并不会直接通知订阅者，换句话说，发布者和订阅者，彼此互不相识。</strong></p>
<p>互不相识？那他们之间如何交流？</p>
<p><strong>答案是，通过第三者，也就是在消息队列里面，我们常说的经纪人 Broker。</strong></p>
<p><img src="https://image.xuebin.me/006tNbRwly1fy09m70lhaj30vs0hsgoj.jpg" alt></p>
<p>发布者只需告诉 Broker，我要发的消息，topic 是 AAA；</p>
<p>订阅者只需告诉 Broker，我要订阅 topic 是 AAA 的消息；</p>
<p>于是，当 Broker 收到发布者发过来消息，并且 topic 是 AAA 时，就会把消息推送给订阅了 topic 是 AAA 的订阅者。当然也有可能是订阅者自己过来拉取，看具体实现。</p>
<p><strong>也就是说，发布订阅模式里，发布者和订阅者，不是松耦合，而是完全解耦的。</strong></p>
<p>放一张极简的图，给大家对比一下这两个模式的区别：</p>
<p><img src="https://image.xuebin.me/006tNbRwly1fy09mthqz8j313i0u0wgm.jpg" alt></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>从表面上看：</p>
<ul>
<li>观察者模式里，只有两个角色 —— 观察者 + 被观察者</li>
<li>而发布订阅模式里，却不仅仅只有发布者和订阅者两个角色，还有一个经常被我们忽略的 —— 经纪人 Broker</li>
</ul>
<p>往更深层次讲：</p>
<ul>
<li>观察者和被观察者，是松耦合的关系</li>
<li>发布者和订阅者，则完全不存在耦合</li>
</ul>
<p>从使用层面上讲：</p>
<ul>
<li>观察者模式，多用于单个应用内部</li>
<li>发布订阅模式，则更多的是一种跨应用的模式(cross-application pattern)，比如我们常用的消息中间件</li>
</ul>
<blockquote>
<p>文章来源：<span class="exturl" data-url="aHR0cHM6Ly9oYWNrZXJub29uLmNvbS9vYnNlcnZlci12cy1wdWItc3ViLXBhdHRlcm4tNTBkM2IyN2Y4Mzhj" title="https://hackernoon.com/observer-vs-pub-sub-pattern-50d3b27f838c">https://hackernoon.com/observer-vs-pub-sub-pattern-50d3b27f838c<i class="fa fa-external-link"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>程序猿</category>
      </categories>
      <tags>
        <tag>程序员</tag>
        <tag>编程</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>你真的会用 async 吗？</title>
    <url>/posts/75593cbb.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="async-介绍"><a href="#async-介绍" class="headerlink" title="async 介绍"></a>async 介绍</h1><p>先上 MDN 介绍：<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvU3RhdGVtZW50cy9hc3luY19mdW5jdGlvbg==" title="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function">developer.mozilla.org/zh-CN/docs/…<i class="fa fa-external-link"></i></span></p>
<blockquote>
<p><strong>async function</strong> 用于声明 一个 返回 <strong>AsyncFunction</strong> 对象的异步函数。异步函数是值通过事件循环异步执行的函数，它会通过一个隐式的 <strong>Promise</strong> 返回其结果。如果你的代码使用了异步函数，它的语法和结构更像是标准的同步函数</p>
</blockquote>
<p><em>人工翻译：<strong>async</strong> 关键字是用于表示一个函数里面有异步操作的含义。它通过返回一个 Promise 对象来返回结果它的最大的特点是：通过 async / await 将异步的操作，但是写法和结构却是和我们平时写的（同步代码）是一样</em></p>
<a id="more"></a>
<h1 id="示范"><a href="#示范" class="headerlink" title="示范"></a>示范</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一般我们会把所有请求方法都定义在一个文件里，这里定义一个方法来模拟我们的日常请求</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetch</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  axios</span><br><span class="line">    .get(<span class="string">'/user?ID=12345'</span>)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(response)</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(error)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 然后在需要它的地方调用它</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getUserInfo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> info = <span class="keyword">await</span> fetch()</span><br><span class="line">  <span class="keyword">return</span> info</span><br><span class="line">&#125;</span><br><span class="line">getUserInfo().then(<span class="function"><span class="params">info</span> =&gt;</span> <span class="built_in">console</span>.log(info))</span><br></pre></td></tr></table></figure>
<p>我们可以看到，整个过程非常直观和清晰，语句语义非常明确，整个异步操作看起来就像是同步一样。如果看完上面的流程没有问题的话，那我们接下来继续深入的了解一下。</p>
<h1 id="async-Promise-setTimeout-定时器-的结合使用情况"><a href="#async-Promise-setTimeout-定时器-的结合使用情况" class="headerlink" title="async Promise setTimeout(定时器) 的结合使用情况"></a>async Promise setTimeout(定时器) 的结合使用情况</h1><p>接下来给大家演示一道题目，这道题是我当时面某条的面试题，估计和多人也见过，这道题非常经典而且使用场景页非常多，研究意义非常大，那么我在这里就给大家分享一下。</p>
<p><strong>求下面的输出结果：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'async1 start'</span>)</span><br><span class="line">  <span class="keyword">await</span> async2()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'async1 end'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'async2'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'script start'</span>)</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'setTimeout'</span>), <span class="number">0</span>)</span><br><span class="line">async1()</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'promise1'</span>)</span><br><span class="line">  resolve()</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'promise2'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'script end'</span>)</span><br></pre></td></tr></table></figure>
<p>这里一共有 8 条 log 语句，先别复制到控制台上，大家给 20 秒钟的时间默念一下输出的顺序。</p>
<p>正确的答案：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">script start</span><br><span class="line">async1 start</span><br><span class="line">async2</span><br><span class="line">promise1</span><br><span class="line">script end</span><br><span class="line">promise2</span><br><span class="line">async1 end</span><br><span class="line">setTimeout</span><br></pre></td></tr></table></figure>
<p>如果你的答案和上面的正确答案有所偏差，那么说明你对 async / await 的理解还是不够深刻。</p>
<p>我们再来回顾一下 MDN 对 async / await 的描述：</p>
<blockquote>
<h4 id="async-function"><a href="#async-function" class="headerlink" title="async function"></a>async function</h4><p>当调用一个 <code>async</code> 函数时，会返回一个 <span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5pbT90YXJnZXQ9aHR0cHMlM0ElMkYlMkZkZXZlbG9wZXIubW96aWxsYS5vcmclMkZ6aC1DTiUyRmRvY3MlMkZXZWIlMkZKYXZhU2NyaXB0JTJGUmVmZXJlbmNlJTJGR2xvYmFsX09iamVjdHMlMkZQcm9taXNl" title="https://link.juejin.im?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal_Objects%2FPromise"><code>Promise</code><i class="fa fa-external-link"></i></span> 对象。当这个 <code>async</code> 函数返回一个值时，<code>Promise</code> 的 resolve 方法会负责传递这个值；当 <code>async</code> 函数抛出异常时，<code>Promise</code> 的 reject 方法也会传递这个异常值。</p>
<p><code>async</code> 函数中可能会有 <span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5pbT90YXJnZXQ9aHR0cHMlM0ElMkYlMkZkZXZlbG9wZXIubW96aWxsYS5vcmclMkZ6aC1DTiUyRmRvY3MlMkZXZWIlMkZKYXZhU2NyaXB0JTJGUmVmZXJlbmNlJTJGT3BlcmF0b3JzJTJGYXdhaXQ=" title="https://link.juejin.im?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FJavaScript%2FReference%2FOperators%2Fawait"><code>await</code><i class="fa fa-external-link"></i></span> 表达式，这会使 <code>async</code> 函数暂停执行，等待 <code>Promise</code> 的结果出来，然后恢复<code>async</code>函数的执行并返回解析值（resolved）。</p>
<blockquote>
<p><code>async</code>/<code>await</code>的用途是简化使用 promises 异步调用的操作，并对一组 <code>Promises</code>执行某些操作。正如<code>Promises</code>类似于结构化回调，<code>async</code>/<code>await</code>类似于组合生成器和 promises。</p>
</blockquote>
<h4 id="await"><a href="#await" class="headerlink" title="await"></a>await</h4><p><code>await</code> 操作符用于等待一个<span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5pbT90YXJnZXQ9aHR0cHMlM0ElMkYlMkZkZXZlbG9wZXIubW96aWxsYS5vcmclMkZ6aC1DTiUyRmRvY3MlMkZXZWIlMkZKYXZhU2NyaXB0JTJGUmVmZXJlbmNlJTJGR2xvYmFsX09iamVjdHMlMkZQcm9taXNl" title="https://link.juejin.im?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal_Objects%2FPromise"><code>Promise</code><i class="fa fa-external-link"></i></span> 对象。它只能在异步函数 <span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5pbT90YXJnZXQ9aHR0cHMlM0ElMkYlMkZkZXZlbG9wZXIubW96aWxsYS5vcmclMkZ6aC1DTiUyRmRvY3MlMkZXZWIlMkZKYXZhU2NyaXB0JTJGUmVmZXJlbmNlJTJGU3RhdGVtZW50cyUyRmFzeW5jX2Z1bmN0aW9u" title="https://link.juejin.im?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FJavaScript%2FReference%2FStatements%2Fasync_function"><code>async function</code><i class="fa fa-external-link"></i></span> 中使用。</p>
<blockquote>
<p>[return_value] = await expression</p>
</blockquote>
<p>await 表达式会暂停当前 <span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5pbT90YXJnZXQ9aHR0cHMlM0ElMkYlMkZkZXZlbG9wZXIubW96aWxsYS5vcmclMkZ6aC1DTiUyRmRvY3MlMkZXZWIlMkZKYXZhU2NyaXB0JTJGUmVmZXJlbmNlJTJGU3RhdGVtZW50cyUyRmFzeW5jX2Z1bmN0aW9u" title="https://link.juejin.im?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FJavaScript%2FReference%2FStatements%2Fasync_function"><code>async function</code><i class="fa fa-external-link"></i></span> 的执行，等待 Promise 处理完成。若 Promise 正常处理(fulfilled)，其回调的 resolve 函数参数作为 await 表达式的值，继续执行 <span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5pbT90YXJnZXQ9aHR0cHMlM0ElMkYlMkZkZXZlbG9wZXIubW96aWxsYS5vcmclMkZ6aC1DTiUyRmRvY3MlMkZXZWIlMkZKYXZhU2NyaXB0JTJGUmVmZXJlbmNlJTJGU3RhdGVtZW50cyUyRmFzeW5jX2Z1bmN0aW9u" title="https://link.juejin.im?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FJavaScript%2FReference%2FStatements%2Fasync_function"><code>async function</code><i class="fa fa-external-link"></i></span>。</p>
<p>若 Promise 处理异常(rejected)，await 表达式会把 Promise 的异常原因抛出。</p>
<p>另外，如果 await 操作符后的表达式的值不是一个 Promise，则返回该值本身。</p>
</blockquote>
<p>其中非常重要的一句是：</p>
<p><strong>遇到 await 表达式时，会让 async 函数 暂停执行，等到 await 后面的语句（Promise）状态发生改变（resolved 或者 rejected）之后，再恢复 async 函数的执行（再之后 await 下面的语句），并返回解析值（Promise 的值）</strong></p>
<p>这么多 Promise 相关的内容是因为 async / await 是建立在 Promise 的基础上的呀~~</p>
<p>然后再来回头看我们的题目，会发现，有点不对劲啊。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">async1 end</span><br><span class="line">promise2</span><br></pre></td></tr></table></figure>
<p>那是因为还有一个 Promise.resolve 的点没有考虑，这也是我中招的点</p>
<h1 id="分析过程"><a href="#分析过程" class="headerlink" title="分析过程"></a>分析过程</h1><blockquote>
<ol>
<li>定义一个异步函数 async1</li>
<li>定义一个异步函数 async2</li>
<li>打印 ‘script start’ // *1</li>
<li>定义一个定时器（宏任务，优先级低于微任务），在 0ms 之后输出</li>
<li>执行异步函数 async1<ol>
<li>打印 ‘async1 start’ // *2</li>
<li>遇到 await 表达式，执行 await 后面的 async2<ol>
<li>打印 ‘async2’ // *3</li>
</ol>
</li>
<li>返回一个 Promise，跳出 async1 函数体</li>
</ol>
</li>
<li>执行 new Promise 里的语句<ol>
<li>打印 ‘promise1‘ // *4</li>
<li>resolve() , 返回一个 Promise 对象，把这个 Promise 压进队列里</li>
</ol>
</li>
<li>打印 ’script end’ // *5</li>
<li>同步栈执行完毕</li>
<li>回到 async1 的函数体，async2 函数没有返回 Promise，所以把要等 async2 的值 resolve，把 Promise 压进队列</li>
<li>执行 new Promise 后面的 .then，打印 ’promise2‘ // *6</li>
<li>回到 async1 的函数体，await 返回 Promise.resolve() ，然后打印后面的 ’async1 end‘ // *7</li>
<li>最后执行定时器（宏任务） setTimeout，打印 ’setTimeout‘ // *8</li>
</ol>
</blockquote>
<p>我对这段代码的过程分析大致如上（如果有什么理解不对的地方请指出），这里有很关键而且是大家容易理解错误的点是：很多人以为 await 会一直等待后面的表达式执行完之后才会执行后续代码，实际上 await 是会先执行后面的表达式，然后返回一个 Promise，接着就跳出整个 async 函数来执行后面的代码，也就是说执行到 await 的时候，会有一个 <strong>让出线程</strong> 的操作。等后面的同步站执行完了之后，又会回到 async 函数中等待 await 表达式的返回值，如果不是一个 Promise 对象，则会有一个期待它 resolve 成为一个 Promise 对象的过程，然后继续执行 async 函数后面的代码，直到是一个 Promise 对象，则把这个 Promise 对象放入 Promise 队列里。</p>
<p>所以说 ，<code>’async1 end&#39; 和‘promise2‘</code> 这个不注意就会出错的难点就是这样</p>
<p>那么现在，我们是不是大致上对 async / await 理解了呢，我们来改一下这道题再来看看，把 async2 改造一下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'async1 start'</span>)</span><br><span class="line">  <span class="keyword">await</span> async2()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'async1 end'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">async2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 去掉了 async 关键字</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'async2'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'script start'</span>)</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'setTimeout'</span>), <span class="number">0</span>)</span><br><span class="line">async1()</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'promise1'</span>)</span><br><span class="line">  resolve()</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'promise2'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'script end'</span>)</span><br></pre></td></tr></table></figure>
<h1 id="日常应用"><a href="#日常应用" class="headerlink" title="日常应用"></a>日常应用</h1><p>下面给一些我们日常开发中使用异步函数的例子。一般来说，我们有一个业务需要分不完成，每个步骤都是异步的，并且严重依赖于上一步的执行结果，稍有不慎就会进入回调地狱（callback hell）了，这种情况下，我们可以用 async / await 来完成</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 比如在这里场景，我们提交数据的时候先判定用户是否有这个权限，然后再进行下一步动作</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">submitData</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> getAuth(); <span class="comment">// 获取授权状态</span></span><br><span class="line">    <span class="keyword">if</span> (res....) &#123;</span><br><span class="line">        <span class="keyword">const</span> data = <span class="keyword">await</span> submit(data);</span><br><span class="line">    &#125;</span><br><span class="line">    toast(data.message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样就可以保证两个操作的先后顺序</p>
<p>或者是在 Vue 中，一些初始化的操作</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> created() &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="keyword">this</span>.init(); <span class="comment">// 获取列表等操作</span></span><br><span class="line">    <span class="keyword">const</span> list = <span class="keyword">await</span> <span class="keyword">this</span>.getPage(); <span class="comment">// 分页请求等</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是在使用过程中，我们会发现刚从回调地狱中解救，然后就陷入 async / await 地狱的诞生</p>
<p><strong>举一个例子：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> created() &#123;</span><br><span class="line">    <span class="keyword">const</span> userInfo = <span class="keyword">await</span> <span class="keyword">this</span>.getUserInfo(); <span class="comment">// 获取用户数据</span></span><br><span class="line">    <span class="keyword">const</span> list = <span class="keyword">await</span> <span class="keyword">this</span>.getNewsList(); <span class="comment">// 获取文章数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>表面上看，这段语法是正确的，但并不是一个优秀实现，因为它把两个没有先后顺序的一部操作强行变成同步操作了，因为这里的代码是一行接着一行执行的，想一下，我们没有必要在获取用户数据之后才去获取文章数据，它们的工作是可以同时进行的</p>
<p>这里给出一些常用的并发执行的实例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> created() &#123;</span><br><span class="line">    <span class="keyword">const</span> userInfo = <span class="keyword">this</span>.getUserInfo(); <span class="comment">// 它们都会返回 Promise 对象</span></span><br><span class="line">    <span class="keyword">const</span> list = <span class="keyword">this</span>.getNewsList();</span><br><span class="line">    <span class="keyword">await</span> userInfo;</span><br><span class="line">    <span class="keyword">await</span> list;</span><br><span class="line">    <span class="comment">// ...do something</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果有很多请求的情况下可以使用 Promise.all</span></span><br><span class="line"><span class="keyword">async</span> created() &#123;</span><br><span class="line">    <span class="built_in">Promise</span>.all([<span class="keyword">this</span>.getUserInfo(), <span class="keyword">this</span>.getNewsList()]).then(<span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// ...do something</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><img src="https://image.xuebin.me/006tNbRwgy1fxtkyufixnj30r10ksdhs.jpg" alt="图谱"></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxNzIyNDc5OQ==" title="https://segmentfault.com/a/1190000017224799">8 张图让你一步步看清 async/await 和 promise 的执行顺序<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YjczZDdhNjUxODgyNTYxMDA3MmI0MmI=" title="https://juejin.im/post/5b73d7a6518825610072b42b">微任务、宏任务与 Event-Loop<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YjQ5OGQyNDUxODgyNTFiMTkzZDQwNTk=" title="https://juejin.im/post/5b498d245188251b193d4059">JS 事件循环机制（event loop）之宏任务/微任务<i class="fa fa-external-link"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>前端</tag>
        <tag>javascript</tag>
        <tag>开发</tag>
        <tag>es6</tag>
        <tag>promise</tag>
        <tag>async</tag>
      </tags>
  </entry>
  <entry>
    <title>一个前端狗的周末日常</title>
    <url>/posts/ff13b1c8.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!--
http://gohom.win/2016/02/11/stop-redirect-iframe/
https://blog.csdn.net/xm_csdn/article/details/78102091
https://segmentfault.com/a/1190000004502619#articleHeader11
-->
<iframe src="https://h5.weishi.qq.com/weishi/feed/71iAtl7UG1GsL8t7H/wsfeed?_proxy=1&_wv=1&wxplay=1&id=71iAtl7UG1GsL8t7H&spid=1532958172271998&reqseq=624356966&image=/64b651b71e914ad5a299a32906f1pic&bgSize=contain&pkg=4160&attach=cp_reserves3_4002%7Ccp_reserves16_2&from=timeline&isappinstalled=0" frameborder="0" scrolling="no" style="width: 100%; min-height: 667px;" sandbox="allow-forms allow-scripts allow-same-origin"></iframe>

<a id="more"></a>
<!--
<div style="
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    flex-flow: wrap;
">

  <video id="video" controls="" preload="auto"  style="width:100%;margin-bottom:10px;">
        <source id="mp4" src="/assets/2018-11-30-一个前端狗的周末日常.assets/0a49c6f37bb0c53711988031a28d15.mp4" type="video/mp4">
        <p>Your user agent does not support the HTML5 Video element.</p>
  </video>

  <video id="video" controls="" preload="auto" style="width:100%;margin-bottom:10px;">
        <source id="mp4" src="/assets/2018-11-30-一个前端狗的周末日常.assets/b644258d2b9278e3e0b8e0a5ede70181.mp4" type="video/mp4">
        <p>Your user agent does not support the HTML5 Video element.</p>
  </video>

  <video id="video" controls="" preload="auto" style="width:100%;margin-bottom:10px;">
        <source id="mp4" src="/assets/2018-11-30-一个前端狗的周末日常.assets/IMG_3334.mp4" type="video/mp4">
        <p>Your user agent does not support the HTML5 Video element.</p>
  </video>
</div>
-->
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>游泳</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客优化之文章置顶+置顶标签</title>
    <url>/posts/78da659c.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><img src="https://image.xuebin.me/006tNbRwly1fxqb49y8mcj30gw088aav.jpg" alt></p>
<a id="more"></a>
<p>本文首发于<span class="exturl" data-url="aHR0cDovL3dhbmd3bGouY29tLw==" title="http://wangwlj.com/">wangwlj.com<i class="fa fa-external-link"></i></span></p>
<h2 id="博文置顶"><a href="#博文置顶" class="headerlink" title="博文置顶"></a>博文置顶</h2><p>一种方法是手动对相关文件进行修改，具体可参考<span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC80MmE0ZWZjZGY4ZDc=" title="https://www.jianshu.com/p/42a4efcdf8d7">这篇文章<i class="fa fa-external-link"></i></span>。</p>
<p>另一种方法就是，目前已经有修改后支持置顶的<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL25ldGNhbi9oZXhvLWdlbmVyYXRvci1pbmRleC1waW4tdG9w" title="https://github.com/netcan/hexo-generator-index-pin-top">仓库<i class="fa fa-external-link"></i></span>，可以直接用以下命令安装。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm uninstall hexo-generator-index --save</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo-generator-index-pin-top --save</span></span><br></pre></td></tr></table></figure>
<p>然后在需要置顶的文章的<code>Front-matter</code>中加上<code>top: true</code>(<em>top 的值可以是 true，也可以是 n，n 越大代表级别越高</em>)即可。比如下面这篇文章：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">hexo+GitHub博客搭建实战</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2017</span><span class="bullet">-09</span><span class="bullet">-08</span> <span class="number">12</span><span class="string">:00:25</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">博客搭建系列</span></span><br><span class="line"><span class="attr">top:</span> <span class="literal">true</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
<p>到目前为止，置顶功能已经可以实现了。所有相关博文到这边就结束了。</p>
<p>不过置顶的文章显示在最上面之后，如果没有明确的置顶标志，是不是感觉有点怪怪的呢？</p>
<h2 id="设置置顶标志"><a href="#设置置顶标志" class="headerlink" title="设置置顶标志"></a>设置置顶标志</h2><p>打开：<code>/blog/themes/next/layout/_macro</code> 目录下的<code>post.swig</code>文件，定位到<code>&lt;div class=&quot;post-meta&quot;&gt;</code>标签下，插入如下代码：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">&#123;%</span> <span class="string">if</span> <span class="string">post.top</span> <span class="string">%&#125;</span></span><br><span class="line">  <span class="string">&lt;i</span> <span class="string">class="fa</span> <span class="string">fa-thumb-tack"&gt;&lt;/i&gt;</span></span><br><span class="line">  <span class="string">&lt;font</span> <span class="string">color=7D26CD&gt;置顶&lt;/font&gt;</span></span><br><span class="line">  <span class="string">&lt;span</span> <span class="string">class="post-meta-divider"&gt;|&lt;/span&gt;</span></span><br><span class="line"><span class="string">&#123;%</span> <span class="string">endif</span> <span class="string">%&#125;</span></span><br></pre></td></tr></table></figure>
<p>效果展示：</p>
<p><img src="https://image.xuebin.me/006tNbRwly1fxqb49y8mcj30gw088aav.jpg" alt></p>
<hr>
<blockquote>
<p>作者：qwerty200696<br>来源：CSDN<br>原文：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3F3ZXJ0eTIwMDY5Ni9hcnRpY2xlL2RldGFpbHMvNzkwMTA2Mjk=" title="https://blog.csdn.net/qwerty200696/article/details/79010629">https://blog.csdn.net/qwerty200696/article/details/79010629<i class="fa fa-external-link"></i></span><br>版权声明：本文为博主原创文章，转载请附上博文链接！</p>
</blockquote>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>建站</tag>
        <tag>blog</tag>
        <tag>博客</tag>
        <tag>hexo</tag>
        <tag>置顶</tag>
      </tags>
  </entry>
  <entry>
    <title>使用sourceTree回滚git代码到历史节点</title>
    <url>/posts/d9381a03.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h1><p>回滚 git 代码好几次了，但是每次总是忘记回滚的步骤，每次都要再想一下，试一下。今天又回滚代码了，索性就记录一下。</p>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>将当前代码回滚到某次历史提交。<br>本文示例：从 master 回滚到 “回滚“ 历史节点。</p>
<a id="more"></a>
<h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><ol>
<li><p>在需要回滚的分支<code>右键</code>选择<code>将master重置到这次提交</code>，选择<code>重置（强行合并）</code>到需要回滚的历史节点。</p>
<p>如图将 master 回滚到 “回滚“ 历史节点。</p>
<p><img src="https://image.xuebin.me/006tNbRwly1fxd8hohmqfj314c0j4wiv.jpg" alt></p>
</li>
<li><p>再次重置(软合并)到当前分支<strong><code>最新</code></strong>的节点。<br>如图将“回滚“历史节点再重置到”origin/master”的最新节点。</p>
<p><img src="https://image.xuebin.me/006tNbRwly1fxd8jg5hhej31ay0emwiw.jpg" alt></p>
</li>
<li><p>此时在“文件状态“中即可获取到从历史节点到当前节点的所有修改记录</p>
<p><img src="https://image.xuebin.me/006tNbRwly1fxd8jop1zuj31bk0mcad3.jpg" alt></p>
</li>
<li><p>此时可以重置（或按照需求修改）”文件状态”中的文件，进行新的提交。</p>
<p><img src="https://image.xuebin.me/006tNbRwly1fxd8jxzmo1j31c80lyadj.jpg" alt></p>
</li>
</ol>
<p>提交成功后，则成功重置了从历史节点到最新节点的提交。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vamluZ3hpbjE5OTIvcC84NTM0NDAxLmh0bWw=" title="https://www.cnblogs.com/jingxin1992/p/8534401.html">sourceTree”重置提交”和”提交回滚”的区别<i class="fa fa-external-link"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTIzNzM4MTUvYXJ0aWNsZS9kZXRhaWxzLzc4MTQyODA2" title="https://blog.csdn.net/u012373815/article/details/78142806">使用 sourceTree 回滚 git 代码到历史节点<i class="fa fa-external-link"></i></span></p>
</li>
</ul>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>sourcetree</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>在工作中如何优化前端代码</title>
    <url>/posts/b4e0567a.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h2><p>首先说一个最重要的优化原则：代码优化是每天都要进行的，而不是一两个月做一次大优化，那时做就已经晚了。另外由于优化是每天做的，所以你不需要一次的就过度优化，保持小步快跑即可。</p>
<p>这个原则为什么重要？因为很多程序员会在写代码的时候说「先不优化了，等不忙的时候再优化」，然后……就没有然后了。</p>
<p>基本上「烂代码」就是因为「不忙的时候再优化」造成的。</p>
<a id="more"></a>
<h2 id="别给自己写烂代码找理由"><a href="#别给自己写烂代码找理由" class="headerlink" title="别给自己写烂代码找理由"></a>别给自己写烂代码找理由</h2><p>如果只要每天优化一点点代码，就能保持你的程序健康，你，能做到吗？</p>
<p>据我观察，90% 的程序员做不到。他们每天都会在心里找出如下理由来写出烂代码，或者对现有的烂代码视而不见：</p>
<ol>
<li>这个项目我只维护几个月，没必要把代码写那么好，反正有人接盘。</li>
<li>这个项目是从别人手里接下的，代码真烂，要怪就怪之前的人，不是我的错，我胡乱加一些代码就行了，能用就行。</li>
<li>这是一个短期项目，没必要把代码写那么好</li>
<li>这是一个长期项目，明年再优化代码，现在能用就行</li>
</ol>
<p>所以你看，不管我告诉他们多少优化代码的技巧，他们根本就不会去用的，这才是问题所在。</p>
<p>很多程序员抱怨公司代码烂，却从来不去尝试解决问题。（就像很多程序员抱怨培训班教出来的人水平差，自己却不写新人教程一样）</p>
<h2 id="过手就变好"><a href="#过手就变好" class="headerlink" title="过手就变好"></a>过手就变好</h2><p>如果你不想变成上面那样的程序员，你只坚定一个信念：只要是经过我的手的代码，质量就会比原来好一点。</p>
<p>那么你很快就能把代码写好了。你可能急于听到把代码写好的技巧，但是我告诉你，技巧真的不重要，这个信念才是最重要的。</p>
<p>接下来就是技巧。</p>
<h2 id="第一步：不要写烂代码"><a href="#第一步：不要写烂代码" class="headerlink" title="第一步：不要写烂代码"></a>第一步：不要写烂代码</h2><p>你是傻了吗，问的是「如何优化代码」，你的答案居然是「不要写烂代码」？！</p>
<p>没错，把代码写好的第一步就是不要写烂代码，也就是你要知道「什么样的代码是烂代码」：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5pbT90YXJnZXQ9aHR0cHMlM0ElMkYlMkZjb29sc2hlbGwuY24lMkZhcnRpY2xlcyUyRjQ3NTguaHRtbA==" title="https://link.juejin.im?target=https%3A%2F%2Fcoolshell.cn%2Farticles%2F4758.html">如何写出无法维护的代码 - 酷 壳<i class="fa fa-external-link"></i></span></p>
<p>上面这篇教程非常好，把市面上的烂代码基本都总结出来了，大概有这么几类：</p>
<ol>
<li>烂变量名</li>
<li>烂注释</li>
<li>烂设计</li>
<li>不写测试（所有没有单元测试的代码都是烂代码，快点学习单元测试！）</li>
</ol>
<p>基本上所有新人天天都在写烂变量名、烂注释和烂设计，而且还不写单元测试。</p>
<p>而且他们还不知道自己代码多烂！</p>
<p>所以第一步就是明白一个真相：你80%的代码都是烂代码。</p>
<p>你只需要把这些代码改得不那么烂，就是优秀的代码了……</p>
<p><strong>再说一次：第一步至关重要，搞清楚什么样的代码是烂代码。</strong></p>
<h2 id="第二步：避免重复"><a href="#第二步：避免重复" class="headerlink" title="第二步：避免重复"></a>第二步：避免重复</h2><p>也就是 Don’t Repeat Yourself 原则。</p>
<p>如果你发现有两行代码重复出现了好几次，你就应该把这两行代码封装成一个函数，放在一个恰当的地方，然后调用这个函数。</p>
<h2 id="第三步：表驱动编程"><a href="#第三步：表驱动编程" class="headerlink" title="第三步：表驱动编程"></a>第三步：表驱动编程</h2><p>如果你的代码有很多 if … else … 结构，你不知道怎么优化，你就应该使用表驱动编程。</p>
<p>优化前：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">howManyDays(year, month)&#123;</span><br><span class="line">    <span class="keyword">if</span>(month === <span class="number">1</span> ||</span><br><span class="line">        month === <span class="number">3</span> ||</span><br><span class="line">        month === <span class="number">5</span> ||</span><br><span class="line">        month === <span class="number">7</span> ||</span><br><span class="line">        month === <span class="number">8</span> ||</span><br><span class="line">        month === <span class="number">10</span> ||</span><br><span class="line">        month === <span class="number">12</span></span><br><span class="line">    )&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">31</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(month === <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> isLeapYear(year) ? <span class="number">29</span> : <span class="number">28</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">30</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>优化后：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">howManyDays(year, month)&#123;</span><br><span class="line">    const table = &#123;</span><br><span class="line">        1: 31, 3: 31, 5: 31, 7: 31, 8: 31, 10: 31, 12:31,</span><br><span class="line">        4: 30, 6:30, 9: 30, 11: 30,</span><br><span class="line">        2: isLeapYear(year) ? 29 : 28</span><br><span class="line">    &#125;</span><br><span class="line">    return table[month]</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>
<p>优化前：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function calculateGrade(score)&#123;</span><br><span class="line">    if(score&gt;=90)&#123;</span><br><span class="line">        return &apos;A&apos;</span><br><span class="line">    &#125;else if(score &gt;= 80)&#123;</span><br><span class="line">        return &apos;B&apos;</span><br><span class="line">    &#125;else if(score &gt;= 70)&#123;</span><br><span class="line">        return &apos;C&apos;</span><br><span class="line">    &#125;else if(score &gt;= 60)&#123;</span><br><span class="line">        return &apos;D&apos;</span><br><span class="line">    &#125;else &#123;</span><br><span class="line">        return &apos;E&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>
<p>优化后：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function calculateGrade(score)&#123;</span><br><span class="line">    const table = &#123;</span><br><span class="line">        100: &apos;A&apos;, </span><br><span class="line">        90: &apos;A&apos;,</span><br><span class="line">        80: &apos;B&apos;,</span><br><span class="line">        70: &apos;C&apos;,</span><br><span class="line">        60: &apos;D&apos;,</span><br><span class="line">        others: &apos;E&apos;</span><br><span class="line">    &#125;</span><br><span class="line">    return table[Math.floor(score/10)*10] || table[&apos;others&apos;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="第四步：用套路"><a href="#第四步：用套路" class="headerlink" title="第四步：用套路"></a>第四步：用套路</h2><p>设计模式就是一些编程套路，Unix 编程原则也是一些编程套路。</p>
<p>了解所有的套路，然后遇到问题选择正确的套路即可。</p>
<p>比如模块通信一般用事件模式或者命令模式；</p>
<p>比如解耦一般用中间层；</p>
<p>比如生命周期一般都支持钩子或切面；</p>
<p>比如性能优化一般都是加缓存；</p>
<p>比如 API 设计一定要正交；</p>
<p>比如复杂数据系统一般使用命令查询职责分离；</p>
<p>比如拿空间换时间拿时间换空间；</p>
<p>……</p>
<p>这一块还挺复杂的，够你纠结很久了，而且没有通解。唯一的通解就是 tradeoff。</p>
<h2 id="第五步：坚持每天优化"><a href="#第五步：坚持每天优化" class="headerlink" title="第五步：坚持每天优化"></a><strong>第五步：坚持每天优化</strong></h2><p>「每天优化」才叫重构，「每年优化」那叫重写。</p>
<p>优化的重点是「越来越好」，重点不是「一次写好」。</p>
<p>一旦你放松对自己代码的要求，你的代码就会迅速变成烂代码，而且很难恢复。</p>
<p>每当需求变化的时候，你都要重新审视你的整个系统，哪里有问题你就改那里，不允许「先临时改一下以后再优化」，你的代码就可以保持健康和活力。</p>
<p>可惜，大部分人做不到。就算我自己也会在需求太多的时候放松对代码的要求。</p>
]]></content>
      <categories>
        <category>程序猿</category>
      </categories>
      <tags>
        <tag>程序员</tag>
        <tag>代码优化</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 JSON.stringify 实现深拷贝</title>
    <url>/posts/999ba2f1.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> jsonStr = <span class="built_in">JSON</span>.stringify(</span><br><span class="line">  &#123;</span><br><span class="line">    undefind: <span class="built_in">window</span>.vvvv,</span><br><span class="line">    <span class="literal">null</span>: <span class="literal">null</span>,</span><br><span class="line">    name: <span class="string">'Leo'</span>,</span><br><span class="line">    site: <span class="string">'https://xuebin.com'</span>,</span><br><span class="line">    fun: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.name, <span class="keyword">this</span>.site)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  (key, value) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> value === <span class="string">'function'</span> ? <span class="string">''</span> + value : value === <span class="literal">undefined</span> ? <span class="string">'undefined'</span> : value</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="number">2</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(jsonStr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jsonObj = <span class="built_in">JSON</span>.parse(jsonStr, (key, value) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">eval</span>(<span class="string">'('</span> + value + <span class="string">')'</span>)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(jsonObj.fun())</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>代码片段</category>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>代码片段</tag>
        <tag>json</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>在 macOS 上的 Apple Mail 中使用 HTML 签名</title>
    <url>/posts/32ccdf7d.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote>
<p>原文地址：<span class="exturl" data-url="aHR0cHM6Ly9jaGVyeXN1bnpoYW5nLmNvbS8yMDE3LzAxL2hvdy10by1tYWtlLWFuLWh0bWwtc2lnbmF0dXJlLWluLWFwcGxlLW1haWwtZm9yLW1hY29zLw==" title="https://cherysunzhang.com/2017/01/how-to-make-an-html-signature-in-apple-mail-for-macos/">https://cherysunzhang.com/2017/01/how-to-make-an-html-signature-in-apple-mail-for-macos/<i class="fa fa-external-link"></i></span></p>
</blockquote>
<p>在 macOS 上最常使用的邮件客户端就是内建的 Mail.app，默认地，Mail.app 的签名在编辑的时候只有纯文本输入，但实际上可以使用 HTML 使签名更具定制化。通常 macOS 将 Mail.app 称之为“邮件”或 Mail，这里为了与其他第三方的邮件客户端名称进行区分，我们将其称之为 Apple Mail。</p>
<p>本文以 macOS Sierra 10.12 为示例，其他版本的 macOS 有可能操作方法有些许不同，具体在各个版本上的区别就需要自行研究了。</p>
<a id="more"></a>
<h2 id="新建签名"><a href="#新建签名" class="headerlink" title="新建签名"></a>新建签名</h2><p>在 Apple Mail 中，通过菜单选取“邮件”&gt;“偏好设置…”，然后点按“签名”。下面简要说明一下如何新建签名。如果你之前一直有在使用 Apple Mail 的签名，那么应该对这项工作已经非常熟悉了。</p>
<ol>
<li>选取“邮件”&gt;“偏好设置…”，然后点按“签名”。</li>
<li>在左侧栏中，选择想要应用签名的电子邮件帐户，然后点按“+”￼。可以将签名从一个帐户拖到另一个帐户，或拖入“所有签名”以及从中拖出。如果在“所有签名”中创建签名，必须将该签名拖到帐户中才能使用。</li>
<li>在中间栏中，为签名键入名称。当编写邮件时，该名称将出现在邮件标头的“签名”弹出式菜单中。</li>
<li>在右侧栏（预览）中，创建签名。</li>
</ol>
<p>这里，我们新建一个签名，并且随意输入一些文字，例如：</p>
<blockquote>
<p>This is a placeholder signature.</p>
</blockquote>
<p>关闭偏好设置然后退出 Apple Mail。</p>
<h2 id="编辑-HTML"><a href="#编辑-HTML" class="headerlink" title="编辑 HTML"></a>编辑 HTML</h2><p>创建一个 HTML 页面，例如下面这样。具体的方法不再赘述，想必如果你并没有掌握 HTML 和 CSS，也不会来阅读这篇文章。</p>
<p><img src="https://cherysunzhang.com/static/2017/01/editing-html.png" alt="使用 Sublime Text 编辑 HTML"></p>
<blockquote>
<p>需要注意的是，HTML 中不要包含 <code>&lt;html&gt;</code>、<code>&lt;/html&gt;</code> 和 <code>&lt;head&gt; … &lt;/head&gt;</code> 标签。只保留 <code>&lt;body&gt; … &lt;/body&gt;</code> 标签中的内容即可。</p>
</blockquote>
<p>如果你需要参考我所使用的 HTML，可以到 <span class="exturl" data-url="aHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vY2hlcnlzdW4vZGJjZmZmOWMwM2IxNDU2NDZiMzkyZDIxZDA3ODAwMzA=" title="https://gist.github.com/cherysun/dbcfff9c03b145646b392d21d0780030">这里<i class="fa fa-external-link"></i></span> 查看 GitHub Gist。</p>
<h2 id="修改-mailsignature-文件"><a href="#修改-mailsignature-文件" class="headerlink" title="修改 .mailsignature 文件"></a>修改 .mailsignature 文件</h2><h3 id="根据-iCloud-Drive-使用情况以定位-mailsignature-文件"><a href="#根据-iCloud-Drive-使用情况以定位-mailsignature-文件" class="headerlink" title="根据 iCloud Drive 使用情况以定位 .mailsignature 文件"></a>根据 iCloud Drive 使用情况以定位 .mailsignature 文件</h3><p>由于 Apple Mail 并不允许直接在“偏好设置”中编辑 HTML，而实际上签名却又是以 HTML 的形式存储的，所以我们需要找到存储签名的文件并且对其进行编辑，将自己编辑的 HTML 放置于其中。</p>
<p>不过，这些存储签名的文件在 Finder 中并不可见，所以我们需要使用 Terminal。而且存储签名的文件的路径也并不一定相同，这依赖于你是否打开了 iCloud Drive，使用 iCloud Drive 同步数据。（为了检查是否打开了 iCloud Drive，选取“Apple 菜单”&gt;“系统偏好设置”，点按“iCloud”，然后选择“iCloud Drive”。）</p>
<p><strong>使用 iCloud Drive 情况下的存储路径：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">~/Library/Mobile\ Documents/com~apple~mail/Data/V4/Signatures/</span><br></pre></td></tr></table></figure>
<p><strong>不使用 iCloud Drive 情况下的存储路径：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">~/Library/Mail/V4/MailData/Signatures/</span><br></pre></td></tr></table></figure>
<h3 id="使用-Terminal-定位-mailsignature-文件"><a href="#使用-Terminal-定位-mailsignature-文件" class="headerlink" title="使用 Terminal 定位 .mailsignature 文件"></a>使用 Terminal 定位 .mailsignature 文件</h3><p>打开 Terminal，在其中输入以下命令，以列出 Apple Mail 所存储的所有 .mailsignature 文件。在 Mail “偏好设置”中的所有签名，每一个签名都会被存储在该路径下的一个 .mailsignature 文件中。</p>
<p><strong>使用 iCloud Drive：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ls -laht ~/Library/Mobile\ Documents/com~apple~mail/Data/V4/Signatures/*.mailsignature</span></span><br></pre></td></tr></table></figure>
<p><strong>不使用 iCloud Drive：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ls -laht ~/Library/Mail/V4/MailData/Signatures/*.mailsignature</span></span><br></pre></td></tr></table></figure>
<p>可以看到，在示例中，我有 2 个存储签名的文件。</p>
<p><img src="https://cherysunzhang.com/static/2017/01/list-mailsignature-files-in-terminal.png" alt="使用 iCloud Drive 时通过 Terminal 定位 .mailsignature 文件"></p>
<h3 id="使用-Sublime-Text-修改-mailsignature-文件"><a href="#使用-Sublime-Text-修改-mailsignature-文件" class="headerlink" title="使用 Sublime Text 修改 .mailsignature 文件"></a>使用 Sublime Text 修改 .mailsignature 文件</h3><p>如果你习惯于使用其他文本编辑器也是没有问题的，这里我以我自己最常使用的 Sublime Text 来做说明。有关 Sublime Text 的一些使用技巧，可以参考以下的几篇文章：</p>
<blockquote>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9jaGVyeXN1bnpoYW5nLmNvbS8yMDE2LzA3L3N5bmMtc3VibGltZS10ZXh0LTMtcHJlZmVyZW5jZXMtYW5kLWluc3RhbGxlZC1wYWNrYWdlcy11c2luZy1pY2xvdWQtZHJpdmUv" title="https://cherysunzhang.com/2016/07/sync-sublime-text-3-preferences-and-installed-packages-using-icloud-drive/">使用 iCloud Drive 同步 Sublime Text 3 的偏好设置和扩展包<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9jaGVyeXN1bnpoYW5nLmNvbS8yMDE2LzA4L3N5bmNpbmctc3VibGltZS10ZXh0LTMtcHJlZmVyZW5jZXMtYW5kLWluc3RhbGxlZC1wYWNrYWdlcy11c2luZy1wYWNrYWdlLXN5bmNpbmcv" title="https://cherysunzhang.com/2016/08/syncing-sublime-text-3-preferences-and-installed-packages-using-package-syncing/">使用 Package Syncing 同步 Sublime Text 3 的偏好设置和扩展包<i class="fa fa-external-link"></i></span></li>
</ul>
</blockquote>
<p>在 Terminal 中，输入以下命令指定使用 Sublime Text 来打开 .mailsignature 文件。</p>
<p><strong>使用 iCloud Drive：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> open -a Sublime\ Text ~/Library/Mobile\ Documents/com~apple~mail/Data/V4/Signatures/*.mailsignature</span></span><br></pre></td></tr></table></figure>
<p><strong>不使用 iCloud Drive：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> open -a Sublime\ Text ~/Library/Mail/V4/MailData/Signatures/*.mailsignature</span></span><br></pre></td></tr></table></figure>
<p>打开后可以看到，前 5 行是有关该签名的元数据，不要进行修改。从第 7 行开始的 <code>&lt;body&gt; … &lt;/body&gt;</code> 即是签名内容的 HTML，这时我们只要将此前编辑的 HTML 覆盖掉原有的 HTML 即可。</p>
<p><img src="https://cherysunzhang.com/static/2017/01/changing-mailsignature-files.png" alt="使用 Sublime Text 修改 .mailsignature 文件"></p>
<blockquote>
<p>再次注意，HTML 中不要包含 <code>&lt;html&gt;</code>、<code>&lt;/html&gt;</code> 和 <code>&lt;head&gt; … &lt;/head&gt;</code> 标签。只保留 <code>&lt;body&gt; … &lt;/body&gt;</code> 标签中的内容即可。</p>
</blockquote>
<p>存储并关闭 .mailsignature 文件。</p>
<h2 id="如果不使用-iCloud-Drive，锁定-mailsignature-文件"><a href="#如果不使用-iCloud-Drive，锁定-mailsignature-文件" class="headerlink" title="如果不使用 iCloud Drive，锁定 .mailsignature 文件"></a>如果不使用 iCloud Drive，锁定 .mailsignature 文件</h2><blockquote>
<p>如果使用 iCloud Drive，请跳过该步骤。</p>
</blockquote>
<p>如果不使用 iCloud Drive，尽管此前已经存储了 .mailsignature 文件，但 Apple Mail 仍然会使用原有的签名并覆盖你对 .mailsignature 文件的修改。因此需要通过 Terminal 锁定 .mailsignature 文件以阻止写入。</p>
<p>打开 Terminal，输入以下命令锁定 .mailsignature 文件。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> chflags uchg ~/Library/Mail/V4/MailData/Signatures/*.mailsignature</span></span><br></pre></td></tr></table></figure>
<p>当需要再次编辑 .mailsignature 文件时，可以输入以下命令解除锁定 .mailsignature 文件。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> chflags nouchg ~/Library/Mail/V4/MailData/Signatures/*.mailsignature</span></span><br></pre></td></tr></table></figure>
<h2 id="测试签名"><a href="#测试签名" class="headerlink" title="测试签名"></a>测试签名</h2><p>重新打开 Apple Mail，在“偏好设置”中可以看到已经生效的 HTML 签名，只不过引用的图片暂时无法在这里显示出来。没关系，新建邮件，可以看到新的签名已经生效了。发送一封邮件试试吧。</p>
<p><img src="https://cherysunzhang.com/static/2017/01/testing-signature.png" alt="测试签名"></p>
]]></content>
      <categories>
        <category>mac</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>mail</tag>
        <tag>邮件</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue生命周期</title>
    <url>/posts/83f13096.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><img src="https://image.xuebin.me/006tNbRwly1fwsdwhuc8sj30xc2cfq75.jpg" alt="生命周期图"></p>
<a id="more"></a>
<p>这是对于 Vue 生命周期，官网给的那张图的标注图，图片网上看到的，我觉得标注地很 nice，建议一步步仔细看完图片，然后把图片自己悄悄保存下来，对照着图片的内容看第二部分的举例说明。</p>
<h1 id="啥叫-Vue-生命周期？"><a href="#啥叫-Vue-生命周期？" class="headerlink" title="啥叫 Vue 生命周期？"></a>啥叫 Vue 生命周期？</h1><p>每个 Vue 实例在被创建时都要经过一系列的初始化过程。<br>例如：从开始创建、初始化数据、编译模板、挂载 Dom、数据变化时更新 DOM、卸载等一系列过程。<br>我们称 <strong>这一系列的过程</strong> 就是 Vue 的生命周期。<br>通俗说就是 Vue 实例从创建到销毁的过程，就是生命周期。<br>同时在这个过程中也会运行一些叫做<strong>生命周期钩子</strong>的函数，这给了用户在不同阶段添加自己的代码的机会，利用各个钩子来完成我们的业务代码。</p>
<h1 id="生命周期分解"><a href="#生命周期分解" class="headerlink" title="生命周期分解"></a>生命周期分解</h1><p>对照着上图标注的内容，我们一个钩子一个钩子地举例说明。</p>
<h4 id="beforeCreate"><a href="#beforeCreate" class="headerlink" title="beforeCreate"></a>beforeCreate</h4><p>实例初始化之后、创建实例之前的执行的钩子事件。<br>如下例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span>&#123;&#123;test&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#root'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        test: <span class="string">'天王盖地虎'</span>,</span></span><br><span class="line">      &#125;,</span><br><span class="line">      beforeCreate() &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'beforeCreate钩子事件：'</span>)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.$data)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el)</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>得到的结果是：</p>
<p><img src="https://image.xuebin.me/006tNbRwly1fwsdy69pjbj307r03ct8h.jpg" alt></p>
<blockquote>
<p><strong>小总结</strong>：创建实例之前，数据观察和事件配置都没好准备好。也就是数据也没有、DOM 也没生成。</p>
</blockquote>
<h4 id="created"><a href="#created" class="headerlink" title="created"></a>created</h4><p>实例创建完成后执行的钩子<br>在上一段代码例子中，我们再来 console 一下。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span>&#123;&#123;test&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#root'</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        test: <span class="string">'天王盖地虎'</span>,</span></span><br><span class="line">      &#125;,</span><br><span class="line">      created() &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'created钩子事件：'</span>)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.$data)</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el)</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>得到的结果是：</p>
<p><img src="https://image.xuebin.me/006tNbRwly1fwsdzh7z0vj308l03gdfm.jpg" alt></p>
<blockquote>
<p><strong>小总结</strong>：实例创建完成后，我们能读取到数据 data 的值，但是 DOM 还没生成，挂载属性 el 还不存在。</p>
</blockquote>
<h4 id="beforeMount"><a href="#beforeMount" class="headerlink" title="beforeMount"></a>beforeMount</h4><p>将编译完成的 html 挂载到对应的<strong>虚拟 DOM</strong>时触发的钩子<br>此时页面并没有内容。<br>即此阶段解读为: 即将挂载<br>我们打印下此时的\$el</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">beforeMount() &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'beforeMount钩子事件：'</span>);</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.$el);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>得到的结果是：</p>
<p><img src="https://image.xuebin.me/006tNbRwly1fwse0kdwpjj309i03l0sj.jpg" alt></p>
<blockquote>
<p><strong>小总结</strong>：此时的 el 不再是 undefined,成功关联到我们指定的 dom 节点。但是此时的还没有成功渲染成 data 中的数据，页面没有内容。</p>
</blockquote>
<p><em>PS：相关的 render 函数首次被调用。</em></p>
<h4 id="mounted"><a href="#mounted" class="headerlink" title="mounted"></a>mounted</h4><p>编译好的 html 挂载到页面完成后所执行的事件钩子函数。<br>此时的阶段解读为： 挂载完毕阶段<br>我们再打印下此时\$el 看看：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">mounted() &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'mounted钩子事件：'</span>);</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.$el);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>得到的结果是：</p>
<p><img src="https://image.xuebin.me/006tNbRwly1fwse2nslrdj308703ma9w.jpg" alt></p>
<p>可见， <code></code>已经成功渲染成 data 里面 test 对应的值“天王盖地虎”了。</p>
<blockquote>
<p><strong>小总结</strong>：此时编译好的 HTML 已经挂载到了页面上，页面上已经渲染出了数据。一般会利用这个钩子函数做一些 ajax 请求获取数据进行数据初始化。</p>
</blockquote>
<p><em>PS：mounted 在整个实例中只执行一次。</em></p>
<h4 id="beforeUpdate"><a href="#beforeUpdate" class="headerlink" title="beforeUpdate"></a>beforeUpdate</h4><blockquote>
<p><strong>小总结</strong>：当修改 vue 实例的 data 时，vue 就会自动帮我们更新渲染视图，在这个过程中，vue 提供了 beforeUpdate 的钩子给我们，在检测到我们要修改数据的时候，更新渲染视图之前就会触发钩子 beforeUpdate。</p>
</blockquote>
<h4 id="updated"><a href="#updated" class="headerlink" title="updated"></a>updated</h4><blockquote>
<p><strong>小总结</strong>：此阶段为更新渲染视图之后，此时再读取视图上的内容，已经是最新的内容。</p>
</blockquote>
<p><em>PS:</em><br><em>1. 该钩子在服务器端渲染期间不被调用。</em><br><em>2. 应该避免在此期间更改状态，因为这可能会导致更新无限循环。</em></p>
<h4 id="beforeDestroy"><a href="#beforeDestroy" class="headerlink" title="beforeDestroy"></a>beforeDestroy</h4><blockquote>
<p><strong>小总结</strong>：调用实例的 destroy( )方法可以销毁当前的组件，在销毁前，会触发 beforeDestroy 钩子。</p>
</blockquote>
<h4 id="destroyed"><a href="#destroyed" class="headerlink" title="destroyed"></a>destroyed</h4><blockquote>
<p><strong>小总结</strong>：成功销毁之后，会触发 destroyed 钩子，此时该实例与其他实例的关联已经被清除，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。</p>
</blockquote>
<p>其实还有三个生命周期钩子没列出来：<code>activated</code>、<code>deactivated</code>、<code>errorCaptured</code>。</p>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>前端</tag>
        <tag>vue</tag>
        <tag>生命周期</tag>
      </tags>
  </entry>
  <entry>
    <title>【转载】要不要和领导走得太近</title>
    <url>/posts/d8b6b490.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>最近，网上有一个关于“<strong>要不要和领导走得太近</strong>”的讨论。</p>
<p>其实这个问题很简单：领导喜欢有才能的人是因为他们能够更快、更好地帮助自己实现目标。职场是理性人的集合。<strong>工作价值取决于对上级绩效的贡献高低。</strong></p>
<p>能在自然界的重大变化中生存下来的动物，<strong>往往不是最强的，而是最具适应性的。</strong>同理，职场中如鱼得水或功成名就的，<strong>未必是最有才的，却一定是最善于“向上管理”的。</strong></p>
<a id="more"></a>
<blockquote class="blockquote-center"><br>    <p>马屁精们向上管理的意识</p><br>  <p>其实值得学习</p><br></blockquote>

<p>早在 1986 年，管理学大师彼得·德鲁克就意识到了这个问题，并在著作《怎样管理上司》里进行了探讨。</p>
<p><strong>他对管理对象的理解是：“任何能影响他的绩效表现的人”。</strong></p>
<p>提起管理，印象中都是“上级管理下级”，这是组织有效率的开展活动赋予管理者的必要、合法权利。但上下级关系作为人际关系的一种，决定了其互动性的属性，而非简单的单向性。</p>
<p><strong>下级对上级同样存在“管理”行为。</strong></p>
<p>上级需要借助下级完成部门任务或目标，下级显然是管理对象。与此同时，下级也需要上级赋予的权限和分配的资源等，以完成绩效任务。所以，对下级而言，上级也是他的管理对象。</p>
<p>有人把上级对下级的管理称为<strong>“正向管理”</strong>，把下级对上级的管理称为<strong>“逆向管理”</strong>。无数历史故事及现实经验都在说明同一个道理：<strong>逆向管理做的好的人，职场中往往事半功倍，反之则举步维艰。</strong></p>
<p>各种因拍马屁而飞黄腾达的故事流传甚广，并非提倡对上谄媚殷勤，但实事求是的说，马屁精们向上管理的意识确实值得学习。</p>
<p>反观很多有才之人，或是信奉“酒香不怕巷子深”，一味默默奉献，不善于沟通表达；或是愤青气质，看领导都是白痴傻瓜，以致发生不必要的冲突，心情郁闷，职业发展停滞不前。</p>
<p>说到底，他们都是欠缺向上管理的意识，多按照自己的信念、喜好行事。<strong>做人当正直，但过于耿直却是职场大忌。</strong></p>
<blockquote class="blockquote-center">明确自己的角色定位</blockquote>

<p><strong>豆瓣上有个小案例：</strong></p>
<blockquote>
<p>“开会，我负责记录。领导浓重的地方口音我听不清楚，为了不写错别字，散会后拦住领导询问几个模糊的字音。</p>
<p>领导走后，大家纷纷说：‘太会拍马屁了。’——无意之间，我已经沦为马屁达人了。”</p>
</blockquote>
<p><strong>逆向管理建立在对上下级关系的正确认识上。</strong>案例中的情形却屡见不鲜，只要和领导走的“近”点，正常履行职责的行为也被看成“拍马屁”。基本的职场常识都没有，别说向上管理了，正向管理估计都难进行。</p>
<p><strong>为了理解上下级关系，不妨把职场看做一个游戏场。</strong></p>
<p>做游戏，不参与则罢，既参与了就要遵守共同的规则，扮演好自己的那个角色。<strong>你是谁、喜爱或厌恶什么不重要，游戏角色需要你做什么才重要。</strong></p>
<p>“下级”这个角色的游戏规则，职责之一就是服从“上级”。这种“服从”，本质上是“职位”对“职位”的服从，而非个人。因此，不管内心服不服某个具体管理者，一般说来，服从是必须的，除非你离开游戏场或转换了角色。</p>
<p>“服从”并非人格的矮化，而是组织分工、提升效率的内在要求。</p>
<blockquote class="blockquote-center">要知道你领导是怎样的人</blockquote>

<p>商场里的服装销售员，为了达成交易，会对顾客察言观色，根据其穿衣打扮、言谈举止等判断其着装风格、消费能力、需求高低，从而推销颜色、款式、价格适宜的服装，以增加成交概率。</p>
<p>向上管理的思路是一样的。简单来说，<strong>你需要知道上级是一个什么样的人，</strong>喜欢什么，厌恶什么，做事的态度、方式方法是怎样的。</p>
<p><strong>想做好逆向管理，就需要对不同类型的上司，充分了解其性格特型，</strong>然后根据需要调整自己的工作方式、方法等，以更好的适应，实现优势互补。</p>
<p><strong>DISC 人格特型模式把上级的性格分为四种：</strong></p>
<ul>
<li><p><strong>支配型 D 领导（Dominance）</strong>，行动力强、以结果为导向的性格特征。</p>
<p>其性格特征是自尊心极强，在他面前，你需要做的就是尊重他和服从他的指挥。</p>
<p>和他沟通时，须简单、直接、有问必答。</p>
</li>
<li><p><strong>影响型 I 领导（Influence）</strong>，性格温和乐观、以人为主的性格特征。</p>
<p>更喜欢影响他人而不是掌控他人，他喜欢交际和沟通，强调互动。</p>
<p>喜欢讲信用的下属。</p>
</li>
<li><p><strong>稳健型 S 领导（Steadiness）</strong>，以程序为主、做事严谨、精细的性格特征。</p>
<p>领导的性格谦逊而温和，稳定的情绪是他们明显的特点。</p>
<p>非常擅长履行职责。</p>
</li>
<li><p><strong>支持型 C 领导（Compliance）</strong>，以服从规则为主、乐于支持他人的性格特征。</p>
<p>非常喜欢规则和程序，绝对遵守纪律。</p>
</li>
</ul>
<p>如果领导善于倾听，不妨采用当面汇报、事后提交备忘录的方式；</p>
<p>领导爱读，你就先提交书面报告、再口头汇报交流。</p>
<p>领导喜欢事必躬亲，你就随时与之互动；</p>
<p>领导喜欢授权，你就大事汇报、小事自断。</p>
<blockquote class="blockquote-center"><br>  <p>管仲的一生</p><br>  <p>向上管理的范本</p><br></blockquote>

<p>历史上的能臣贤相，灿如星辰，很多能臣贤相轻则落魄退出政治舞台，重则家破人亡凄惨收场，同样是不缺才华抱负、不缺赏识机遇。</p>
<p>抱负得以施展又善终的，屈指可数，春秋时期的管仲算一个。靠的正是“向上管理”的能力。</p>
<p><strong>第一步：懂人心，要钱、要权、要亲近</strong></p>
<p>巧妇难为无米之炊。管仲上任后做的第一件事，并不是心急火燎地改革，而是在齐桓公批评他不作为时，趁机要资源。</p>
<p>他说了三句话：“贱不能临贵” 、“贫不能使富” 、“疏不能制亲”。</p>
<p>（译：“地位低的人不能统治地位高的人”、“贫穷的人不能差遣富有的人”、 “跟君主关系疏远的人不能控制跟君主关系亲近的人”。）</p>
<p>于是，齐桓公拜他为上卿，尊他为仲父，给他齐国一年的货物税。</p>
<p>有句职场鸡汤，说“有条件要上，没条件创造条件也要上。”很多工作能否完成及完成的好坏，这个“条件”至关重要。</p>
<p>孔子也说：“管仲之贤，不得此三权者，亦不能使其君南面而霸矣。”</p>
<p>（译：“管仲那么有才干，若是他得不到这三种权柄，那么也就不能使他的君主面对着南方成为诸候的领袖啦。”）</p>
<p><strong>第二步：不强为，静等齐桓公觉悟</strong></p>
<p>对齐国的发展战略，管仲和齐桓公是有共识的。但在路径选择上，俩人观点迥异。管仲主张先修内政，齐桓公年轻气盛，极力主张发展军事。</p>
<p>他不顾管仲的劝阻，先后发动了两次对宋国的战争，均以失败告终。后来鲍叔牙都坐不住了，找到管仲质问他不作为。</p>
<p>管仲说，“大王的脾气你是知道的，不撞南墙不回头，还是等他自己觉悟吧。”</p>
<p>确实如此，接连的失败没能让齐桓公反思教训，只一味归结为武力不够强大。</p>
<p>很快又有了第三次。这次倒是赢了，但在和对方签订割地协议时，被对方大臣劫持，差点丧命。</p>
<p>痛定思痛，齐桓公终于认同了管仲的战略思路，真正把治国大权交给他。</p>
<p>有了上级的完全信任，管仲才得以放开手脚，开展改革。短短几年后，齐国从一个莽撞好战的形象升级为公正、仁义又强大的天下霸主。</p>
<p>回顾一下历史上的很多“忠臣”，虽是一心为公，却不注意方式方法，并未取得君主的真正信任，又一味向前冲。<strong>冲得勇猛，死得迅速。</strong></p>
<p>同理，在现代组织中，<strong>汇报时应注意：</strong></p>
<ul>
<li>首先要让汇报的焦点和上司的目标期望保持高度的一致，必须让上司感觉到，大家是为了同一个目标而努力；</li>
<li>对汇报中所涉及到的关键人物的背景必须要有充分的了解，并在汇报中作到必要的简洁；</li>
<li>汇报时间、频率和地点的选择；尽量不要用第一人称，不要让自己的想法代替老板的想法；</li>
<li>文字上要多用动词和有说服力的关键词，突出汇报的重点。</li>
</ul>
<blockquote class="blockquote-center"><br>  <p>成就上级的过程中</p><br>  <p>成就自我的意识</p><br></blockquote>

<p><strong>谈逆向管理，不是鼓励大家阿谀奉承，而是以职业化的思维理解逆向管理，以建设性思维处理好与上级的关系。</strong></p>
<p>在帮助上级成功的过程中，更好地成就自我，是每个职场人应该思考的。</p>
<p><strong>具体来说，需要做到如下几点：</strong></p>
<ul>
<li><strong>明确目标和上级期望。</strong></li>
<li><strong>服从。</strong>上级有更宏观的视角，要为整体利益负责。局部的失败，也许能获得全局上的成功。简单讲，就是你说的未必就一定对。</li>
<li><strong>即使上级错了，也不要损害上下关系。</strong>上级即使由于专业知识的不足，做出错误判断，可以据理力争，却忌讳越俎代庖，挑战领导权威。</li>
<li><strong>服从不等于盲从。</strong>下级的产生，根本上在于老板分身乏术和并非无所不能，所以才需要通过授权和分工，以完成目标。一个善于逆向管理的下级，是上级遇到困难时，能主动提出解决方案供参考，而非“领导怎么说我就怎么干”的人。</li>
</ul>
<p>“凭风好借力，送我上青天”，善于逆向管理，让上级做你的东风。</p>
]]></content>
      <categories>
        <category>职场</category>
      </categories>
      <tags>
        <tag>转载</tag>
        <tag>职场</tag>
      </tags>
  </entry>
  <entry>
    <title>vim</title>
    <url>/posts/280100fb.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><img src="https://image.xuebin.me/006tNbRwly1fwela1w1xog30sg0k40w3.gif" alt="vim 快捷键盘图"></p>
<a id="more"></a>
<p>在 Linux 下最常使用的文本编辑器就是 vi 或者 vim 了，如果能很好掌握这个编辑器，非常有利于我们更好的在 Linux 下面进行编程开发。</p>
<h4 id="vim-和-vi"><a href="#vim-和-vi" class="headerlink" title="vim 和 vi"></a>vim 和 vi</h4><p>Vim 是从 vi 发展出来的一个文本编辑器。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。</p>
<p>简单的来说， vi 是老式的字处理器，不过功能已经很齐全了，但是还是有可以进步的地方。 vim 则可以说是程序开发者的一项很好用的工具。</p>
<h4 id="vi-vim-的工作模式"><a href="#vi-vim-的工作模式" class="headerlink" title="vi/vim 的工作模式"></a>vi/vim 的工作模式</h4><p>基本上 vi/vim 共分为三种模式，分别是命令模式（Command mode），输入模式（Insert mode）和底线命令模式（Last line mode）。 这三种模式的作用分别是：</p>
<h5 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h5><p>当使用 vi/vim 打开一个文件就进入了命令模式（也可称为一般模式），这是默认的模式。在这个模式，你可以采用『上下左右』按键来移动光标，你可以使用『删除字符』或『删除整行』来处理档案内容，也可以使用『复制、贴上』来处理你的文件数据。</p>
<h5 id="输入模式"><a href="#输入模式" class="headerlink" title="输入模式"></a>输入模式</h5><p>在命令模式并不能编辑文件，需要输入如『i, I, o, O, a, A, r,R』等任何一个字母之后才会进入输入模式（也称为编辑模式）。注意了！通常在 Linux 中，按下这些按键时，在画面的左下方会出现『 INSERT 或 REPLACE 』的字样，此时才可以进行编辑。而如果要回到命令模式时，则必须要按下『Esc』这个按键即可退出编辑模式。</p>
<h5 id="底线命令模式"><a href="#底线命令模式" class="headerlink" title="底线命令模式"></a>底线命令模式</h5><p>在命令模式下，按下『:,/,?』中任意一个，就可以将光标移动到最底下那一行，进入底线命令模式（也称为指令列命令模式）。在这个模式当中， 可以提供你『搜寻资料』的动作，而读取、存盘、大量取代字符、退出、显示行号等等的动作则是在此模式中达成的！同理，必须按下『Esc』按钮才可以退出该模式，返回命令模式</p>
<p>三种模式的切换和功能可以用下图来总结：<img src="https://image.xuebin.me/006tNbRwly1fwelct6alaj30lv0ergmi.jpg" alt="vim/vi工作模式"></p>
<h4 id="简易示例"><a href="#简易示例" class="headerlink" title="简易示例"></a>简易示例</h4><h6 id="1-使用-vim-打开文件"><a href="#1-使用-vim-打开文件" class="headerlink" title="1. 使用 vim 打开文件"></a>1. 使用 vim 打开文件</h6><p>在命令行中输入如下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vim test.txt</span></span><br></pre></td></tr></table></figure>
<p>采用 <code>vi 文件名</code> 或者 <code>vim 文件名</code> 就可以打开文件并且进入了命令模式。这里文件名是必须添加的，当文件不存在的时候，也能打开，并且进行编辑保存后就是创建一个新的文件。打开后的界面如下图所示：</p>
<p><img src="https://image.xuebin.me/006tNbRwly1fwelewv8kwj30w30cqgle.jpg" alt></p>
<p>整个界面可以分为两个部分，最底下一行和上面的部分，最底下一行主要是显示当前文件名和文件的行数、列数，上图是一个新的文件，所以最底下显示的是文件名，而且后面括号也说是新文件，而下图是一个已经有内容的文件，那么上面部分就显示文件内容，最底下一行显示了文件名，文件的行数和列数，并且在最右侧部分会显示当前坐标的位置，比如图中是显示 (4,1) 表示当前坐标在第四行第一列的位置。</p>
<p><img src="https://image.xuebin.me/006tNbRwly1fwelfwla54j30w30cqmx0.jpg" alt></p>
<h6 id="2-进入编辑模式"><a href="#2-进入编辑模式" class="headerlink" title="2. 进入编辑模式"></a>2. 进入编辑模式</h6><p>接下来就是开始对文件进行编辑，也就是需要进入编辑模式。只要按下『i, I, o, O, a, A, r,R』等字符就可以进入编辑模式了！在编辑模式当中，你可以发现在左下角状态栏中会出现 –INSERT- 的字样，那就是可以输入任意字符的提示啰！这个时候，键盘上除了 [Esc] 这个按键之外，其他的按键都可以视作为一般的输入按钮了，所以你可以进行任何的编辑！</p>
<p>如下图所示：<img src="https://image.xuebin.me/006tNbRwly1fwelgfd3wzj30w30cqglg.jpg" alt></p>
<p>注意：在 vim/vi 中 [Tab] 键是向右移动 8 个空格字符。</p>
<h6 id="3-按下-ESC-按钮回到命令模式"><a href="#3-按下-ESC-按钮回到命令模式" class="headerlink" title="3. 按下 [ESC] 按钮回到命令模式"></a>3. 按下 [ESC] 按钮回到命令模式</h6><p>如果对文件编辑完毕了，那么应该要如何退出呢？此时只需要按下 [Esc] 这个按钮即可！马上你就会发现画面左下角的 – INSERT – 不见了！并且返回了命令模式了</p>
<h6 id="4-退出"><a href="#4-退出" class="headerlink" title="4. 退出"></a>4. 退出</h6><p>最后就是存盘并离开，指令很简单，输入『:wq』即可存档离开！ (注意了，按下 : 该光标就会移动到最底下一行去！) ，如下图所示：<img src="https://image.xuebin.me/006tNbRwly1fwelgy3m4ij30w30cqweb.jpg" alt></p>
<h4 id="更多按键说明"><a href="#更多按键说明" class="headerlink" title="更多按键说明"></a>更多按键说明</h4><p>上述简易示例只是使用了简单的几个按键，但是从 vim 快捷键图可以知道 vim 是有很多快捷键的。</p>
<h5 id="移动光标的方法"><a href="#移动光标的方法" class="headerlink" title="移动光标的方法"></a>移动光标的方法</h5><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>h 或 向左方向鍵(←)</td>
<td>光标向左移动一个字符</td>
</tr>
<tr>
<td>j 或 向下方向鍵(↓)</td>
<td>光标向下移动一个字符</td>
</tr>
<tr>
<td>k 或 向上方向鍵(↑)</td>
<td>光标向上移动一个字符</td>
</tr>
<tr>
<td>l 或 向右方向鍵(→)</td>
<td>光标向右移动一个字符</td>
</tr>
</tbody>
</table>
<p>如果你将右手放在键盘上的话，你会发现 hjkl 是排列在一起的，因此可以使用这四个按钮来移动光标。 如果想要进行多次移动的话，例如向下移动 30 行，可以使用 “30j”或 “30↓” 的组合按键， 亦即加上想要进行的次数(数字)后，按下动作即可！</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>[Ctrl] + [f]</td>
<td>屏幕『向下』移动一页，相当于 [Page Down]按键</td>
</tr>
<tr>
<td>[Ctrl] + [b]</td>
<td>屏幕『向上』移动一页，相当于 [Page Up]按键</td>
</tr>
<tr>
<td>[Ctrl] + [d]</td>
<td>向下滚动（移动半页）</td>
</tr>
<tr>
<td>[Ctrl] + [u]</td>
<td>向上滚动（移动半页）</td>
</tr>
<tr>
<td>+</td>
<td>光标移动到非空格符的下一行</td>
</tr>
<tr>
<td>-</td>
<td>光标移动到非空格符的上一行</td>
</tr>
<tr>
<td>n</td>
<td>向右移动 n 个字符，n 是数量</td>
</tr>
<tr>
<td>0 或功能鍵[Home]</td>
<td>数字 0，移动到当前行最前面字符处</td>
</tr>
<tr>
<td>\$ 或功能鍵[End]</td>
<td>移动到这一行的最后字符处</td>
</tr>
<tr>
<td>H</td>
<td>光标移动到这个屏幕最上方一行的第一个字符处</td>
</tr>
<tr>
<td>M</td>
<td>光标移动到这个屏幕中央一行的第一个字符处</td>
</tr>
<tr>
<td>L</td>
<td>光标移动到这个屏幕最下方一行的第一个字符处</td>
</tr>
<tr>
<td>G</td>
<td>移动到这个档案的最后一行</td>
</tr>
<tr>
<td>nG</td>
<td>移动到这个档案的第 n 行，n 是数字（可配合 :set nu)</td>
</tr>
<tr>
<td>gg</td>
<td>移动到这个档案的第一行，效果等同于 1G 啊！</td>
</tr>
<tr>
<td>n</td>
<td>向下移动 n 行</td>
</tr>
</tbody>
</table>
<h5 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h5><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>/word</td>
<td>向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird 这个字符串，就输入 /vbird 即可！</td>
</tr>
<tr>
<td>?word</td>
<td>向光标之上寻找一个字符串名称为 word 的字符串。</td>
</tr>
<tr>
<td>n</td>
<td>重复前一个搜寻的动作。</td>
</tr>
<tr>
<td>N</td>
<td>与 n 刚好相反，为『反向』进行前一个搜寻动作。</td>
</tr>
</tbody>
</table>
<p>使用 /word 配合 n 及 N 是非常有帮助的！可以让你重复的找到一些你搜寻的关键词！</p>
<h5 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h5><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>:n1,n2s/word1/word2/g</td>
<td>在第 n1 与 n2 行之间寻找 word1 这个字符串，并将该字符串取代为 word2 ！</td>
</tr>
<tr>
<td>:1,\$s/word1/word2/g</td>
<td>从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2</td>
</tr>
<tr>
<td>:1,\$s/word1/word2/gc</td>
<td>从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！且在取代前显示提示字符给用户确认 (confirm) 是否需要取代</td>
</tr>
</tbody>
</table>
<h5 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h5><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>x, X</td>
<td>在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符(相当于 [backspace] 亦即是退格键)</td>
</tr>
<tr>
<td>nx</td>
<td>连续向后删除 n 个字符。</td>
</tr>
<tr>
<td>dd</td>
<td>删除游标所在的那一整行</td>
</tr>
<tr>
<td>ndd</td>
<td>删除光标所在的向下 n 行</td>
</tr>
<tr>
<td>d1G</td>
<td>删除光标所在到第一行的所有数据</td>
</tr>
<tr>
<td>dG</td>
<td>删除光标所在到最后一行的所有数据</td>
</tr>
<tr>
<td>d\$</td>
<td>删除游标所在处，到该行的最后一个字符</td>
</tr>
<tr>
<td>d0</td>
<td>删除游标所在处，到该行的最前面一个字符</td>
</tr>
</tbody>
</table>
<h5 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h5><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>yy</td>
<td>复制游标所在的那一行</td>
</tr>
<tr>
<td>nyy</td>
<td>复制光标所在的向下 n 行</td>
</tr>
<tr>
<td>y1G</td>
<td>复制游标所在行到第一行的所有数据</td>
</tr>
<tr>
<td>yG</td>
<td>复制游标所在行到最后一行的所有数据</td>
</tr>
<tr>
<td>y0</td>
<td>复制光标所在的那个字符到该行行首的所有数据</td>
</tr>
<tr>
<td>y\$</td>
<td>复制光标所在的那个字符到该行行尾的所有数据</td>
</tr>
</tbody>
</table>
<h5 id="粘贴"><a href="#粘贴" class="headerlink" title="粘贴"></a>粘贴</h5><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>p, P</td>
<td>p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！</td>
</tr>
<tr>
<td>J</td>
<td>将光标所在行与下一行的数据结合成同一行</td>
</tr>
</tbody>
</table>
<h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>c</td>
<td>重复删除多个数据，任意方向，并且进入编辑模式</td>
</tr>
<tr>
<td>u</td>
<td>复原前一个动作。(常用)</td>
</tr>
<tr>
<td>[Ctrl]+r</td>
<td>重做上一个动作。(常用)</td>
</tr>
</tbody>
</table>
<p>这个 u 与 [Ctrl]+r 是很常用的指令！一个是复原，另一个则是重做一次～ 利用这两个功能按键，你的编辑，嘿嘿！很快乐的啦！</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>.</td>
<td>重复前一个动作，比如重复删除、重复贴上等等动作，按下小数点『.』</td>
</tr>
</tbody>
</table>
<h5 id="编辑模式"><a href="#编辑模式" class="headerlink" title="编辑模式"></a>编辑模式</h5><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>i, I</td>
<td>进入输入模式(Insert mode)： i 为『从目前光标所在处输入』， I 为『在目前所在行的第一个非空格符处开始输入』</td>
</tr>
<tr>
<td>a, A</td>
<td>进入输入模式(Insert mode)： a 为『从目前光标所在的下一个字符处开始输入』， A 为『从光标所在行的最后一个字符处开始输入』</td>
</tr>
<tr>
<td>o, O</td>
<td>进入输入模式(Insert mode)： 这是英文字母 o 的大小写。o 为『在目前光标所在的下一行处输入新的一行』； O 为在目前光标所在处的上一行输入新的一行</td>
</tr>
<tr>
<td>r, R</td>
<td>进入取代模式(Replace mode)： r 只会取代光标所在的那一个字符一次；R 会一直取代光标所在的文字，直到按下 ESC 为止</td>
</tr>
</tbody>
</table>
<p>上面这些按键中，在 vi 画面的左下角处会出现『–INSERT–』或『–REPLACE–』的字样。 由名称就知道该动作了吧！！特别注意的是，我们上面也提过了，你想要在档案里面输入字符时， 一定要在左下角处看到 INSERT 或 REPLACE 才能输入喔！</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>[Esc]</td>
<td>退出编辑模式，回到一般模式中</td>
</tr>
</tbody>
</table>
<h5 id="底线命令模式-1"><a href="#底线命令模式-1" class="headerlink" title="底线命令模式"></a>底线命令模式</h5><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>:w</td>
<td>将编辑的数据写入硬盘档案中</td>
</tr>
<tr>
<td>:w!</td>
<td>若文件属性为『只读』时，强制写入该档案。不过，到底能不能写入， 还是跟你对该档案的档案权限有关啊！</td>
</tr>
<tr>
<td>:q</td>
<td>离开</td>
</tr>
<tr>
<td>:q!</td>
<td>若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。</td>
</tr>
</tbody>
</table>
<p>注意一下啊，那个惊叹号 (!) 在 vi/vim 当中，常常具有『强制』的意思～</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>:wq</td>
<td>储存后离开，若为 :wq! 则为强制储存后离开</td>
</tr>
<tr>
<td>ZZ</td>
<td>这是大写的 Z 喔！若档案没有更动，则不储存离开，若档案已经被更动过，则储存后离开！</td>
</tr>
<tr>
<td>:w [filename]</td>
<td>将编辑的数据储存成另一个档案（类似另存新档）</td>
</tr>
<tr>
<td>:r [filename]</td>
<td>在编辑的数据中，读入另一个档案的数据。亦即将 『filename』 这个档案内容加到游标所在行后面</td>
</tr>
<tr>
<td>:n1,n2 w [filename]</td>
<td>将 n1 到 n2 的内容储存成 filename 这个档案。</td>
</tr>
<tr>
<td>:! command</td>
<td>暂时离开 vi 到指令行模式下执行 command 的显示结果！例如『:! ls /home』即可在 vi/vim 当中察看/home 底下以 ls 输出的档案信息！</td>
</tr>
</tbody>
</table>
<h5 id="vim-vi-环境改变"><a href="#vim-vi-环境改变" class="headerlink" title="vim/vi 环境改变"></a>vim/vi 环境改变</h5><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>:set nu</td>
<td>显示行号，设定之后，会在每一行的前缀显示该行的行号</td>
</tr>
<tr>
<td>:set nonu</td>
<td>与 set nu 相反，为取消行号！</td>
</tr>
<tr>
<td>:set tabstop=n</td>
<td>设置 Tab 键间隔的空格符数量</td>
</tr>
</tbody>
</table>
<p>vim 更多快捷键可以如下思维导图所示：<img src="https://image.xuebin.me/006tNbRwly1fwelmlqpvij31kw1d51ky.jpg" alt></p>
<h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><p>题目是来自<span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5pbS8/dGFyZ2V0PWh0dHAlM0ElMkYlMkZjbi5saW51eC52YmlyZC5vcmclMkZsaW51eF9iYXNpYyUyRjAzMTB2aS5waHA=" title="https://link.juejin.im/?target=http%3A%2F%2Fcn.linux.vbird.org%2Flinux_basic%2F0310vi.php">vim 程序编辑器<i class="fa fa-external-link"></i></span>的练习，如下所示，使用的操作文件 man_db.conf 可以在 <span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5pbS8/dGFyZ2V0PWh0dHAlM0ElMkYlMkZsaW51eC52YmlyZC5vcmclMkZsaW51eF9iYXNpYyUyRjAzMTB2aSUyRm1hbl9kYi5jb25m" title="https://link.juejin.im/?target=http%3A%2F%2Flinux.vbird.org%2Flinux_basic%2F0310vi%2Fman_db.conf">linux.vbird.org/linux_basic…<i class="fa fa-external-link"></i></span> 处获取。</p>
<blockquote>
<ol>
<li>請在 /tmp 這個目錄下建立一個名為 vitest 的目錄；</li>
<li>進入 vitest 這個目錄當中；</li>
<li>將 /etc/man_db.conf 複製到本目錄底下(或由上述的連結下載 man_db.conf 檔案)；</li>
<li>使用 vi 開啟本目錄下的 man_db.conf 這個檔案；</li>
<li>在 vi 中設定一下行號；</li>
<li>移動到第 43 列，向右移動 59 個字元，請問你看到的小括號內是哪個文字？</li>
<li>移動到第一列，並且向下搜尋一下『 gzip 』這個字串，請問他在第幾列？</li>
<li>接著下來，我要將 29 到 41 列之間的『小寫 man 字串』改為『大寫 MAN 字串』，並且一個一個挑選是否需要修改，如何下達指令？如果在挑選過程中一直按『y』， 結果會在最後一列出現改變了幾個 man 呢？</li>
<li>修改完之後，突然反悔了，要全部復原，有哪些方法？</li>
<li>我要複製 66 到 71 這 6 列的內容(含有 MANDB_MAP)，並且貼到最後一列之後；</li>
<li>113 到 128 列之間的開頭為 # 符號的註解資料我不要了，要如何刪除？</li>
<li>將這個檔案另存成一個 man.test.config 的檔名；</li>
<li>去到第 25 列，並且刪除 15 個字元，結果出現的第一個單字是什麼？</li>
<li>在第一列新增一列，該列內容輸入『I am a student…』；</li>
<li>儲存後離開吧！</li>
</ol>
</blockquote>
<p>那么，整体步骤应该如下所示：</p>
<blockquote>
<ol>
<li>mkdir vitest</li>
<li>cd vitest</li>
<li>mv /etc/man_db.conf .</li>
<li>vi man_db.conf</li>
<li>:set nu</li>
<li>43G -&gt; 59l -&gt;括号内是 as 这个单词</li>
<li>gg 或 1G -&gt; /gzip -&gt; 在第 93 列</li>
<li>输入命令 [:29,41s/man/MAN/gc] -&gt; 然后一直点击 y ，总共需要替换 13 个</li>
<li>一直按 u 键即可复原；更加简单粗暴的就是强制退出，也就是输入 :q!</li>
<li>66G 跳到 66 行 -&gt; 6yy 复制 6 行内容(输入后，屏幕最后一行会显示 6 lines yanked) -&gt; G 跳到最后一行，输入 p 复制到最后一行的后面</li>
<li>113G 跳到 113 行 -&gt; 总共需要删除 16 行内容，所以输入 16dd，删除后光标所在行开头就是 ‘#Flags’</li>
<li>输入 [:w man.test.config] 实现保存操作，接着可以输入 [:! ls -l]，即显示查看当前文件夹内文件内容的命令 ls -l 显示的内容在 vim 内，再次按下回车键即回到 vim 命令模式</li>
<li>输入 25G 到 25 行 -&gt; 15x 删除 15 个字符，然后显示的是 tree</li>
<li>gg / 1G 到 第一行 -&gt; O 在上方新增一行，然后输入 『I am a student…』-&gt; Esc 键返回命令模式</li>
<li>[:wq] 或者 ZZ 保存离开文件</li>
</ol>
</blockquote>
<p>本文参考文章如下：</p>
<ul>
<li>vim 程序编辑器(<span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5pbS8/dGFyZ2V0PWh0dHAlM0ElMkYlMkZjbi5saW51eC52YmlyZC5vcmclMkZsaW51eF9iYXNpYyUyRjAzMTB2aS5waHA=" title="https://link.juejin.im/?target=http%3A%2F%2Fcn.linux.vbird.org%2Flinux_basic%2F0310vi.php">cn.linux.vbird.org/linux_basic…<i class="fa fa-external-link"></i></span>)</li>
<li>Linux vi/vim(<span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5pbS8/dGFyZ2V0PWh0dHAlM0ElMkYlMkZ3d3cucnVub29iLmNvbSUyRmxpbnV4JTJGbGludXgtdmltLmh0bWw=" title="https://link.juejin.im/?target=http%3A%2F%2Fwww.runoob.com%2Flinux%2Flinux-vim.html">www.runoob.com/linux/linux…<i class="fa fa-external-link"></i></span>)</li>
</ul>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>工具</tag>
        <tag>vim</tag>
        <tag>vi</tag>
      </tags>
  </entry>
  <entry>
    <title>HomeBrew - Mac OS 包管理和软件管理工具</title>
    <url>/posts/bd8b7277.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Mac OS因为是Unix-like系统，可以使用很多Linux下的开源工具，但它不像linux有yum/apt，node和python语言有npm/pip来管理自己的软件包依赖，所以就有了<span class="exturl" data-url="aHR0cHM6Ly9icmV3LnNoL2luZGV4X3poLWNu" title="https://brew.sh/index_zh-cn">HomeBrew<i class="fa fa-external-link"></i></span>。</p>
<p>官网这样描述自己：<span class="exturl" data-url="aHR0cHM6Ly9icmV3LnNoL2luZGV4X3poLWNu" title="https://brew.sh/index_zh-cn">HomeBrew<i class="fa fa-external-link"></i></span>能安装Apple没有预装，但你需要的东西。</p>
<p>Home既可以用brew命令安装nginx/regid/mysql等开发者工具。</p>
<a id="more"></a>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装HomeBrew</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> /usr/bin/ruby -e <span class="string">"<span class="variable">$(curl -fsSL [https://raw.githubusercontent.com/Homebrew/install/master/install](https://raw.githubusercontent.com/Homebrew/install/master/install)</span>)"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 搜索 Nginx</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> brew search nginx</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装 Nginx</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> brew install nginx</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除 Nginx</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> brew uninstall nginx</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新 Nginx</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> brew update nginx</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新 Homebrew 自己，并且使得接下来的两个操作有意义</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> brew update</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查过时，列出所有安装的软件里可以升级的那些 </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> brew outdated</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 升级 所有可以升级的软件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> brew upgrade</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 清理 清理不需要的版本极其安装包缓存</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> brew cleanup</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新并清理所有brew安装包</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> brew update; brew upgrade; brew cleanup;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">####################################################################</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查已安装，但命令无法执行的软件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> brew doctor</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> brew dr</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 建立环境链接，避免手动配环境变量。</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> brew link nginx</span></span><br></pre></td></tr></table></figure>
<h2 id="HomeBrew-Cask"><a href="#HomeBrew-Cask" class="headerlink" title="HomeBrew - Cask"></a>HomeBrew - Cask</h2><p>Cask是HomeBrew的一个扩展（已内置），解决brew命令不能安装Mac App的问题，可以一行命令实现软件的的安装，优化/简单/快速。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装cask</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> brew tap caskroom/cask <span class="comment"># 一般不需要单独执行，cask默认会和brew一同安装</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 搜索 QQ</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> brew cask search qq <span class="comment"># 该命令已废弃，可直接使用 brew search qq 搜索</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装 QQ</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> brew cask install qq</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 卸载 QQ</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> brew cask uninstall qq </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看 迅雷 应用的信息</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> brew cask info thunder</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看已安装软件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ls /usr/<span class="built_in">local</span>/Caskroom</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> brew cask list</span></span><br></pre></td></tr></table></figure>
<h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><p>有高级需求，如没有自己想要的软件、软件版本，想自定义软件源，请看这个。<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmJyZXcuc2gv" title="https://docs.brew.sh/">https://docs.brew.sh/<i class="fa fa-external-link"></i></span></p>
<h2 id="官网及参考"><a href="#官网及参考" class="headerlink" title="官网及参考"></a>官网及参考</h2><p>homebrew： <span class="exturl" data-url="aHR0cHM6Ly9icmV3LnNoLw==" title="https://brew.sh/">https://brew.sh/<i class="fa fa-external-link"></i></span></p>
<p>cask: <span class="exturl" data-url="aHR0cDovL2Nhc2tyb29tLmdpdGh1Yi5pby8=" title="http://caskroom.github.io/">http://caskroom.github.io/<i class="fa fa-external-link"></i></span></p>
<p>cakebrew: <span class="exturl" data-url="aHR0cHM6Ly93d3cuY2FrZWJyZXcuY29tLw==" title="https://www.cakebrew.com/">https://www.cakebrew.com/<i class="fa fa-external-link"></i></span></p>
<p>launchrocket: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ppbWJvanNiL2xhdW5jaHJvY2tldA==" title="https://github.com/jimbojsb/launchrocket">https://github.com/jimbojsb/launchrocket<i class="fa fa-external-link"></i></span></p>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h4 id="新系统版本，link失败"><a href="#新系统版本，link失败" class="headerlink" title="新系统版本，link失败"></a>新系统版本，link失败</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 如果没有那个目录，先创建目录，有则直接第二步</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo mkdir DIR_PATH</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 更改权限</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo chown -R $(whoami):admin DIR_PATH</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查未链接的程序并链接</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> brew doctor</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> brew link PKG_NAME</span></span><br></pre></td></tr></table></figure>
<h2 id="推荐：可视化管理工具"><a href="#推荐：可视化管理工具" class="headerlink" title="推荐：可视化管理工具"></a>推荐：可视化管理工具</h2><h4 id="CakeBrew"><a href="#CakeBrew" class="headerlink" title="CakeBrew"></a>CakeBrew</h4><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY2FrZWJyZXcuY29tLw==" title="https://www.cakebrew.com/">https://www.cakebrew.com/<i class="fa fa-external-link"></i></span></p>
<p>这是一个HomeBrew的可视化的管理工具，新手友好，清晰、明了、便于管理。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> brew cask install cakebrew</span></span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2019/06/29/5d1723781b20028395.png" alt="cakebrew"></p>
<h4 id="launchrocket"><a href="#launchrocket" class="headerlink" title="launchrocket"></a>launchrocket</h4><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ppbWJvanNiL2xhdW5jaHJvY2tldA==" title="https://github.com/jimbojsb/launchrocket">https://github.com/jimbojsb/launchrocket<i class="fa fa-external-link"></i></span></p>
<p>可视化管理服务的关闭启动。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> brew cask install launchrocket</span></span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2019/06/29/5d17238a0fc1b28863.png" alt="launchrocket"></p>
]]></content>
      <categories>
        <category>mac</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>Homebrew</tag>
        <tag>brew</tag>
        <tag>包管理</tag>
      </tags>
  </entry>
  <entry>
    <title>brew link</title>
    <url>/posts/63691cb3.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><ul>
<li><p><code>brew doctor</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew dr</span><br></pre></td></tr></table></figure>
<p>This will give you the:<br>‘Warning: You have unlinked kegs in your Cellar…’<br>message</p>
<p>underneath this message it will prompt which kegs are there with the potential problem. My personal warning was:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Warning: You have unlinked kegs in your Cellar Leaving kegs unlinked can lead to build-trouble and cause brews that depend on those kegs to fail to run properly once built. Run `brew link` on these:</span><br><span class="line">	mongodb</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>brew link</code></p>
<p>read your options, so you understand what is happening with this command.</p>
</li>
</ul>
<a id="more"></a>
<ul>
<li><p><code>brew link --dry-run &lt;yourArgument&gt;</code></p>
<p>Homebrew will list all files which would be linked or which would be deleted by brew link –overwrite, but will not actually link or delete any files.</p>
</li>
<li><p><code>brew link --overwrite &lt;yourArgument&gt;</code></p>
<p>This will execute what the dry-run did, for real this time.</p>
<p>My experience with this was:<br><em>cli cmnd:brew link –overwrite mongodb</em><br><em>cli response: Linking /usr/local/Cellar/mongodb/3.2.7… 0 symlinks created</em></p>
</li>
<li><p><code>brew doctor</code> Finally I ran this command and my response no longer had issues.</p>
<p><em>cli response: Your system is ready to brew.</em></p>
</li>
</ul>
]]></content>
      <categories>
        <category>mac</category>
      </categories>
      <tags>
        <tag>error</tag>
        <tag>mac</tag>
        <tag>Homebrew</tag>
        <tag>brew</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac升级Mojave后使用出现xcrun：error错误</title>
    <url>/posts/4d823baf.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="错误信息"><a href="#错误信息" class="headerlink" title="错误信息"></a>错误信息</h1><p>使用 Homebrew 时发现出错了，提示:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Updating Homebrew...</span><br><span class="line">==&gt; Homebrew has enabled anonymous aggregate formulae and cask analytics.</span><br><span class="line">Read the analytics documentation (and how to opt-out) here:</span><br><span class="line">  https://docs.brew.sh/Analytics</span><br><span class="line"></span><br><span class="line">xcrun: error: invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun</span><br><span class="line">Error: Failure <span class="keyword">while</span> executing; `git config --<span class="built_in">local</span> --replace-all homebrew.analyticsmessage <span class="literal">true</span>` exited with 1.</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>可能原因：mac 系统升级后，自动卸载 xcode-select，引起 Git 不能正常工作引起的。</p>
<p>解决方法就是：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo xcode-select --install</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9hcHBsZS5zdGFja2V4Y2hhbmdlLmNvbS9xdWVzdGlvbnMvMjA5NjI0L2hvdy10by1maXgtaG9tZWJyZXctZXJyb3ItaW52YWxpZC1hY3RpdmUtZGV2ZWxvcGVyLXBhdGgtYWZ0ZXItdXBncmFkZS10by1vcy14" title="https://apple.stackexchange.com/questions/209624/how-to-fix-homebrew-error-invalid-active-developer-path-after-upgrade-to-os-x">How to fix homebrew error: “invalid active developer path” after upgrade to OS X El Capitan?<i class="fa fa-external-link"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>mac</category>
      </categories>
      <tags>
        <tag>error</tag>
        <tag>mac</tag>
        <tag>Homebrew</tag>
        <tag>brew</tag>
      </tags>
  </entry>
  <entry>
    <title>【转载】如何实现前端录音功能</title>
    <url>/posts/2368f26a.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote class="blockquote-center">转载至: <span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YjhiZjdlM2U1MWQ0NTM4YzIxMGM2YjA=" title="https://juejin.im/post/5b8bf7e3e51d4538c210c6b0">https://juejin.im/post/5b8bf7e3e51d4538c210c6b0<i class="fa fa-external-link"></i></span></blockquote>

<p>前端实现录音有两种方式，一种是使用<span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5pbS8/dGFyZ2V0PWh0dHBzJTNBJTJGJTJGZGV2ZWxvcGVyLm1vemlsbGEub3JnJTJGemgtQ04lMkZkb2NzJTJGV2ViJTJGQVBJJTJGTWVkaWFSZWNvcmRlcg==" title="https://link.juejin.im/?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FAPI%2FMediaRecorder">MediaRecorder<i class="fa fa-external-link"></i></span>，另一种是使用 WebRTC 的 getUserMedia 结合 AudioContext，MediaRecorder 出现得比较早，只不过 Safari/Edge 等浏览器一直没有实现，所以兼容性不是很好，而 WebRTC 已经得到了所有主流浏览器的支持，如 Safari 11 起就支持了。所以我们用 WebRTC 的方式进行录制。</p>
<p>利用 AudioContext 播放声音的使用，我已经在《<span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5pbS8/dGFyZ2V0PWh0dHBzJTNBJTJGJTJGZmVkLnJlbnJlbi5jb20lMkYyMDE4JTJGMDUlMkYxMyUyRmF1ZGlvLWF1dG8tcGxheSUyRg==" title="https://link.juejin.im/?target=https%3A%2F%2Ffed.renren.com%2F2018%2F05%2F13%2Faudio-auto-play%2F">Chrome 66 禁止声音自动播放之后<i class="fa fa-external-link"></i></span>》做过介绍，本篇我们会继续用到 AudioContext 的 API.</p>
<p>为实现录音功能，我们先从播放本地文件音乐说起，因为有些 API 是通用的。</p>
<a id="more"></a>
<h2 id="1-播放本地音频文件实现"><a href="#1-播放本地音频文件实现" class="headerlink" title="1. 播放本地音频文件实现"></a>1. 播放本地音频文件实现</h2><p>播放音频可以使用 audio 标签，也可以使用 AudioContext，audio 标签需要一个 url，它可以是一个远程的 http 协议的 url，也可以是一个本地的 blob 协议的 url，怎么创建一个本地的 url 呢？</p>
<p>使用以下 html 做为说明：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;file&quot; onchange=&quot;playMusic.call(this)&quot; class=&quot;select-file&quot;&gt;</span><br><span class="line">&lt;audio class=&quot;audio-node&quot; autoplay&gt;&lt;/audio&gt;复制代码</span><br></pre></td></tr></table></figure>
<p>提供一个 file input 上传控件让用户选择本地的文件和一个 audio 标签准备来播放。当用户选择文件后会触发 onchange 事件，在 onchange 回调里面就可以拿到文件的内容，如下代码所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function playMusic () &#123;</span><br><span class="line">    if (!this.value) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    let fileReader = new FileReader();</span><br><span class="line">    let file = this.files[0];</span><br><span class="line">    fileReader.onload = function () &#123;</span><br><span class="line">        let arrayBuffer = this.result;</span><br><span class="line">        console.log(arrayBuffer);</span><br><span class="line">    &#125;</span><br><span class="line">    fileReader.readAsArrayBuffer(this.files[0]);</span><br><span class="line">&#125;复制代码</span><br></pre></td></tr></table></figure>
<p>这里使用一个 FileReader 读取文件，读取为 ArrayBuffer 即原始的二进制内容，把它打印如下所示：</p>
<p><img src="https://image.xuebin.me/006tNbRwly1fuw4dq0199j30m405a74d.jpg" alt="img"></p>
<p>可以用这个 ArrayBuffer 实例化一个 Uint8Array 就能读取它里面的内容，Uint8Array 数组里面的每个元素都是一个无符号整型 8 位数字，即 0 ~ 255，相当于每 1 个字节的 0101 内容就读取为一个整数。更多讨论可以见这篇《<span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5pbS8/dGFyZ2V0PWh0dHBzJTNBJTJGJTJGZmVkLnJlbnJlbi5jb20lMkYyMDE3JTJGMTElMkYyNSUyRmxvY2FsLWZpbGUtbWFuYWdlLXVwbG9hZCUyRg==" title="https://link.juejin.im/?target=https%3A%2F%2Ffed.renren.com%2F2017%2F11%2F25%2Flocal-file-manage-upload%2F">前端本地文件操作与上传<i class="fa fa-external-link"></i></span>》。</p>
<p>这个 arrayBuffer 可以转成一个 blob，然后用这个 blob 生成一个 url，如下代码所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fileReader.onload = function () &#123;</span><br><span class="line">    let arrayBuffer = this.result;</span><br><span class="line">    // 转成一个blob</span><br><span class="line">    let blob = new Blob([new Int8Array(this.result)]);</span><br><span class="line">    // 生成一个本地的blob url</span><br><span class="line">    let blobUrl = URL.createObjectURL(blob);</span><br><span class="line">    console.log(blobUrl);</span><br><span class="line">    // 给audio标签的src属性</span><br><span class="line">    document.querySelector(&apos;.audio-node&apos;).src = blobUrl;</span><br><span class="line">&#125;复制代码</span><br></pre></td></tr></table></figure>
<p>主要利用 URL.createObjectURL 这个 API 生成一个 blob 的 url，这个 url 打印出来是这样的：</p>
<blockquote>
<p>blob:null/c2df9f4d-a19d-4016-9fb6-b4899bac630d</p>
</blockquote>
<p>然后丢给 audio 标签就能播放了，作用相当于一个远程的 http 的 url.</p>
<p>在使用 ArrayBuffer 生成 blob 对象的时候可以指定文件类型或者叫 mime 类型，如下代码所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let blob = new Blob([new Int8Array(this.result)], &#123;</span><br><span class="line">    type: &apos;audio/mp3&apos; // files[0].type</span><br><span class="line">&#125;);复制代码</span><br></pre></td></tr></table></figure>
<p>这个 mime 可以通过 file input 的 files[0].type 得到，而 files[0]是一个 File 实例，File 有 mime 类型，而 Blob 也有，因为 File 是继承于 Blob 的，两者是同根的。所以在上面实现代码里面其实不需要读取为 ArrayBuffer 然后再封装成一个 Blob，直接使用 File 就行了，如下代码所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function playMusic () &#123;</span><br><span class="line">    if (!this.value) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    // 直接使用File对象生成blob url</span><br><span class="line">    let blobUrl = URL.createObjectURL(this.files[0]);</span><br><span class="line">    document.querySelector(&apos;.audio-node&apos;).src = blobUrl;</span><br><span class="line">&#125;复制代码</span><br></pre></td></tr></table></figure>
<p>而使用 AudioContext 需要拿到文件的内容，然后手动进行音频解码才能播放。</p>
<h2 id="2-AudioContext-的模型"><a href="#2-AudioContext-的模型" class="headerlink" title="2. AudioContext 的模型"></a>2. AudioContext 的模型</h2><p>使用 AudioContext 怎么播放声音呢，我们来分析一下它的模型，如下图所示：</p>
<p><img src="https://image.xuebin.me/006tNbRwly1fuw4e4js69j31kw0pkq3t.jpg" alt="img"></p>
<p>我们拿到一个 ArrayBuffer 之后，使用 AudioContext 的 decodeAudioData 进行解码，生成一个 AudioBuffer 实例，把它做为 AudioBufferSourceNode 对象的 buffer 属性，这个 Node 继承于 AudioNode，它还有 connect 和 start 两个方法，start 是开始播放，而在开始播放之前，需要调一下 connect，把这个 Node 连结到 audioContext.destination 即扬声器设备。代码如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function play (arrayBuffer) &#123;</span><br><span class="line">    // Safari需要使用webkit前缀</span><br><span class="line">    let AudioContext = window.AudioContext || window.webkitAudioContext,</span><br><span class="line">        audioContext = new AudioContext();</span><br><span class="line">    // 创建一个AudioBufferSourceNode对象，使用AudioContext的工厂函数创建</span><br><span class="line">    let audioNode = audioContext.createBufferSource();</span><br><span class="line">    // 解码音频，可以使用Promise，但是较老的Safari需要使用回调</span><br><span class="line">    audioContext.decodeAudioData(arrayBuffer, function (audioBuffer) &#123;</span><br><span class="line">        console.log(audioBuffer);</span><br><span class="line">        audioNode.buffer = audioBuffer;</span><br><span class="line">        audioNode.connect(audioContext.destination);</span><br><span class="line">        // 从0s开始播放</span><br><span class="line">        audioNode.start(0);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">fileReader.onload = function () &#123;</span><br><span class="line">    let arrayBuffer = this.result;</span><br><span class="line">    play(arrayBuffer);</span><br><span class="line">&#125;复制代码</span><br></pre></td></tr></table></figure>
<p>把解码后的 audioBuffer 打印出来，如下图所示：</p>
<p><img src="https://image.xuebin.me/006tNbRwly1fuw4ecseocj30jy07k74i.jpg" alt="img"></p>
<p>他有几个对开发人员可见的属性，包括音频时长，声道数量和采样率。从打印的结果可以知道播放的音频是 2 声道，采样率为 44.1k Hz，时长为 196.8s。关于声音这些属性的意义可见《<span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5pbS8/dGFyZ2V0PWh0dHBzJTNBJTJGJTJGd3d3LnlpbmNoZW5nbGkuY29tJTJGMjAxOCUyRjA3JTJGMDglMkZjaHJvbWUtbWVkaWEtc3RyZWFtJTJG" title="https://link.juejin.im/?target=https%3A%2F%2Fwww.yinchengli.com%2F2018%2F07%2F08%2Fchrome-media-stream%2F">从 Chrome 源码看 audio/video 流媒体实现一<i class="fa fa-external-link"></i></span>》.</p>
<p>从上面的代码可以看到，利用 AudioContext 处理声音有一个很重要的枢纽元素 AudioNode，上面使用的是 AudioBufferSourceNode，它的数据来源于一个解码好的完整的 buffer。其它继承于 AudioNode 的还有 GainNode：用于设置音量、BiquadFilterNode：用于滤波、ScriptProcessorNode：提供了一个 onaudioprocess 的回调让你分析处理音频数据、MediaStreamAudioSourceNode：用于连接麦克风设备，等等。这些结点可以用装饰者模式，一层层 connect，如上面代码使用到的 bufferSourceNode 可以先 connect 到 gainNode，再由 gainNode connect 到扬声器，就能调整音量了。</p>
<p>如下图示意：</p>
<p><img src="https://image.xuebin.me/006tNbRwly1fuw4eojx19j31kw0tv408.jpg" alt="img"></p>
<p>这些节点都是使用 audioContext 的工厂函数创建的，如调 createGainNode 就可以创建一个 gainNode.</p>
<p>说了这么多就是为了录音做准备，录音需要用到 ScriptProcessorNode.</p>
<h2 id="3-录音的实现"><a href="#3-录音的实现" class="headerlink" title="3. 录音的实现"></a>3. 录音的实现</h2><p>上面播放音乐的来源是本地音频文件，而录音的来源是麦克风，为了能够获取调起麦克风并获取数据，需要使用 WebRTC 的 getUserMedia，如下代码所示;</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;button onclick=&quot;record()&quot;&gt;开始录音&lt;/button&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">function record () &#123;</span><br><span class="line">    window.navigator.mediaDevices.getUserMedia(&#123;</span><br><span class="line">        audio: true</span><br><span class="line">    &#125;).then(mediaStream =&gt; &#123;</span><br><span class="line">        console.log(mediaStream);</span><br><span class="line">        beginRecord(mediaStream);</span><br><span class="line">    &#125;).catch(err =&gt; &#123;</span><br><span class="line">        // 如果用户电脑没有麦克风设备或者用户拒绝了，或者连接出问题了等</span><br><span class="line">        // 这里都会抛异常，并且通过err.name可以知道是哪种类型的错误</span><br><span class="line">        console.error(err);</span><br><span class="line">    &#125;)  ;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;复制代码</span><br></pre></td></tr></table></figure>
<p>在调用 getUserMedia 的时候指定需要录制音频，如果同时需要录制视频那么再加一个 video: true 就可以了，也可以指定录制的格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">window.navigator.mediaDevices.getUserMedia(&#123;</span><br><span class="line">    audio: &#123;</span><br><span class="line">        sampleRate: 44100, // 采样率</span><br><span class="line">        channelCount: 2,   // 声道</span><br><span class="line">        volume: 1.0        // 音量</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).then(mediaStream =&gt; &#123;</span><br><span class="line">    console.log(mediaStream);</span><br><span class="line">&#125;);复制代码</span><br></pre></td></tr></table></figure>
<p>调用的时候，浏览器会弹一个框，询问用户是否允许使用用麦克风：</p>
<p><img src="https://image.xuebin.me/006tNbRwly1fuw4f3v3jnj30ne08imx6.jpg" alt="img"></p>
<p>如果用户点了拒绝，那么会抛异常，在 catch 里面可以捕获到，而如果一切顺序的话，将会返回一个 MediaStream 对象：</p>
<p><img src="https://image.xuebin.me/006tNbRwly1fuw4fa0968j30ua08st91.jpg" alt="img"></p>
<p>它是音频流的抽象，把这个流用来初始化一个 MediaStreamAudioSourceNode 对象，然后把这个节点 connect 连接到一个 JavascriptProcessorNode，在它的 onaudioprocess 里面获取到音频数据，然后保存起来，就得到录音的数据。</p>
<p>如果想直接把录的音直接播放出来的话，那么只要把它 connect 到扬声器就行了，如下代码所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function beginRecord (mediaStream) &#123;</span><br><span class="line">    let audioContext = new (window.AudioContext || window.webkitAudioContext);</span><br><span class="line">    let mediaNode = audioContext.createMediaStreamSource(mediaStream);</span><br><span class="line">    // 这里connect之后就会自动播放了</span><br><span class="line">    mediaNode.connect(audioContext.destination);</span><br><span class="line">&#125;复制代码</span><br></pre></td></tr></table></figure>
<p>但一边录一边播的话，如果没用耳机的话容易产生回音，这里不要播放了。</p>
<p>为了获取录到的音的数据，我们把它 connect 到一个 javascriptProcessorNode，为此先创建一个实例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function createJSNode (audioContext) &#123;</span><br><span class="line">    const BUFFER_SIZE = 4096;</span><br><span class="line">    const INPUT_CHANNEL_COUNT = 2;</span><br><span class="line">    const OUTPUT_CHANNEL_COUNT = 2;</span><br><span class="line">    // createJavaScriptNode已被废弃</span><br><span class="line">    let creator = audioContext.createScriptProcessor || audioContext.createJavaScriptNode;</span><br><span class="line">    creator = creator.bind(audioContext);</span><br><span class="line">    return creator(BUFFER_SIZE,</span><br><span class="line">                    INPUT_CHANNEL_COUNT, OUTPUT_CHANNEL_COUNT);</span><br><span class="line">&#125;复制代码</span><br></pre></td></tr></table></figure>
<p>这里是使用 createScriptProcessor 创建的对象，需要传三个参数：一个是缓冲区大小，通常设定为 4kB，另外两个是输入和输出频道数量，这里设定为双声道。它里面有两个缓冲区，一个是输入 inputBuffer，另一个是输出 outputBuffer，它们是 AudioBuffer 实例。可以在 onaudioprocess 回调里面获取到 inputBuffer 的数据，处理之后，然后放到 outputBuffer，如下图所示：</p>
<p><img src="https://image.xuebin.me/006tNbRwly1fuw4flcme0j30wa0fodg1.jpg" alt="img"></p>
<p>例如我们可以把第 1 步播放本音频用到的 bufferSourceNode 连接到 jsNode，然后 jsNode 再连接到扬声器，就能在 process 回调里面分批处理声音的数据，如降噪。当扬声器把 4kB 的 outputBuffer 消费完之后，就会触发 process 回调。所以 process 回调是不断触发的。</p>
<p>在录音的例子里，是要把 mediaNode 连接到这个 jsNode，进而拿到录音的数据，把这些数据不断地 push 到一个数组，直到录音终止了。如下代码所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function onAudioProcess (event) &#123;</span><br><span class="line">    console.log(event.inputBuffer);</span><br><span class="line">&#125;</span><br><span class="line">function beginRecord (mediaStream) &#123;</span><br><span class="line">    let audioContext = new (window.AudioContext || window.webkitAudioContext);</span><br><span class="line">    let mediaNode = audioContext.createMediaStreamSource(mediaStream);</span><br><span class="line">    // 创建一个jsNode</span><br><span class="line">    let jsNode = createJSNode(audioContext);</span><br><span class="line">    // 需要连到扬声器消费掉outputBuffer，process回调才能触发</span><br><span class="line">    // 并且由于不给outputBuffer设置内容，所以扬声器不会播放出声音</span><br><span class="line">    jsNode.connect(audioContext.destination);</span><br><span class="line">    jsNode.onaudioprocess = onAudioProcess;</span><br><span class="line">    // 把mediaNode连接到jsNode</span><br><span class="line">    mediaNode.connect(jsNode);</span><br><span class="line">&#125;复制代码</span><br></pre></td></tr></table></figure>
<p>我们把 inputBuffer 打印出来，可以看到每一段大概是 0.09s：</p>
<p><img src="https://image.xuebin.me/006tNbRwly1fuw4fv3b50j30n00dot96.jpg" alt="img"></p>
<p>也就是说每隔 0.09 秒就会触发一次。接下来的工作就是在 process 回调里面把录音的数据持续地保存起来，如下代码所示，分别获取到左声道和右声道的数据：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function onAudioProcess (event) &#123;</span><br><span class="line">    let audioBuffer = event.inputBuffer;</span><br><span class="line">    let leftChannelData = audioBuffer.getChannelData(0),</span><br><span class="line">        rightChannelData = audioBuffer.getChannelData(1);</span><br><span class="line">    console.log(leftChannelData, rightChannelData);</span><br><span class="line">&#125;复制代码</span><br></pre></td></tr></table></figure>
<p>打印出来可以看到它是一个 Float32Array，即数组里的每个数字都是 32 位的单精度浮点数，如下图所示：</p>
<p><img src="https://image.xuebin.me/006tNbRwly1fuw4g3zlg5j30ry0820tp.jpg" alt="img"></p>
<p>这里有个问题，录音的数据到底表示的是什么呢，它是采样采来的表示声音的强弱，声波被麦克风转换为不同强度的电流信号，这些数字就代表了信号的强弱。它的取值范围是[-1, 1]，表示一个相对比例。</p>
<p>然后不断地 push 到一个 array 里面：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let leftDataList = [],</span><br><span class="line">    rightDataList = [];</span><br><span class="line">function onAudioProcess (event) &#123;</span><br><span class="line">    let audioBuffer = event.inputBuffer;</span><br><span class="line">    let leftChannelData = audioBuffer.getChannelData(0),</span><br><span class="line">        rightChannelData = audioBuffer.getChannelData(1);</span><br><span class="line">    // 需要克隆一下</span><br><span class="line">    leftDataList.push(leftChannelData.slice(0));</span><br><span class="line">    rightDataList.push(rightChannelData.slice(0));</span><br><span class="line">&#125;复制代码</span><br></pre></td></tr></table></figure>
<p>最后加一个停止录音的按钮，并响应操作：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function stopRecord () &#123;</span><br><span class="line">    // 停止录音</span><br><span class="line">    mediaStream.getAudioTracks()[0].stop();</span><br><span class="line">    mediaNode.disconnect();</span><br><span class="line">    jsNode.disconnect();</span><br><span class="line">    console.log(leftDataList, rightDataList);</span><br><span class="line">&#125;复制代码</span><br></pre></td></tr></table></figure>
<p>把保存的数据打印出来是这样的：</p>
<p><img src="https://image.xuebin.me/006tNbRwly1fuw4ggbkr6j30rs07cmxj.jpg" alt="img"></p>
<p>是一个普通数组里面有很多个 Float32Array，接下来它们合成一个单个 Float32Array：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function mergeArray (list) &#123;</span><br><span class="line">    let length = list.length * list[0].length;</span><br><span class="line">    let data = new Float32Array(length),</span><br><span class="line">        offset = 0;</span><br><span class="line">    for (let i = 0; i &lt; list.length; i++) &#123;</span><br><span class="line">        data.set(list[i], offset);</span><br><span class="line">        offset += list[i].length;</span><br><span class="line">    &#125;</span><br><span class="line">    return data;</span><br><span class="line">&#125;</span><br><span class="line">function stopRecord () &#123;</span><br><span class="line">    // 停止录音</span><br><span class="line">    let leftData = mergeArray(leftDataList),</span><br><span class="line">        rightData = mergeArray(rightDataList);</span><br><span class="line">&#125;复制代码</span><br></pre></td></tr></table></figure>
<p>那为什么一开始不直接就弄成一个单个的，因为这种 Array 不太方便扩容。一开始不知道数组总的长度，因为不确定要录多长，所以等结束录音的时候再合并一下比较方便。</p>
<p>然后把左右声道的数据合并一下，wav 格式存储的时候并不是先放左声道再放右声道的，而是一个左声道数据，一个右声道数据交叉放的，如下代码所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 交叉合并左右声道的数据</span><br><span class="line">function interleaveLeftAndRight (left, right) &#123;</span><br><span class="line">    let totalLength = left.length + right.length;</span><br><span class="line">    let data = new Float32Array(totalLength);</span><br><span class="line">    for (let i = 0; i &lt; left.length; i++) &#123;</span><br><span class="line">        let k = i * 2;</span><br><span class="line">        data[k] = left[i];</span><br><span class="line">        data[k + 1] = right[i];</span><br><span class="line">    &#125;</span><br><span class="line">    return data;</span><br><span class="line">&#125;复制代码</span><br></pre></td></tr></table></figure>
<p>最后创建一个 wav 文件，首先写入 wav 的头部信息，包括设置声道、采样率、位声等，如下代码所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function createWavFile (audioData) &#123;</span><br><span class="line">    const WAV_HEAD_SIZE = 44;</span><br><span class="line">    let buffer = new ArrayBuffer(audioData.length + WAV_HEAD_SIZE),</span><br><span class="line">        // 需要用一个view来操控buffer</span><br><span class="line">        view = new DataView(buffer);</span><br><span class="line">    // 写入wav头部信息</span><br><span class="line">    // RIFF chunk descriptor/identifier</span><br><span class="line">    writeUTFBytes(view, 0, &apos;RIFF&apos;);</span><br><span class="line">    // RIFF chunk length</span><br><span class="line">    view.setUint32(4, 44 + audioData.length * 2, true);</span><br><span class="line">    // RIFF type</span><br><span class="line">    writeUTFBytes(view, 8, &apos;WAVE&apos;);</span><br><span class="line">    // format chunk identifier</span><br><span class="line">    // FMT sub-chunk</span><br><span class="line">    writeUTFBytes(view, 12, &apos;fmt &apos;);</span><br><span class="line">    // format chunk length</span><br><span class="line">    view.setUint32(16, 16, true);</span><br><span class="line">    // sample format (raw)</span><br><span class="line">    view.setUint16(20, 1, true);</span><br><span class="line">    // stereo (2 channels)</span><br><span class="line">    view.setUint16(22, 2, true);</span><br><span class="line">    // sample rate</span><br><span class="line">    view.setUint32(24, 44100, true);</span><br><span class="line">    // byte rate (sample rate * block align)</span><br><span class="line">    view.setUint32(28, 44100 * 2, true);</span><br><span class="line">    // block align (channel count * bytes per sample)</span><br><span class="line">    view.setUint16(32, 2 * 2, true);</span><br><span class="line">    // bits per sample</span><br><span class="line">    view.setUint16(34, 16, true);</span><br><span class="line">    // data sub-chunk</span><br><span class="line">    // data chunk identifier</span><br><span class="line">    writeUTFBytes(view, 36, &apos;data&apos;);</span><br><span class="line">    // data chunk length</span><br><span class="line">    view.setUint32(40, audioData.length * 2, true);</span><br><span class="line">&#125;复制代码</span><br></pre></td></tr></table></figure>
<p>接下来写入录音数据，我们准备写入 16 位位深即用 16 位二进制表示声音的强弱，16 位表示的范围是 [-32768, +32767]，最大值是 32767 即 0x7FFF，录音数据的取值范围是[-1, 1]，表示相对比例，用这个比例乘以最大值就是实际要存储的值。如下代码所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function createWavFile (audioData) &#123;</span><br><span class="line">    // 写入wav头部，代码同上</span><br><span class="line">    // 写入PCM数据</span><br><span class="line">    let length = audioData.length;</span><br><span class="line">    let index = 44;</span><br><span class="line">    let volume = 1;</span><br><span class="line">    for (let i = 0; i &lt; length; i++) &#123;</span><br><span class="line">        view.setInt16(index, audioData[i] * (0x7FFF * volume), true);</span><br><span class="line">        index += 2;</span><br><span class="line">    &#125;</span><br><span class="line">    return buffer;</span><br><span class="line">&#125;复制代码</span><br></pre></td></tr></table></figure>
<p>最后，再用第 1 点提到的生成一个本地播放的 blob url 就能够播放刚刚录的音了，如下代码所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function playRecord (arrayBuffer) &#123;</span><br><span class="line">    let blob = new Blob([new Uint8Array(arrayBuffer)]);</span><br><span class="line">    let blobUrl = URL.createObjectURL(blob);</span><br><span class="line">    document.querySelector(&apos;.audio-node&apos;).src = blobUrl;</span><br><span class="line">&#125;</span><br><span class="line">function stopRecord () &#123;</span><br><span class="line">    // 停止录音</span><br><span class="line">    let leftData = mergeArray(leftDataList),</span><br><span class="line">        rightData = mergeArray(rightDataList);</span><br><span class="line">    let allData = interleaveLeftAndRight(leftData, rightData);</span><br><span class="line">    let wavBuffer = createWavFile(allData);</span><br><span class="line">    playRecord(wavBuffer);</span><br><span class="line">&#125;复制代码</span><br></pre></td></tr></table></figure>
<p>或者是把 blob 使用 FormData 进行上传。</p>
<p>整一个录音的实现基本就结束了，代码参考了一个录音库<span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5pbS8/dGFyZ2V0PWh0dHBzJTNBJTJGJTJGZ2l0aHViLmNvbSUyRm11YXota2hhbiUyRlJlY29yZFJUQw==" title="https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fmuaz-khan%2FRecordRTC">RecordRTC<i class="fa fa-external-link"></i></span>。</p>
<h2 id="4-小结"><a href="#4-小结" class="headerlink" title="4. 小结"></a>4. 小结</h2><p>回顾一下，整体的流程是这样的：</p>
<p><img src="https://image.xuebin.me/006tNbRwly1fuw487hf7tj31kw0ogmye.jpg" alt="img"></p>
<p>先调用 webRTC 的 getUserMediaStream 获取音频流，用这个流初始化一个 mediaNode，把它 connect 连接到一个 jsNode，在 jsNode 的 process 回调里面不断地获取到录音的数据，停止录音后，把这些数据合并换算成 16 位的整型数据，并写入 wav 头部信息生成一个 wav 音频文件的内存 buffer，把这个 buffer 封装成 Blob 文件，生成一个 url，就能够在本地播放，或者是借助 FormData 进行上传。这个过程理解了就不是很复杂了。</p>
<p>本篇涉及到了 WebRTC 和 AudioContext 的 API，重点介绍了 AudioContext 整体的模型，并且知道了音频数据实际上就是声音强弱的记录，存储的时候通过乘以 16 位整数的最大值换算成 16 位位深的表示。同时可利用 blob 和 URL.createObjectURL 生成一个本地数据的 blob 链接。</p>
<p>RecordRTC 录音库最后面还使用了 webworker 进行合并左右声道数据和生成 wav 文件，可进一步提高效率，避免录音文件太大后面处理的时候卡住了。</p>
<div class="note ">
            <p>转载至: <span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YjhiZjdlM2U1MWQ0NTM4YzIxMGM2YjA=" title="https://juejin.im/post/5b8bf7e3e51d4538c210c6b0">https://juejin.im/post/5b8bf7e3e51d4538c210c6b0<i class="fa fa-external-link"></i></span> </p>
          </div>
]]></content>
      <categories>
        <category>前端</category>
        <category>多媒体</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>前端</tag>
        <tag>转载</tag>
        <tag>多媒体</tag>
        <tag>音频</tag>
      </tags>
  </entry>
  <entry>
    <title>自建frp服务实现内网穿透</title>
    <url>/posts/fc2d1561.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ZhdGVkaWVyL2ZycA==" title="https://github.com/fatedier/frp">frp<i class="fa fa-external-link"></i></span>是一款内网穿透工具，在现在宽带没有公网 IP 的年代，NAS 服务器之类的，必须使用内网穿透来解决 WAN 下的访问问题。</p>
<p>这里使用 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NsYW5nY24vb25la2V5LWluc3RhbGwtc2hlbGwvdHJlZS9tYXN0ZXIvZnJwcw==" title="https://github.com/clangcn/onekey-install-shell/tree/master/frps">clangcn<i class="fa fa-external-link"></i></span> 的<span class="exturl" data-url="aHR0cDovL2tvb2xzaGFyZS5jbi90aHJlYWQtNjUzNzktMS0xLmh0bWw=" title="http://koolshare.cn/thread-65379-1-1.html">一键安装脚本<i class="fa fa-external-link"></i></span>，用于 VPS 上安装 frp。</p>
<p>支持的平台：</p>
<ul>
<li>Centos 6/7 32/64bit</li>
<li>Debian 6/7 32/64bit</li>
<li>Ubuntu 14 32/64bit</li>
</ul>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>下载脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget --no-check-certificate https://raw.githubusercontent.com/clangcn/onekey-install-shell/master/frps/install-frps.sh -O ./install-frps.sh</span><br></pre></td></tr></table></figure>
<p>修改权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ chmod 700 ./install-frps.sh</span><br></pre></td></tr></table></figure>
<p>开始安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./install-frps.sh install</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>安装过程选项的说明</p>
<table>
<thead>
<tr>
<th style="text-align:center">选项</th>
<th style="text-align:center">说明</th>
<th style="text-align:center">默认</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">download_url</td>
<td style="text-align:center">frp 镜像源下载地址</td>
<td style="text-align:center">aliyun</td>
</tr>
<tr>
<td style="text-align:center">bind_port</td>
<td style="text-align:center">frp 提供服务的端口</td>
<td style="text-align:center">5443</td>
</tr>
<tr>
<td style="text-align:center">vhost_http_port</td>
<td style="text-align:center">http 服务端口</td>
<td style="text-align:center">80</td>
</tr>
<tr>
<td style="text-align:center">vhost_https_port</td>
<td style="text-align:center">https 服务端口</td>
<td style="text-align:center">443</td>
</tr>
<tr>
<td style="text-align:center">dashboard_port</td>
<td style="text-align:center">frps 仪表盘端口，用于查看 frp 工作状态</td>
<td style="text-align:center">6443</td>
</tr>
<tr>
<td style="text-align:center">dashboard_user</td>
<td style="text-align:center">仪表盘登录账号</td>
<td style="text-align:center">admin</td>
</tr>
<tr>
<td style="text-align:center">dashboard_pwd</td>
<td style="text-align:center">仪表盘登录密码</td>
<td style="text-align:center">随机</td>
</tr>
<tr>
<td style="text-align:center">token</td>
<td style="text-align:center">frps 和 frpc 通讯密码</td>
<td style="text-align:center">随机</td>
</tr>
<tr>
<td style="text-align:center">max_pool_count</td>
<td style="text-align:center">每个代理的连接上线</td>
<td style="text-align:center">50</td>
</tr>
<tr>
<td style="text-align:center">log_level</td>
<td style="text-align:center">日志等级</td>
<td style="text-align:center">info</td>
</tr>
<tr>
<td style="text-align:center">log_max_days</td>
<td style="text-align:center">日志保留天数</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">log_file</td>
<td style="text-align:center">是否开启日志</td>
<td style="text-align:center">enable</td>
</tr>
<tr>
<td style="text-align:center">tcp_mux</td>
<td style="text-align:center">是否开启多路复用，减少 tcp 的握手延迟</td>
<td style="text-align:center">enable</td>
</tr>
<tr>
<td style="text-align:center">kcp support</td>
<td style="text-align:center">是否开启 kcp</td>
<td style="text-align:center">enable</td>
</tr>
</tbody>
</table>
<blockquote>
<p>注意设置安全组或者防火墙</p>
</blockquote>
<h1 id="功能命令"><a href="#功能命令" class="headerlink" title="功能命令"></a>功能命令</h1><table>
<thead>
<tr>
<th style="text-align:center">命令</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">frps start</td>
<td style="text-align:center">启动</td>
</tr>
<tr>
<td style="text-align:center">frps stop</td>
<td style="text-align:center">停止</td>
</tr>
<tr>
<td style="text-align:center">frps restart</td>
<td style="text-align:center">重启</td>
</tr>
<tr>
<td style="text-align:center">frps status</td>
<td style="text-align:center">当前服务状态</td>
</tr>
<tr>
<td style="text-align:center">frps config</td>
<td style="text-align:center">vi 编辑配置</td>
</tr>
<tr>
<td style="text-align:center">frps version</td>
<td style="text-align:center">查看版本</td>
</tr>
<tr>
<td style="text-align:center">install-frps.sh update</td>
<td style="text-align:center">更新脚本</td>
</tr>
<tr>
<td style="text-align:center">install-frps.sh uninstall</td>
<td style="text-align:center">卸载</td>
</tr>
</tbody>
</table>
<h1 id="fprc-配置"><a href="#fprc-配置" class="headerlink" title="fprc 配置"></a>fprc 配置</h1><p>这里主要说一下服务器以及客户端的配置：</p>
<p>首先是 <code>frps.ini</code>，这个文件一般是脚本配置后自动生成的，这里注释说明一下并稍微添加修改：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">bind_addr</span> = <span class="number">0.0</span>.<span class="number">0.0</span> <span class="comment"># 可以访问frp的目标IP地址，0.0.0.0为不限制</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">5443</span> <span class="comment"># tcp主要端口</span></span><br><span class="line"><span class="attr">kcp_bind_port</span> = <span class="number">5443</span> <span class="comment"># kcp端口(使用的是udp)，可以和tcp端口相同</span></span><br><span class="line"><span class="attr">bind_udp_port</span> = <span class="number">7001</span> <span class="comment"># 打开一个udp端口，以便使用p2p等功能</span></span><br><span class="line"><span class="attr">dashboard_port</span> = <span class="number">6443</span> <span class="comment"># web控制台访问端口，如果不打算用控制台，可以不用设置</span></span><br><span class="line"><span class="attr">dashboard_user</span> = admin <span class="comment"># web控制台的用户名，建议更改</span></span><br><span class="line"><span class="attr">dashboard_pwd</span> = xxxxxxxx <span class="comment"># web控制台的登录密码</span></span><br><span class="line"><span class="attr">vhost_http_port</span> = <span class="number">82</span> <span class="comment"># 如果不打算在VPS上架设网站，这里可以用80端口</span></span><br><span class="line"><span class="attr">vhost_https_port</span> = <span class="number">444</span> <span class="comment"># https的代理端口，需要证书，配置较复杂，如果VPS上不架设网站，这里可以用443端口</span></span><br><span class="line"><span class="attr">log_file</span> = /dev/null <span class="comment"># 不生成log</span></span><br><span class="line"><span class="attr">log_level</span> = error</span><br><span class="line"><span class="attr">log_max_days</span> = <span class="number">3</span></span><br><span class="line"><span class="attr">privilege_token</span> = xxxxxxxxxxxxxxxx <span class="comment"># 这里是认证令牌，自用的话必须设置</span></span><br><span class="line"><span class="attr">privilege_allow_ports</span> = <span class="number">1</span>-<span class="number">65535</span> <span class="comment"># 可限制frps使用的端口范围，该范围需要在VPS的防火墙中打开</span></span><br><span class="line"><span class="attr">max_pool_count</span> = <span class="number">50</span> <span class="comment">#自用的话50足够了</span></span><br><span class="line"><span class="attr">tcp_mux</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">subdomain_host</span> = xxx.com <span class="comment">#这里可以用A记录绑定VPS的IP</span></span><br></pre></td></tr></table></figure>
<p>下面是关于客户端的配置，假设有一台路由器 A 以及一台位于其他位置的电脑 B，其中 A 为 24 小时开机，A 内设有 Syncthing 用来同步其他设备，并安装 sftp。</p>
<p>现在需要开放 A 中的 Syncthing、sftp、ssh 供 B 访问(其中 sftp 与 ssh 端口相同)，需要进行的 <code>frpc.ini</code> 配置：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = xxx.xxx.xxx.xxx <span class="comment"># VPS的IP或绑定的域名</span></span><br><span class="line"><span class="attr">server_port</span> = <span class="number">5443</span></span><br><span class="line"><span class="attr">privilege_token</span> = xxxxxxxxxxxxxxxx <span class="comment"># 之前frps.ini中对应的令牌</span></span><br><span class="line"><span class="attr">protocol</span> = kcp <span class="comment"># 这里可以是tcp或kcp</span></span><br><span class="line"></span><br><span class="line"><span class="section">[ssh]</span></span><br><span class="line"><span class="attr">type</span> = tcp <span class="comment"># 这里不要因为前面设置了kcp就填上kcp</span></span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span> <span class="comment"># 因为是本机，所以这样就可以了</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">22</span> 本地路由器A的ssh端口，因为会暴露出来，建议从该设备中更改端口</span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">50022</span> <span class="comment"># 会打开新的VPS端口，请确定防火墙通过</span></span><br><span class="line"><span class="attr">use_encryption</span> = <span class="literal">false</span> <span class="comment"># 是否加密，一般不需要</span></span><br><span class="line"><span class="attr">use_compression</span> = <span class="literal">false</span> <span class="comment"># 是否压缩，会影响CPU使用</span></span><br><span class="line"></span><br><span class="line"><span class="section">[sync]</span></span><br><span class="line"><span class="attr">type</span> = http</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">8384</span> <span class="comment"># Syncthing的端口</span></span><br><span class="line"><span class="attr">use_encryption</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">use_compression</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">subdomain</span> = sync <span class="comment"># 这里如果不指定，将使用上面方括号内的服务名为二级域名；如果VPS中没指定subdomain_host，则这里需要用custom_domains来指定一个访问域名，该域名应当解析到VPS上</span></span><br><span class="line"></span><br><span class="line"><span class="section">[p2p_ssh]</span> <span class="comment"># 这里配置的p2p是可以穿透VPS，让两台设备直接相连，这才是我想要的</span></span><br><span class="line"><span class="attr">type</span> = xtcp <span class="comment"># 会使用上面的7001端口</span></span><br><span class="line"><span class="attr">sk</span> = heartnn <span class="comment"># 这里的字符也会在电脑B中设置，类似于令牌之类的</span></span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">22</span></span><br></pre></td></tr></table></figure>
<p>经过设置，可以在任意设备中输入<code>http://sync.xxx.com:82</code>来访问 Syncthing 的控制台，也可以用 xxx.com:50022 来访问</p>
<p>电脑 B 中的 frpc.ini</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[common]</span> <span class="comment"># 与上面相同即可</span></span><br><span class="line"><span class="attr">server_addr</span> = xxx.xxx.xxx.xxx</span><br><span class="line"><span class="attr">server_port</span> = <span class="number">5443</span></span><br><span class="line"><span class="attr">privilege_token</span> = xxxxxxxxxxxxxxxx</span><br><span class="line"><span class="attr">protocol</span> = kcp</span><br><span class="line"></span><br><span class="line"><span class="section">[p2p_ssh_visitor]</span> <span class="comment"># 这里是上面对应的p2p访问者配置</span></span><br><span class="line"><span class="attr">type</span> = xtcp</span><br><span class="line"><span class="attr">role</span> = visitor <span class="comment"># 访问者</span></span><br><span class="line"><span class="attr">server_name</span> = p2p_ssh <span class="comment"># 对应A中的服务名称</span></span><br><span class="line"><span class="attr">sk</span> = heartnn</span><br><span class="line"><span class="attr">bind_addr</span> = <span class="number">127.0</span>.<span class="number">0.1</span> <span class="comment"># 在电脑B本地访问</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">50022</span> <span class="comment"># 这里是电脑B本地端口，与其他无关</span></span><br></pre></td></tr></table></figure>
<p>经过设置，B 与 A 可以通过 p2p 直连，heartnn 测试过 sftp 完全没问题，但 ssh 没能通过 p2p，只能过 VPS 中转，不过已经完全够用了。</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>服务器</tag>
        <tag>ngrok</tag>
        <tag>frp</tag>
        <tag>内网穿透</tag>
        <tag>反向代理</tag>
      </tags>
  </entry>
  <entry>
    <title>自建ngrok服务实现内网穿透</title>
    <url>/posts/28014a16.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="什么是ngrok"><a href="#什么是ngrok" class="headerlink" title="什么是ngrok?"></a>什么是ngrok?</h2><p>ngrok是一个ddns服务，为内网机器绑定一个公网域名之后，可以将内网机器的端口暴露在公网上，方便内网程序的调试和开发。比如，在内网机器上，想开<code>HTTP服务</code>的<code>80端口</code>，那么就可以使用ngrok，而不需要借助路由器的端口转发和端口映射功能。当然这样做的前提是，你需要一台可以从内网访问到的公网服务器，比如阿里云的云主机，或者便宜的搬瓦工VPS（一年20美金即可）。</p>
<a id="more"></a>
<h2 id="ngrok的使用条件"><a href="#ngrok的使用条件" class="headerlink" title="ngrok的使用条件"></a>ngrok的使用条件</h2><ol>
<li>域名 (很多域名如.top，.online域名首年都是0.88美金，具体访问namecheap.com或者namesilo.com)</li>
<li>拥有独立IP的VPS或云主机(阿里云或者搬瓦工)</li>
</ol>
<h2 id="ngrok服务器端编译"><a href="#ngrok服务器端编译" class="headerlink" title="ngrok服务器端编译"></a>ngrok服务器端编译</h2><p>我使用的搬瓦工VPS，装的CentOS 6.5 64位系统。</p>
<h3 id="安装go的编译环境"><a href="#安装go的编译环境" class="headerlink" title="安装go的编译环境"></a>安装go的编译环境</h3><ul>
<li>环境安装</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install zlib-devel openssl-devel perl hg cpio expat-devel gettext-devel curl curl-devel perl-ExtUtils-MakeMaker hg wget gcc gcc-c++ build-essential  mercurial</span><br></pre></td></tr></table></figure>
<ul>
<li>安装go</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget http://www.golangtc.com/static/go/1.7rc6/go1.7rc6.linux-386.tar.gz</span><br><span class="line">tar -zxvf go1.7.6.linux-386.tar.gz</span><br><span class="line">mv go /usr/local/</span><br><span class="line">ln -s /usr/local/go/bin/* /usr/bin/</span><br></pre></td></tr></table></figure>
<p>检查是否安装成功，命令 <code>go env</code></p>
<p>如果看到下面的信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜  ~ go env</span><br><span class="line">GOARCH="386"</span><br><span class="line">GOBIN=""</span><br><span class="line">GOEXE=""</span><br><span class="line">GOHOSTARCH="386"</span><br><span class="line">GOHOSTOS="linux"</span><br><span class="line">GOOS="linux"</span><br><span class="line">GOPATH=""</span><br><span class="line">GORACE=""</span><br><span class="line">GOROOT="/usr/lib/golang"</span><br><span class="line">GOTOOLDIR="/usr/lib/golang/pkg/tool/linux_386"</span><br><span class="line">CC="gcc"</span><br><span class="line">GOGCCFLAGS="-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build672964581=/tmp/go-build"</span><br><span class="line">CXX="g++"</span><br><span class="line">CGO_ENABLED="1"</span><br></pre></td></tr></table></figure>
<p>说明go环境安装成功</p>
<p>下面开始进行go的编译，在参考其他帖子的过程中，推荐go的编译需要git版本&gt;=1.9，而我阿里云上的git是1.7.1因此需要升级git，我没有将步骤写在这里，因为觉得和主题不是很相关，如果你的git版本较低，可以参考这个帖子<span class="exturl" data-url="aHR0cDovL3d3dy53dWxpYW9sZS5jb20vcG9zdC91cGdyYWRlLWxvd2VyLXZlcnNpb24tZ2l0LXRvLW5ld2VzdA==" title="http://www.wuliaole.com/post/upgrade-lower-version-git-to-newest">将较低版本的git升级到新版<i class="fa fa-external-link"></i></span>。</p>
<h3 id="开始编译服务器端"><a href="#开始编译服务器端" class="headerlink" title="开始编译服务器端"></a>开始编译服务器端</h3><p>声明编译的路径和必要的域名(域名改成你自己的)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">这是原版代码，编译过程会从github下载依赖包，国内网络坏境可能会有问题，下面使用的是阿里云的OSS提供的地址</span></span><br><span class="line"><span class="meta">#</span><span class="bash">git <span class="built_in">clone</span> https://github.com/inconshreveable/ngrok.git ~/ngrok</span></span><br><span class="line"><span class="meta">#</span><span class="bash">推荐直接下载完整包，一次性编译无需下载</span></span><br><span class="line">wget http://tinyoss.oss-cn-qingdao.aliyuncs.com/ngrok.zip</span><br><span class="line">unzip ngrok.zip</span><br><span class="line">export GOPATH=~/ngrok/ #指定GO语言所在位置</span><br><span class="line">export NGROK_DOMAIN="ngrok.xuebin.me" #这个需要改成你的域名</span><br></pre></td></tr></table></figure>
<h3 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~/ngrok</span><br><span class="line">openssl genrsa -out base.key 2048</span><br><span class="line">openssl req -new -x509 -nodes -key base.key -days 10000 -subj "/CN=$NGROK_DOMAIN" -out rootCA.pem</span><br><span class="line">openssl genrsa -out server.key 2048</span><br><span class="line">openssl req -new -key server.key -subj "/CN=$NGROK_DOMAIN" -out server.csr</span><br><span class="line">openssl x509 -req -in server.csr -CA rootCA.pem -CAkey base.key -CAcreateserial -days 10000 -out server.crt</span><br></pre></td></tr></table></figure>
<p>生成的3个文件，分别是rootCA.pem、server.csr和server.crt，各有用处。</p>
<p>下面将这3个文件复制到指定位置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp rootCA.pem assets/client/tls/ngrokroot.crt -i</span><br><span class="line">cp server.crt assets/server/tls/snakeoil.crt -i</span><br><span class="line">cp server.key assets/server/tls/snakeoil.key -i</span><br></pre></td></tr></table></figure>
<h3 id="不同的编译类型"><a href="#不同的编译类型" class="headerlink" title="不同的编译类型"></a>不同的编译类型</h3><p>如果要为不同的服务端编译，需要根据系统类型，更改<code>go env</code>中的变量。主要是<code>GOOS</code>和<code>GOARCH</code>这两项。</p>
<h4 id="为linux-x86-64系统编译"><a href="#为linux-x86-64系统编译" class="headerlink" title="为linux-x86-64系统编译"></a>为linux-x86-64系统编译</h4><p>比如我的阿里云主机，系统是CentOS 6.5 64位，就属于这种类型，分别指定变量并且执行服务器端编译：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export GOOS=linux </span><br><span class="line">export GOARCH=amd64 #如果是64位系统，则修改为386</span><br><span class="line">make release-server #如果是客户端，这里是make release-client</span><br></pre></td></tr></table></figure>
<p>编译完成后，在路径<code>~/ngrok/bin/linux_amd64</code>下，会看到一个名为<code>ngrokd</code>的文件，这个即为服务端运行文件。</p>
<h4 id="为树莓派系统编译"><a href="#为树莓派系统编译" class="headerlink" title="为树莓派系统编译"></a>为树莓派系统编译</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export GOOS=linux </span><br><span class="line">export GOARCH=arm</span><br><span class="line">make release-server #如果是客户端，这里是make release-client</span><br></pre></td></tr></table></figure>
<p>编译完成后，在路径<code>~/ngrok/bin/linux_arm</code>下，会看到一个名为<code>ngrokd</code>的文件，这个即为服务端运行文件。</p>
<h4 id="为windows系统编译服务端文件"><a href="#为windows系统编译服务端文件" class="headerlink" title="为windows系统编译服务端文件"></a>为windows系统编译服务端文件</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export GOOS=windows  </span><br><span class="line">export GOARCH=386 #如果是64位windows，这里修改为amd64</span><br><span class="line">make release-server #如果是客户端，这里是make release-client</span><br></pre></td></tr></table></figure>
<p>编译完成后，在路径<code>~/ngrok/bin/windows_386</code>下，会看到一个名为<code>ngrok.exe</code>的文件，这个即为服务端运行文件。</p>
<h4 id="为Mac-OS编译服务端文件"><a href="#为Mac-OS编译服务端文件" class="headerlink" title="为Mac OS编译服务端文件"></a>为Mac OS编译服务端文件</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export GOOS=darwin</span><br><span class="line">export GOARCH=amd64 #如果是64位windows，这里修改为amd64</span><br><span class="line">make release-server</span><br></pre></td></tr></table></figure>
<p>编译完成后，在路径<code>~/ngrok/bin/darwin_amd64</code>下，会看到一个名为<code>ngrokd</code>的文件，这个即为服务端运行文件。</p>
<p><em>. GOOS参数可以指定为windows、linux、freebsd、darwin (Mac OS X 10.5 or 10.6) 和nacl(Chrome 的Native Client 接口)</em> . <code>GOARCH</code>可以指定为<code>amd64</code> (64-bit x86)、<code>386</code> (32-bit x86)、和<code>arm</code> (32-bit ARM)。</p>
<h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><p>将编译配置时的域名<code>ngrok.xuebin.me</code>，解析到服务器IP</p>
<p>为<code>xuebin.me</code>添加值为<code>ngrok</code>、<code>*.ngrok</code>的A记录即可。</p>
<h3 id="服务器端部署"><a href="#服务器端部署" class="headerlink" title="服务器端部署"></a>服务器端部署</h3><p>将编译好的可执行文件移至/usr/bin/下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp ~/ngrok/bin/ngrokd /usr/bin/</span><br></pre></td></tr></table></figure>
<p>为ngrokd的运行单独开一个screen</p>
<blockquote>
<p>如果你发现screen执行失败，说明你没有装，CentOS可以通过<code>yum install -y screen</code>来安装screen服务，具体可以参见我的另外一个帖子<span class="exturl" data-url="aHR0cDovL3d3dy53dWxpYW9sZS5jb20vcG9zdC9ob3dfdG9faW5zdGFsbF9hbmRfdXNlX3NjcmVlbl9vbl9saW51eA==" title="http://www.wuliaole.com/post/how_to_install_and_use_screen_on_linux">《screen的安装和使用》<i class="fa fa-external-link"></i></span>，讲述了强大的screen的安装和使用。</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">screen -S ngrokd</span><br></pre></td></tr></table></figure>
<p>运行ngrokd</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">http</span></span><br><span class="line">./bin/linux_amd64/ngrokd -domain="$NGROK_DOMAIN" -httpAddr=":6060" -httpsAddr=":6061" -tunnelAddr=":6062" </span><br><span class="line"><span class="meta">#</span><span class="bash">https设置了tls</span></span><br><span class="line"><span class="meta">#</span><span class="bash">./bin/linux_amd64/ngrokd -domain=<span class="string">"<span class="variable">$NGROK_DOMAIN</span>"</span> -httpAddr=<span class="string">":6060"</span> -httpsAddr=<span class="string">":6061"</span> -tunnelAddr=<span class="string">":6062"</span> -tlsKey=./device.key -tlsCrt=./device.crt</span></span><br></pre></td></tr></table></figure>
<p>这里详细解释一下上面这句话中参数的含义</p>
<ul>
<li><code>httpAddr</code> 是访问普通的http使用的端口号，用后面用 <code>ngrok.xuebin.me:6060</code> 来访问服务</li>
<li><code>httpsAddr</code> 是访问的https使用的端口号，同上，只不过是需要https的服务访问才用这个端口</li>
<li><code>tunnelAddr</code> 是通道的端口号，这个端口是Ngrok用来通信的，所以这个端口在服务器上和客户端上设置必须要对应才可以正常的链接，默认不填写好像是4433。</li>
</ul>
<p>防火墙呢</p>
<h2 id="ngrok客户端编译"><a href="#ngrok客户端编译" class="headerlink" title="ngrok客户端编译"></a>ngrok客户端编译</h2><h3 id="Windows客户端"><a href="#Windows客户端" class="headerlink" title="Windows客户端"></a>Windows客户端</h3><p>好了，你现在服务器上，已经有一个ngrokd服务在运行了，那么客户端与服务器端如何连接呢？</p>
<p>也没啥难的，就是继续修改go环境的编译参数，继续编译客户端就好了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">GOOS=windows</span><br><span class="line">GOARCH=amd64  </span><br><span class="line">make release-client</span><br></pre></td></tr></table></figure>
<p>我是在64位的windows 10环境下连接服务器，其他参数，大家可以参考服务端程序的参数，自行进行相应的修改。</p>
<p>编译完成后，在路径<code>~/ngrok/bin/windows_amd64</code>下，会看到一个名为<code>ngrok.exe</code>的文件，这个即为服务端运行文件。使用scp命令或通过ftp，将其下载到你的本地电脑上即可。</p>
<p>然后，创建一个<code>ngrok.cfg</code>文件来保存配置，内容很简单</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server_addr: "ngrok.xuebin.me:6062"</span><br><span class="line">trust_host_root_certs: false</span><br></pre></td></tr></table></figure>
<p>然后，记得要采用cmd命令的方式来运行客户端程序，一句话</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./ngrok -subdomain resiliosync -proto=http -config=ngrok.cfg 8000</span><br></pre></td></tr></table></figure>
<p>上面的<code>8000</code>是你想暴露的<code>http</code>服务端口号。如果还想暴露更多诸如ssh或者其他更多服务的端口，自行添加即可。</p>
<h3 id="树莓派或者linux客户端"><a href="#树莓派或者linux客户端" class="headerlink" title="树莓派或者linux客户端"></a>树莓派或者linux客户端</h3><p>在ngrokd文件的同一级目录下，vim或者touch创建ngrok.cfg文件（yml语言格式）</p>
<p>这里假设你想用ssh端口管理树莓派或者你的linux服务器，ssh的默认端口是22，但是你想让这台树莓派将外网的10086端口转发到内网的22，那么设置如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server_addr: ngrok.xuebin.me:6062</span><br><span class="line">trust_host_root_certs: false</span><br><span class="line">tunnels:</span><br><span class="line">    http:</span><br><span class="line">        proto:</span><br><span class="line">            http: 80 #这里是你想暴露的http服务端口号</span><br><span class="line">        subdomain: pi #这里给你想暴露的http服务起个名字</span><br><span class="line">    ssh:</span><br><span class="line">        remote_port: 10086</span><br><span class="line">        proto:</span><br><span class="line">            tcp: 22</span><br></pre></td></tr></table></figure>
<p>这里我把需要转发的<code>http</code>和<code>ssh</code>都写入配置文件，其他<code>tcp服务</code>语法格式和ssh相似，<code>remote_port</code>为远程端口，等下外网连接的时候用的就是这个<code>remote_port</code>的端口号。<code>tcp:22</code>为需要转发的本地端口。</p>
<p>在树莓派上运行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./ngrok-for-arm -config=ngrok.cfg start http ssh</span><br></pre></td></tr></table></figure>
<p>这时候，处于内网的树莓派就可以通过连接你的服务器（运行ngrokd的外网服务器）来提供<code>80</code>、<code>22</code>、<code>10086</code>等端口的服务了。</p>
<p>比如，你的外网机器，就可以使用ssh来连接和管理处于内网环境的树莓派了。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh -p 10086 pi@ngrok.xuebin.me</span><br></pre></td></tr></table></figure>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>ngrok确实是非常强大，没啥想说的了。</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuc2ZhbnRyZWUuY29tL25ncm9rLXJhc3BiZXJyeS1jcm9zcy1uYXQv" title="https://www.sfantree.com/ngrok-raspberry-cross-nat/">自搭Ngrok实现树莓派内网穿透<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly90b29udG9uZy5naXRodWIuaW8vYmxvZy9hYm91dC1uZ3Jvay5odG1s" title="https://toontong.github.io/blog/about-ngrok.html">关于 ngrok 使用上的注意事项<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL25hbmNodW5sZS5ibG9nLjUxY3RvLmNvbS85MjQ0NzcwLzE3NDg3NjE=" title="http://nanchunle.blog.51cto.com/9244770/1748761">编译ngrok的Windows、Mac的客户端<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly94aWNoZW5nNDEyLmdpdGh1Yi5pby8yMDE2LzA5LzI3L25ncm9rLWNvbmZpZy8=" title="https://xicheng412.github.io/2016/09/27/ngrok-config/">内网穿透 ngrok 服务器和客户端配置<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL3d3dy53dWxpYW9sZS5jb20vcG9zdC9tYWtlX3VzZV9vZl9uZ3Jva190b19wZW5ldHJhdGVfaW50cmFuZXQv" title="http://www.wuliaole.com/post/make_use_of_ngrok_to_penetrate_intranet/">利用ngrok完成内网穿透<i class="fa fa-external-link"></i></span></li>
</ol>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>服务器</tag>
        <tag>ngrok</tag>
        <tag>frp</tag>
        <tag>内网穿透</tag>
        <tag>反向代理</tag>
      </tags>
  </entry>
  <entry>
    <title>iterm2配置ssh自动登录</title>
    <url>/posts/511fcea1.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="方案一-ssh-copy-id"><a href="#方案一-ssh-copy-id" class="headerlink" title="方案一: ssh-copy-id"></a>方案一: ssh-copy-id</h1><blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81ZDRkNGNlNTUxODgyNTVkODAzZjk0Nzk=" title="https://juejin.im/post/5d4d4ce55188255d803f9479">https://juejin.im/post/5d4d4ce55188255d803f9479<i class="fa fa-external-link"></i></span></p>
</blockquote>
<h2 id="使用ssh-config"><a href="#使用ssh-config" class="headerlink" title="使用ssh config"></a>使用ssh config</h2><p>实现密码登录的方法是通过<code>openssh</code> 的<code>ssh config</code>的功能。具体操作为~/.ssh/config，如果不存在，可以新建一个 然后<code>vim ~/.ssh/config</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">Host</span> <span class="string">aliyun</span></span><br><span class="line">  <span class="string">HostName</span> <span class="number">50.100</span><span class="number">.11</span><span class="number">.10</span></span><br><span class="line">  <span class="string">User</span> <span class="string">root</span></span><br><span class="line">  <span class="string">Port</span> <span class="number">22</span></span><br></pre></td></tr></table></figure>
<p>保存退出。这时在<em>iTerm2</em>中就可以输入<code>ssh aliyun</code>,回车 然后输入密码。注意，这时候已经不用输入ssh <span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5pbS8/dGFyZ2V0PW1haWx0byUzQXJvb3QlNDA1MC4xMDAuMTEuMTA=" title="https://link.juejin.im/?target=mailto%3Aroot%4050.100.11.10">root@50.100.11.10<i class="fa fa-external-link"></i></span>，只要输入密码就登录上了</p>
<h2 id="设置免密登录"><a href="#设置免密登录" class="headerlink" title="设置免密登录"></a>设置免密登录</h2><p>方法是使用<code>ssh-copy-id</code>功能，原理是将本机的密钥复制到远程要连接的机器上，从而授权连接。iterm终端输入：</p>
<ul>
<li><p>(可选)如果你的机器没有生成过ssh密钥则输入，如果已经存在，则忽略这步</p>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure>
</code></pre></li>
<li><p>复制密钥到远程目的服务器</p>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-copy-id -i demouser@192.168.1.101</span><br></pre></td></tr></table></figure>
</code></pre></li>
</ul>
<pre><code>按提示输入一次密码，`ssh-copy-id`就会自动将刚才生成的公钥id_rsa.pub追加到远程主机的`~/.ssh/authorized_keys`后面了，这样以后的 ssh 连接都不用输入密码了。
</code></pre><ul>
<li><p>设置后，连接试试看看效果</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh aliyun</span><br></pre></td></tr></table></figure>
<p> 你会发现可以<code>一步命令</code>直接等上远程服务器了。但是还是要打开终端iTerm2。再方便一点的登录远程服务器就需要alfred了</p>
</li>
</ul>
<h1 id="方案二-自定义-expect-脚本"><a href="#方案二-自定义-expect-脚本" class="headerlink" title="方案二: 自定义 expect 脚本"></a>方案二: 自定义 expect 脚本</h1><p>可以在~/.ssh/下面写一个脚本，配置到 iTerm2 的 Profiles 里（当然放在其他地方也可以）。脚本内容如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/usr/bin/expect -f</span></span><br><span class="line">set user root</span><br><span class="line">set host 192.168.1.110</span><br><span class="line">set password 123456</span><br><span class="line">set timeout -1</span><br><span class="line"></span><br><span class="line">spawn ssh $user@$host</span><br><span class="line">expect "*assword:*"</span><br><span class="line">send "$password\r"</span><br><span class="line">interact</span><br><span class="line">expect eof</span><br></pre></td></tr></table></figure>
<p>保存到<code>~/.ssh/server-test</code></p>
<a id="more"></a>
<p>然后新建一个 profile：</p>
<p><img src="https://image.xuebin.me/006tNbRwly1fucw5vhlhqj31f00vk7ek.jpg" alt="img"></p>
<p>Command 里填入 <code>expect ~/.ssh/server-test</code></p>
<p>还可以配置快捷键</p>
<p>之后就可以使用快捷键 或：</p>
<p><img src="https://image.xuebin.me/006tNbRwly1fucw6cuvqdj30so09qjyb.jpg" alt="img"></p>
<p>快速连接服务器了。。。</p>
<h1 id="方案三-使用-sshpass"><a href="#方案三-使用-sshpass" class="headerlink" title="方案三: 使用 sshpass"></a>方案三: 使用 sshpass</h1><blockquote>
<p>Mac 下，使用 sshpass 让 iterm2 支持多 ssh 登录信息保存</p>
</blockquote>
<p>windows 里有个 Xshell 非常的方便好使，因为它能保存你所有的 ssh 登录帐号信息。MAC 下并没有 xshell，有些也提供这样的功能，但效果都不好。iterm2 是很好的终端，但却不能很好的支持多 profiles，当要管理的机器较多时，就比较麻烦了。好在它有 profiles 设置，只是不能保存 ssh 登录帐号及密码，它还提供了加载 profiles 时执行外部命令的功能，因此，这里就可以使用 sshpass 来帮它执行。</p>
<h2 id="安装-iterm2"><a href="#安装-iterm2" class="headerlink" title="安装 iterm2"></a>安装 iterm2</h2><p>直接到官网下载安装: <span class="exturl" data-url="aHR0cDovL2l0ZXJtMi5jb20v" title="http://iterm2.com/">http://iterm2.com/<i class="fa fa-external-link"></i></span>，mac 上装软件，是件很轻松的事情</p>
<h2 id="安装-sshpass"><a href="#安装-sshpass" class="headerlink" title="安装 sshpass"></a>安装 sshpass</h2><p>下载：<span class="exturl" data-url="aHR0cDovL3NvdXJjZWZvcmdlLm5ldC9wcm9qZWN0cy9zc2hwYXNzL2ZpbGVzLw==" title="http://sourceforge.net/projects/sshpass/files/">http://sourceforge.net/projects/sshpass/files/<i class="fa fa-external-link"></i></span> 解压后，进入 sshpass 目录，执行安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<p>理论上不会出什么问题，安装好后，执行命令检查是否已经 OK</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sshpass -h</span><br></pre></td></tr></table></figure>
<h2 id="准备密码"><a href="#准备密码" class="headerlink" title="准备密码"></a>准备密码</h2><p>让 sshpass 使用 ssh 密码，需要先将密码保存在一个文件里，再通过 sshpass 读文件来获取密码，iterm2 就可以通过这样的命令来登录主机，密码文件很简单，取一个好名字，把密码写进去就可以了，没有别的任何东西，如，在用户目录的 sshpass 目录建一个名为 pass 的文件，里面写上主机密码：123456，文件地址为：/Users/用户名/sshpass/pass</p>
<h2 id="配置-iterm2"><a href="#配置-iterm2" class="headerlink" title="配置 iterm2"></a>配置 iterm2</h2><p>打开 iterm 的 profiles 选项 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL29ubHlmdS9CbG9nL2Jsb2IvbWFzdGVyL3N0YXRpYy9pbWFnZXMvMDEucG5n" title="https://github.com/onlyfu/Blog/blob/master/static/images/01.png"><img src="https://github.com/onlyfu/Blog/raw/master/static/images/01.png" alt="image"><i class="fa fa-external-link"></i></span>添加一个新的 profile，其它没什么好配置的，主要是在 General 的 command 中选择使用 command，命令就是 sshpass 的执行命令，如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/local/bin/sshpass -f /Users/fuwy/sshpass/pass ssh -p22 root@112.124.25.173</span><br></pre></td></tr></table></figure>
<p><code>/usr/local/bin/sshpass</code>是 sshpass 执行文件的路径，如果按默认情况安装，它肯定会出现在这个位置上</p>
<p><code>-f</code> 是告诉 sshpass 加载文件</p>
<p><code>/Users/fuwy/sshpass/pass</code>就是要加载的文件，即前面建的密码文件</p>
<p><code>ssh -p22 root@112.124.25.173</code>是说用 ssh 链接，端口 22，root 帐号和 IP 地址</p>
<p>保存后，选择该 profile，就可以实际 ssh 登录。只是如果是本机第一次登录，是不会成功的，因为 ssh 登录需要你 yes 确认，会写文件到 hosts 里，所以第一次会直接失败，再来一次或是先在终端里用 ssh root@ip 来登录一次，就可以了。 这样，新建多个 profile，就可以实现管理登录了。</p>
<p>iterm2 和 xshell 比起来还是有很多不好使的地方，比如，无法直接看到主机 IP，有时候想复制一下不方便。tab 上的名称不能自定义，多开几个之后，不太好区分等等。但是有总比没有好，所以，还是不错的。</p>
]]></content>
      <categories>
        <category>mac</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>终端</tag>
        <tag>iTerm2</tag>
        <tag>zsh</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>【转载】前端性能与异常上报</title>
    <url>/posts/1ba69eb7.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>如何优雅的处理异常呢？</p>
<ol>
<li>可疑区域增加 Try-Catch</li>
<li>全局监控 JS 异常 window.onerror</li>
<li>全局监控静态资源异常 window.addEventListener</li>
<li>捕获没有 Catch 的 Promise 异常：unhandledrejection</li>
<li>VUE errorHandler 和 React componentDidCatch</li>
<li>监控网页崩溃：window 对象的 load 和 beforeunload</li>
<li>跨域 crossOrigin 解决</li>
</ol>
<p>其实很简单，正如上文所说：采用组合方案，分类型的去捕获异常，这样基本 80%-90% 的问题都化于无形。</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hhcHB5bGluZHovYmxvZy9pc3N1ZXMvNQ==" title="https://github.com/happylindz/blog/issues/5">前端代码异常监控实战<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1JpY2FyZG9DYW8tQmlrZXIvRnJvbnQtRW5kLU1vbml0b3JpbmcvYmxvYi9tYXN0ZXIvQmFzaWNLbm93bGVkZ2UubWQ=" title="https://github.com/RicardoCao-Biker/Front-End-Monitoring/blob/master/BasicKnowledge.md">前端监控知识点<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL2phc29uamwubWUvYmxvZy8yMDE1LzA2LzIxL3Rha2luZy1hY3Rpb24tb24tYnJvd3Nlci1jcmFzaGVzLw==" title="http://jasonjl.me/blog/2015/06/21/taking-action-on-browser-crashes/">Logging Information on Browser Crashes<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2E5ODY1OTczNTMvYXJ0aWNsZS9kZXRhaWxzLzc4NDY5OTc5" title="https://blog.csdn.net/a986597353/article/details/78469979">Error Boundaries<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLnNlbnRyeS5pby8yMDE2LzAxLzA0L2NsaWVudC1qYXZhc2NyaXB0LXJlcG9ydGluZy13aW5kb3ctb25lcnJvcg==" title="https://blog.sentry.io/2016/01/04/client-javascript-reporting-window-onerror">Capture and report JavaScript errors with window.onerror<i class="fa fa-external-link"></i></span></li>
</ul>
<blockquote>
<p>原文地址: <span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YjVkY2ZiNDZmYjlhMDRmOGYzN2FmYmI=" title="https://juejin.im/post/5b5dcfb46fb9a04f8f37afbb">https://juejin.im/post/5b5dcfb46fb9a04f8f37afbb<i class="fa fa-external-link"></i></span></p>
</blockquote>
<a id="more"></a>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>对于后台开发来说，记录日志是一种非常常见的开发习惯，通常我们会使用<code>try...catch</code>代码块来主动捕获错误、对于每次接口调用，也会记录下每次接口调用的时间消耗，以便我们监控服务器接口性能，进行问题排查。</p>
<p>刚进公司时，在进行<code>Node.js</code>的接口开发时，我不太习惯每次排查问题都要通过跳板机登上服务器看日志，后来慢慢习惯了这种方式。</p>
<p>举个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取列表数据</span></span><br><span class="line"><span class="comment"> * @parma req, res</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">exports.getList = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//获取请求参数</span></span><br><span class="line">    <span class="keyword">const</span> openId = req.session.userinfo.openId;</span><br><span class="line">    logger.info(<span class="string">`handler getList, user openId is <span class="subst">$&#123;openId&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 拿到列表数据</span></span><br><span class="line">        <span class="keyword">const</span> startTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">        <span class="keyword">let</span> res = <span class="keyword">await</span> ListService.getListFromDB(openId);</span><br><span class="line">        logger.info(<span class="string">`handler getList, ListService.getListFromDB cost time <span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>().getTime() - startDate&#125;</span>`</span>);</span><br><span class="line">        <span class="comment">// 对数据处理，返回给前端</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125; <span class="keyword">catch</span>(error) &#123;</span><br><span class="line">        logger.error(<span class="string">`handler getList is error, <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(error)&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>以下代码经常会出现在用<code>Node.js</code>的接口中，在接口中会统计查询<code>DB</code>所耗时间、亦或是统计<code>RPC</code>服务调用所耗时间，以便监测性能瓶颈，对性能做优化；又或是对异常使用<code>try ... catch</code>主动捕获，以便随时对问题进行回溯、还原问题的场景，进行<code>bug</code>的修复。</p>
<p>而对于前端来说呢？可以看以下的场景。</p>
<p>最近在进行一个需求开发时，偶尔发现<code>webgl</code>渲染影像失败的情况，或者说影像会出现解析失败的情况，我们可能根本不知道哪张影像会解析或渲染失败；又或如最近开发的另外一个需求，我们会做一个关于<code>webgl</code>渲染时间的优化和影像预加载的需求，如果缺乏性能监控，该如何统计所做的渲染优化和影像预加载优化的优化比例，如何证明自己所做的事情具有价值呢？可能是通过测试同学的黑盒测试，对优化前后的时间进行录屏，分析从进入页面到影像渲染完成到底经过了多少帧图像。这样的数据，可能既不准确、又较为片面，设想测试同学并不是真正的用户，也无法还原真实的用户他们所处的网络环境。回过头来发现，我们的项目，虽然在服务端层面做好了日志和性能统计，但在前端对异常的监控和性能的统计。对于前端的性能与异常上报的可行性探索是有必要的。</p>
<h1 id="异常捕获"><a href="#异常捕获" class="headerlink" title="异常捕获"></a>异常捕获</h1><p>对于前端来说，我们需要的异常捕获无非为以下两种：</p>
<ul>
<li>接口调用情况；</li>
<li>页面逻辑是否错误，例如，用户进入页面后页面显示白屏；</li>
</ul>
<p>对于接口调用情况，在前端通常需要上报客户端相关参数，例如：用户OS与浏览器版本、请求参数（如页面ID）；而对于页面逻辑是否错误问题，通常除了用户OS与浏览器版本外，需要的是报错的堆栈信息及具体报错位置。</p>
<h2 id="异常捕获方法"><a href="#异常捕获方法" class="headerlink" title="异常捕获方法"></a>异常捕获方法</h2><h3 id="全局捕获"><a href="#全局捕获" class="headerlink" title="全局捕获"></a>全局捕获</h3><p>可以通过全局监听异常来捕获，通过<code>window.onerror</code>或者<code>addEventListener</code>，看以下例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">errorMessage, scriptURI, lineNo, columnNo, error</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'errorMessage: '</span> + errorMessage); <span class="comment">// 异常信息</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'scriptURI: '</span> + scriptURI); <span class="comment">// 异常文件路径</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'lineNo: '</span> + lineNo); <span class="comment">// 异常行号</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'columnNo: '</span> + columnNo); <span class="comment">// 异常列号</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'error: '</span> + error); <span class="comment">// 异常堆栈信息</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// 异常上报</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'这是一个错误'</span>);</span><br></pre></td></tr></table></figure>
<p><img src="https://image.xuebin.me/1ba69eb7/164e673466b32bf3.png" alt="164e673466b32bf3"></p>
<p>通过<code>window.onerror</code>事件，可以得到具体的异常信息、异常文件的URL、异常的行号与列号及异常的堆栈信息，再捕获异常后，统一上报至我们的日志服务器。</p>
<p>亦或是，通过<code>window.addEventListener</code>方法来进行异常上报，道理同理：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// 异常上报</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'这是一个错误'</span>);</span><br></pre></td></tr></table></figure>
<p><img src="https://image.xuebin.me/1ba69eb7/164e673466dc884f.png" alt="164e673466dc884f"></p>
<h3 id="try…-catch"><a href="#try…-catch" class="headerlink" title="try… catch"></a>try… catch</h3><p>使用<code>try... catch</code>虽然能够较好地进行异常捕获，不至于使得页面由于一处错误挂掉，但<code>try ... catch</code>捕获方式显得过于臃肿，大多代码使用<code>try ... catch</code>包裹，影响代码可读性。</p>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="跨域脚本无法准确捕获异常"><a href="#跨域脚本无法准确捕获异常" class="headerlink" title="跨域脚本无法准确捕获异常"></a>跨域脚本无法准确捕获异常</h3><p>通常情况下，我们会把静态资源，如<code>JavaScript</code>脚本放到专门的静态资源服务器，亦或者<code>CDN</code>，看以下例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;title&gt;<span class="xml"><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">  &lt;script type="text/</span>javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">    // 在index.html</span></span><br><span class="line"><span class="string">    window.onerror = function(errorMessage, scriptURI, lineNo, columnNo, error) &#123;</span></span><br><span class="line"><span class="string">      console.log('errorMessage: ' + errorMessage); // 异常信息</span></span><br><span class="line"><span class="string">      console.log('scriptURI: ' + scriptURI); // 异常文件路径</span></span><br><span class="line"><span class="string">      console.log('lineNo: ' + lineNo); // 异常行号</span></span><br><span class="line"><span class="string">      console.log('columnNo: ' + columnNo); // 异常列号</span></span><br><span class="line"><span class="string">      console.log('error: ' + error); // 异常堆栈信息</span></span><br><span class="line"><span class="string">      // ...</span></span><br><span class="line"><span class="string">      // 异常上报</span></span><br><span class="line"><span class="string">    &#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  &lt;/script&gt;</span></span><br><span class="line"><span class="string">  &lt;script src="</span>./error.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// error.js</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'这是一个错误'</span>);</span><br></pre></td></tr></table></figure>
<p><img src="https://image.xuebin.me/1ba69eb7/164e673468d04a7b.png" alt="164e673468d04a7b"></p>
<p>结果显示，跨域之后<code>window.onerror</code>根本捕获不到正确的异常信息，而是统一返回一个<code>Script error</code>，</p>
<p>解决方案：对<code>script</code>标签增加一个<code>crossorigin=”anonymous”</code>，并且服务器添加<code>Access-Control-Allow-Origin</code>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://cdn.xxx.com/index.js"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="sourceMap"><a href="#sourceMap" class="headerlink" title="sourceMap"></a>sourceMap</h3><p>通常在生产环境下的代码是经过<code>webpack</code>打包后压缩混淆的代码，所以我们可能会遇到这样的问题，如图所示：</p>
<p><img src="https://image.xuebin.me/1ba69eb7/164e67346f96b43a.png" alt="164e67346f96b43a"></p>
<p>我们发现所有的报错的代码行数都在第一行了，为什么呢？这是因为在生产环境下，我们的代码被压缩成了一行：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> n=&#123;&#125;;<span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params">o</span>)</span>&#123;<span class="keyword">if</span>(n[o])<span class="keyword">return</span> n[o].exports;<span class="keyword">var</span> t=n[o]=&#123;<span class="attr">i</span>:o,<span class="attr">l</span>:!<span class="number">1</span>,<span class="attr">exports</span>:&#123;&#125;&#125;;<span class="keyword">return</span> e[o].call(t.exports,t,t.exports,r),t.l=!<span class="number">0</span>,t.exports&#125;r.m=e,r.c=n,r.d=<span class="function"><span class="keyword">function</span>(<span class="params">e,n,o</span>)</span>&#123;r.o(e,n)||<span class="built_in">Object</span>.defineProperty(e,n,&#123;<span class="attr">enumerable</span>:!<span class="number">0</span>,<span class="attr">get</span>:o&#125;)&#125;,r.r=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="string">"undefined"</span>!=<span class="keyword">typeof</span> <span class="built_in">Symbol</span>&amp;&amp;<span class="built_in">Symbol</span>.toStringTag&amp;&amp;<span class="built_in">Object</span>.defineProperty(e,<span class="built_in">Symbol</span>.toStringTag,&#123;<span class="attr">value</span>:<span class="string">"Module"</span>&#125;),<span class="built_in">Object</span>.defineProperty(e,<span class="string">"__esModule"</span>,&#123;<span class="attr">value</span>:!<span class="number">0</span>&#125;)&#125;,r.t=<span class="function"><span class="keyword">function</span>(<span class="params">e,n</span>)</span>&#123;<span class="keyword">if</span>(<span class="number">1</span>&amp;n&amp;&amp;(e=r(e)),<span class="number">8</span>&amp;n)<span class="keyword">return</span> e;<span class="keyword">if</span>(<span class="number">4</span>&amp;n&amp;&amp;<span class="string">"object"</span>==<span class="keyword">typeof</span> e&amp;&amp;e&amp;&amp;e.__esModule)<span class="keyword">return</span> e;<span class="keyword">var</span> o=<span class="built_in">Object</span>.create(<span class="literal">null</span>);<span class="keyword">if</span>(r.r(o),<span class="built_in">Object</span>.defineProperty(o,<span class="string">"default"</span>,&#123;<span class="attr">enumerable</span>:!<span class="number">0</span>,<span class="attr">value</span>:e&#125;),<span class="number">2</span>&amp;n&amp;&amp;<span class="string">"string"</span>!=<span class="keyword">typeof</span> e)<span class="keyword">for</span>(<span class="keyword">var</span> t <span class="keyword">in</span> e)r.d(o,t,<span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;<span class="keyword">return</span> e[n]&#125;.bind(<span class="literal">null</span>,t));<span class="keyword">return</span> o&#125;,r.n=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> n=e&amp;&amp;e.__esModule?<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> e.default&#125;:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> e&#125;;<span class="keyword">return</span> r.d(n,<span class="string">"a"</span>,n),n&#125;,r.o=<span class="function"><span class="keyword">function</span>(<span class="params">e,n</span>)</span>&#123;<span class="keyword">return</span> <span class="built_in">Object</span>.prototype.hasOwnProperty.call(e,n)&#125;,r.p=<span class="string">""</span>,r(r.s=<span class="number">0</span>)&#125;([<span class="function"><span class="keyword">function</span>(<span class="params">e,n</span>)</span>&#123;<span class="keyword">throw</span> <span class="built_in">window</span>.onerror=<span class="function"><span class="keyword">function</span>(<span class="params">e,n,r,o,t</span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">"errorMessage: "</span>+e),<span class="built_in">console</span>.log(<span class="string">"scriptURI: "</span>+n),<span class="built_in">console</span>.log(<span class="string">"lineNo: "</span>+r),<span class="built_in">console</span>.log(<span class="string">"columnNo: "</span>+o),<span class="built_in">console</span>.log(<span class="string">"error: "</span>+t);<span class="keyword">var</span> l=&#123;<span class="attr">errorMessage</span>:e||<span class="literal">null</span>,<span class="attr">scriptURI</span>:n||<span class="literal">null</span>,<span class="attr">lineNo</span>:r||<span class="literal">null</span>,<span class="attr">columnNo</span>:o||<span class="literal">null</span>,<span class="attr">stack</span>:t&amp;&amp;t.stack?t.stack:<span class="literal">null</span>&#125;;<span class="keyword">if</span>(XMLHttpRequest)&#123;<span class="keyword">var</span> u=<span class="keyword">new</span> XMLHttpRequest;u.open(<span class="string">"post"</span>,<span class="string">"/middleware/errorMsg"</span>,!<span class="number">0</span>),u.setRequestHeader(<span class="string">"Content-Type"</span>,<span class="string">"application/json"</span>),u.send(<span class="built_in">JSON</span>.stringify(l))&#125;&#125;,<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"这是一个错误"</span>)&#125;]);</span><br></pre></td></tr></table></figure>
<p>在我的开发过程中也遇到过这个问题，我在开发一个功能组件库的时候，使用<code>npm link</code>了我的组件库，但是由于组件库被<code>npm link</code>后是打包后的生产环境下的代码，所有的报错都定位到了第一行。</p>
<p>解决办法是开启<code>webpack</code>的<code>source-map</code>，我们利用<code>webpack</code>打包后的生成的一份<code>.map</code>的脚本文件就可以让浏览器对错误位置进行追踪了。此处可以参考<span class="exturl" data-url="aHR0cHM6Ly93ZWJwYWNrLmpzLm9yZy9ndWlkZXMvZGV2ZWxvcG1lbnQvI3VzaW5nLXNvdXJjZS1tYXBz" title="https://webpack.js.org/guides/development/#using-source-maps">webpack document<i class="fa fa-external-link"></i></span>。</p>
<p>其实就是<code>webpack.config.js</code>中加上一行<code>devtool: &#39;source-map&#39;</code>，如下所示，为示例的<code>webpack.config.js</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    devtool: <span class="string">'source-map'</span>,</span><br><span class="line">    mode: <span class="string">'development'</span>,</span><br><span class="line">    entry: <span class="string">'./client/index.js'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">'bundle.js'</span>,</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'client'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在<code>webpack</code>打包后生成对应的<code>source-map</code>，这样浏览器就能够定位到具体错误的位置：</p>
<p><img src="https://image.xuebin.me/1ba69eb7/164e673466239e06.png" alt="164e673466239e06"></p>
<p>开启<code>source-map</code>的缺陷是兼容性，目前只有<code>Chrome</code>浏览器和<code>Firefox</code>浏览器才对<code>source-map</code>支持。不过我们对这一类情况也有解决办法。可以使用引入<code>npm</code>库来支持<code>source-map</code>，可以参考<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvc291cmNlLW1hcA==" title="https://github.com/mozilla/source-map">mozilla/source-map<i class="fa fa-external-link"></i></span>。这个<code>npm</code>库既可以运行在客户端也可以运行在服务端，不过更为推荐的是在服务端使用<code>Node.js</code>对接收到的日志信息时使用<code>source-map</code>解析，以避免源代码的泄露造成风险，如下代码所示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> router = express.Router();</span><br><span class="line"><span class="keyword">const</span> sourceMap = <span class="built_in">require</span>(<span class="string">'source-map'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> resolve = <span class="function"><span class="params">file</span> =&gt;</span> path.resolve(__dirname, file);</span><br><span class="line"><span class="comment">// 定义post接口</span></span><br><span class="line">router.get(<span class="string">'/error/'</span>, <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 获取前端传过来的报错对象</span></span><br><span class="line">    <span class="keyword">let</span> error = <span class="built_in">JSON</span>.parse(req.query.error);</span><br><span class="line">    <span class="keyword">let</span> url = error.scriptURI; <span class="comment">// 压缩文件路径</span></span><br><span class="line">    <span class="keyword">if</span> (url) &#123;</span><br><span class="line">        <span class="keyword">let</span> fileUrl = url.slice(url.indexOf(<span class="string">'client/'</span>)) + <span class="string">'.map'</span>; <span class="comment">// map文件路径</span></span><br><span class="line">        <span class="comment">// 解析sourceMap</span></span><br><span class="line">        <span class="keyword">let</span> consumer = <span class="keyword">await</span> <span class="keyword">new</span> sourceMap.SourceMapConsumer(fs.readFileSync(resolve(<span class="string">'../'</span> + fileUrl), <span class="string">'utf8'</span>)); <span class="comment">// 返回一个promise对象</span></span><br><span class="line">        <span class="comment">// 解析原始报错数据</span></span><br><span class="line">        <span class="keyword">let</span> result = consumer.originalPositionFor(&#123;</span><br><span class="line">            line: error.lineNo, <span class="comment">// 压缩后的行号</span></span><br><span class="line">            column: error.columnNo <span class="comment">// 压缩后的列号</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="built_in">console</span>.log(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure>
<p>如下图所示，我们已经可以看到，在服务端已经成功解析出了具体错误的行号、列号，我们可以通过日志的方式进行记录，达到了前端异常监控的目的。</p>
<p><img src="https://image.xuebin.me/1ba69eb7/164e673466efea2b.png" alt="164e673466efea2b"></p>
<h3 id="Vue捕获异常"><a href="#Vue捕获异常" class="headerlink" title="Vue捕获异常"></a>Vue捕获异常</h3><p>在我的项目中就遇到这样的问题，使用了<code>js-tracker</code>这样的插件来统一进行全局的异常捕获和日志上报，结果发现我们根本捕获不到<code>Vue</code>组件的异常，查阅资料得知，在<code>Vue</code>中，异常可能被<code>Vue</code>自身给<code>try ... catch</code>了，不会传到<code>window.onerror</code>事件触发，那么我们如何把<code>Vue</code>组件中的异常作统一捕获呢？</p>
<p>使用<span class="exturl" data-url="aHR0cHM6Ly9jbi52dWVqcy5vcmcvdjIvYXBpLyNlcnJvckhhbmRsZXI=" title="https://cn.vuejs.org/v2/api/#errorHandler">Vue.config.errorHandler<i class="fa fa-external-link"></i></span>这样的<code>Vue</code>全局配置，可以在<code>Vue</code>指定组件的渲染和观察期间未捕获错误的处理函数。这个处理函数被调用时，可获取错误信息和<code>Vue</code> 实例。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.config.errorHandler = <span class="function"><span class="keyword">function</span> (<span class="params">err, vm, info</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// handle error</span></span><br><span class="line">  <span class="comment">// `info` 是 Vue 特定的错误信息，比如错误所在的生命周期钩子</span></span><br><span class="line">  <span class="comment">// 只在 2.2.0+ 可用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在<code>React</code>中，可以使用<code>ErrorBoundary</code>组件包括业务组件的方式进行异常捕获，配合<code>React 16.0+</code>新出的<code>componentDidCatch API</code>，可以实现统一的异常捕获和日志上报。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ErrorBoundary</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123; <span class="attr">hasError</span>: <span class="literal">false</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidCatch(error, info) &#123;</span><br><span class="line">    <span class="comment">// Display fallback UI</span></span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; <span class="attr">hasError</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">    <span class="comment">// You can also log the error to an error reporting service</span></span><br><span class="line">    logErrorToMyService(error, info);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state.hasError) &#123;</span><br><span class="line">      <span class="comment">// You can render any custom fallback UI</span></span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Something went wrong.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.props.children;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用方式如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ErrorBoundary</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">MyWidget</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ErrorBoundary</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="性能监控"><a href="#性能监控" class="headerlink" title="性能监控"></a>性能监控</h1><h2 id="最简单的性能监控"><a href="#最简单的性能监控" class="headerlink" title="最简单的性能监控"></a>最简单的性能监控</h2><p>最常见的性能监控需求则是需要我们统计用户从开始请求页面到所有<code>DOM</code>元素渲染完成的时间，也就是俗称的首屏加载时间，<code>DOM</code>提供了这一接口，监听<code>document</code>的<code>DOMContentLoaded</code>事件与<code>window</code>的<code>load</code>事件可统计页面首屏加载时间即所有<code>DOM</code>渲染时间：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 记录页面加载开始时间</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> timerStart = <span class="built_in">Date</span>.now();</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 加载静态资源，如样式资源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 加载静态JS资源 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"DOM 挂载时间: "</span>, <span class="built_in">Date</span>.now() - timerStart);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 性能日志上报</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"所有资源加载完成时间: "</span>, <span class="built_in">Date</span>.now()-timerStart);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 性能日志上报</span></span></span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>对于使用框架，如<code>Vue</code>或者说<code>React</code>，组件是异步渲染然后挂载到<code>DOM</code>的，在页面初始化时并没有太多的<code>DOM</code>节点，可以参考下文<span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxMzAxNjc2Mw==" title="https://segmentfault.com/a/1190000013016763">关于首屏时间采集自动化的解决方案<i class="fa fa-external-link"></i></span>来对渲染时间进行打点。</p>
<h2 id="performance"><a href="#performance" class="headerlink" title="performance"></a>performance</h2><p>但是以上时间的监控过于粗略，例如我们想统计文档的网络加载耗时、解析<code>DOM</code>的耗时与渲染<code>DOM</code>的耗时，就不太好办到了，所幸的是浏览器提供了<code>window.performance</code>接口，具体可见<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL1BlcmZvcm1hbmNl" title="https://developer.mozilla.org/zh-CN/docs/Web/API/Performance">MDN文档<i class="fa fa-external-link"></i></span></p>
<p><img src="https://image.xuebin.me/1ba69eb7/164e6734d5c03ff5.png" alt="164e6734d5c03ff5"></p>
<p>几乎所有浏览器都支持<code>window.performance</code>接口，下面来看看在控制台打印<code>window.performance</code>可以得到些什么：</p>
<p><img src="https://image.xuebin.me/1ba69eb7/164e6734d6cb922e.png" alt="164e6734d6cb922e"></p>
<p>可以看到，<code>window,performance</code>主要包括有<code>memory</code>、<code>navigation</code>、<code>timing</code>以及<code>timeOrigin</code>及<code>onresourcetimingbufferfull</code>方法。</p>
<ul>
<li><code>navigation</code>对象提供了在指定的时间段里发生的操作相关信息，包括页面是加载还是刷新、发生了多少次重定向等等。</li>
<li><code>timing</code>对象包含延迟相关的性能信息。这是我们页面加载性能优化需求中主要上报的相关信息。</li>
<li><code>memory</code>为<code>Chrome</code>添加的一个非标准扩展，这个属性提供了一个可以获取到基本内存使用情况的对象。在其它浏览器应该考虑到这个<code>API</code>的兼容处理。</li>
<li><code>timeOrigin</code>则返回性能测量开始时的时间的高精度时间戳。如图所示，精确到了小数点后四位。</li>
<li><code>onresourcetimingbufferfull</code>方法，它是一个在<code>resourcetimingbufferfull</code>事件触发时会被调用的<code>event handler</code>。这个事件当浏览器的资源时间性能缓冲区已满时会触发。可以通过监听这一事件触发来预估页面<code>crash</code>，统计页面<code>crash</code>概率，以便后期的性能优化，如下示例所示：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buffer_full</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"WARNING: Resource Timing Buffer is FULL!"</span>);</span><br><span class="line">  performance.setResourceTimingBufferSize(<span class="number">200</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Set a callback if the resource buffer becomes filled</span></span><br><span class="line">  performance.onresourcetimingbufferfull = buffer_full;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">"init()"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="计算网站性能"><a href="#计算网站性能" class="headerlink" title="计算网站性能"></a>计算网站性能</h3><p>使用<code>performance</code>的<code>timing</code>属性，可以拿到页面性能相关的数据，这里在很多文章都有提到关于利用<code>window.performance.timing</code>记录页面性能的文章，例如<code>alloyteam</code>团队写的<span class="exturl" data-url="aHR0cDovL3d3dy5hbGxveXRlYW0uY29tLzIwMTUvMDkvZXhwbG9yZS1wZXJmb3JtYW5jZS8=" title="http://www.alloyteam.com/2015/09/explore-performance/">初探 performance – 监控网页与程序性能<i class="fa fa-external-link"></i></span>，对于<code>timing</code>的各项属性含义，可以借助摘自此文的下图理解，以下代码摘自此文作为计算网站性能的工具函数参考：</p>
<p><img src="https://image.xuebin.me/1ba69eb7/164e673552f64206.png" alt="164e673552f64206"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取 performance 数据</span></span><br><span class="line"><span class="keyword">var</span> performance = &#123;  </span><br><span class="line">    <span class="comment">// memory 是非标准属性，只在 Chrome 有</span></span><br><span class="line">    <span class="comment">// 财富问题：我有多少内存</span></span><br><span class="line">    memory: &#123;</span><br><span class="line">        usedJSHeapSize:  <span class="number">16100000</span>, <span class="comment">// JS 对象（包括V8引擎内部对象）占用的内存，一定小于 totalJSHeapSize</span></span><br><span class="line">        totalJSHeapSize: <span class="number">35100000</span>, <span class="comment">// 可使用的内存</span></span><br><span class="line">        jsHeapSizeLimit: <span class="number">793000000</span> <span class="comment">// 内存大小限制</span></span><br><span class="line">    &#125;,</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//  哲学问题：我从哪里来？</span></span><br><span class="line">    navigation: &#123;</span><br><span class="line">        redirectCount: <span class="number">0</span>, <span class="comment">// 如果有重定向的话，页面通过几次重定向跳转而来</span></span><br><span class="line">        type: <span class="number">0</span>           <span class="comment">// 0   即 TYPE_NAVIGATENEXT 正常进入的页面（非刷新、非重定向等）</span></span><br><span class="line">                          <span class="comment">// 1   即 TYPE_RELOAD       通过 window.location.reload() 刷新的页面</span></span><br><span class="line">                          <span class="comment">// 2   即 TYPE_BACK_FORWARD 通过浏览器的前进后退按钮进入的页面（历史记录）</span></span><br><span class="line">                          <span class="comment">// 255 即 TYPE_UNDEFINED    非以上方式进入的页面</span></span><br><span class="line">    &#125;,</span><br><span class="line"> </span><br><span class="line">    timing: &#123;</span><br><span class="line">        <span class="comment">// 在同一个浏览器上下文中，前一个网页（与当前页面不一定同域）unload 的时间戳，如果无前一个网页 unload ，则与 fetchStart 值相等</span></span><br><span class="line">        navigationStart: <span class="number">1441112691935</span>,</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 前一个网页（与当前页面同域）unload 的时间戳，如果无前一个网页 unload 或者前一个网页与当前页面不同域，则值为 0</span></span><br><span class="line">        unloadEventStart: <span class="number">0</span>,</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 和 unloadEventStart 相对应，返回前一个网页 unload 事件绑定的回调函数执行完毕的时间戳</span></span><br><span class="line">        unloadEventEnd: <span class="number">0</span>,</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 第一个 HTTP 重定向发生时的时间。有跳转且是同域名内的重定向才算，否则值为 0 </span></span><br><span class="line">        redirectStart: <span class="number">0</span>,</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 最后一个 HTTP 重定向完成时的时间。有跳转且是同域名内部的重定向才算，否则值为 0 </span></span><br><span class="line">        redirectEnd: <span class="number">0</span>,</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 浏览器准备好使用 HTTP 请求抓取文档的时间，这发生在检查本地缓存之前</span></span><br><span class="line">        fetchStart: <span class="number">1441112692155</span>,</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// DNS 域名查询开始的时间，如果使用了本地缓存（即无 DNS 查询）或持久连接，则与 fetchStart 值相等</span></span><br><span class="line">        domainLookupStart: <span class="number">1441112692155</span>,</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// DNS 域名查询完成的时间，如果使用了本地缓存（即无 DNS 查询）或持久连接，则与 fetchStart 值相等</span></span><br><span class="line">        domainLookupEnd: <span class="number">1441112692155</span>,</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// HTTP（TCP） 开始建立连接的时间，如果是持久连接，则与 fetchStart 值相等</span></span><br><span class="line">        <span class="comment">// 注意如果在传输层发生了错误且重新建立连接，则这里显示的是新建立的连接开始的时间</span></span><br><span class="line">        connectStart: <span class="number">1441112692155</span>,</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// HTTP（TCP） 完成建立连接的时间（完成握手），如果是持久连接，则与 fetchStart 值相等</span></span><br><span class="line">        <span class="comment">// 注意如果在传输层发生了错误且重新建立连接，则这里显示的是新建立的连接完成的时间</span></span><br><span class="line">        <span class="comment">// 注意这里握手结束，包括安全连接建立完成、SOCKS 授权通过</span></span><br><span class="line">        connectEnd: <span class="number">1441112692155</span>,</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// HTTPS 连接开始的时间，如果不是安全连接，则值为 0</span></span><br><span class="line">        secureConnectionStart: <span class="number">0</span>,</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// HTTP 请求读取真实文档开始的时间（完成建立连接），包括从本地读取缓存</span></span><br><span class="line">        <span class="comment">// 连接错误重连时，这里显示的也是新建立连接的时间</span></span><br><span class="line">        requestStart: <span class="number">1441112692158</span>,</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// HTTP 开始接收响应的时间（获取到第一个字节），包括从本地读取缓存</span></span><br><span class="line">        responseStart: <span class="number">1441112692686</span>,</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// HTTP 响应全部接收完成的时间（获取到最后一个字节），包括从本地读取缓存</span></span><br><span class="line">        responseEnd: <span class="number">1441112692687</span>,</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 开始解析渲染 DOM 树的时间，此时 Document.readyState 变为 loading，并将抛出 readystatechange 相关事件</span></span><br><span class="line">        domLoading: <span class="number">1441112692690</span>,</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 完成解析 DOM 树的时间，Document.readyState 变为 interactive，并将抛出 readystatechange 相关事件</span></span><br><span class="line">        <span class="comment">// 注意只是 DOM 树解析完成，这时候并没有开始加载网页内的资源</span></span><br><span class="line">        domInteractive: <span class="number">1441112693093</span>,</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// DOM 解析完成后，网页内资源加载开始的时间</span></span><br><span class="line">        <span class="comment">// 在 DOMContentLoaded 事件抛出前发生</span></span><br><span class="line">        domContentLoadedEventStart: <span class="number">1441112693093</span>,</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// DOM 解析完成后，网页内资源加载完成的时间（如 JS 脚本加载执行完毕）</span></span><br><span class="line">        domContentLoadedEventEnd: <span class="number">1441112693101</span>,</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// DOM 树解析完成，且资源也准备就绪的时间，Document.readyState 变为 complete，并将抛出 readystatechange 相关事件</span></span><br><span class="line">        domComplete: <span class="number">1441112693214</span>,</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// load 事件发送给文档，也即 load 回调函数开始执行的时间</span></span><br><span class="line">        <span class="comment">// 注意如果没有绑定 load 事件，值为 0</span></span><br><span class="line">        loadEventStart: <span class="number">1441112693214</span>,</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// load 事件的回调函数执行完毕的时间</span></span><br><span class="line">        loadEventEnd: <span class="number">1441112693215</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 字母顺序</span></span><br><span class="line">        <span class="comment">// connectEnd: 1441112692155,</span></span><br><span class="line">        <span class="comment">// connectStart: 1441112692155,</span></span><br><span class="line">        <span class="comment">// domComplete: 1441112693214,</span></span><br><span class="line">        <span class="comment">// domContentLoadedEventEnd: 1441112693101,</span></span><br><span class="line">        <span class="comment">// domContentLoadedEventStart: 1441112693093,</span></span><br><span class="line">        <span class="comment">// domInteractive: 1441112693093,</span></span><br><span class="line">        <span class="comment">// domLoading: 1441112692690,</span></span><br><span class="line">        <span class="comment">// domainLookupEnd: 1441112692155,</span></span><br><span class="line">        <span class="comment">// domainLookupStart: 1441112692155,</span></span><br><span class="line">        <span class="comment">// fetchStart: 1441112692155,</span></span><br><span class="line">        <span class="comment">// loadEventEnd: 1441112693215,</span></span><br><span class="line">        <span class="comment">// loadEventStart: 1441112693214,</span></span><br><span class="line">        <span class="comment">// navigationStart: 1441112691935,</span></span><br><span class="line">        <span class="comment">// redirectEnd: 0,</span></span><br><span class="line">        <span class="comment">// redirectStart: 0,</span></span><br><span class="line">        <span class="comment">// requestStart: 1441112692158,</span></span><br><span class="line">        <span class="comment">// responseEnd: 1441112692687,</span></span><br><span class="line">        <span class="comment">// responseStart: 1441112692686,</span></span><br><span class="line">        <span class="comment">// secureConnectionStart: 0,</span></span><br><span class="line">        <span class="comment">// unloadEventEnd: 0,</span></span><br><span class="line">        <span class="comment">// unloadEventStart: 0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 计算加载时间</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPerformanceTiming</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> performance = <span class="built_in">window</span>.performance;</span><br><span class="line">    <span class="keyword">if</span> (!performance) &#123;</span><br><span class="line">        <span class="comment">// 当前浏览器不支持</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'你的浏览器不支持 performance 接口'</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> t = performance.timing;</span><br><span class="line">    <span class="keyword">var</span> times = &#123;&#125;;</span><br><span class="line">    <span class="comment">//【重要】页面加载完成的时间</span></span><br><span class="line">    <span class="comment">//【原因】这几乎代表了用户等待页面可用的时间</span></span><br><span class="line">    times.loadPage = t.loadEventEnd - t.navigationStart;</span><br><span class="line">    <span class="comment">//【重要】解析 DOM 树结构的时间</span></span><br><span class="line">    <span class="comment">//【原因】反省下你的 DOM 树嵌套是不是太多了！</span></span><br><span class="line">    times.domReady = t.domComplete - t.responseEnd;</span><br><span class="line">    <span class="comment">//【重要】重定向的时间</span></span><br><span class="line">    <span class="comment">//【原因】拒绝重定向！比如，http://example.com/ 就不该写成 http://example.com</span></span><br><span class="line">    times.redirect = t.redirectEnd - t.redirectStart;</span><br><span class="line">    <span class="comment">//【重要】DNS 查询时间</span></span><br><span class="line">    <span class="comment">//【原因】DNS 预加载做了么？页面内是不是使用了太多不同的域名导致域名查询的时间太长？</span></span><br><span class="line">    <span class="comment">// 可使用 HTML5 Prefetch 预查询 DNS ，见：[HTML5 prefetch](http://segmentfault.com/a/1190000000633364)            </span></span><br><span class="line">    times.lookupDomain = t.domainLookupEnd - t.domainLookupStart;</span><br><span class="line">    <span class="comment">//【重要】读取页面第一个字节的时间</span></span><br><span class="line">    <span class="comment">//【原因】这可以理解为用户拿到你的资源占用的时间，加异地机房了么，加CDN 处理了么？加带宽了么？加 CPU 运算速度了么？</span></span><br><span class="line">    <span class="comment">// TTFB 即 Time To First Byte 的意思</span></span><br><span class="line">    <span class="comment">// 维基百科：https://en.wikipedia.org/wiki/Time_To_First_Byte</span></span><br><span class="line">    times.ttfb = t.responseStart - t.navigationStart;</span><br><span class="line">    <span class="comment">//【重要】内容加载完成的时间</span></span><br><span class="line">    <span class="comment">//【原因】页面内容经过 gzip 压缩了么，静态资源 css/js 等压缩了么？</span></span><br><span class="line">    times.request = t.responseEnd - t.requestStart;</span><br><span class="line">    <span class="comment">//【重要】执行 onload 回调函数的时间</span></span><br><span class="line">    <span class="comment">//【原因】是否太多不必要的操作都放到 onload 回调函数里执行了，考虑过延迟加载、按需加载的策略么？</span></span><br><span class="line">    times.loadEvent = t.loadEventEnd - t.loadEventStart;</span><br><span class="line">    <span class="comment">// DNS 缓存时间</span></span><br><span class="line">    times.appcache = t.domainLookupStart - t.fetchStart;</span><br><span class="line">    <span class="comment">// 卸载页面的时间</span></span><br><span class="line">    times.unloadEvent = t.unloadEventEnd - t.unloadEventStart;</span><br><span class="line">    <span class="comment">// TCP 建立连接完成握手的时间</span></span><br><span class="line">    times.connect = t.connectEnd - t.connectStart;</span><br><span class="line">    <span class="keyword">return</span> times;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="日志上报"><a href="#日志上报" class="headerlink" title="日志上报"></a>日志上报</h1><h2 id="单独的日志域名"><a href="#单独的日志域名" class="headerlink" title="单独的日志域名"></a>单独的日志域名</h2><p>对于日志上报使用单独的日志域名的目的是避免对业务造成影响。其一，对于服务器来说，我们肯定不希望占用业务服务器的计算资源，也不希望过多的日志在业务服务器堆积，造成业务服务器的存储空间不够的情况。其二，我们知道在页面初始化的过程中，会对页面加载时间、PV、UV等数据进行上报，这些上报请求会和加载业务数据几乎是同时刻发出，而浏览器一般会对同一个域名的请求量有并发数的限制，如<code>Chrome</code>会有对并发数为<code>6</code>个的限制。因此需要对日志系统单独设定域名，最小化对页面加载性能造成的影响。</p>
<h2 id="跨域的问题"><a href="#跨域的问题" class="headerlink" title="跨域的问题"></a>跨域的问题</h2><p>对于单独的日志域名，肯定会涉及到跨域的问题，采取的解决方案一般有以下两种：</p>
<ul>
<li>一种是构造空的<code>Image</code>对象的方式，其原因是请求图片并不涉及到跨域的问题；</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> url = <span class="string">'xxx'</span>;</span><br><span class="line"><span class="keyword">new</span> Image().src = url;</span><br></pre></td></tr></table></figure>
<ul>
<li>利用<code>Ajax</code>上报日志，必须对日志服务器接口开启跨域请求头部<code>Access-Control-Allow-Origin:*</code>，这里<code>Ajax</code>就并不强制使用<code>GET</code>请求了，即可克服<code>URL</code>长度限制的问题。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (XMLHttpRequest) &#123;</span><br><span class="line">  <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  xhr.open(<span class="string">'post'</span>, <span class="string">'https://log.xxx.com'</span>, <span class="literal">true</span>); <span class="comment">// 上报给node中间层处理</span></span><br><span class="line">  xhr.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/json'</span>); <span class="comment">// 设置请求头</span></span><br><span class="line">  xhr.send(<span class="built_in">JSON</span>.stringify(errorObj)); <span class="comment">// 发送参数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在我的项目中使用的是第一种的方式，也就是构造空的<code>Image</code>对象，但是我们知道对于<code>GET</code>请求会有长度的限制，需要确保的是请求的长度不会超过阈值。</p>
<h2 id="省去响应主体"><a href="#省去响应主体" class="headerlink" title="省去响应主体"></a>省去响应主体</h2><p>对于我们上报日志，其实对于客户端来说，并不需要考虑上报的结果，甚至对于上报失败，我们也不需要在前端做任何交互，所以上报来说，其实使用<code>HEAD</code>请求就够了，接口返回空的结果，最大地减少上报日志造成的资源浪费。</p>
<h2 id="合并上报"><a href="#合并上报" class="headerlink" title="合并上报"></a>合并上报</h2><p>类似于雪碧图的思想，如果我们的应用需要上报的日志数量很多，那么有必要合并日志进行统一的上报。</p>
<p>解决方案可以是尝试在用户离开页面或者组件销毁时发送一个异步的<code>POST</code>请求来进行上报，但是尝试在卸载（<code>unload</code>）文档之前向<code>web</code>服务器发送数据。保证在文档卸载期间发送数据一直是一个困难。因为用户代理通常会忽略在卸载事件处理器中产生的异步<code>XMLHttpRequest</code>，因为此时已经会跳转到下一个页面。所以这里是必须设置为同步的<code>XMLHttpRequest</code>请求吗？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'unload'</span>, logData, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> client = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    client.open(<span class="string">"POST"</span>, <span class="string">"/log"</span>, <span class="literal">false</span>); <span class="comment">// 第三个参数表明是同步的 xhr</span></span><br><span class="line">    client.setRequestHeader(<span class="string">"Content-Type"</span>, <span class="string">"text/plain;charset=UTF-8"</span>);</span><br><span class="line">    client.send(analyticsData);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用同步的方式势必会对用户体验造成影响，甚至会让用户感受到浏览器卡死感觉，对于产品而言，体验非常不好，通过查阅<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL05hdmlnYXRvci9zZW5kQmVhY29u" title="https://developer.mozilla.org/zh-CN/docs/Web/API/Navigator/sendBeacon">MDN文档<i class="fa fa-external-link"></i></span>，可以使用<code>sendBeacon()</code>方法，将会使用户代理在有机会时异步地向服务器发送数据，同时不会延迟页面的卸载或影响下一导航的载入性能。这就解决了提交分析数据时的所有的问题：使它可靠，异步并且不会影响下一页面的加载。此外，代码实际上还要比其他技术简单！</p>
<p>下面的例子展示了一个理论上的统计代码模式——通过使用<code>sendBeacon()</code>方法向服务器发送数据。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'unload'</span>, logData, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    navigator.sendBeacon(<span class="string">"/log"</span>, analyticsData);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>作为前端开发者而言，要对产品保持敬畏之心，时刻保持对性能追求极致，对异常不可容忍的态度。前端的性能监控与异常上报显得尤为重要。</p>
<p>代码难免有问题，对于异常可以使用<code>window.onerror</code>或者<code>addEventListener</code>的方式添加全局的异常捕获侦听函数，但可能使用这种方式无法正确捕获到错误：对于跨域的脚本，需要对<code>script</code>标签增加一个<code>crossorigin=”anonymous”</code>；对于生产环境打包的代码，无法正确定位到异常产生的行数，可以使用<code>source-map</code>来解决；而对于使用框架的情况，需要在框架统一的异常捕获处埋点。</p>
<p>而对于性能的监控，所幸的是浏览器提供了<code>window.performance API</code>，通过这个<code>API</code>，很便捷地获取到当前页面性能相关的数据。</p>
<p>而这些异常和性能数据如何上报呢？一般说来，为了避免对业务产生的影响，会单独建立日志服务器和日志域名，但对于不同的域名，又会产生跨域的问题。我们可以通过构造空的<code>Image</code>对象来解决，亦或是通过设定跨域请求头部<code>Access-Control-Allow-Origin:*</code>来解决。此外，如果上报的性能和日志数据高频触发，则可以在页面<code>unload</code>时统一上报，而<code>unload</code>时的异步请求又可能会被浏览器所忽略，且不能改为同步请求。此时<code>navigator.sendBeacon API</code>可算帮了我们大忙，它可用于通过<code>HTTP</code>将少量数据异步传输到<code>Web</code>服务器。而忽略页面<code>unload</code>时的影响。</p>
]]></content>
      <categories>
        <category>前端</category>
        <category>监控</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>前端</tag>
        <tag>转载</tag>
        <tag>性能</tag>
        <tag>异常上报</tag>
        <tag>监控</tag>
      </tags>
  </entry>
  <entry>
    <title>【转载】一次掌握 JavaScript ES5 到 ES8 数组内容</title>
    <url>/posts/66a64bad.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote>
<p><strong>原文地址</strong>：<span class="exturl" data-url="aHR0cHM6Ly9odWZhbmd5dW4uY29tLzIwMTcvYXJyYXktbGVhcm4v" title="https://hufangyun.com/2017/array-learn/">https://hufangyun.com/2017/array-learn/<i class="fa fa-external-link"></i></span></p>
</blockquote>
<p><img src="https://image.xuebin.me/006tNc79ly1ftax1g9jxtj31c00ubb29.jpg" alt="github.com/tooto1985/js-array-operations"></p>
<a id="more"></a>
<h2 id="ECMAScript-5-1-中提供的数组方法"><a href="#ECMAScript-5-1-中提供的数组方法" class="headerlink" title="ECMAScript 5.1 中提供的数组方法"></a>ECMAScript 5.1 中提供的数组方法</h2><p>其中部分方法，ECMAScript 3 就出现了，但是本文不再细分。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi81LjEvI3NlYy0xNS40" title="https://www.ecma-international.org/ecma-262/5.1/#sec-15.4">ECMA-262/5.1 规范<i class="fa fa-external-link"></i></span></p>
<h3 id="判断是否是数组"><a href="#判断是否是数组" class="headerlink" title="判断是否是数组"></a>判断是否是数组</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.isArray(arg)</span><br><span class="line"><span class="comment">// false or true</span></span><br></pre></td></tr></table></figure>
<p>不支持此方法的 IE9-等浏览器可以这样处理：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.toString.call(obj) === <span class="string">'[object Array]'</span></span><br></pre></td></tr></table></figure>
<h3 id="转换方法"><a href="#转换方法" class="headerlink" title="转换方法"></a>转换方法</h3><h4 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h4><p>数组的 <code>valueOf</code> 会默认调用 <code>toString</code> 方法，所以他们的返回值一样，都是逗号分隔每一项组成的字符串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> months = [<span class="string">'Jan'</span>, <span class="string">'Feb'</span>, <span class="string">'Mar'</span>, <span class="string">'Apr'</span>]</span><br><span class="line">months.toString() <span class="comment">// "Jan,Feb,Mar,Apr"</span></span><br></pre></td></tr></table></figure>
<h4 id="toLocaleString-NaN"><a href="#toLocaleString-NaN" class="headerlink" title="toLocaleString"></a>toLocaleString</h4><p>调用数组每一项的 <code>toLocaleString</code> 方法，有时和 <code>toString</code> 方法的结果是一样的。有时也不同，比如 <code>Date</code> 对象元素组成的数组里，返回的结果会不同。</p>
<h4 id="join"><a href="#join" class="headerlink" title="join"></a>join</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">a.join() <span class="comment">// 'Wind,Rain,Fire'</span></span><br><span class="line">a.join(<span class="string">', '</span>) <span class="comment">// 'Wind, Rain, Fire'</span></span><br><span class="line">a.join(<span class="string">' + '</span>) <span class="comment">// 'Wind + Rain + Fire'</span></span><br><span class="line">a.join(<span class="string">''</span>) <span class="comment">// 'WindRainFire'</span></span><br></pre></td></tr></table></figure>
<p>如果数组中的某一项的值是 <code>null</code> 或者 <code>undefined</code>，那么该值在 <code>join()</code>、<code>toLocale-String()</code>、<code>toString()</code> 和 <code>valueOf()</code> 方法返回的结果中以空字符串表示</p>
<p>对应的逆向方法是 <code>String.split()</code></p>
<h3 id="栈方法"><a href="#栈方法" class="headerlink" title="栈方法"></a>栈方法</h3><h4 id="pop-删除数组的最后一项"><a href="#pop-删除数组的最后一项" class="headerlink" title="pop 删除数组的最后一项"></a>pop 删除数组的最后一项</h4><p>操作原数组，返回删除项</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">var</span> b = a.pop()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// [1, 2]</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
<h4 id="push-在数组末尾添加新元素"><a href="#push-在数组末尾添加新元素" class="headerlink" title="push 在数组末尾添加新元素"></a>push 在数组末尾添加新元素</h4><p>操作的原数组，返回数组长度</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">var</span> b = a.push(<span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// [1, 2, 3, 4, 5]</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>
<h3 id="队列方法"><a href="#队列方法" class="headerlink" title="队列方法"></a>队列方法</h3><h4 id="shift-删除数组的第一项"><a href="#shift-删除数组的第一项" class="headerlink" title="shift 删除数组的第一项"></a>shift 删除数组的第一项</h4><p>操作的原数组，返回删除项</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">var</span> b = a.shift()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// [2, 3]</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<h4 id="unshift-数组的前面添加新元素"><a href="#unshift-数组的前面添加新元素" class="headerlink" title="unshift 数组的前面添加新元素"></a>unshift 数组的前面添加新元素</h4><p>操作的原数组，返回数组长度</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">var</span> b = a.unshift(<span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// [4, 5, 1, 2, 3]</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>
<h3 id="重排序方法"><a href="#重排序方法" class="headerlink" title="重排序方法"></a>重排序方法</h3><h4 id="reverse-反转数组项的顺序"><a href="#reverse-反转数组项的顺序" class="headerlink" title="reverse 反转数组项的顺序"></a>reverse 反转数组项的顺序</h4><p>操作原数组，返回数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>]</span><br><span class="line"><span class="keyword">var</span> b = a.reverse()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// ['three', 'two', 'one']</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// ['three', 'two', 'one']</span></span><br></pre></td></tr></table></figure>
<h4 id="sort-排序"><a href="#sort-排序" class="headerlink" title="sort 排序"></a>sort 排序</h4><p>按照 Unicode code 位置排序，默认升序</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fruit = [<span class="string">'cherries'</span>, <span class="string">'apples'</span>, <span class="string">'bananas'</span>]</span><br><span class="line">fruit.sort() <span class="comment">// ['apples', 'bananas', 'cherries']</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> scores = [<span class="number">1</span>, <span class="number">10</span>, <span class="number">21</span>, <span class="number">2</span>]</span><br><span class="line">scores.sort() <span class="comment">// [1, 10, 2, 21]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// because '10' is mix of two characters '1' and '0' so '10' is before '2' in Unicode code point order.</span></span><br></pre></td></tr></table></figure>
<p>排序后 <code>undefined</code> 会被放在数组末尾</p>
<p>之前写过一篇排序方法的深入解读，感兴趣请点击这里</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxMDY0ODc0MA==" title="https://segmentfault.com/a/1190000010648740">深入浅出 JavaScript 的 Array.prototype.sort 排序算法<i class="fa fa-external-link"></i></span></p>
<h3 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h3><h4 id="concat-合并数组"><a href="#concat-合并数组" class="headerlink" title="concat 合并数组"></a>concat 合并数组</h4><p>返回新数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr3 = arr1.concat(arr2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr3)</span><br><span class="line"><span class="comment">// expected output: ["a", "b", "c", "d", "e", "f"]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr4 = arr1.concat(<span class="number">1</span>, [<span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line"><span class="built_in">console</span>.log(arr4)</span><br><span class="line"><span class="comment">//猜猜这个的结果？</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出： ['a', 'b', 'c', 1, 4, [5, 6]]</span></span><br><span class="line"><span class="comment">//如果传入的是数组，取的是其值。但是数组中的数组，是保留的。</span></span><br></pre></td></tr></table></figure>
<h4 id="slice-基于当前数组创建新数组"><a href="#slice-基于当前数组创建新数组" class="headerlink" title="slice 基于当前数组创建新数组"></a>slice 基于当前数组创建新数组</h4><p>返回新数组</p>
<p>传入两个参数 起始位置（包含） 结束位置（不包含），虎头蛇尾，有始无终。</p>
<p>只传一个参数默认截取到数组末尾, 会认为是开始位置</p>
<p>传递的参数中有一个负数，则用数组长度加上该数来确定位置。长度为 5 的数组 <code>slice（-2，-1）</code> 与 <code>slice（3, 4）</code>结果相同。</p>
<p>结束位置小于起始位置，则返回空数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>]</span><br><span class="line"><span class="keyword">var</span> sliced = a.slice(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// ['1', '2', '3', '4']</span></span><br><span class="line"><span class="built_in">console</span>.log(sliced) <span class="comment">// ['2', '3']</span></span><br></pre></td></tr></table></figure>
<h4 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h4><p>可以实现 删除、插入（元素个数大于要删除的元素个数）、替换（删除一个，再添加一个）</p>
<p>返回被删除元素组成的数组，如果没有被删除元素，返回空数组</p>
<p>参数： 起始位置(包含)、要删除的元素个数、元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myFish = [<span class="string">'angel'</span>, <span class="string">'clown'</span>, <span class="string">'mandarin'</span>, <span class="string">'sturgeon'</span>]</span><br><span class="line"></span><br><span class="line">myFish.splice(<span class="number">2</span>, <span class="number">0</span>, <span class="string">'drum'</span>)</span><br><span class="line"><span class="comment">// ["angel", "clown", "drum", "mandarin", "sturgeon"]</span></span><br><span class="line"></span><br><span class="line">myFish.splice(<span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment">// ["angel", "clown", "mandarin", "sturgeon"]</span></span><br><span class="line"></span><br><span class="line">myFish.splice(<span class="number">-1</span>, <span class="number">0</span>, <span class="string">'drum'</span>)</span><br><span class="line"><span class="comment">//["angel", "clown", "mandarin", "drum", "sturgeon"]</span></span><br></pre></td></tr></table></figure>
<p>区别于 <code>concat</code> 如果插入数组，就会插入数组，而不是将数组拆开。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">myFish.splice(<span class="number">2</span>, <span class="number">1</span>, [<span class="string">'hello'</span>, <span class="string">'world'</span>])</span><br><span class="line"><span class="comment">// ["angel", "clown", ["hello", "world"], "sturgeon"]</span></span><br></pre></td></tr></table></figure>
<h3 id="位置方法"><a href="#位置方法" class="headerlink" title="位置方法"></a>位置方法</h3><p><code>indexOf</code> 和 <code>lastIndexOf</code> 都接受两个参数：查找的值、查找起始位置</p>
<p>不存在，返回 -1 ；存在，返回位置。<code>indexOf</code> 是从前往后查找， <code>lastIndexOf</code> 是从后往前查找。</p>
<h4 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">2</span>, <span class="number">9</span>, <span class="number">9</span>]</span><br><span class="line">a.indexOf(<span class="number">2</span>) <span class="comment">// 0</span></span><br><span class="line">a.indexOf(<span class="number">7</span>) <span class="comment">// -1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a.indexOf(<span class="number">7</span>) === <span class="number">-1</span>) &#123;</span><br><span class="line">  <span class="comment">// element doesn't exist in array</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="lastIndexOf"><a href="#lastIndexOf" class="headerlink" title="lastIndexOf"></a>lastIndexOf</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">2</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">2</span>]</span><br><span class="line">numbers.lastIndexOf(<span class="number">2</span>) <span class="comment">// 3</span></span><br><span class="line">numbers.lastIndexOf(<span class="number">7</span>) <span class="comment">// -1</span></span><br><span class="line">numbers.lastIndexOf(<span class="number">2</span>, <span class="number">3</span>) <span class="comment">// 3</span></span><br><span class="line">numbers.lastIndexOf(<span class="number">2</span>, <span class="number">2</span>) <span class="comment">// 0</span></span><br><span class="line">numbers.lastIndexOf(<span class="number">2</span>, <span class="number">-2</span>) <span class="comment">// 0</span></span><br><span class="line">numbers.lastIndexOf(<span class="number">2</span>, <span class="number">-1</span>) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
<h3 id="迭代方法"><a href="#迭代方法" class="headerlink" title="迭代方法"></a>迭代方法</h3><p>ECMAScript 5 提供了 5 个迭代方法，他们的参数都是</p>
<p>给定的函数(当前元素、位置、数组)</p>
<p>可选的，执行回调是的 this 值</p>
<h4 id="every"><a href="#every" class="headerlink" title="every"></a>every</h4><p>对数组的每一项都运行给定的函数，每一项都返回 ture,则返回 true</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isBigEnough</span>(<span class="params">element, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> element &lt; <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">;[<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">4</span>].every(isBigEnough) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<h4 id="some"><a href="#some" class="headerlink" title="some"></a>some</h4><p>对数组的每一项都运行给定的函数，任意一项返回 ture,则返回 true</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isBiggerThan10</span>(<span class="params">element, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> element &gt; <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">;[<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">4</span>].some(isBiggerThan10) <span class="comment">// false</span></span><br><span class="line">;[<span class="number">12</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">4</span>].some(isBiggerThan10) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><p>对数组的每一项都运行给定的函数，返回 结果为 ture 的项组成的数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> words = [<span class="string">'spray'</span>, <span class="string">'limit'</span>, <span class="string">'elite'</span>, <span class="string">'exuberant'</span>, <span class="string">'destruction'</span>, <span class="string">'present'</span>, <span class="string">'happy'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> longWords = words.filter(<span class="function"><span class="keyword">function</span>(<span class="params">word</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> word.length &gt; <span class="number">6</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// Filtered array longWords is ["exuberant", "destruction", "present"]</span></span><br></pre></td></tr></table></figure>
<h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><p>对数组的每一项都运行给定的函数，返回每次函数调用的结果组成一个新数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>]</span><br><span class="line"><span class="keyword">var</span> doubles = numbers.map(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x * <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// doubles is now [2, 10, 20, 30]</span></span><br><span class="line"><span class="comment">// numbers is still [1, 5, 10, 15]</span></span><br></pre></td></tr></table></figure>
<h4 id="forEach-数组遍历"><a href="#forEach-数组遍历" class="headerlink" title="forEach 数组遍历"></a>forEach 数组遍历</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> items = [<span class="string">'item1'</span>, <span class="string">'item2'</span>, <span class="string">'item3'</span>]</span><br><span class="line"><span class="keyword">const</span> copy = []</span><br><span class="line"></span><br><span class="line">items.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">  copy.push(item)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="缩小方法"><a href="#缩小方法" class="headerlink" title="缩小方法"></a>缩小方法</h3><p>reduce、reduceRight 一个是从前往后遍历，一个是从后往前遍历，比上面的五个迭代方法回调函数多了一个参数：上一项的值</p>
<p>回调函数参数(累加器返回的值、当前元素、当前的位置、数组) 初始值</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvcmVkdWNl" title="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce">MDN reduce<i class="fa fa-external-link"></i></span></p>
<h4 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = numbers.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">accumulator, currentValue</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> accumulator + currentValue</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br><span class="line"><span class="comment">// expected output: 6</span></span><br></pre></td></tr></table></figure>
<p><strong>实战例子</strong></p>
<p>将数组转化成所需格式的对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">  &#123;<span class="attr">envName</span>: <span class="string">'stg'</span>, <span class="attr">cpu</span>: <span class="number">4</span>, <span class="attr">memory</span>: <span class="number">2</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">envName</span>: <span class="string">'pre'</span>, <span class="attr">cpu</span>: <span class="number">2</span>, <span class="attr">memory</span>: <span class="number">4</span>&#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> newObj = arr.reduce(<span class="function">(<span class="params">acc, o</span>) =&gt;</span> &#123;</span><br><span class="line">  acc[o.envName] = &#123;</span><br><span class="line">    cpu: o.cpu,</span><br><span class="line">    memory: o.memory</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> acc;</span><br><span class="line">&#125;, &#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(newObj);</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"stg"</span>: &#123;</span><br><span class="line">    <span class="string">"cpu"</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="string">"memory"</span>: <span class="number">2</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"pre"</span>: &#123;</span><br><span class="line">    <span class="string">"cpu"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">"memory"</span>: <span class="number">4</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="reduceRight"><a href="#reduceRight" class="headerlink" title="reduceRight"></a>reduceRight</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> flattened = [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]].reduceRight(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a.concat(b)</span><br><span class="line">&#125;, [])</span><br><span class="line"></span><br><span class="line"><span class="comment">// flattened is [4, 5, 2, 3, 0, 1]</span></span><br></pre></td></tr></table></figure>
<h3 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h3><p>队列方法和栈方法操作的都是原数组，增加数组元素的时候，返回值是数组长度；删除数组元素的时候，返回值是被删除的元素。</p>
<h4 id="哪些方法改变了原数组？"><a href="#哪些方法改变了原数组？" class="headerlink" title="哪些方法改变了原数组？"></a>哪些方法改变了原数组？</h4><p>栈方法：<code>push</code>、<code>pop</code></p>
<p>队列方法：<code>shift</code>、<code>unshift</code></p>
<p>重排序方法：<code>reverse</code>、<code>sort</code></p>
<p>操作方法：<code>splice</code></p>
<h4 id="哪些方法返回的是数组？"><a href="#哪些方法返回的是数组？" class="headerlink" title="哪些方法返回的是数组？"></a>哪些方法返回的是数组？</h4><p>重排序方法：<code>reverse</code>、<code>sort</code></p>
<p>操作方法：<code>splice</code>、<code>slice</code>、<code>concat</code></p>
<p>迭代方法中：<code>filter</code>、<code>map</code></p>
<h2 id="ECMAScript-6-0-新增的方法"><a href="#ECMAScript-6-0-新增的方法" class="headerlink" title="ECMAScript 6.0 新增的方法"></a>ECMAScript 6.0 新增的方法</h2><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1hcnJheS1vYmplY3Rz" title="https://www.ecma-international.org/ecma-262/6.0/#sec-array-objects">ECMA-262/6.0 规范<i class="fa fa-external-link"></i></span></p>
<h3 id="from"><a href="#from" class="headerlink" title="from"></a>from</h3><p>将类似数组的对象（array-like object）和可遍历（iterable）的对象转为真正的数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> bar = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line"><span class="built_in">Array</span>.from(bar)</span><br><span class="line"><span class="comment">// ["a", "b", "c"]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.from(<span class="string">'foo'</span>)</span><br><span class="line"><span class="comment">// ["f", "o", "o"]</span></span><br></pre></td></tr></table></figure>
<h3 id="of"><a href="#of" class="headerlink" title="of"></a>of</h3><p>用于将一组值，转换为数组</p>
<p>这个方法的主要目的，是弥补数组构造函数 <code>Array()</code> 的不足。因为参数个数的不同，会导致 <code>Array()</code> 的行为有差异。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>() <span class="comment">// []</span></span><br><span class="line"><span class="built_in">Array</span>(<span class="number">3</span>) <span class="comment">// [, , ,]</span></span><br><span class="line"><span class="built_in">Array</span>(<span class="number">3</span>, <span class="number">11</span>, <span class="number">8</span>) <span class="comment">// [3, 11, 8]</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.of(<span class="number">7</span>) <span class="comment">// [7]</span></span><br><span class="line"><span class="built_in">Array</span>.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) <span class="comment">// [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>(<span class="number">7</span>) <span class="comment">// [ , , , , , , ]</span></span><br><span class="line"><span class="built_in">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure>
<h3 id="copyWithin"><a href="#copyWithin" class="headerlink" title="copyWithin"></a>copyWithin</h3><p>将指定位置的元素复制到其他位置（会覆盖原有元素），返回当前数组。该方法会修改当前数组。</p>
<p>它接受三个参数。</p>
<ul>
<li>target（必需）：从该位置开始替换数据。</li>
<li>start（可选）：从该位置开始读取数据，默认为 0。如果为负值，表示倒数。</li>
<li>end（可选）：到该位置前停止读取数据，默认等于数组长度。如果为负值，表示倒数。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].copyWithin(<span class="number">-2</span>)</span><br><span class="line"><span class="comment">// [1, 2, 3, 1, 2]</span></span><br><span class="line">;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].copyWithin(<span class="number">0</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment">// [4, 5, 3, 4, 5]</span></span><br><span class="line">;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].copyWithin(<span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="comment">// [4, 2, 3, 4, 5]</span></span><br><span class="line">;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].copyWithin(<span class="number">-2</span>, <span class="number">-3</span>, <span class="number">-1</span>)</span><br><span class="line"><span class="comment">// [1, 2, 3, 3, 4]</span></span><br></pre></td></tr></table></figure>
<h3 id="fill"><a href="#fill" class="headerlink" title="fill"></a>fill</h3><p>使用给定值，填充一个数组。</p>
<p>会抹除数组原有的元素</p>
<p>还可以接受第二个和第三个参数，用于指定填充的起始位置和结束位置。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">numbers.fill(<span class="number">1</span>)</span><br><span class="line"><span class="comment">// results in [1, 1, 1]</span></span><br><span class="line">;[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>].fill(<span class="number">7</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment">// ['a', 7, 'c']</span></span><br></pre></td></tr></table></figure>
<h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p>找出第一个符合条件的数组元素，参数是一个回调函数，所有数组元素依次执行该回调函数，直到找出第一个返回值为 <code>true</code> 的元素，然后返回该元素。如果没有符合条件的元素，则返回 <code>undefined</code>。回调函数可以接受三个参数，依次为当前的值、当前的位置和原数组。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">;[<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>]</span><br><span class="line">  .find(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">9</span></span><br><span class="line">  &#125;) <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line">  [(<span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>)].find(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value &gt; <span class="number">9</span></span><br><span class="line">  &#125;) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
<h3 id="findIndex"><a href="#findIndex" class="headerlink" title="findIndex"></a>findIndex</h3><p><code>findIndex</code> 方法的用法与 <code>find</code> 方法非常类似，返回第一个符合条件的数组元素的位置，如果所有元素都不符合条件，则返回 -1。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">;[<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>].findIndex(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">9</span></span><br><span class="line">&#125;) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>ES6 提供三个新的方法—— entries()，keys()和 values() —— 用于遍历数组。它们都返回一个遍历器对象，可以用 for…of 循环进行遍历，唯一的区别是 keys() 是对键名的遍历、values() 是对键值的遍历，entries() 是对键值对的遍历。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">of</span> [<span class="string">'a'</span>, <span class="string">'b'</span>].keys()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(index)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> elem <span class="keyword">of</span> [<span class="string">'a'</span>, <span class="string">'b'</span>].values()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(elem)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 'a'</span></span><br><span class="line"><span class="comment">// 'b'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [index, elem] <span class="keyword">of</span> [<span class="string">'a'</span>, <span class="string">'b'</span>].entries()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(index, elem)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0 "a"</span></span><br><span class="line"><span class="comment">// 1 "b"</span></span><br></pre></td></tr></table></figure>
<h3 id="entries"><a href="#entries" class="headerlink" title="entries"></a>entries</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line"><span class="keyword">var</span> iterator = a.entries()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next().value) <span class="comment">// [0, 'a']</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next().value) <span class="comment">// [1, 'b']</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next().value) <span class="comment">// [2, 'c']</span></span><br></pre></td></tr></table></figure>
<h3 id="keys"><a href="#keys" class="headerlink" title="keys"></a>keys</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line"><span class="keyword">var</span> iterator = arr.keys()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next()) <span class="comment">// &#123; value: 0, done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next()) <span class="comment">// &#123; value: 1, done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next()) <span class="comment">// &#123; value: 2, done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next()) <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="values"><a href="#values" class="headerlink" title="values"></a>values</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">'w'</span>, <span class="string">'y'</span>, <span class="string">'k'</span>, <span class="string">'o'</span>, <span class="string">'p'</span>]</span><br><span class="line"><span class="keyword">var</span> iterator = a.values()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next().value) <span class="comment">// w</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next().value) <span class="comment">// y</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next().value) <span class="comment">// k</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next().value) <span class="comment">// o</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next().value) <span class="comment">// p</span></span><br></pre></td></tr></table></figure>
<p>更多使用方式，可以参考 <span class="exturl" data-url="aHR0cHM6Ly9lczYucnVhbnlpZmVuZy5jb20vI2RvY3MvYXJyYXk=" title="https://es6.ruanyifeng.com/#docs/array">阮一峰 ECMAScript 6 入门<i class="fa fa-external-link"></i></span></p>
<h2 id="ECMAScript-7-0-新增的方法"><a href="#ECMAScript-7-0-新增的方法" class="headerlink" title="ECMAScript 7.0 新增的方法"></a>ECMAScript 7.0 新增的方法</h2><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wcm9wZXJ0aWVzLW9mLXRoZS1hcnJheS1wcm90b3R5cGUtb2JqZWN0" title="https://www.ecma-international.org/ecma-262/7.0/#sec-properties-of-the-array-prototype-object">ECMA-262/7.0 规范<i class="fa fa-external-link"></i></span></p>
<h3 id="includes"><a href="#includes" class="headerlink" title="includes"></a>includes</h3><p>判断数组中是否存在该元素</p>
<p>参数：查找的值、起始位置</p>
<p>可以替换 ES5 时代的 <code>indexOf</code> 判断方式</p>
<p><code>indexOf</code> 判断元素是否为 <code>NaN</code>，会判断错误</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">a.includes(<span class="number">2</span>) <span class="comment">// true</span></span><br><span class="line">a.includes(<span class="number">4</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi84LjAvaW5kZXguaHRtbCNzZWMtYXJyYXktb2JqZWN0cw==" title="https://www.ecma-international.org/ecma-262/8.0/index.html#sec-array-objects">ECMA-262/8.0 规范<i class="fa fa-external-link"></i></span></p>
<p>ES8 没增加数组方法</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>JavaScript 高级程序设计</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXk=" title="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array">MDN web docs<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9lczYucnVhbnlpZmVuZy5jb20vI2RvY3MvYXJyYXk=" title="https://es6.ruanyifeng.com/#docs/array">阮一峰 ECMAScript 6 入门<i class="fa fa-external-link"></i></span></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>前端</tag>
        <tag>开发</tag>
        <tag>转载</tag>
        <tag>array</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac 解决蓝牙设备卡顿的方法</title>
    <url>/posts/a27e07b1.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>话说使用 <span class="exturl" data-url="aHR0cHM6Ly93d3cuaXBsYXlzb2Z0LmNvbS9nby9tYWM=" title="https://www.iplaysoft.com/go/mac">Mac 电脑<i class="fa fa-external-link"></i></span>的同学，一般同时使用蓝牙键鼠、耳机等设备都比较多，而且 <span class="exturl" data-url="aHR0cHM6Ly93d3cuaXBsYXlzb2Z0LmNvbS9vcy9tYWMtcGxhdGZvcm0=" title="https://www.iplaysoft.com/os/mac-platform">macOS<i class="fa fa-external-link"></i></span> 的很多新特性比如通用剪贴板、Handoff、Continuity 等都需要使用蓝牙辅助，因此如果蓝牙常常受到干扰，还是挺痛苦的。</p>
<a id="more"></a>
<p>为此 <span class="exturl" data-url="aHR0cHM6Ly93d3cuc2VwdGlsbGlvbi5jbi9hcmNoaXZlcy8yMzQ0" title="https://www.septillion.cn/archives/2344">Septillion<i class="fa fa-external-link"></i></span> 同学找到了一个妙方！解决思路是酱紫的：既然干扰多，那么理论上我们只要手动去<span class="exturl" data-url="aHR0cHM6Ly93d3cuaXBsYXlzb2Z0LmNvbS90YWcvJUU2JTg5JUFCJUU2JThGJThG" title="https://www.iplaysoft.com/tag/%E6%89%AB%E6%8F%8F">扫描<i class="fa fa-external-link"></i></span>整个频率，找到干扰最小的信道即可避免被干扰了。实际操作也挺简单：</p>
<ol>
<li>下载苹果专为开发者提供的硬件调试工具 <span class="exturl" data-url="aHR0cHM6Ly9kbC5pcGxheXNvZnQuY29tL2ZpbGVzLzQ0NDcuaHRtbA==" title="https://dl.iplaysoft.com/files/4447.html">Hardware IO Tools<i class="fa fa-external-link"></i></span></li>
<li>双击挂载镜像，打开其中的 <strong>Bluetooth Explorer</strong>，注意这时是不会出现任何窗口的。</li>
<li>在屏幕顶部「菜单栏」上找到并点击 Tools -&gt; RSSI Sweeper<br><img src="https://image.xuebin.me/006tKfTcly1ftaglp65f1j30hl0cfq52.jpg" alt="RSSI Sweeper"></li>
<li>在弹出的窗口中点击 Start，之后你所有蓝牙设备都会断开连接，软件开始扫描整个频段，完成后一部分会重新连接（如下图）<br><img src="https://image.xuebin.me/006tKfTcly1ftaglxnslbj30iu0dgdhr.jpg" alt="RSSI Sweeper"></li>
<li>关掉软件，蓝牙设备会再次断开连接并重新连接</li>
<li>卸载镜像，尽情享受蓝牙无线的乐趣吧！￼</li>
</ol>
<p>实际测试，在经过开启路由器的“蓝牙共存”设置，以及上面刚说的这几步操作之后，我在 iMac 和 MacBook 上，无论是键鼠使用还是蓝牙耳机听歌，都基本告别了卡顿断开等问题了。</p>
<blockquote>
<p>另外，还可以参考这篇文章「<span class="exturl" data-url="aHR0cHM6Ly93d3cuaXBsYXlzb2Z0LmNvbS93aWZpLXNsb3ctc29sdXRpb24uaHRtbA==" title="https://www.iplaysoft.com/wifi-slow-solution.html">WiFi 无线上网速度慢怎么办？几招解决无线路由器断网/不稳定/网速慢的办法<i class="fa fa-external-link"></i></span>」为 2.4G 信号换到一个干扰较少的信道，以获得更好的 WIFI 连接速度和稳定性。</p>
</blockquote>
]]></content>
      <categories>
        <category>mac</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>蓝牙</tag>
      </tags>
  </entry>
  <entry>
    <title>HEXO-NexT的Local Search转圈圈问题</title>
    <url>/posts/abcc0996.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>有时候更新完文章，会莫名导致 NexT 的 LocalSearsh 有问题，<br>像是点击搜索卡住转圈圈状态也没办法解掉，这篇纪录如何解决。</p>
<a id="more"></a>
<h1 id="Step1-检查搜寻机制"><a href="#Step1-检查搜寻机制" class="headerlink" title="Step1. 检查搜寻机制"></a>Step1. 检查搜寻机制</h1><p>由于使用的是 localSearch，<br>会透过编译完后 public 里面的<code>search.xml</code>作为搜寻主体，<br>有了搜寻主体后就要先去验证格式的正确性，但我跟 XML 格式并不熟，<br>内容量太大也没办法肉眼去验证，就找了线上验证的网站，<br>把<code>search.xml</code>的内容全部丢下去验证后跳出了这个错误。</p>
<blockquote>
<p>线上找会有很多，我是用 google 找到的第一个<span class="exturl" data-url="aHR0cHM6Ly93d3cueG1sdmFsaWRhdGlvbi5jb20v" title="https://www.xmlvalidation.com/">https://www.xmlvalidation.com/<i class="fa fa-external-link"></i></span></p>
</blockquote>
<p><img src="https://image.xuebin.me/006tNbRwly1fx7mixvqzlj30nw014web.jpg" alt></p>
<h1 id="Step2-Unicode-0x8"><a href="#Step2-Unicode-0x8" class="headerlink" title="Step2. Unicode: 0x8"></a>Step2. Unicode: 0x8</h1><p>得到了这样子的错误讯息后，就马上拿去问 google 啦~<br>也发现从标题中有满多人是在跟 md 档案有关系的互动时产生的问题，<br>点了其中一篇 GitHub 中关于<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL291bHZoYWkvTVdlYi1pc3N1ZXMvaXNzdWVzLzUxNA==" title="https://github.com/oulvhai/MWeb-issues/issues/514">EverNote<i class="fa fa-external-link"></i></span>的发问，<br>里面有人回应这个错误是因为产生了一个 backspace 的字符，顺着查下去！</p>
<h1 id="Step3-显示看不到的-backspace-字符"><a href="#Step3-显示看不到的-backspace-字符" class="headerlink" title="Step3. 显示看不到的 backspace 字符"></a>Step3. 显示看不到的 backspace 字符</h1><p>我是使用 VSCODE，开启方式是到设定中打开打开之后就可以看到凶手了！<code>renderControlCharacters</code> <img src="https://image.xuebin.me/006tNbRwly1fx7mkcn7ylj30p80bomxc.jpg" alt="img"></p>
<p><img src="https://image.xuebin.me/006tNbRwly1fx7mkg749gj30oo080jrd.jpg" alt="img"></p>
<h1 id="Step4-搜寻并替换"><a href="#Step4-搜寻并替换" class="headerlink" title="Step4. 搜寻并替换"></a>Step4. 搜寻并替换</h1><p>经过查询，backspace 的 unicode 是<code>\u0008</code>，<br>而 VSCODE 的档案搜寻正则表达式使用的是 Rust 要输入<code>\x{0008}</code>，<br>但是我查了很久总是搜不出我要的档案，我也不知道哪里出错，<br>就这样查了很久很久才发现，直接把那个超小的<code>bs</code>框起来复制丢上搜寻框就好！！！<br>虽然搜寻框内的 bs 肉眼看不 j 到，但是实际上他会去进行搜寻，<br>接着就一个一个替换吧（一个一个替换是因为我只替换我自己产出的档案，避免影响其他东西）。</p>
<p>也可以在<span class="exturl" data-url="aHR0cDovL3d3dy5jbmJsb2dzLmNvbS9kZWVyY2hhby9hcmNoaXZlLzIwMDYvMDgvMjQvemhlbmd6aGUzMGZlbmd6aG9uZ2ppYW9jaGVuZy5odG1sI2dyb3VwaW5n" title="http://www.cnblogs.com/deerchao/archive/2006/08/24/zhengzhe30fengzhongjiaocheng.html#grouping"><code>正则</code><i class="fa fa-external-link"></i></span>模式搜索下：<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[vscode 控制字符引起的问题以及解决思路](https://segmentfault.com/a/1190000013357949#articleHeader7)
">[1]</span></a></sup></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">;<span class="regexp">/[\u0000]|[\u0001]|[\u0002]|[\u0003]|[\u0004]|[\u0005]|[\u0006]|[\u0007]|[\u0008]|[\u000b]|[\u000c]|[\u000d]|[\u000e]|[\u000f]|[\u0010]|[\u0011]|[\u0012]|[\u0013]|[\u0014]|[\u0015]|[\u0016]|[\u0017]|[\u0018]|[\u0019]|[\u001a]|[\u001b]|[\u001c]|[\u001d]|[\u001e]|[\u001f]|[\u001c]|[\u007f]/gm</span></span><br></pre></td></tr></table></figure>
<h1 id="Step5-重编译一次测试看看吧"><a href="#Step5-重编译一次测试看看吧" class="headerlink" title="Step5. 重编译一次测试看看吧"></a>Step5. 重编译一次测试看看吧</h1><p>当完成修改后，重新测试理论上搜寻框就修好了～～<br>找原因的途中也是学了不少啊：D</p>
<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxMzM1Nzk0OSNhcnRpY2xlSGVhZGVyNw==" title="https://segmentfault.com/a/1190000013357949#articleHeader7">vscode 控制字符引起的问题以及解决思路<i class="fa fa-external-link"></i></span><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>建站</tag>
        <tag>blog</tag>
        <tag>博客</tag>
        <tag>hexo</tag>
        <tag>markdown</tag>
        <tag>搜索</tag>
      </tags>
  </entry>
  <entry>
    <title>git删除tag标签</title>
    <url>/posts/f14d4f81.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>在管理项目中，使用 Git 管理代码，发现 TAG 的删除比较头痛，经常出现有人创建了 TAG，过一段时间删除，可自己本地的 TAG 一直存在，如果 push 这个 TAG 到远端，那么此 TAG 将永远不会被删除。 强迫症的人怎么可以忍受。<br>Let us go.</p>
<a id="more"></a>
<h1 id="批处理脚本"><a href="#批处理脚本" class="headerlink" title="批处理脚本"></a>批处理脚本</h1><blockquote>
<p>记得后缀是.sh</p>
</blockquote>
<h2 id="git-delete-remote-does-not-exist-tag-sh"><a href="#git-delete-remote-does-not-exist-tag-sh" class="headerlink" title="git_delete_remote_does_not_exist_tag.sh"></a><strong>git_delete_remote_does_not_exist_tag.sh</strong></h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">! /bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除远端不存在的tag</span></span><br><span class="line"></span><br><span class="line">cd $REPO/.git</span><br><span class="line">git tag -l | xargs git tag -d</span><br><span class="line">git fetch origin --prune</span><br><span class="line">git fetch origin --tags</span><br></pre></td></tr></table></figure>
<h2 id="git-delete-remote-tag-sh"><a href="#git-delete-remote-tag-sh" class="headerlink" title="git_delete_remote_tag.sh"></a>git_delete_remote_tag.sh</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">! /bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除远端tag</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> https://sexywp.com/how-to-bulk-delete-tags-local-and-remote.htm</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除远端所有tag</span></span><br><span class="line">git show-ref --tag | awk '/(.*)(\s+)(.*)$/ &#123;print ":" $2&#125;' | xargs git push origin</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> https://www.xingjiehu.com/2019/05/30/cjx9s7pjc000202omt4s02qgk/</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除制定规则以外的全部远端tag</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 先获取远程所有标签 | 然后用awk获取所有标签名 | 再用sed去掉带有^&#123;&#125;的标签 | 最后执行用git push删除</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> git ls-remote --tags | awk <span class="string">'/(.*)(\s+)(.*)$/ &#123;print ":" $2&#125;'</span> | sed <span class="string">'/&#125;$/'</span>d | xargs git push origin</span></span><br></pre></td></tr></table></figure>
<h1 id="SourceTree-创建自定义事件"><a href="#SourceTree-创建自定义事件" class="headerlink" title="SourceTree 创建自定义事件"></a>SourceTree 创建自定义事件</h1><ul>
<li><p>打开 sourceTree 的偏好设置</p>
<p><img src="https://image.xuebin.me/20190629162842.png" alt></p>
<!-- ![](https://i.loli.net/2019/06/29/5d17227494c5b14030.png) -->
</li>
<li><p>点击“添加”</p>
<p><img src="https://i.loli.net/2019/06/29/5d172294b44cd26056.png" alt></p>
<ol>
<li>输入标题</li>
<li>在“运行的脚本”，选择刚刚创建的脚本<strong>git_delete_remote_does_not_exist_tag.sh</strong></li>
<li>确定</li>
</ol>
<p><img src="https://i.loli.net/2019/06/29/5d1722a2cd1f465600.png" alt></p>
</li>
<li><p>执行操作</p>
<p>添加完成后，打开需要更新 TAG 的 Git 项目，然后选择自定义操作</p>
<p><img src="https://i.loli.net/2019/06/29/5d1722b25031834689.png" alt></p>
<p>坐等一会，远程不存在的 TAG 就 Gone 了。 _</p>
</li>
</ul>
<h1 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h1><p>如果执行自定义操作出现<code>launch path not accessible</code>错误提示，表示 shell 脚本文件没有权限。</p>
<p>只需要给文件授权即可：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod 0755 git_delete_remote_does_not_exist_tag.sh</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注：获取 TAG 的方法，点击“抓取”，然后选中“抓取并在本地存储所有标签”</strong></p>
<p><img src="https://i.loli.net/2019/06/29/5d1722c7abb5f59586.png" alt></p>
</blockquote>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>sourcetree</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>【转载】利用 Chrome 原生工具进行网页长截图</title>
    <url>/posts/7a0383e6.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>之前试用 Firefox Quantum 时，我最喜欢的特性之一就是其自带的截图功能。它不仅可以自动检测网页元素边界，还能轻松保存整个网页，十分方便。</p>
<p>后来由于扩展及习惯等原因，我又换回了 Chrome，但还是对该功能念念不忘。尽管商店里也有许多截图增强扩展，但在截取一些比较复杂的网页时，往往会出现元素错位、重复的现象。经过一番探索，我发现 Chrome 开发者工具中其实自带了截图命令，效果也令人满意，在这里分享给大家。</p>
<a id="more"></a>
<p>要想使用截图功能，你需要首先确保 Chrome 已升级至 59 或更高版本。在想要截图的网页中，首先按下 <code>⌘Command + ⌥Option + I</code>（Windows 为 <code>F12</code>）快捷键，召唤出调试界面。</p>
<p><img src="https://cdn.sspai.com/2017/12/07/a266a9c4d39ece8c89d0963356e693e3.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="请输入图片标题"></p>
<p>随后，按下 <code>⌘Command + ⇧Shift + P</code>（Windows 为 <code>Ctrl + Shift + P</code>），输入命令 <code>Capture full size screenshot</code></p>
<p>（只输前几个字母就能找到），敲下回车，Chrome 就会自动截取整个网页内容并保存至本地。由于是渲染引擎直接输出，其比普通扩展速度更快，分辨率也更高。</p>
<p><img src="https://cdn.sspai.com/2017/12/07/358b25902761063ac8f497d3065f5428.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="请输入图片标题"></p>
<p><img src="https://cdn.sspai.com/2017/12/07/5940f13c1456f03802ed2ca1bcf587b6.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="请输入图片标题"></p>
<p>除了普通长截图以外，你还可以利用这一功能截取手机版网页长图。只需要按下 <code>⌘Command + ⇧Shift + M</code> （Windows 为 <code>Ctrl + Shift + M</code>）模拟移动设备，再按刚才的方法运行命令就可以了。在顶部的工具栏中，你可以选择要模拟的设备和分辨率等设置。</p>
<p><img src="https://cdn.sspai.com/2017/12/07/9b8cbf4a106a321ac717285adf9be15c.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="请输入图片标题"></p>
<p><img src="https://cdn.sspai.com/2017/12/07/d9ac82b606655feb2441b6209eea5e63.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="请输入图片标题"></p>
<p>如果你想准确截取网页的某一部分，可以按下 <code>⌘Command + ⇧Shift + C</code>（Windows 为 <code>Ctrl + Shift + C</code>）嗅探元素。选中想要的部分后，再运行 <code>Capture node screenshot</code> 命令，一张完美的选区截图就诞生了。</p>
<p><img src="https://cdn.sspai.com/2017/12/07/aab2bb3492d9c3f762c822a6478e74da.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="请输入图片标题"></p>
<p><img src="https://cdn.sspai.com/2017/12/07/17a5f6c7fccf0e96afff2e74b0f00156.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="请输入图片标题"></p>
<p>此外，<code>Capture screenshot</code> 命令可以让你截取当前网页的可视部分。我也会继续发掘 Chrome 开发者工具的其它好玩用法，到时推荐给大家。</p>
<blockquote>
<p>转载自：<span class="exturl" data-url="aHR0cHM6Ly9zc3BhaS5jb20vcG9zdC80MjE5Mw==" title="https://sspai.com/post/42193">https://sspai.com/post/42193<i class="fa fa-external-link"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>Chrome</tag>
      </tags>
  </entry>
  <entry>
    <title>PWA - workbox</title>
    <url>/posts/d4fe0182.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="workbox"><a href="#workbox" class="headerlink" title="workbox"></a><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vd2ViL3Rvb2xzL3dvcmtib3g=" title="https://developers.google.com/web/tools/workbox">workbox<i class="fa fa-external-link"></i></span></h1><p>既然如此，我们最好是站在巨人的肩膀上，这个巨人就是谷歌。workbox 是由谷歌浏览器团队发布，用来协助创建 PWA 应用的 <code>JavaScript</code> 库。当然直接用 <code>workbox</code> 还是太复杂了，谷歌还很贴心的发布了一个 <code>webpack</code> 插件，能够自动生成 <code>Service Worker</code> 和 静态资源列表 - <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vd2ViL3Rvb2xzL3dvcmtib3gvbW9kdWxlcy93b3JrYm94LXdlYnBhY2stcGx1Z2lu" title="https://developers.google.com/web/tools/workbox/modules/workbox-webpack-plugin">workbox-webpack-plugin<i class="fa fa-external-link"></i></span>。</p>
<a id="more"></a>
<p>只需简单一步就能生成生产环境可用的 <code>Service Worker</code> ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const &#123; GenerateSW &#125; = require(&apos;workbox-webpack-plugin&apos;)</span><br><span class="line"></span><br><span class="line">new GenerateSW()</span><br></pre></td></tr></table></figure>
<p>打包一下：</p>
<p><img src="https://segmentfault.com/img/bVbbjuu?w=3028&amp;h=1318" alt></p>
<p>还能说什么呢？谷歌大法好！当然这只是最简单的可用版本，其实这里有一个最严重的问题不知道有没人发现，那就是  <code>importScripts</code>  引用的是谷歌域名下的 cdn ，这让我们墙内的网站怎么用，所以我们需要把这个问题解决并自定义一些配置增强  <code>Service Worker</code>  的能力：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> GenerateSW(&#123;</span><br><span class="line">  importWorkboxFrom: <span class="string">'local'</span>,</span><br><span class="line">  skipWaiting: <span class="literal">true</span>,</span><br><span class="line">  clientsClaim: <span class="literal">true</span>,</span><br><span class="line">  runtimeCaching: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// To match cross-origin requests, use a RegExp that matches</span></span><br><span class="line">      <span class="comment">// the start of the origin:</span></span><br><span class="line">      urlPattern: <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'^https://api'</span>),</span><br><span class="line">      handler: <span class="string">'staleWhileRevalidate'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        <span class="comment">// Configure which responses are considered cacheable.</span></span><br><span class="line">        cacheableResponse: &#123;</span><br><span class="line">          statuses: [<span class="number">200</span>],</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      urlPattern: <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'^https://cdn'</span>),</span><br><span class="line">      <span class="comment">// Apply a network-first strategy.</span></span><br><span class="line">      handler: <span class="string">'networkFirst'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        <span class="comment">// Fall back to the cache after 2 seconds.</span></span><br><span class="line">        networkTimeoutSeconds: <span class="number">2</span>,</span><br><span class="line">        cacheableResponse: &#123;</span><br><span class="line">          statuses: [<span class="number">200</span>],</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>首先 <code>importWorkboxFrom</code> 我们指定从本地引入，这样插件就会将 <code>workbox</code> 所有源文件下载到本地，墙内开发者的福音。上面提到过新 <code>Service Worker</code> 安装成功后需要进入等待阶段，<code>skipWaiting: true</code> 将使其跳过等待，安装成功后立即接管网站，注意这个要和 <code>clientsClaim</code> 一起设置为 <code>true</code>。<code>runtimeCaching</code> 顾名思义是配置运行时如何缓存请求的，这里只说一点，缓存跨域请求时 <code>urlPattern</code> 的值必须为 <code>^</code> 开头的正则表达式，其它的配置看文档都能得到详细的介绍。</p>
<p>再打包一次：</p>
<p><img src="https://segmentfault.com/img/bVbbjwz?w=2014&amp;h=1386" alt></p>
<p><em>出自：<span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxNTA1MDcyNA==" title="https://segmentfault.com/a/1190000015050724">https://segmentfault.com/a/1190000015050724<i class="fa fa-external-link"></i></span></em></p>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9pbWFnZS54dWViaW4ubWUvb2ZmbGluZS1jbGllbnQuemlw" title="https://image.xuebin.me/offline-client.zip">pwd 学习 demo 下载<i class="fa fa-external-link"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>前端</tag>
        <tag>webpack</tag>
        <tag>pwa</tag>
        <tag>workbox</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义错误信息</title>
    <url>/posts/8e8f8856.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ZPError</span> <span class="keyword">extends</span> <span class="title">Error</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> (&#123; code, message &#125;) &#123;</span><br><span class="line">    <span class="comment">// Calling parent constrcutor of base Error class.</span></span><br><span class="line">    <span class="keyword">super</span>(message)</span><br><span class="line">    <span class="comment">// Capturing stack trace, excluding constructor call from it.</span></span><br><span class="line">    <span class="built_in">Error</span>.captureStackTrace &amp;&amp; <span class="built_in">Error</span>.captureStackTrace(<span class="keyword">this</span>, <span class="keyword">this</span>.constructor)</span><br><span class="line">    <span class="comment">// Saving class name in the property of our custom error as a shortcut.</span></span><br><span class="line">    <span class="keyword">this</span>.name = <span class="keyword">this</span>.constructor.name <span class="comment">// 自定义参数</span></span><br><span class="line">    <span class="keyword">this</span>.code = code <span class="comment">// 自定义参数</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ZPError</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>使用 👇</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ZPError(&#123; <span class="attr">code</span>: <span class="number">400</span>, <span class="attr">message</span>: <span class="string">'参数错误'</span> &#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>代码片段</category>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>代码片段</tag>
        <tag>javascript</tag>
        <tag>error</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery学习</title>
    <url>/posts/7a95906a.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><a id="more"></a>
<h1 id="链式调用"><a href="#链式调用" class="headerlink" title="链式调用"></a>链式调用</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> _ = <span class="function"><span class="keyword">function</span> (<span class="params">selector</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> _.fn.init(selector)</span><br><span class="line">&#125;</span><br><span class="line">_.fn = _.prototype = &#123;</span><br><span class="line">  <span class="keyword">constructor</span>: _, // 强化构造器</span><br><span class="line">  init: function (selector, context) &#123;</span><br><span class="line">    <span class="comment">// console.log(this.constructor)</span></span><br><span class="line">    context = context || <span class="built_in">document</span></span><br><span class="line">    <span class="keyword">var</span> dom = context.querySelectorAll(selector) <span class="comment">// 将获取的元素作为当前对象的属性值保存</span></span><br><span class="line">    <span class="keyword">var</span> len = dom.length</span><br><span class="line">    <span class="keyword">for</span> (; i &lt; len; i++) &#123;</span><br><span class="line">      <span class="keyword">this</span>[i] = dom[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.length = len <span class="comment">// 校正 length 属性</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span> <span class="comment">// 返回当前对象</span></span><br><span class="line">  &#125;,</span><br><span class="line">  size: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.length</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 增强数组，使 _('ID') 返回的结果看起来更像一个数组</span></span><br><span class="line">  push: [].push,</span><br><span class="line">  sort: [].sort,</span><br><span class="line">  splice: [].splice</span><br><span class="line">&#125;</span><br><span class="line">_.fn.init.prototype = _.fn <span class="comment">// 强化构造器，使原型链 __proto__ 指向 _ 对象</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象拓展</span></span><br><span class="line">_.extend = _.fn.extend = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">1</span> <span class="comment">// 拓展对象从第二个参数算起</span></span><br><span class="line">  <span class="keyword">var</span> len = <span class="built_in">arguments</span>.length <span class="comment">// 获取参数长度</span></span><br><span class="line">  <span class="keyword">var</span> target = <span class="built_in">arguments</span>[<span class="number">0</span>] <span class="comment">// 第一个参数为源对象</span></span><br><span class="line">  <span class="keyword">var</span> j <span class="comment">// 拓展对象中的属性</span></span><br><span class="line">  <span class="comment">// 如果只有一个参数</span></span><br><span class="line">  <span class="keyword">if</span> (i == len) &#123;</span><br><span class="line">    target = <span class="keyword">this</span> <span class="comment">// 源对象为当前对象</span></span><br><span class="line">    i-- <span class="comment">// i 从 0 计算</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 遍历参数中的拓展对象</span></span><br><span class="line">  <span class="keyword">for</span> (; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (j <span class="keyword">in</span> <span class="built_in">arguments</span>[i]) &#123;</span><br><span class="line">      target[j] = <span class="built_in">arguments</span>[i][j]<span class="comment">// 拓展对象中的属性</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> target <span class="comment">// 返回源对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="built_in">console</span>.log(_(<span class="string">'ID'</span>))</span><br><span class="line"><span class="built_in">console</span>.log(_(<span class="string">'ID'</span>).size());</span><br><span class="line"></span><br><span class="line">_.extend(_.fn, &#123; <span class="attr">version</span>: <span class="string">'1.0'</span> &#125;)</span><br><span class="line"><span class="built_in">console</span>.log(_(<span class="string">'ID'</span>).version)</span><br><span class="line">_.fn.extend(&#123; <span class="attr">getVersion</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.version &#125; &#125;)</span><br><span class="line"><span class="built_in">console</span>.log(_(<span class="string">'ID'</span>).getVersion())</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>代码片段</category>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>代码片段</tag>
        <tag>javascript</tag>
        <tag>jquery</tag>
      </tags>
  </entry>
  <entry>
    <title>【转载】如何做一个听话的 “输入框”</title>
    <url>/posts/511c05eb.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><img src="https://image.xuebin.me/006tNc79ly1fthmpshtt8j30za0tk16q.jpg" alt></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在移动端的 web 开发中，一提起输入框，程序猿（媛）肯定有很多可以吐槽的点。</p>
<p>在输入框的运用中，小编也是很心累呀~<br>不过，经过我 潜（cai）心（keng）研（jiao）究（xun），也算是了解了它的脾性… …</p>
<p>特别鸣谢：周涵，家兴等</p>
<p>正文这里开始 👇 — — — — — — — —</p>
<a id="more"></a>
<h1 id="问题探究"><a href="#问题探究" class="headerlink" title="问题探究"></a>问题探究</h1><h3 id="ios-中，输入框获得焦点时，页面输入框被遮盖，定位的元素位置错乱："><a href="#ios-中，输入框获得焦点时，页面输入框被遮盖，定位的元素位置错乱：" class="headerlink" title="ios 中，输入框获得焦点时，页面输入框被遮盖，定位的元素位置错乱："></a>ios 中，输入框获得焦点时，页面输入框被遮盖，定位的元素位置错乱：</h3><p><img src="https://image.xuebin.me/006tNc79ly1fthmq7s8gzj310e0vqhdt.jpg" alt></p>
<p>当页 input 存在于吸顶或者吸底元素中时，用户点击输入框，输入法弹出后，fiexd 失效，页面中定位好的元素随屏幕滚动。</p>
<p>针对这个问题，我们一起来看下以下几种方案：</p>
<ul>
<li><p><strong>方案一： Web API 接口 ：scrollIntoView</strong> 的应用，将 input 输入框显示在可视区域。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 输入框获得焦点时，元素移动到可视区域</span></span><br><span class="line">inputOnFocus(e) &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        e.target.scrollIntoView(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// true:元素的顶端将和其所在滚动区的可视区域的顶端对齐; false:底端对齐。</span></span><br><span class="line">    &#125;,<span class="number">200</span>);  <span class="comment">// 延时 == 键盘弹起需要时间</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一行代码，轻松搞定，输入框就乖乖的出现在你眼前了。</p>
<p>不过有点小缺陷：页面过长时，由于 fixed 失效，输入框依然也会跟着页面滑走。</p>
<p>这时，我们需要一个固定的输入框……</p>
</li>
<li><p><strong>方案二：在输入框获得焦点时，将页面滑动到最底部，避免 fixed 导致的页面乱飞，并且保证 input 在最底部。</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> timer；</span><br><span class="line"><span class="comment">// 输入框获得焦点时，将元素设置为position:static，设置timer</span></span><br><span class="line">inputOnFocus(e) &#123;</span><br><span class="line">    e.target.style.className = <span class="string">'input input-static'</span>;</span><br><span class="line">    timer = setInterval(</span><br><span class="line">        <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.body.scrollTop = <span class="built_in">document</span>.body.scrollHeight</span><br><span class="line">        &#125;, <span class="number">100</span>)</span><br><span class="line">&#125;；</span><br><span class="line"><span class="comment">// 输入框失去焦点时，将元素设置为 position:fixed，清除timer</span></span><br><span class="line">inputOnbulr(e) &#123;</span><br><span class="line">    e.target.parentNode.className = <span class="string">'input input-fixed'</span>;</span><br><span class="line">    clearInterval(timer)</span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure>
<p><img src="https://image.xuebin.me/006tNc79ly1fthmqsb7gnj30s60p07m1.jpg" alt></p>
<p>当获得焦点弹出虚拟键盘后，input 输入框会一直紧贴键盘顶部。如果，你的页面弹出输入法后不需要滑动查看其他内容，那么你对这种方案应该很中意。</p>
<p>But，可能你做的是一个类似聊天的页面，需要在回复时，查看历史消息，那么，请你继续往下看</p>
</li>
<li><p><strong>方案三：将页面进行拆分: 页面（main） = 内容（sectionA） + 输入框（sectionB）+ 其他（sectionOther）</strong></p>
<blockquote>
<p><strong>原理 ：</strong></p>
<p>main.height = window.screen.height ;</p>
<p>sectionA 绝对定位，进行内部滚动 overflow-y：scroll ;</p>
<p>sectionB 可保证在页面最底部。</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123; <span class="attribute">position</span>: relative; <span class="attribute">height</span>: <span class="number">100%</span>; &#125;</span><br><span class="line"><span class="selector-class">.sectionA</span> &#123; <span class="attribute">box-sizing</span>: border-box; <span class="attribute">padding-bottom</span>: <span class="number">60px</span>; <span class="attribute">height</span>: <span class="number">100%</span>; <span class="attribute">overflow-y</span>: scroll; <span class="attribute">-webkit-overflow-scrolling</span>: touch //为了使滚动流畅，sectionA 添加属性 &#125;</span><br><span class="line"><span class="selector-class">.sectionB</span> &#123; <span class="attribute">position</span>: absolute; <span class="attribute">height</span>: <span class="number">60px</span>; <span class="attribute">overflow</span>: hidden; <span class="attribute">left</span>: <span class="number">0</span>; <span class="attribute">right</span>: <span class="number">0</span>; <span class="attribute">bottom</span>: <span class="number">0</span>; &#125;</span><br></pre></td></tr></table></figure>
<p>纯 css3 打造，可以滚动，可以固定位置,基本满足大部分布局需要。</p>
</li>
</ul>
<h3 id="IOS-中单行输入框输入内容长被遮盖，不能显示全部，且不能左右滑动。"><a href="#IOS-中单行输入框输入内容长被遮盖，不能显示全部，且不能左右滑动。" class="headerlink" title="IOS 中单行输入框输入内容长被遮盖，不能显示全部，且不能左右滑动。"></a>IOS 中单行输入框输入内容长被遮盖，不能显示全部，且不能左右滑动。</h3><p>这个是 IOS 的一个 bug，可以考虑用 textarea 替换 input，设置一行的高，进行上下滚动查看。（其他方案可以参看下面 第 6 点）</p>
<h3 id="获得焦点时，光标消失或错位："><a href="#获得焦点时，光标消失或错位：" class="headerlink" title="获得焦点时，光标消失或错位："></a>获得焦点时，光标消失或错位：</h3><p>-webkit-user-select:none 导致 input 框在 IOS 中无法输入，光标不出现，设置如下</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">user-select</span>: <span class="selector-tag">text</span>;</span><br><span class="line"><span class="selector-tag">-webkit-user-select</span>: <span class="selector-tag">text</span>;</span><br></pre></td></tr></table></figure>
<p>利用 scrollIntoView 使当前元素出现到指定位置，避免光标错位，设置如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">e.target.scrollIntoView(<span class="literal">true</span>)</span><br><span class="line">e.target.scrollIntoViewIfNeeded()</span><br></pre></td></tr></table></figure>
<h3 id="进入页面如何自动获取焦点，弹出软键盘？"><a href="#进入页面如何自动获取焦点，弹出软键盘？" class="headerlink" title="进入页面如何自动获取焦点，弹出软键盘？"></a>进入页面如何自动获取焦点，弹出软键盘？</h3><ul>
<li>添加 autofocus 属性 支持自动获得焦点</li>
<li>触发 focus() 事件</li>
</ul>
<h3 id="随文字输入，输入框宽度自适应。"><a href="#随文字输入，输入框宽度自适应。" class="headerlink" title="随文字输入，输入框宽度自适应。"></a>随文字输入，输入框宽度自适应。</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">onkeyPress(e) &#123;</span><br><span class="line">	<span class="keyword">const</span> testLength = e.target.value.length;</span><br><span class="line">	e.target.style.width = <span class="string">`<span class="subst">$&#123;testLength*<span class="number">8</span>+<span class="number">10</span>&#125;</span>px`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种方案基本满足自动获取效果。</p>
<p>testLength <em>8 英文字符，testLength</em> 16 中文字符， +10 为后边光标预留位置。<br>这种方案显然不适用于对精确度有很高要求的需求。</p>
<h3 id="介绍一个属性：contenteditable，模拟输入时动态获取宽高"><a href="#介绍一个属性：contenteditable，模拟输入时动态获取宽高" class="headerlink" title="介绍一个属性：contenteditable，模拟输入时动态获取宽高"></a>介绍一个属性：contenteditable，模拟输入时动态获取宽高</h3><ul>
<li><p>div 设置 contentditable=true 可以将此元素变成可输入状态。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div  class=&quot;inputContent&quot;  contenteditable=&quot;true&quot; &gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>想要变成 input 输入框，利用 css 模拟输入框的样式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.inputContent&#123;</span><br><span class="line">  color:#444;</span><br><span class="line">  border:#999 solid 1px;</span><br><span class="line">  border-radius: 3px;</span><br><span class="line">  padding: 5px 10px;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">  min-width:50px;</span><br><span class="line">  max-width: 300px;</span><br><span class="line">  background: #ffffff;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里配合 min-width，max-width 效果更真实。</p>
</li>
<li><p>点击 div 可以弹出软键盘，但是无法输入内容，需要设置属性，如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.inputContent&#123;</span><br><span class="line">  user-select:text;</span><br><span class="line">  -webkit-user-select:text;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样就完成一个可以根据获取输入内容来动态来调节宽高。</p>
<p>还可以利用 js 模拟 placeholder 等，这里就不展开了</p>
</li>
</ul>
<h3 id="其他问题及解决"><a href="#其他问题及解决" class="headerlink" title="其他问题及解决"></a>其他问题及解决</h3><ul>
<li><p>输入框获得焦点可弹出软键盘，却没有光标闪烁，也无法正常输入。</p>
<p>-webkit-user-select:none 导致的，可以这样解决</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*<span class="selector-pseudo">:not(input</span>, <span class="selector-tag">textarea</span>) &#123;</span><br><span class="line">  <span class="attribute">-webkit-touch-callout</span>: none;</span><br><span class="line">  <span class="attribute">-webkit-user-select</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>input 自定义样式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 使用伪类</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">::-webkit-input-placeholder</span>,</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">::-moz-placeholder</span>,</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">::-ms-input-placeholder</span> &#123;</span><br><span class="line">  ...style text-align: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>好了,就写到这了，希望看过后对你能有帮助。</p>
<p>输入框中的坑还是很多了，本文也难免会有有含盖不全的情况，欢迎小伙伴们给我们留言，共同探讨。</p>
</li>
</ul>
<blockquote>
<p>转载自：<span class="exturl" data-url="aHR0cHM6Ly96emZlLm9yZy8jL2RldGFpbC81YThlM2U2N2U3NzJjZDE3NDc1YzhjNmI=" title="https://zzfe.org/#/detail/5a8e3e67e772cd17475c8c6b">大转转 FE - 如何做一个听话的 “输入框”<i class="fa fa-external-link"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
        <category>css</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>css</tag>
        <tag>前端</tag>
        <tag>开发</tag>
        <tag>转载</tag>
        <tag>适配</tag>
        <tag>输入框</tag>
      </tags>
  </entry>
  <entry>
    <title>【转载】如何写一个适配iPhoneX的底部导航</title>
    <url>/posts/73d3ce58.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>iPhoneX 发布至今已经有将近一年的时间了，各类 app 都多多少少做了对 iPhoneX 的适配，那对于我们 H5 页面该做哪方面的适配呢？</p>
<p>首先了解安全区域(safe area)的概念，它保证了内容在设备上的正确嵌入，不会被状态栏、导航栏等遮挡。</p>
<a id="more"></a>
<blockquote>
<p>Apps should adhere to the safe area and layout margins defined by UIKit, which ensure appropriate insetting based on the device and context. The safe area also prevents content from underlapping the status bar, navigation bar, toolbar, and tab bar.</p>
</blockquote>
<p>– by Apple’s Human Interface Guidelines</p>
<p><img src="https://image.xuebin.me/p1.jpg" alt="图1"></p>
<p>对于 h5 页面来说，通常是在浏览器或 app 的 webview 这样的“容器”中打开，这些容器大都会做这样的适配：</p>
<p><img src="https://image.xuebin.me/p2.jpg" alt="图2"></p>
<p>可以看到，这些容器都会保证页面顶部在安全区内，而为了保证全屏体验的效果，底部会占满屏幕。</p>
<p>在不考虑横屏浏览的情况下，我们只需要对底部导航做一个适配就可以啦~</p>
<p>如下图所示，iPhoneX 底部的危险区域高度为 34pt，对应@3x 页面像素值为 102px。我们可以根据这个值对底部导航做适配。</p>
<p><img src="https://image.xuebin.me/p3.jpg" alt="图3"></p>
<h1 id="底部导航适配三法"><a href="#底部导航适配三法" class="headerlink" title="底部导航适配三法"></a>底部导航适配三法</h1><ol>
<li><p><strong>js 基本实现</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> isIphoneX = <span class="built_in">window</span>.devicePixelRatio &amp;&amp; <span class="built_in">window</span>.devicePixelRatio === <span class="number">3</span> &amp;&amp; <span class="built_in">window</span>.screen.width === <span class="number">375</span> &amp;&amp; testUA(<span class="string">'iPhone'</span>)</span><br><span class="line"><span class="keyword">if</span> (isIphoneX) &#123;</span><br><span class="line">  <span class="built_in">document</span>.body.classList.add(<span class="string">'fix-iphonex-bottom'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testUA</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> navigator.userAgent.indexOf(str) &gt; <span class="number">-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.fix-iphonex-bottom</span><span class="selector-class">.navi</span><span class="selector-attr">[data-v-539b7842]</span> &#123;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">34px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://image.xuebin.me/demo1.png" alt="demo"></p>
</li>
<li><p><strong>js 动态适配</strong></p>
<p>如上图 2 所示，针对有底部栏的浏览器，页面滚动过程中底部栏显示、隐藏的情况，我们可以做一个动态适配：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> isIphoneX = <span class="built_in">window</span>.devicePixelRatio &amp;&amp; <span class="built_in">window</span>.devicePixelRatio === <span class="number">3</span> &amp;&amp; <span class="built_in">window</span>.screen.width === <span class="number">375</span> &amp;&amp; testUA(<span class="string">'iPhone'</span>)</span><br><span class="line"><span class="keyword">if</span> (isIphoneX) &#123;</span><br><span class="line">  check()</span><br><span class="line">  <span class="built_in">window</span>.onscroll = throttle(check, <span class="number">200</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 处理lib-flexible放大viewport的情况</span></span><br><span class="line">  <span class="keyword">var</span> scale = <span class="built_in">window</span>.innerWidth / <span class="built_in">window</span>.screen.width</span><br><span class="line">  <span class="comment">// 部分浏览器在滚动页面时会显示/隐藏工具栏，影响视口高度。在有底部工具栏的情况下，不做iPhoneX的fix。100为经验值</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.screen.height - <span class="built_in">window</span>.innerHeight / scale &lt; <span class="number">100</span>) &#123;</span><br><span class="line">    <span class="built_in">document</span>.body.classList.add(<span class="string">'fix-iphonex-bottom'</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.body.classList.remove(<span class="string">'fix-iphonex-bottom'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testUA</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> navigator.userAgent.indexOf(str) &gt; <span class="number">-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://image.xuebin.me/p4.gif" alt="效果图"></p>
<p><img src="https://image.xuebin.me/demo2.png" alt="demo"></p>
</li>
<li><p><strong>纯 css 实现</strong></p>
<blockquote>
<p>In order to handle any adjustment that may be required iOS 11’s version of Safari includes some constants that can be used when viewport-fit=cover is being used.</p>
<ul>
<li>safe-area-inset-top</li>
<li>safe-area-inset-right</li>
<li>safe-area-inset-left</li>
<li>safe-area-inset-bottom</li>
</ul>
</blockquote>
<p>为了更好地适配 IOS 11 版本的 safari 提供了上面几个变量。且当 <code>viewport-fit=cover</code>时可以在 css 中使用。</p>
<p>首先设置 meta 标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span>  <span class="attr">content</span>=<span class="string">"initial-scale=1, viewport-fit=cover"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后我们可以使用  <code>constant()</code>（IOS 11.0-11.2）或  <code>env()</code>（&gt;IOS 11.2）来引用上面的变量</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.selector</span> &#123;</span><br><span class="line">  <span class="comment">/* 利用css fallback机制，下面的代码可以兼容两种版本 */</span></span><br><span class="line">  <span class="attribute">padding-top</span>: env (safe-area-inset-top);</span><br><span class="line">  <span class="attribute">padding-top</span>: constant (safe-area-inset-top);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果需要基于这些变量计算，可以这么写：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.selector</span> &#123;</span><br><span class="line">  <span class="attribute">--safe-area-inset-bottom</span>: <span class="built_in">env</span>(safe-area-inset-bottom);</span><br><span class="line">  <span class="attribute">height</span>: <span class="built_in">calc</span>(80px+var(--safe-area-inset-bottom));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>需要注意， <code>safe-area-inset-bottom</code>这个变量的实际像素值是固定的（约为 34px），如果我们对页面进行了缩放，就要重新计算。比如我们的项目中使用手淘 flexible 布局方案，在 iPhoneX 上页面的实际宽度为 1125px，这时页面底部的安全区域高度应为这个值的<strong>3 倍</strong>：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.selector</span> &#123;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="built_in">calc</span>(env(safe-area-inset-bottom) * <span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://image.xuebin.me/demo3.png" alt="demo"></p>
</li>
</ol>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>js 实现除了不够优雅没啥毛病，css 实现因为是依赖于 ios11 版本的 safari，有兼容性问题（测试发现内核为 AppleWebkit/604.3.5 的 qq 浏览器不支持，其他浏览器正常。具体兼容到哪个版本还未查到相关资料）</p>
<blockquote>
<p>全部 demo 地址：<span class="exturl" data-url="aHR0cHM6Ly9tYXJ2aW54dS5naXRodWIuaW8vZGVtb3Mv" title="https://marvinxu.github.io/demos/">https://marvinxu.github.io/demos/<i class="fa fa-external-link"></i></span></p>
</blockquote>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ol>
<li>iPhone X - Overview - iOS Human Interface Guidelines</li>
<li>三分钟弄懂 iPhoneX 设计尺寸和适配</li>
<li>“The Notch” and CSS</li>
<li>Designing Websites for iPhone X</li>
<li>iPhone X layout features with CSS Environment variables（需翻墙）</li>
<li>CSS Round Display Level 1</li>
</ol>
<blockquote>
<p>转载自：<span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvNm11MVBNa1VSdlB2eHBHdVpNNnVGUQ==" title="https://mp.weixin.qq.com/s/6mu1PMkURvPvxpGuZM6uFQ">大转转 FE<i class="fa fa-external-link"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
        <category>css</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>css</tag>
        <tag>前端</tag>
        <tag>开发</tag>
        <tag>转载</tag>
        <tag>适配</tag>
        <tag>iPhone X</tag>
      </tags>
  </entry>
  <entry>
    <title>使用px2rem-loader实现vue项目自动转换px为rem</title>
    <url>/posts/6858e059.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote>
<p>之前转载过一篇<a href="https://xuebin.me/2018/02/01/vue-px-to-rem/">《【转载】Vue 项目自动转换 px 为 rem，高保真还原设计图》</a>使用的是 postcss 的插件<code>postcss-pxtorem</code>，这次介绍另外一个插件<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0ppbmppYW5nL3B4MnJlbS1sb2FkZXI=" title="Webpack loader for px2rem css file"><code>px2rem-loader</code><i class="fa fa-external-link"></i></span></p>
</blockquote>
<a id="more"></a>
<h1 id="安装-px2rem-loader"><a href="#安装-px2rem-loader" class="headerlink" title="安装 px2rem-loader"></a>安装 px2rem-loader</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install px2rem-loader --save-dev</span><br></pre></td></tr></table></figure>
<h1 id="配置-px2rem-loader"><a href="#配置-px2rem-loader" class="headerlink" title="配置 px2rem-loader"></a>配置 px2rem-loader</h1><p>在<code>vue-cli</code>生成的文件中,找到以下文件 <code>build/utils.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> postcssLoader = &#123;</span><br><span class="line">  loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">  options: &#123;</span><br><span class="line">    sourceMap: options.sourceMap,</span><br><span class="line">    <span class="comment">// <span class="doctag">NOTE:</span> 配置 px2rem-loader</span></span><br><span class="line">    <span class="comment">// 在css-loader前应用的loader数目，默认为0.</span></span><br><span class="line">    <span class="comment">// 如果不加这个，@import的外部css文件不能正常转换。</span></span><br><span class="line">    <span class="comment">// 如果还不行可以试着调大数字。更改后必须重启项目，否则不生效！！！</span></span><br><span class="line">    importLoaders: <span class="number">10</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>importLoaders 也可以直接加载 loader 后面 <code>loader: &#39;css-loader?importLoaders=1&#39;</code></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// <span class="doctag">NOTE:</span> 配置 px2rem-loader</span></span><br><span class="line"><span class="keyword">const</span> px2remLoader = &#123;</span><br><span class="line">  loader: <span class="string">'px2rem-loader'</span>,</span><br><span class="line">  options: &#123;</span><br><span class="line">    remUnit: <span class="number">32</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>更多 px2rem 的用法可以参考：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NvbmdzaXFpL3B4MnJlbQ==" title="According to one stylesheet, generate rem version and @1x, @2x and @3x stylesheet.">px2rem<i class="fa fa-external-link"></i></span></p>
<p>直接写 px，编译后会直接转化成 rem —- 除开下面两种情况，其他长度用这个<br>在 px 后面添加<code>/*no*/</code>，不会转化 px，会原样输出。 — 一般 border 需用这个<br>在 px 后面添加<code>/*px*/</code>,会根据 dpr 的不同，生成三套代码。—- 一般字体需用这个</p>
</blockquote>
<h1 id="创建rem-js文件"><a href="#创建rem-js文件" class="headerlink" title="创建rem.js文件"></a>创建<code>rem.js</code>文件</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基准大小</span></span><br><span class="line"><span class="keyword">const</span> baseSize = <span class="number">32</span></span><br><span class="line"><span class="comment">// 设置 rem 函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setRem</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 当前页面宽度相对于 750 宽的缩放比例，可根据自己需要修改。</span></span><br><span class="line">  <span class="keyword">const</span> scale = <span class="built_in">document</span>.documentElement.clientWidth / <span class="number">750</span></span><br><span class="line">  <span class="comment">// 设置页面根节点字体大小</span></span><br><span class="line">  <span class="built_in">document</span>.documentElement.style.fontSize = baseSize * <span class="built_in">Math</span>.min(scale, <span class="number">2</span>) + <span class="string">'px'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">setRem()</span><br><span class="line"><span class="comment">// 改变窗口大小时重新设置 rem</span></span><br><span class="line"><span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  setRem()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>rem.js 文件中的<code>baseSize</code>和 px2remLoader 中的<code>remUnit</code>是对应的。</p>
<p>如果不想使用 rem.js 这种简单粗暴的粗略计算，更进一步的可以使用<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FtZmUvbGliLWZsZXhpYmxl" title="可伸缩布局方案"><code>lib-flexible</code><i class="fa fa-external-link"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ltb2NoZW4vaG90Y3Nz" title="移动端布局解决方案"><code>hotcss</code><i class="fa fa-external-link"></i></span>这两个过渡方案。</p>
<p>如果你的项目不是必须兼容低版本的可以考虑使用<code>vw</code>来做适配：<span class="exturl" data-url="aHR0cHM6Ly93d3cudzNjcGx1cy5jb20vbW9iaWxlL3Z3LWxheW91dC1pbi12dWUuaHRtbA==" title="如何在Vue项目中使用vw实现移动端适配">《如何在 Vue 项目中使用 vw 实现移动端适配》<i class="fa fa-external-link"></i></span>。</p>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>css</tag>
        <tag>前端</tag>
        <tag>开发</tag>
        <tag>rem</tag>
        <tag>vue</tag>
        <tag>转载</tag>
      </tags>
  </entry>
  <entry>
    <title>定制Vue项目模板</title>
    <url>/posts/34092e18.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote>
<p>懒人改变世界</p>
</blockquote>
<p>用过<span class="exturl" data-url="aHR0cHM6Ly9jbi52dWVqcy5vcmcv" title="Vue.js - A progressive, incrementally-adoptable JavaScript framework for building UI on the web."><code>Vue.js</code><i class="fa fa-external-link"></i></span>的同学对<code>vue-cli</code>一定都不陌生，借助<code>vue-cli</code>我们可以通过问答的形式，方便地初始化一个 vue 工程，完全不用担心繁琐的 webpack、eslint 配置等。</p>
<a id="more"></a>
<h1 id="什么是vue-cli"><a href="#什么是vue-cli" class="headerlink" title="什么是vue-cli"></a>什么是<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS1jbGkvdHJlZS9tYXN0ZXI=" title="A simple CLI for scaffolding Vue.js projects.">vue-cli<i class="fa fa-external-link"></i></span></h1><p>引用 vue-cli 官方文档的一句话：</p>
<blockquote>
<p>A simple CLI for scaffolding Vue.js projects.<br>一个简单的 Vue.js 工程命令行脚手架工具。</p>
</blockquote>
<p>在全局安装 vue-cli 之后，就可以通过一条命令初始化我们的 vue 工程：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vue init &lt;template-name&gt; &lt;project-name&gt;</span><br></pre></td></tr></table></figure>
<p>接下来 vue-cli 就会按照这个<code>&lt;template-name&gt;</code>模板内部的设置，抛出几个问答选项。在回答完问答选项以后，我们的 vue 工程目录就已经生成好了，接下来只要把依赖安装完，直接就可以跑起来，是不是非常方便呢？</p>
<p>接下来，我们就要看看，这一条命令的背后，究竟发生了一些什么事。</p>
<h1 id="vue-cli-初始化项目的原理"><a href="#vue-cli-初始化项目的原理" class="headerlink" title="vue-cli 初始化项目的原理"></a>vue-cli 初始化项目的原理</h1><p>从<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS1jbGkvYmxvYi9tYXN0ZXIvUkVBRE1FLm1k" title="vue-cli README.md">官方文档<i class="fa fa-external-link"></i></span>可以知道，vue-cli 使用了<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ZsaXB4ZngvZG93bmxvYWQtZ2l0LXJlcG8=" title="Download and extract a git repository (GitHub, GitLab, Bitbucket) from node.">download-git-repo<i class="fa fa-external-link"></i></span>这个工具去下载远端 git 仓库里面的工程，如果加上了<code>--clone</code>参数，则会在内部运行<code>git clone</code>，通过克隆的方式把远端 git 仓库拉取到本地。明白这一点至关重要：</p>
<p><strong>vue-cli 并非从无到有地凭空生成一个项目，而是通过下载/拉取已有的工程到本地，完成生成项目的工作</strong>。</p>
<p>而这个“已有的工程”，就是所谓的“模板（template）”。</p>
<p>当然，vue-cli 可不只是把模板拉取到本地这么简单，它还允许我们通过问答的形式对模板进行个性化配置，这个又是如何做到的呢？</p>
<p>vue-cli 使用了<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1NCb3Vkcmlhcy9JbnF1aXJlci5qcw==" title="A collection of common interactive command line user interfaces.">inquirer.js<i class="fa fa-external-link"></i></span>实现了“问答环节”，简单来说是这样子的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 准备几个问题</span></span><br><span class="line"><span class="keyword">const</span> questions = [</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">'input'</span>,</span><br><span class="line">    name: <span class="string">'name'</span>,</span><br><span class="line">    message: <span class="string">'What'</span>s your name?<span class="string">'</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  &#123;</span></span><br><span class="line"><span class="string">    type: '</span>input<span class="string">',</span></span><br><span class="line"><span class="string">    name: '</span>age<span class="string">',</span></span><br><span class="line"><span class="string">    message: '</span>How old are you?<span class="string">',</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">]</span></span><br></pre></td></tr></table></figure>
<p>然后把这段问题传给 inquirer.js 就可以了：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">inquirer.prompt(questions).then(<span class="function">(<span class="params">&#123; name, age &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`My name is <span class="subst">$&#123;name&#125;</span>, and I'm <span class="subst">$&#123;age&#125;</span> years old`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>在运行的时候，vue-cli 会在命令行里面把<code>What&#39;s your name?</code>和<code>How old are you?</code>这两个问题相继抛出，获取用户输入，把输入赋值给<code>name</code>和<code>age</code>变量，这样就能够获取用户的输入信息了。接着我们引出下一个问题，这些用户输入，是如何跟模板的自定义关联起来的呢？</p>
<p>我们打开一个 vue-cli 的模板，比如<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzLXRlbXBsYXRlcy93ZWJwYWNrLXNpbXBsZS9ibG9iL21hc3Rlci90ZW1wbGF0ZS9SRUFETUUubWQ=" title="https://github.com/vuejs-templates/webpack-simple/blob/master/template/README.md">webpack-simple 里面的 README.md<i class="fa fa-external-link"></i></span>，它长这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># &#123;&#123; name &#125;&#125;</span><br><span class="line"></span><br><span class="line">&gt; &#123;&#123; description &#125;&#125;</span><br></pre></td></tr></table></figure>
<p>上面使用双括号包裹起来的，最终会根据用户的输入而更改为具体的内容。是不是觉得这种写法很熟悉？其实就是<span class="exturl" data-url="aHR0cHM6Ly9oYW5kbGViYXJzanMuY29tLw==" title="Handlebars provides the power necessary to let you build semantic templates effectively with no frustration.">Handlebars<i class="fa fa-external-link"></i></span>的模板语法。</p>
<p>以这个 README.md 文件为例，在 vue-cli 运行的过程中，会首先读取文件的内容放在内存，然后通过<code>inquirer.js</code>获取用户输入，把输入的值替换到文件内容里面，最后通过另外一个名叫<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NlZ21lbnRpby9tZXRhbHNtaXRo" title="An extremely simple, pluggable static site generator.">Metalsmith<i class="fa fa-external-link"></i></span>的工具，把替换好的内容输出为文件，也就生成了具有个性化内容的 README.md 文件了。</p>
<p>整个流程并不复杂，在明白这些原理后，我们就能更深入地使用 vue-cli 了。</p>
<h1 id="vue-cli-与-vue"><a href="#vue-cli-与-vue" class="headerlink" title="vue-cli 与 vue"></a>vue-cli 与 vue</h1><p>vue-cli 不仅仅能初始化 vue 工程，理论上能够初始化<strong>一切工程</strong>，包括 react，angular 等等等等，只要你有一份能够运行的<strong>模板</strong>，就能够通过 vue-cli 进行工程的初始化。</p>
<p>在讨论区有许多类似的问题：</p>
<ul>
<li>“vue-cli 当中如何配置 sass？”</li>
<li>“vue-cli 中如何修改 devServer 的端口？”</li>
<li>“vue-cli 中发现项目跑不起来”</li>
<li>……</li>
</ul>
<p>vue-cli 说：“这锅我不背。”</p>
<p>是的，所遇到的问题都不是 vue-cli 的问题，而是相关模板的问题。那么应该如何写一份合格的模板呢？下面我们一起来研究一下。</p>
<h1 id="写一份-vue-cli-模板"><a href="#写一份-vue-cli-模板" class="headerlink" title="写一份 vue-cli 模板"></a>写一份 vue-cli 模板</h1><p>参考<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS1jbGkvYmxvYi9tYXN0ZXIvUkVBRE1FLm1kI2N1c3RvbS10ZW1wbGF0ZXM=" title="It&#39;s unlikely to make everyone happy with the official templates.">官方文档<i class="fa fa-external-link"></i></span>，也许还是不能理解到底应该怎么写，那么我们可以直接参考官方例子<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzLXRlbXBsYXRlcy93ZWJwYWNr" title="A full-featured Webpack + vue-loader setup with hot reload, linting, testing &amp; css extraction.">vuejs-templates/webpack<i class="fa fa-external-link"></i></span>，看看它到底是怎么写的。</p>
<h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><ul>
<li><p>先全局安装 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS1jbGkvdHJlZS9tYXN0ZXI=" title="A simple CLI for scaffolding Vue.js projects.">vue-cli<i class="fa fa-external-link"></i></span> 脚手架工具：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g vue-cli</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果喜欢尝鲜的可以使用最新版的<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS1jbGkvdHJlZS9kZXY=" title="https://github.com/vuejs/vue-cli/tree/dev"><code>@vue/cli 3.0</code><i class="fa fa-external-link"></i></span></p>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS1jbGk=" title="https://github.com/vuejs/vue-cli"><code>@vue/cli 3.0</code><i class="fa fa-external-link"></i></span>默认是没有根据模板 init 项目的，不过官方提供了一个插件<code>@vue/cli-init</code></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g @vue/cli</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">$ yarn global add @vue/cli</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vue init now works exactly the same as vue-cli@2.x</span></span><br><span class="line">$ npm install -g @vue/cli-init</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>安装完成后，初始化基于 <code>webpack</code> 的项目模板，按照指示依次填写项目信息和选择需要的模块：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vue init webpack vue-pro-demo</span><br><span class="line">? Project name vue-pro-demo</span><br><span class="line">? Project description A Vue.js project</span><br><span class="line">? Author yugasun &lt;leo@xuebin.com&gt;</span><br><span class="line">? Vue build standalone</span><br><span class="line">? Install vue-router? Yes</span><br><span class="line">? Use ESLint to lint your code? Yes</span><br><span class="line">? Pick an ESLint preset Airbnb</span><br><span class="line">? Set up unit tests No</span><br><span class="line">? Setup e2e tests with Nightwatch? No</span><br><span class="line">? Should we run `npm install` <span class="keyword">for</span> you after the project has been created? (recommended) npm</span><br><span class="line">   vue-cli · Generated <span class="string">"vue-pro-demo"</span>.</span><br><span class="line"><span class="comment"># Installing project dependencies ...</span></span><br><span class="line"><span class="comment"># ========================</span></span><br><span class="line">...</span><br><span class="line"><span class="comment"># Project initialization finished!</span></span><br><span class="line"><span class="comment"># ========================</span></span><br><span class="line">To get started:</span><br><span class="line">  <span class="built_in">cd</span> vue-pro-demo</span><br><span class="line">  npm run dev</span><br><span class="line">Documentation can be found at https://vuejs-templates.github.io/webpack</span><br></pre></td></tr></table></figure>
<p>执行完成后，当前目录下就会生成命名为 <code>vue-pro-demo</code> 的项目文件夹，结构如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── README.md           <span class="comment"># 项目说明文件</span></span><br><span class="line">├── build               <span class="comment"># 存放webpack 构建文件</span></span><br><span class="line">├── config              <span class="comment"># 存放webpack 配置文件</span></span><br><span class="line">├── index.html          <span class="comment"># 项目html模板文件</span></span><br><span class="line">├── package.json        <span class="comment"># 存储项目包依赖，以及项目配置信息</span></span><br><span class="line">├── src                 <span class="comment"># 开发文件夹，一般业务代码都在这里写</span></span><br><span class="line">└── static              <span class="comment"># 项目静态资源文件夹</span></span><br><span class="line">4 directories, 4 files</span><br></pre></td></tr></table></figure>
<p>对于 <code>src</code> 目录，我们在开发中也会根据文件的功能进行文件夹拆分，比如我个人比较喜欢的结构如下（仅供参考）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── App.vue             <span class="comment"># 项目根组件</span></span><br><span class="line">├── api                 <span class="comment"># 接口相关文件</span></span><br><span class="line">├── assets              <span class="comment"># 项目资源文件</span></span><br><span class="line">│   ├── images          <span class="comment"># -- 图片</span></span><br><span class="line">│   └── scss            <span class="comment"># -- 样式</span></span><br><span class="line">├── components          <span class="comment"># 通用组件</span></span><br><span class="line">├── directive           <span class="comment"># 全局自定义指令</span></span><br><span class="line">├── filters             <span class="comment"># 全局过滤器</span></span><br><span class="line">├── main.js             <span class="comment"># 项目入口文件</span></span><br><span class="line">├── mixins              <span class="comment"># 混入 (mixins)</span></span><br><span class="line">├── mock                <span class="comment"># mock数据</span></span><br><span class="line">├── plugin              <span class="comment"># 插件</span></span><br><span class="line">├── router              <span class="comment"># 路由</span></span><br><span class="line">├── store               <span class="comment"># vuex状态管理</span></span><br><span class="line">├── utils               <span class="comment"># 工具函数</span></span><br><span class="line">└── views               <span class="comment"># 视图类组件</span></span><br></pre></td></tr></table></figure>
<p>规范的目录结构可以很好的规范化你的开发习惯，代码分工明确，便于维护。</p>
<h2 id="定制开发项目模板"><a href="#定制开发项目模板" class="headerlink" title="定制开发项目模板"></a>定制开发项目模板</h2><p>每个人在使用官方项目模板开发项目的时候，都或多或少的会修改一些默认的 <code>webpack</code> 配置，然后添加一些项目经常使用的的插件，也会根据自己需要在 <code>src</code> 目录下添加一些通用的文件夹目录，比如上面所说到的。</p>
<p>这就存在一个问题，每次我们在初始化项目的时候，都需要重复完成这几项操作，作为一个懒癌晚期患者的程序员，又怎么能容忍此类事情发生呢？所以定制化的需求蠢蠢欲动了。</p>
<p>下面就介绍下如何对官方的 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzLXRlbXBsYXRlcy93ZWJwYWNr" title="A full-featured Webpack + vue-loader setup with hot reload, linting, testing &amp; css extraction.">webpack 模板<i class="fa fa-external-link"></i></span> 进行二次开发。</p>
<h3 id="二次开发"><a href="#二次开发" class="headerlink" title="二次开发"></a>二次开发</h3><p>要做到这点，只需要三步：</p>
<ol>
<li>Fork 官方源码 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzLXRlbXBsYXRlcy93ZWJwYWNr" title="A full-featured Webpack + vue-loader setup with hot reload, linting, testing &amp; css extraction.">vuejs-templates/webpack<i class="fa fa-external-link"></i></span></li>
<li>克隆到本地二次开发，添加自己想要的配置和插件，并 push 到 github</li>
<li>初始化项目时，使用我们自己的仓库就行</li>
</ol>
<p>对于<strong>步骤 1</strong>，会使用 github 的朋友应该都没问题。</p>
<p>接下来，重点介绍下<strong>步骤 2</strong>。</p>
<p>克隆项目<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzLXRlbXBsYXRlcy93ZWJwYWNr" title="A full-featured Webpack + vue-loader setup with hot reload, linting, testing &amp; css extraction.">vuejs-templates/webpack<i class="fa fa-external-link"></i></span>到我们的本地后，你会发现目录结构是这样的：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── LICENSE</span><br><span class="line">├── README.md</span><br><span class="line">├── deploy-docs.sh</span><br><span class="line">├── docs</span><br><span class="line">├── meta.js</span><br><span class="line">├── package-lock.json</span><br><span class="line">├── package.json</span><br><span class="line">├── scenarios</span><br><span class="line">├── template</span><br><span class="line">└── utils</span><br></pre></td></tr></table></figure>
<p>这里我们只需要关心<code>meta.js</code>和<code>template</code> 目录就够了，<code>meta.js</code>用来配置问答信息，<code>template</code>目录存放的就是我们的项目模板。</p>
<p>打开 <code>template/src/main.js</code> 文件（项目入口文件），代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;&#123;#if_eq build "standalone"&#125;&#125;</span><br><span class="line"><span class="comment">// The Vue build version to load with the `import` command</span></span><br><span class="line"><span class="comment">// (runtime-only or standalone) has been set in webpack.base.conf with an alias.</span></span><br><span class="line">&#123;&#123;/if_eq&#125;&#125;</span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></span><br><span class="line">&#123;&#123;#router&#125;&#125;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line">&#123;&#123;/router&#125;&#125;</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  &#123;&#123;#router&#125;&#125;</span><br><span class="line">  router,</span><br><span class="line">  &#123;&#123;/router&#125;&#125;</span><br><span class="line">  &#123;&#123;#if_eq build "runtime"&#125;&#125;</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">  &#123;&#123;/if_eq&#125;&#125;</span><br><span class="line">  &#123;&#123;#if_eq build "standalone"&#125;&#125;</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span></span><br><span class="line">  &#123;&#123;/if_eq&#125;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>其中包含了很多 <span class="exturl" data-url="aHR0cHM6Ly9oYW5kbGViYXJzanMuY29tLw==" title="Handlebars provides the power necessary to let you build semantic templates effectively with no frustration.">Handlebars<i class="fa fa-external-link"></i></span> 的语法，这里主要用到了 <code>if</code> 条件判断语法，也很好理解。</p>
<p>然后就可以按照官方的模板照猫画虎修改自己的模板配置。</p>
<ul>
<li><p><strong>修改<code>template</code>模板文件</strong></p>
<p>首先我们对 <code>template/package.json</code>做些调整，添加 vuex、axios、qs、pug、scss……依赖。最终修改完成的 package.json 文件如下。</p>
<blockquote>
<p>有可能一些小项目不需要 vuex，所以我对 vuex 添加<code>if</code>条件判断。</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"&#123;&#123; name &#125;&#125;"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"&#123;&#123; description &#125;&#125;"</span>,</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">"&#123;&#123; author &#125;&#125;"</span>,</span><br><span class="line">  <span class="attr">"private"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"dev"</span>: <span class="string">"webpack-dev-server --inline --progress --config build/webpack.dev.conf.js"</span>,</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"npm run dev"</span>,</span><br><span class="line">    &#123;&#123;#if_eq runner "jest"&#125;&#125;</span><br><span class="line">    "unit": "jest --config test/unit/jest.conf.js --coverage",</span><br><span class="line">    &#123;&#123;/if_eq&#125;&#125;</span><br><span class="line">    &#123;&#123;#if_eq runner "karma"&#125;&#125;</span><br><span class="line">    "unit": "cross-env BABEL_ENV=test karma start test/unit/karma.conf.js --single-run",</span><br><span class="line">    &#123;&#123;/if_eq&#125;&#125;</span><br><span class="line">    &#123;&#123;#e2e&#125;&#125;</span><br><span class="line">    "e2e": "node test/e2e/runner.js",</span><br><span class="line">    &#123;&#123;/e2e&#125;&#125;</span><br><span class="line">    &#123;&#123;#if_or unit e2e&#125;&#125;</span><br><span class="line">    "test": "&#123;&#123;#unit&#125;&#125;npm run unit&#123;&#123;/unit&#125;&#125;&#123;&#123;#unit&#125;&#125;&#123;&#123;#e2e&#125;&#125; &amp;&amp; &#123;&#123;/e2e&#125;&#125;&#123;&#123;/unit&#125;&#125;&#123;&#123;#e2e&#125;&#125;npm run e2e&#123;&#123;/e2e&#125;&#125;",</span><br><span class="line">    &#123;&#123;/if_or&#125;&#125;</span><br><span class="line">    &#123;&#123;#lint&#125;&#125;</span><br><span class="line">    "lint": "eslint --ext .js,.vue src&#123;&#123;#unit&#125;&#125; test/unit&#123;&#123;/unit&#125;&#125;&#123;&#123;#e2e&#125;&#125; test/e2e/specs&#123;&#123;/e2e&#125;&#125;",</span><br><span class="line">    &#123;&#123;/lint&#125;&#125;</span><br><span class="line">    "build": "node build/build.js"</span><br><span class="line">  &#125;,</span><br><span class="line">  "dependencies": &#123;</span><br><span class="line">    "vue": "^2.5.2",</span><br><span class="line">    &#123;&#123;#vuex&#125;&#125;</span><br><span class="line">    "vuex": "^3.0.1",</span><br><span class="line">    &#123;&#123;/vuex&#125;&#125;</span><br><span class="line">    &#123;&#123;#router&#125;&#125;</span><br><span class="line">    "vue-router": "^3.0.1",</span><br><span class="line">    &#123;&#123;/router&#125;&#125;</span><br><span class="line">    "axios": "^0.18.0",</span><br><span class="line">    "qs": "^6.5.1"</span><br><span class="line">  &#125;,</span><br><span class="line">  "devDependencies": &#123;</span><br><span class="line">    &#123;&#123;#lint&#125;&#125;</span><br><span class="line">    "babel-eslint": "^7.2.3",</span><br><span class="line">    "eslint": "^4.15.0",</span><br><span class="line">    "eslint-friendly-formatter": "^3.0.0",</span><br><span class="line">    "eslint-loader": "^1.7.1",</span><br><span class="line">    "eslint-plugin-vue": "^4.0.0",</span><br><span class="line">    &#123;&#123;#if_eq lintConfig "standard"&#125;&#125;</span><br><span class="line">    "eslint-config-standard": "^10.2.1",</span><br><span class="line">    "eslint-plugin-promise": "^3.4.0",</span><br><span class="line">    "eslint-plugin-standard": "^3.0.1",</span><br><span class="line">    "eslint-plugin-import": "^2.7.0",</span><br><span class="line">    "eslint-plugin-node": "^5.2.0",</span><br><span class="line">    &#123;&#123;/if_eq&#125;&#125;</span><br><span class="line">    &#123;&#123;#if_eq lintConfig "airbnb"&#125;&#125;</span><br><span class="line">    "eslint-config-airbnb-base": "^11.3.0",</span><br><span class="line">    "eslint-import-resolver-webpack": "^0.8.3",</span><br><span class="line">    "eslint-plugin-import": "^2.7.0",</span><br><span class="line">    &#123;&#123;/if_eq&#125;&#125;</span><br><span class="line">    &#123;&#123;/lint&#125;&#125;</span><br><span class="line">    &#123;&#123;#if_eq runner "jest"&#125;&#125;</span><br><span class="line">    "babel-jest": "^21.0.2",</span><br><span class="line">    "babel-plugin-dynamic-import-node": "^1.2.0",</span><br><span class="line">    "babel-plugin-transform-es2015-modules-commonjs": "^6.26.0",</span><br><span class="line">    "jest": "^22.0.4",</span><br><span class="line">    "jest-serializer-vue": "^0.3.0",</span><br><span class="line">    "vue-jest": "^1.0.2",</span><br><span class="line">    &#123;&#123;/if_eq&#125;&#125;</span><br><span class="line">    &#123;&#123;#if_eq runner "karma"&#125;&#125;</span><br><span class="line">    "cross-env": "^5.0.1",</span><br><span class="line">    "karma": "^1.4.1",</span><br><span class="line">    "karma-coverage": "^1.1.1",</span><br><span class="line">    "karma-mocha": "^1.3.0",</span><br><span class="line">    "karma-phantomjs-launcher": "^1.0.2",</span><br><span class="line">    "karma-phantomjs-shim": "^1.4.0",</span><br><span class="line">    "karma-sinon-chai": "^1.3.1",</span><br><span class="line">    "karma-sourcemap-loader": "^0.3.7",</span><br><span class="line">    "karma-spec-reporter": "0.0.31",</span><br><span class="line">    "karma-webpack": "^2.0.2",</span><br><span class="line">    "mocha": "^3.2.0",</span><br><span class="line">    "chai": "^4.1.2",</span><br><span class="line">    "sinon": "^4.0.0",</span><br><span class="line">    "sinon-chai": "^2.8.0",</span><br><span class="line">    "inject-loader": "^3.0.0",</span><br><span class="line">    "babel-plugin-istanbul": "^4.1.1",</span><br><span class="line">    "phantomjs-prebuilt": "^2.1.14",</span><br><span class="line">    &#123;&#123;/if_eq&#125;&#125;</span><br><span class="line">    &#123;&#123;#e2e&#125;&#125;</span><br><span class="line">    "babel-register": "^6.22.0",</span><br><span class="line">    "chromedriver": "^2.27.2",</span><br><span class="line">    "cross-spawn": "^5.0.1",</span><br><span class="line">    "nightwatch": "^0.9.12",</span><br><span class="line">    "selenium-server": "^3.0.1",</span><br><span class="line">    &#123;&#123;/e2e&#125;&#125;</span><br><span class="line">    "autoprefixer": "^7.1.2",</span><br><span class="line">    "babel-core": "^6.22.1",</span><br><span class="line">    "babel-helper-vue-jsx-merge-props": "^2.0.3",</span><br><span class="line">    "babel-loader": "^7.1.1",</span><br><span class="line">    "babel-plugin-syntax-jsx": "^6.18.0",</span><br><span class="line">    "babel-plugin-transform-runtime": "^6.22.0",</span><br><span class="line">    "babel-plugin-transform-vue-jsx": "^3.5.0",</span><br><span class="line">    "babel-preset-env": "^1.3.2",</span><br><span class="line">    "babel-preset-stage-2": "^6.22.0",</span><br><span class="line">    "chalk": "^2.0.1",</span><br><span class="line">    "copy-webpack-plugin": "^4.0.1",</span><br><span class="line">    "css-loader": "^0.28.0",</span><br><span class="line">    "extract-text-webpack-plugin": "^3.0.0",</span><br><span class="line">    "file-loader": "^1.1.4",</span><br><span class="line">    "friendly-errors-webpack-plugin": "^1.6.1",</span><br><span class="line">    "html-webpack-plugin": "^2.30.1",</span><br><span class="line">    "webpack-bundle-analyzer": "^2.9.0",</span><br><span class="line">    "node-notifier": "^5.1.2",</span><br><span class="line">    "node-sass": "^4.7.2",</span><br><span class="line">    "postcss-import": "^11.0.0",</span><br><span class="line">    "postcss-loader": "^2.0.8",</span><br><span class="line">    "postcss-url": "^7.2.1",</span><br><span class="line">    "pug": "^2.0.1",</span><br><span class="line">    "pug-loader": "^2.3.0",</span><br><span class="line">    "sass-loader": "^6.0.7",</span><br><span class="line">    "semver": "^5.3.0",</span><br><span class="line">    "shelljs": "^0.7.6",</span><br><span class="line">    "optimize-css-assets-webpack-plugin": "^3.2.0",</span><br><span class="line">    "ora": "^1.2.0",</span><br><span class="line">    "rimraf": "^2.6.0",</span><br><span class="line">    "uglifyjs-webpack-plugin": "^1.1.1",</span><br><span class="line">    "url-loader": "^0.5.8",</span><br><span class="line">    "vue-loader": "^13.3.0",</span><br><span class="line">    "vue-style-loader": "^3.0.1",</span><br><span class="line">    "vue-template-compiler": "^2.5.2",</span><br><span class="line">    "portfinder": "^1.0.13",</span><br><span class="line">    "webpack": "^3.6.0",</span><br><span class="line">    "webpack-dev-server": "^2.9.1",</span><br><span class="line">    "webpack-merge": "^4.1.0"</span><br><span class="line">  &#125;,</span><br><span class="line">  "engines": &#123;</span><br><span class="line">    "node": "&gt;= 6.0.0",</span><br><span class="line">    "npm": "&gt;= 3.0.0"</span><br><span class="line">  &#125;,</span><br><span class="line">  "browserslist": [</span><br><span class="line">    "&gt; 1%",</span><br><span class="line">    "last 2 versions",</span><br><span class="line">    <span class="string">"not ie &lt;= 8"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改入口文件如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *                     _ooOoo_</span></span><br><span class="line"><span class="comment"> *                    o8888888o</span></span><br><span class="line"><span class="comment"> *                    88" . "88</span></span><br><span class="line"><span class="comment"> *                    (| -_- |)</span></span><br><span class="line"><span class="comment"> *                    O\  =  /O</span></span><br><span class="line"><span class="comment"> *                 ____/`---'\____</span></span><br><span class="line"><span class="comment"> *               .'  \\|     |//  `.</span></span><br><span class="line"><span class="comment"> *              /  \\|||  :  |||//  \</span></span><br><span class="line"><span class="comment"> *             /  _||||| -:- |||||-  \</span></span><br><span class="line"><span class="comment"> *             |   | \\\  -  /// |   |</span></span><br><span class="line"><span class="comment"> *             | \_|  ''\---/''  |   |</span></span><br><span class="line"><span class="comment"> *             \  .-\__  `-`  ___/-. /</span></span><br><span class="line"><span class="comment"> *           ___`. .'  /--.--\  `. . __</span></span><br><span class="line"><span class="comment"> *        ."" '&lt;  `.___\_&lt;|&gt;_/___.'  &gt;'"".</span></span><br><span class="line"><span class="comment"> *       | | :  `- \`.;`\ _ /`;.`/ - ` : | |</span></span><br><span class="line"><span class="comment"> *       \  \ `-.   \_ __\ /__ _/   .-` /  /</span></span><br><span class="line"><span class="comment"> *  ======`-.____`-.___\_____/___.-`____.-'======</span></span><br><span class="line"><span class="comment"> *                     `=---='</span></span><br><span class="line"><span class="comment"> *  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span></span><br><span class="line"><span class="comment"> *              佛祖保佑       永无BUG</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">&#123;&#123;#if_eq build "standalone"&#125;&#125;</span><br><span class="line"><span class="comment">// The Vue build version to load with the `import` command</span></span><br><span class="line"><span class="comment">// (runtime-only or standalone) has been set in webpack.base.conf with an alias.</span></span><br><span class="line">&#123;&#123;/if_eq&#125;&#125;</span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></span><br><span class="line">&#123;&#123;#router&#125;&#125;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line">&#123;&#123;/router&#125;&#125;</span><br><span class="line">&#123;&#123;#vuex&#125;&#125;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span></span><br><span class="line">&#123;&#123;/vuex&#125;&#125;</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">Vue.nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.addEventListener) &#123;</span><br><span class="line">    <span class="keyword">const</span> html = <span class="built_in">document</span>.documentElement</span><br><span class="line">    <span class="keyword">let</span> setFont = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> k = <span class="number">750</span></span><br><span class="line">      html.style.fontSize = html.clientWidth / k * <span class="number">32</span> + <span class="string">'px'</span></span><br><span class="line">    &#125;</span><br><span class="line">    setFont()</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      setFont()</span><br><span class="line">    &#125;, <span class="number">300</span>)</span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, setFont, <span class="literal">false</span>)</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>, setFont, <span class="literal">false</span>)</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, setFont, <span class="literal">false</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  &#123;&#123;#router&#125;&#125;</span><br><span class="line">  router,</span><br><span class="line">  &#123;&#123;/router&#125;&#125;</span><br><span class="line">  &#123;&#123;#vuex&#125;&#125;</span><br><span class="line">  store,</span><br><span class="line">  &#123;&#123;/vuex&#125;&#125;</span><br><span class="line">  &#123;&#123;#if_eq build "runtime"&#125;&#125;</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">  &#123;&#123;/if_eq&#125;&#125;</span><br><span class="line">  &#123;&#123;#if_eq build "standalone"&#125;&#125;</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span></span><br><span class="line">  &#123;&#123;/if_eq&#125;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改<code>meta.js</code></p>
<p>例如上面的我在 main.js 中添加 vuex 的相关信息，但是有些小项目可能用不上 vuex，这是我们可以模仿官方的问答模式添加自己的问题，这里我选择询问是否安装 router 之后询问是否安装 vuex。</p>
<blockquote>
<ul>
<li><code>prompts</code>：问答列表。</li>
<li><code>filters</code>：根据问答列表要过滤的文件夹。</li>
</ul>
</blockquote>
<ul>
<li><p>例如我在 prompts 的 router 下一条添加 vuex ↓</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">vuex: &#123;</span><br><span class="line">  when: <span class="string">'isNotTest'</span>,</span><br><span class="line">  type: <span class="string">'confirm'</span>,</span><br><span class="line">  message: <span class="string">'Install vuex?'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果选择了不需要 vuex 的，则对应不生成 store 文件夹，所以在 filters 里添加 ↓</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">'src/store/**/*'</span>: <span class="string">'vuex'</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>完整的 <code>meta.js</code> 修改如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; sortDependencies, installDependencies, runLintFix, printMessage &#125; = <span class="built_in">require</span>(<span class="string">'./utils'</span>)</span><br><span class="line"><span class="keyword">const</span> pkg = <span class="built_in">require</span>(<span class="string">'./package.json'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> templateVersion = pkg.version</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; addTestAnswers &#125; = <span class="built_in">require</span>(<span class="string">'./scenarios'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  metalsmith: &#123;</span><br><span class="line">    <span class="comment">// When running tests for the template, this adds answers for the selected scenario</span></span><br><span class="line">    before: addTestAnswers,</span><br><span class="line">  &#125;,</span><br><span class="line">  helpers: &#123;</span><br><span class="line">    if_or(v1, v2, options) &#123;</span><br><span class="line">      <span class="keyword">if</span> (v1 || v2) &#123;</span><br><span class="line">        <span class="keyword">return</span> options.fn(<span class="keyword">this</span>)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> options.inverse(<span class="keyword">this</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    template_version() &#123;</span><br><span class="line">      <span class="keyword">return</span> templateVersion</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  prompts: &#123;</span><br><span class="line">    name: &#123;</span><br><span class="line">      when: <span class="string">'isNotTest'</span>,</span><br><span class="line">      type: <span class="string">'string'</span>,</span><br><span class="line">      required: <span class="literal">true</span>,</span><br><span class="line">      message: <span class="string">'Project name'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    description: &#123;</span><br><span class="line">      when: <span class="string">'isNotTest'</span>,</span><br><span class="line">      type: <span class="string">'string'</span>,</span><br><span class="line">      required: <span class="literal">false</span>,</span><br><span class="line">      message: <span class="string">'Project description'</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">'A Vue.js project'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    author: &#123;</span><br><span class="line">      when: <span class="string">'isNotTest'</span>,</span><br><span class="line">      type: <span class="string">'string'</span>,</span><br><span class="line">      message: <span class="string">'Author'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    build: &#123;</span><br><span class="line">      when: <span class="string">'isNotTest'</span>,</span><br><span class="line">      type: <span class="string">'list'</span>,</span><br><span class="line">      message: <span class="string">'Vue build'</span>,</span><br><span class="line">      choices: [</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">'Runtime + Compiler: recommended for most users'</span>,</span><br><span class="line">          value: <span class="string">'standalone'</span>,</span><br><span class="line">          short: <span class="string">'standalone'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name:</span><br><span class="line">            <span class="string">'Runtime-only: about 6KB lighter min+gzip, but templates (or any Vue-specific HTML) are ONLY allowed in .vue files - render functions are required elsewhere'</span>,</span><br><span class="line">          value: <span class="string">'runtime'</span>,</span><br><span class="line">          short: <span class="string">'runtime'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">    router: &#123;</span><br><span class="line">      when: <span class="string">'isNotTest'</span>,</span><br><span class="line">      type: <span class="string">'confirm'</span>,</span><br><span class="line">      message: <span class="string">'Install vue-router?'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    vuex: &#123;</span><br><span class="line">      when: <span class="string">'isNotTest'</span>,</span><br><span class="line">      type: <span class="string">'confirm'</span>,</span><br><span class="line">      message: <span class="string">'Install vuex?'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    lint: &#123;</span><br><span class="line">      when: <span class="string">'isNotTest'</span>,</span><br><span class="line">      type: <span class="string">'confirm'</span>,</span><br><span class="line">      message: <span class="string">'Use ESLint to lint your code?'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    lintConfig: &#123;</span><br><span class="line">      when: <span class="string">'isNotTest &amp;&amp; lint'</span>,</span><br><span class="line">      type: <span class="string">'list'</span>,</span><br><span class="line">      message: <span class="string">'Pick an ESLint preset'</span>,</span><br><span class="line">      choices: [</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">'Standard (https://github.com/standard/standard)'</span>,</span><br><span class="line">          value: <span class="string">'standard'</span>,</span><br><span class="line">          short: <span class="string">'Standard'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">'Airbnb (https://github.com/airbnb/javascript)'</span>,</span><br><span class="line">          value: <span class="string">'airbnb'</span>,</span><br><span class="line">          short: <span class="string">'Airbnb'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">'none (configure it yourself)'</span>,</span><br><span class="line">          value: <span class="string">'none'</span>,</span><br><span class="line">          short: <span class="string">'none'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">    unit: &#123;</span><br><span class="line">      when: <span class="string">'isNotTest'</span>,</span><br><span class="line">      type: <span class="string">'confirm'</span>,</span><br><span class="line">      message: <span class="string">'Set up unit tests'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    runner: &#123;</span><br><span class="line">      when: <span class="string">'isNotTest &amp;&amp; unit'</span>,</span><br><span class="line">      type: <span class="string">'list'</span>,</span><br><span class="line">      message: <span class="string">'Pick a test runner'</span>,</span><br><span class="line">      choices: [</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">'Jest'</span>,</span><br><span class="line">          value: <span class="string">'jest'</span>,</span><br><span class="line">          short: <span class="string">'jest'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">'Karma and Mocha'</span>,</span><br><span class="line">          value: <span class="string">'karma'</span>,</span><br><span class="line">          short: <span class="string">'karma'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">'none (configure it yourself)'</span>,</span><br><span class="line">          value: <span class="string">'noTest'</span>,</span><br><span class="line">          short: <span class="string">'noTest'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">    e2e: &#123;</span><br><span class="line">      when: <span class="string">'isNotTest'</span>,</span><br><span class="line">      type: <span class="string">'confirm'</span>,</span><br><span class="line">      message: <span class="string">'Setup e2e tests with Nightwatch?'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    autoInstall: &#123;</span><br><span class="line">      when: <span class="string">'isNotTest'</span>,</span><br><span class="line">      type: <span class="string">'list'</span>,</span><br><span class="line">      message: <span class="string">'Should we run `npm install` for you after the project has been created? (recommended)'</span>,</span><br><span class="line">      choices: [</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">'Yes, use NPM'</span>,</span><br><span class="line">          value: <span class="string">'npm'</span>,</span><br><span class="line">          short: <span class="string">'npm'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">'Yes, use Yarn'</span>,</span><br><span class="line">          value: <span class="string">'yarn'</span>,</span><br><span class="line">          short: <span class="string">'yarn'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">'No, I will handle that myself'</span>,</span><br><span class="line">          value: <span class="literal">false</span>,</span><br><span class="line">          short: <span class="string">'no'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  filters: &#123;</span><br><span class="line">    <span class="string">'.eslintrc.js'</span>: <span class="string">'lint'</span>,</span><br><span class="line">    <span class="string">'.eslintignore'</span>: <span class="string">'lint'</span>,</span><br><span class="line">    <span class="string">'config/test.env.js'</span>: <span class="string">'unit || e2e'</span>,</span><br><span class="line">    <span class="string">'build/webpack.test.conf.js'</span>: <span class="string">"unit &amp;&amp; runner === 'karma'"</span>,</span><br><span class="line">    <span class="string">'test/unit/**/*'</span>: <span class="string">'unit'</span>,</span><br><span class="line">    <span class="string">'test/unit/index.js'</span>: <span class="string">"unit &amp;&amp; runner === 'karma'"</span>,</span><br><span class="line">    <span class="string">'test/unit/jest.conf.js'</span>: <span class="string">"unit &amp;&amp; runner === 'jest'"</span>,</span><br><span class="line">    <span class="string">'test/unit/karma.conf.js'</span>: <span class="string">"unit &amp;&amp; runner === 'karma'"</span>,</span><br><span class="line">    <span class="string">'test/unit/specs/index.js'</span>: <span class="string">"unit &amp;&amp; runner === 'karma'"</span>,</span><br><span class="line">    <span class="string">'test/unit/setup.js'</span>: <span class="string">"unit &amp;&amp; runner === 'jest'"</span>,</span><br><span class="line">    <span class="string">'test/e2e/**/*'</span>: <span class="string">'e2e'</span>,</span><br><span class="line">    <span class="string">'src/router/**/*'</span>: <span class="string">'router'</span>,</span><br><span class="line">    <span class="string">'src/store/**/*'</span>: <span class="string">'vuex'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  complete: <span class="function"><span class="keyword">function</span>(<span class="params">data, &#123; chalk &#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> green = chalk.green</span><br><span class="line"></span><br><span class="line">    sortDependencies(data, green)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> cwd = path.join(process.cwd(), data.inPlace ? <span class="string">''</span> : data.destDirName)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (data.autoInstall) &#123;</span><br><span class="line">      installDependencies(cwd, data.autoInstall, green)</span><br><span class="line">        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> runLintFix(cwd, data, green)</span><br><span class="line">        &#125;)</span><br><span class="line">        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          printMessage(data, green)</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(chalk.red(<span class="string">'Error:'</span>), e)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      printMessage(data, chalk)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="本地测试使用"><a href="#本地测试使用" class="headerlink" title="本地测试使用"></a>本地测试使用</h3><p>好了，这样我们的自定义组件已经添加完成了，那么在提交之前，我们还需要先测试下修改后的模板是否有效，运行命令进行初始化：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ vue init path/to/webpack-template my-project</span><br></pre></td></tr></table></figure>
<p>这里 <code>vue init</code> 的第一个参数 <code>path/to/webpack-template</code> 就是当前修改后的模板路径，之后还是重复交互式的配置过程，然后运行你的项目就行了。</p>
<p>不出意外地话，你的项目会很顺利的 <code>npm run dev</code> 跑起来，之后我们只需要 <code>push</code> 到我们自己的 <code>github</code> 仓库就行了。</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>提交以后，项目同事都可以共享这份模板了，用的时候只需要运行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vue init MrLeo/webpack my-project</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里的 <code>MrLeo/webpack</code> 参数就是告诉 <code>vue-cli</code> 在初始化的时候到用户 <code>MrLeo</code> 的 github 仓库下载 <code>webpack</code>项目模板。</p>
</blockquote>
<p>之后你就可以愉快的编写输出你的 <code>Hello world</code> 了。</p>
<h3 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h3><p>当你你足够熟悉项目模板，你也可以对 <code>webpack</code> 配置进行更个性化的配置，或者添加 <code>vue init</code> 时的交互式命令。感兴趣的可以参看下我的个人模板 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL01yTGVvL3dlYnBhY2s=" title="A full-featured Webpack + vue-loader + vuex setup with hot reload, linting, testing &amp; css extraction.">MrLeo/webpack<i class="fa fa-external-link"></i></span>。</p>
<blockquote>
<p>by <span class="exturl" data-url="aHR0cHM6Ly95dWdhc3VuLmNvbS8=" title="https://yugasun.com/">yugasun<i class="fa fa-external-link"></i></span> from <span class="exturl" data-url="aHR0cHM6Ly95dWdhc3VuLmNvbS9wb3N0L3lvdS1kb250LWtub3ctdnVlanMtOS5odG1s" title="https://yugasun.com/post/you-dont-know-vuejs-9.html">https://yugasun.com/post/you-dont-know-vuejs-9.html<i class="fa fa-external-link"></i></span></p>
<p>by <span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL3UvanJhaW5sYXU=" title="https://segmentfault.com/u/jrainlau">jrainlau<i class="fa fa-external-link"></i></span> from <span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxMTY0MzU4MT9fZWE9MjcwOTcyOQ==" title="https://segmentfault.com/a/1190000011643581?_ea=2709729">https://segmentfault.com/a/1190000011643581?_ea=2709729<i class="fa fa-external-link"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>前端</tag>
        <tag>vue</tag>
        <tag>vue-cli</tag>
      </tags>
  </entry>
  <entry>
    <title>node部署-使用pm2管理node进程</title>
    <url>/posts/7ee71f07.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>首先初始化一个 node 项目，这里我使用 express 生成器直接初始化一个项目</p>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install express-generator -g</span><br></pre></td></tr></table></figure>
<p>创建名为 myapp 的应用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ express myapp</span><br></pre></td></tr></table></figure>
<p>安装依赖包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> myapp</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure>
<p>启动 express 项目</p>
<blockquote>
<p>express 项目启动命令<code>npm start</code>是利用<code>package.json</code>的<code>scripts</code>来实现的<em>(node ./bin/www)</em></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ DEBUG=myapp npm start</span><br></pre></td></tr></table></figure>
<h1 id="安装-pm2"><a href="#安装-pm2" class="headerlink" title="安装 pm2"></a>安装 pm2</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install pm2 -g</span><br></pre></td></tr></table></figure>
<p>更新</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pm2 update</span><br></pre></td></tr></table></figure>
<h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><p>默认方式的 pm2 启动命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pm2 start ./bin/www</span><br></pre></td></tr></table></figure>
<h2 id="自定义启动信息"><a href="#自定义启动信息" class="headerlink" title="自定义启动信息"></a>自定义启动信息</h2><p>当然 pm2 启动的时候可以添加自定义参数，例如：name、watch…</p>
<blockquote>
<p>其他更多的参数参考<code>pm2 --help</code></p>
</blockquote>
<p>我不太喜欢一大串的命令，于是我使用了配置文件的方式。</p>
<p>在应用的根目录，创建一个<code>process.json</code>配置文件，内容如下：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"apps"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      "name": "Standout", // 名称</span><br><span class="line">      "script": "./bin/www", // 程序入库</span><br><span class="line">      "cwd": "./", // 根目录</span><br><span class="line">      "watch": ["bin", "public", "routes", "views"], // 需要监控的目录</span><br><span class="line">      "error_file": "./logs/app-err.log", // 错误输出日志</span><br><span class="line">      "out_file": "./logs/app-out.log", // 日志</span><br><span class="line">      "log_date_format": "YYYY-MM-DD HH:mm Z" // 日期格式</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后，在<code>package.json</code>的<code>scripts</code>中增加一条<code>pm2</code>：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"pm2"</span>: <span class="string">"pm2 start processes.json"</span>,</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"node ./bin/www"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>之后再启动的时候直接输入如下命令就好：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm run pm2</span><br></pre></td></tr></table></figure>
<h1 id="开机自动启动"><a href="#开机自动启动" class="headerlink" title="开机自动启动"></a>开机自动启动</h1><p>通过<code>pm2 startup</code>实现开机自动启动。</p>
<ol>
<li>保存当前进程列表</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pm2 save</span><br></pre></td></tr></table></figure>
<ol start="2">
<li><p>生成开机自动启动命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pm2 startup</span><br></pre></td></tr></table></figure>
</li>
<li><p>复制控制台生成的命令，粘贴到控制台运行</p>
</li>
</ol>
<h1 id="pm2-常用命令"><a href="#pm2-常用命令" class="headerlink" title="pm2 常用命令"></a>pm2 常用命令</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pm2 list <span class="comment"># 查看pm2管理的进程列表</span></span><br><span class="line">$ pm2 save <span class="comment"># 保存当前进程列表</span></span><br><span class="line">$ pm2 start [id|app-name] <span class="comment"># 启动指定 id 或 app name 的进程</span></span><br><span class="line">$ pm2 stop [id|app-name|all] <span class="comment"># 停止</span></span><br><span class="line">$ pm2 restart [id|app-name|all] <span class="comment"># 重启</span></span><br><span class="line">$ pm2 delete [id|app-name|all] <span class="comment"># 删除</span></span><br><span class="line">$ pm2 <span class="built_in">kill</span> <span class="comment"># 停掉PM2（避免端口占用）</span></span><br><span class="line">$ pm2 logs [app-name] [--json] <span class="comment"># 查看日志</span></span><br><span class="line">$ pm2 monit <span class="comment"># 启动pm2实时控制台面板</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>更多命令查看 <code>pm2 --help</code></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9wbTIua2V5bWV0cmljcy5pby9kb2NzL3VzYWdlL3F1aWNrLXN0YXJ0Lw==" title="官方文档">官方文档<i class="fa fa-external-link"></i></span>：<span class="exturl" data-url="aHR0cHM6Ly9wbTIua2V5bWV0cmljcy5pby9kb2NzL3VzYWdlL3F1aWNrLXN0YXJ0Lw==" title="https://pm2.keymetrics.io/docs/usage/quick-start/">https://pm2.keymetrics.io/docs/usage/quick-start/<i class="fa fa-external-link"></i></span> <span class="exturl" data-url="aHR0cHM6Ly9pbXdlYi5pby90b3BpYy81N2M4Y2JiMjdmMjI2ZjY4N2IzNjU2MzY=" title="PM2 实用入门指南">^pm2实用入门指南<i class="fa fa-external-link"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
        <category>node</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>前端</tag>
        <tag>开发</tag>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>【转载】Vue项目自动转换 px 为 rem，高保真还原设计图</title>
    <url>/posts/5abe2a3f.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>前端开发中还原设计图的重要性毋庸置疑，目前来说应用最多的应该也还是使用<strong>rem</strong>。然而很多人依然还是处于刀耕火种的时代，要么自己去计算<code>rem</code>值，要么依靠编辑器安装插件转换。</p>
<p>而本文的目标就是通过一系列的配置后，在开发中可以直接使用设计图的尺寸开发，项目为我们自动编译，转换成<code>rem</code>。</p>
<a id="more"></a>
<h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><ul>
<li>vue-cli：使用脚手架工具创建项目。</li>
<li>postcss-pxtorem：转换 px 为 rem 的插件。</li>
</ul>
<h2 id="自动设置根节点html的font-size"><a href="#自动设置根节点html的font-size" class="headerlink" title="自动设置根节点html的font-size"></a>自动设置根节点<code>html</code>的<code>font-size</code></h2><p>因为<code>rem</code>单位是相对于根节点的字体大小的，所以通过设置根节点的字体大小可以动态的改变 rem 的大小。</p>
<p>原理网上有很多文章分享，这里不具体解释。</p>
<h3 id="1、创建rem-js文件"><a href="#1、创建rem-js文件" class="headerlink" title="1、创建rem.js文件"></a>1、创建<code>rem.js</code>文件</h3><p>很多人写这种小工具文件会习惯性的加上闭包，这个其实是没有必要的。ES6 中每个文件都是单独的一个模块。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基准大小</span></span><br><span class="line"><span class="keyword">const</span> baseSize = <span class="number">32</span></span><br><span class="line"><span class="comment">// 设置 rem 函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setRem</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 当前页面宽度相对于 750 宽的缩放比例，可根据自己需要修改。</span></span><br><span class="line">  <span class="keyword">const</span> scale = <span class="built_in">document</span>.documentElement.clientWidth / <span class="number">750</span></span><br><span class="line">  <span class="comment">// 设置页面根节点字体大小</span></span><br><span class="line">  <span class="built_in">document</span>.documentElement.style.fontSize = baseSize * <span class="built_in">Math</span>.min(scale, <span class="number">2</span>) + <span class="string">'px'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">setRem()</span><br><span class="line"><span class="comment">// 改变窗口大小时重新设置 rem</span></span><br><span class="line"><span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  setRem()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2、在main-js中引入rem-js"><a href="#2、在main-js中引入rem-js" class="headerlink" title="2、在main.js中引入rem.js"></a>2、在<code>main.js</code>中引入<code>rem.js</code></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./utils/rem'</span></span><br></pre></td></tr></table></figure>
<p>引入文件后，查看页面的 html 节点，是否有被自动添加 <code>font-size</code>。</p>
<p><strong>注意：完成到这一步，也就是实现了 rem 布局，实际开发的时候，还是需要我们去计算对应的 rem 值去开发。</strong></p>
<p><strong>下一步我们就配置一下 webpack，自动转换 px 为对应的 rem 值。</strong></p>
<h2 id="配置-postcss-pxtorem-自动转换-px-为-rem"><a href="#配置-postcss-pxtorem-自动转换-px-为-rem" class="headerlink" title="配置 postcss-pxtorem 自动转换 px 为 rem"></a>配置 <code>postcss-pxtorem</code> 自动转换 px 为 rem</h2><p><strong>1、安装 postcss-pxtorem</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install postcss-pxtorem -D</span><br></pre></td></tr></table></figure>
<p><strong>2、修改 /build/utils.js 文件</strong></p>
<p>找到 <code>postcssLoader</code> 的代码块</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> postcssLoader = &#123;</span><br><span class="line">	loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">	options: &#123;</span><br><span class="line">  		sourceMap: options.sourceMap</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> postcssLoader = &#123;</span><br><span class="line">    loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">    options: &#123;</span><br><span class="line">      sourceMap: options.sourceMap,</span><br><span class="line">      plugins: [</span><br><span class="line">        <span class="built_in">require</span>(<span class="string">'postcss-pxtorem'</span>)(&#123;</span><br><span class="line">          <span class="string">'rootValue'</span>: <span class="number">32</span>,</span><br><span class="line">          propList: [<span class="string">'*'</span>]</span><br><span class="line">        &#125;)</span><br><span class="line">      ]</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>或者在<code>postcss.config.js</code>中添加</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// sourceMap: true,</span></span><br><span class="line">  plugins: &#123;</span><br><span class="line">    <span class="comment">// autoprefixer: &#123;</span></span><br><span class="line">    <span class="comment">//   browsers: [</span></span><br><span class="line">    <span class="comment">//     'last 3 versions',</span></span><br><span class="line">    <span class="comment">//     'ie &gt;= 9',</span></span><br><span class="line">    <span class="comment">//     'ff &gt;= 30',</span></span><br><span class="line">    <span class="comment">//     'chrome &gt;= 34',</span></span><br><span class="line">    <span class="comment">//     'safari &gt;= 6',</span></span><br><span class="line">    <span class="comment">//     'opera &gt;= 12.1'</span></span><br><span class="line">    <span class="comment">//   ]</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    <span class="string">'postcss-cssnext'</span>: &#123;&#125;,</span><br><span class="line">    <span class="string">'postcss-pxtorem'</span>: &#123;</span><br><span class="line">      rootValue: <span class="number">16</span>, <span class="comment">// 你在html节点设的font-size大小</span></span><br><span class="line">      unitPrecision: <span class="number">5</span>, <span class="comment">// 转rem精确到小数点多少位</span></span><br><span class="line">      propList: [<span class="string">'*'</span>, <span class="string">'!border-width'</span>, <span class="string">'border'</span>], <span class="comment">// 指定转换成rem的属性，支持 * ！(px检测区分大小写，也就是说Px/PX/pX不会被转换，可以用这个方式避免转换成rem)</span></span><br><span class="line">      selectorBlackList: [], <span class="comment">// str/reg 指定不转换的选择器，str时包含字段即匹配</span></span><br><span class="line">      replace: <span class="literal">true</span>,</span><br><span class="line">      mediaQuery: <span class="literal">false</span>, <span class="comment">// 媒体查询内的px是否转换</span></span><br><span class="line">      minPixelValue: <span class="number">0</span> <span class="comment">// 小于指定数值的px不转换</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'postcss-import'</span>: &#123;</span><br><span class="line">      addModulesDirectories: [<span class="string">'node_modules'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>按照上述配置项目后，即可在开发中直接使用 <code>px</code> 单位开发。</p>
<p>例如设计给出的设计图是 <strong>750 * 1136</strong>，那么可以直接在页面中写</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">750px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">1136px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>将被转换为</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">widht</span>: <span class="number">23.4375rem</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">35.5rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>—End—</p>
<p>[转至] <span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YTcxNmM0YzZmYjlhMDFjYjQyY2FjNGIoaHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YTcxNmM0YzZmYjlhMDFjYjQyY2FjNGIp" title="https://juejin.im/post/5a716c4c6fb9a01cb42cac4b(https://juejin.im/post/5a716c4c6fb9a01cb42cac4b)">https://juejin.im/post/5a716c4c6fb9a01cb42cac4b(https://juejin.im/post/5a716c4c6fb9a01cb42cac4b)<i class="fa fa-external-link"></i></span></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>css</tag>
        <tag>前端</tag>
        <tag>开发</tag>
        <tag>rem</tag>
        <tag>vue</tag>
        <tag>转载</tag>
      </tags>
  </entry>
  <entry>
    <title>node-mongodb</title>
    <url>/posts/a787b817.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>配置信息：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  DB: &#123;</span><br><span class="line">    db: <span class="string">'demo'</span>, <span class="comment">//数据库名称</span></span><br><span class="line">    host: <span class="string">'localhost'</span>, <span class="comment">//主机号</span></span><br><span class="line">    port: <span class="number">27017</span>, <span class="comment">//端口号</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>数据访问对象：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mongodb = <span class="built_in">require</span>(<span class="string">'mongodb'</span>) <span class="comment">//引入MongoDB模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建数据库对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> d = <span class="keyword">new</span> mongodb.Db(</span><br><span class="line">  config.db,</span><br><span class="line">  <span class="keyword">new</span> mongodb.Server(</span><br><span class="line">    config.host,</span><br><span class="line">    config.port,</span><br><span class="line">    &#123; <span class="attr">auto_reconnect</span>: <span class="literal">true</span> &#125;, <span class="comment">//自动连接</span></span><br><span class="line">  ),</span><br><span class="line">  &#123; <span class="attr">safe</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 打开数据库，操作集合</span></span><br><span class="line"><span class="comment"> * @param &#123;*&#125; col 集合名</span></span><br><span class="line"><span class="comment"> * @param &#123;*&#125; fn 操作方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params">col, fn</span>) </span>&#123;</span><br><span class="line">  d.open(<span class="function"><span class="keyword">function</span>(<span class="params">err, db</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      db.collection(col, <span class="function"><span class="keyword">function</span>(<span class="params">err, col</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="keyword">throw</span> err</span><br><span class="line">        <span class="keyword">else</span> fn &amp;&amp; fn(col, db)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.DB = <span class="function"><span class="keyword">function</span>(<span class="params">col</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入数据</span></span><br><span class="line"><span class="comment">     * @param &#123;*&#125; data 插入数据库</span></span><br><span class="line"><span class="comment">     * @param &#123;*&#125; success 操作成功回调</span></span><br><span class="line"><span class="comment">     * @param &#123;*&#125; fail 操作失败回调</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    insert: <span class="function">(<span class="params">data, success, fail</span>) =&gt;</span> &#123;</span><br><span class="line">      connect(</span><br><span class="line">        col,</span><br><span class="line">        <span class="function"><span class="keyword">function</span>(<span class="params">col, db</span>) </span>&#123;</span><br><span class="line">          col.insert(data, <span class="function"><span class="keyword">function</span>(<span class="params">err, docs</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (err) fail &amp;&amp; fail(err)</span><br><span class="line">            <span class="keyword">else</span> success &amp;&amp; success(docs)</span><br><span class="line">            db.close()</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">      )</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除数据</span></span><br><span class="line"><span class="comment">     * @param &#123;*&#125; data 插入数据库</span></span><br><span class="line"><span class="comment">     * @param &#123;*&#125; success 操作成功回调</span></span><br><span class="line"><span class="comment">     * @param &#123;*&#125; fail 操作失败回调</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    remove: <span class="function">(<span class="params">data, success, fail</span>) =&gt;</span> &#123;</span><br><span class="line">      connect(</span><br><span class="line">        col,</span><br><span class="line">        <span class="function"><span class="keyword">function</span>(<span class="params">col, db</span>) </span>&#123;</span><br><span class="line">          col.remove(data, <span class="function"><span class="keyword">function</span>(<span class="params">err, len</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (err) fail &amp;&amp; fail(err)</span><br><span class="line">            <span class="keyword">else</span> success &amp;&amp; success(len)</span><br><span class="line">            db.close()</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">      )</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新数据</span></span><br><span class="line"><span class="comment">     * @param &#123;*&#125; con 筛选条件</span></span><br><span class="line"><span class="comment">     * @param &#123;*&#125; doc 更新数据项</span></span><br><span class="line"><span class="comment">     * @param &#123;*&#125; success 成功回调</span></span><br><span class="line"><span class="comment">     * @param &#123;*&#125; fail 失败回调</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    update: <span class="function">(<span class="params">con, doc, success, fail</span>) =&gt;</span> &#123;</span><br><span class="line">      connect(</span><br><span class="line">        col,</span><br><span class="line">        <span class="function"><span class="keyword">function</span>(<span class="params">col, db</span>) </span>&#123;</span><br><span class="line">          col.update(con, doc, <span class="function"><span class="keyword">function</span>(<span class="params">err, len</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (err) fail &amp;&amp; fail(err)</span><br><span class="line">            <span class="keyword">else</span> success &amp;&amp; success(len)</span><br><span class="line">            db.close()</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">      )</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新数据</span></span><br><span class="line"><span class="comment">     * @param &#123;*&#125; con 筛选条件</span></span><br><span class="line"><span class="comment">     * @param &#123;*&#125; success 成功回调</span></span><br><span class="line"><span class="comment">     * @param &#123;*&#125; fail 失败回调</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    find: <span class="function">(<span class="params">con, success, fail</span>) =&gt;</span> &#123;</span><br><span class="line">      connect(</span><br><span class="line">        col,</span><br><span class="line">        <span class="function"><span class="keyword">function</span>(<span class="params">col, db</span>) </span>&#123;</span><br><span class="line">          col.find(con).toArray(<span class="function"><span class="keyword">function</span>(<span class="params">err, docs</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (err) fail &amp;&amp; fail(err)</span><br><span class="line">            <span class="keyword">else</span> success &amp;&amp; success(docs)</span><br><span class="line">            db.close()</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">      )</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试用例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> user = DB(<span class="string">'user'</span>)</span><br><span class="line">user.insert(&#123; <span class="attr">name</span>: <span class="string">'小白'</span>, <span class="attr">nick</span>: <span class="string">'雨夜清荷'</span> &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">docs</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(docs) <span class="comment">// [&#123; name: '小白', nick: '雨夜清荷', _id: 1 &#125;]</span></span><br><span class="line">&#125;)</span><br><span class="line">user.find(&#123; <span class="attr">name</span>: <span class="string">'小白'</span> &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">doc</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(doc) <span class="comment">// [&#123; name: '小白', nick: '雨夜清荷', _id: 1 &#125;]</span></span><br><span class="line">&#125;)</span><br><span class="line">user.update(&#123; <span class="attr">name</span>: <span class="string">'小白'</span> &#125;, &#123; <span class="attr">name</span>: <span class="string">'小黑'</span>, <span class="attr">nick</span>: <span class="string">'雨夜'</span> &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">len</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(len) <span class="comment">// 1</span></span><br><span class="line">&#125;)</span><br><span class="line">user.remove(&#123; <span class="attr">name</span>: <span class="string">'小白'</span> &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">len</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(len) <span class="comment">// 1</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>代码片段</category>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>mongodb</tag>
        <tag>代码片段</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>常用JS加密编码算法</title>
    <url>/posts/e3043b41.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><a id="more"></a>
<h1 id="UTF8编码函数"><a href="#UTF8编码函数" class="headerlink" title="UTF8编码函数"></a>UTF8编码函数</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//#region UTF8编码函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">URLEncode</span>(<span class="params">Str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Str == <span class="literal">null</span> || Str == <span class="string">""</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">var</span> newStr = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">toCase</span>(<span class="params">sStr</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sStr.toString(<span class="number">16</span>).toUpperCase();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, icode, len = Str.length; i &lt; len; i++) &#123;</span><br><span class="line">        icode = Str.charCodeAt(i);</span><br><span class="line">        <span class="keyword">if</span> (icode &lt; <span class="number">0x10</span>)</span><br><span class="line">            newStr += <span class="string">"%0"</span> + icode.toString(<span class="number">16</span>).toUpperCase();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (icode &lt; <span class="number">0x80</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (icode == <span class="number">0x20</span>)</span><br><span class="line">                newStr += <span class="string">"+"</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((icode &gt;= <span class="number">0x30</span> &amp;&amp; icode &lt;= <span class="number">0x39</span>) || (icode &gt;= <span class="number">0x41</span> &amp;&amp; icode &lt;= <span class="number">0x5A</span>) || (icode &gt;= <span class="number">0x61</span> &amp;&amp; icode &lt;= <span class="number">0x7A</span>))</span><br><span class="line">                newStr += Str.charAt(i);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                newStr += <span class="string">"%"</span> + toCase(icode);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (icode &lt; <span class="number">0x800</span>) &#123;</span><br><span class="line">            newStr += <span class="string">"%"</span> + toCase(<span class="number">0xC0</span> + (icode &gt;&gt; <span class="number">6</span>));</span><br><span class="line">            newStr += <span class="string">"%"</span> + toCase(<span class="number">0x80</span> + icode % <span class="number">0x40</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            newStr += <span class="string">"%"</span> + toCase(<span class="number">0xE0</span> + (icode &gt;&gt; <span class="number">12</span>));</span><br><span class="line">            newStr += <span class="string">"%"</span> + toCase(<span class="number">0x80</span> + (icode &gt;&gt; <span class="number">6</span>) % <span class="number">0x40</span>);</span><br><span class="line">            newStr += <span class="string">"%"</span> + toCase(<span class="number">0x80</span> + icode % <span class="number">0x40</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newStr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//#endregion UTF8编码函数</span></span><br></pre></td></tr></table></figure>
<h1 id="Base64编码-解码函数"><a href="#Base64编码-解码函数" class="headerlink" title="Base64编码,解码函数"></a>Base64编码,解码函数</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//#region Base64编码,解码函数</span></span><br><span class="line"><span class="keyword">var</span> base64EncodeChars = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span>;</span><br><span class="line"><span class="keyword">var</span> base64DecodeChars = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">62</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">63</span>,</span><br><span class="line">    <span class="number">52</span>, <span class="number">53</span>, <span class="number">54</span>, <span class="number">55</span>, <span class="number">56</span>, <span class="number">57</span>, <span class="number">58</span>, <span class="number">59</span>, <span class="number">60</span>, <span class="number">61</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>,</span><br><span class="line">    <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">37</span>, <span class="number">38</span>, <span class="number">39</span>, <span class="number">40</span>,</span><br><span class="line">    <span class="number">41</span>, <span class="number">42</span>, <span class="number">43</span>, <span class="number">44</span>, <span class="number">45</span>, <span class="number">46</span>, <span class="number">47</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">50</span>, <span class="number">51</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">base64encode</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> out, i, len;</span><br><span class="line">    <span class="keyword">var</span> c1, c2, c3;</span><br><span class="line"></span><br><span class="line">    len = str.length;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    out = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; len) &#123;</span><br><span class="line">        c1 = str.charCodeAt(i++) &amp; <span class="number">0xff</span>;</span><br><span class="line">        <span class="keyword">if</span> (i == len) &#123;</span><br><span class="line">            out += base64EncodeChars.charAt(c1 &gt;&gt; <span class="number">2</span>);</span><br><span class="line">            out += base64EncodeChars.charAt((c1 &amp; <span class="number">0x3</span>) &lt;&lt; <span class="number">4</span>);</span><br><span class="line">            out += <span class="string">"=="</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        c2 = str.charCodeAt(i++);</span><br><span class="line">        <span class="keyword">if</span> (i == len) &#123;</span><br><span class="line">            out += base64EncodeChars.charAt(c1 &gt;&gt; <span class="number">2</span>);</span><br><span class="line">            out += base64EncodeChars.charAt(((c1 &amp; <span class="number">0x3</span>) &lt;&lt; <span class="number">4</span>) | ((c2 &amp; <span class="number">0xF0</span>) &gt;&gt; <span class="number">4</span>));</span><br><span class="line">            out += base64EncodeChars.charAt((c2 &amp; <span class="number">0xF</span>) &lt;&lt; <span class="number">2</span>);</span><br><span class="line">            out += <span class="string">"="</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        c3 = str.charCodeAt(i++);</span><br><span class="line">        out += base64EncodeChars.charAt(c1 &gt;&gt; <span class="number">2</span>);</span><br><span class="line">        out += base64EncodeChars.charAt(((c1 &amp; <span class="number">0x3</span>) &lt;&lt; <span class="number">4</span>) | ((c2 &amp; <span class="number">0xF0</span>) &gt;&gt; <span class="number">4</span>));</span><br><span class="line">        out += base64EncodeChars.charAt(((c2 &amp; <span class="number">0xF</span>) &lt;&lt; <span class="number">2</span>) | ((c3 &amp; <span class="number">0xC0</span>) &gt;&gt; <span class="number">6</span>));</span><br><span class="line">        out += base64EncodeChars.charAt(c3 &amp; <span class="number">0x3F</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">base64decode</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> c1, c2, c3, c4;</span><br><span class="line">    <span class="keyword">var</span> i, len, out;</span><br><span class="line"></span><br><span class="line">    len = str.length;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    out = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; len) &#123;</span><br><span class="line">        <span class="comment">/* c1 */</span></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            c1 = base64DecodeChars[str.charCodeAt(i++) &amp; <span class="number">0xff</span>];</span><br><span class="line">        &#125; <span class="keyword">while</span> (i &lt; len &amp;&amp; c1 == <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span> (c1 == <span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* c2 */</span></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            c2 = base64DecodeChars[str.charCodeAt(i++) &amp; <span class="number">0xff</span>];</span><br><span class="line">        &#125; <span class="keyword">while</span> (i &lt; len &amp;&amp; c2 == <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span> (c2 == <span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        out += <span class="built_in">String</span>.fromCharCode((c1 &lt;&lt; <span class="number">2</span>) | ((c2 &amp; <span class="number">0x30</span>) &gt;&gt; <span class="number">4</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* c3 */</span></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            c3 = str.charCodeAt(i++) &amp; <span class="number">0xff</span>;</span><br><span class="line">            <span class="keyword">if</span> (c3 == <span class="number">61</span>)</span><br><span class="line">                <span class="keyword">return</span> out;</span><br><span class="line">            c3 = base64DecodeChars[c3];</span><br><span class="line">        &#125; <span class="keyword">while</span> (i &lt; len &amp;&amp; c3 == <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span> (c3 == <span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        out += <span class="built_in">String</span>.fromCharCode(((c2 &amp; <span class="number">0XF</span>) &lt;&lt; <span class="number">4</span>) | ((c3 &amp; <span class="number">0x3C</span>) &gt;&gt; <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* c4 */</span></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            c4 = str.charCodeAt(i++) &amp; <span class="number">0xff</span>;</span><br><span class="line">            <span class="keyword">if</span> (c4 == <span class="number">61</span>)</span><br><span class="line">                <span class="keyword">return</span> out;</span><br><span class="line">            c4 = base64DecodeChars[c4];</span><br><span class="line">        &#125; <span class="keyword">while</span> (i &lt; len &amp;&amp; c4 == <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span> (c4 == <span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        out += <span class="built_in">String</span>.fromCharCode(((c3 &amp; <span class="number">0x03</span>) &lt;&lt; <span class="number">6</span>) | c4);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">utf16to8</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> out, i, len, c;</span><br><span class="line"></span><br><span class="line">    out = <span class="string">""</span>;</span><br><span class="line">    len = str.length;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        c = str.charCodeAt(i);</span><br><span class="line">        <span class="keyword">if</span> ((c &gt;= <span class="number">0x0001</span>) &amp;&amp; (c &lt;= <span class="number">0x007F</span>)) &#123;</span><br><span class="line">            out += str.charAt(i);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c &gt; <span class="number">0x07FF</span>) &#123;</span><br><span class="line">            out += <span class="built_in">String</span>.fromCharCode(<span class="number">0xE0</span> | ((c &gt;&gt; <span class="number">12</span>) &amp; <span class="number">0x0F</span>));</span><br><span class="line">            out += <span class="built_in">String</span>.fromCharCode(<span class="number">0x80</span> | ((c &gt;&gt; <span class="number">6</span>) &amp; <span class="number">0x3F</span>));</span><br><span class="line">            out += <span class="built_in">String</span>.fromCharCode(<span class="number">0x80</span> | ((c &gt;&gt; <span class="number">0</span>) &amp; <span class="number">0x3F</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            out += <span class="built_in">String</span>.fromCharCode(<span class="number">0xC0</span> | ((c &gt;&gt; <span class="number">6</span>) &amp; <span class="number">0x1F</span>));</span><br><span class="line">            out += <span class="built_in">String</span>.fromCharCode(<span class="number">0x80</span> | ((c &gt;&gt; <span class="number">0</span>) &amp; <span class="number">0x3F</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">utf8to16</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> out, i, len, c;</span><br><span class="line">    <span class="keyword">var</span> char2, char3;</span><br><span class="line"></span><br><span class="line">    out = <span class="string">""</span>;</span><br><span class="line">    len = str.length;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; len) &#123;</span><br><span class="line">        c = str.charCodeAt(i++);</span><br><span class="line">        <span class="keyword">switch</span> (c &gt;&gt; <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                <span class="comment">// 0xxxxxxx </span></span><br><span class="line">                out += str.charAt(i - <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">13</span>:</span><br><span class="line">                <span class="comment">// 110x xxxx 10xx xxxx </span></span><br><span class="line">                char2 = str.charCodeAt(i++);</span><br><span class="line">                out += <span class="built_in">String</span>.fromCharCode(((c &amp; <span class="number">0x1F</span>) &lt;&lt; <span class="number">6</span>) | (char2 &amp; <span class="number">0x3F</span>));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">14</span>:</span><br><span class="line">                <span class="comment">// 1110 xxxx 10xx xxxx 10xx xxxx </span></span><br><span class="line">                char2 = str.charCodeAt(i++);</span><br><span class="line">                char3 = str.charCodeAt(i++);</span><br><span class="line">                out += <span class="built_in">String</span>.fromCharCode(((c &amp; <span class="number">0x0F</span>) &lt;&lt; <span class="number">12</span>) |</span><br><span class="line">                    ((char2 &amp; <span class="number">0x3F</span>) &lt;&lt; <span class="number">6</span>) |</span><br><span class="line">                    ((char3 &amp; <span class="number">0x3F</span>) &lt;&lt; <span class="number">0</span>));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doit</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> f = <span class="built_in">document</span>.f</span><br><span class="line">    f.output.value = base64encode(utf16to8(f.source.value))</span><br><span class="line">    f.decode.value = utf8to16(base64decode(f.output.value))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//#endregion Base64编码,解码函数</span></span><br></pre></td></tr></table></figure>
<h1 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//#region MD5</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message</span></span><br><span class="line"><span class="comment"> * Digest Algorithm, as defined in RFC 1321.</span></span><br><span class="line"><span class="comment"> * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.</span></span><br><span class="line"><span class="comment"> * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet</span></span><br><span class="line"><span class="comment"> * Distributed under the BSD License</span></span><br><span class="line"><span class="comment"> * See http://pajhome.org.uk/crypt/md5 for more info.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Configurable variables. You may need to tweak these to be compatible with</span></span><br><span class="line"><span class="comment"> * the server-side, but the defaults work in most cases.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> hexcase = <span class="number">0</span>; <span class="comment">/* hex output format. 0 - lowercase; 1 - uppercase        */</span></span><br><span class="line"><span class="keyword">var</span> b64pad = <span class="string">""</span>; <span class="comment">/* base-64 pad character. "=" for strict RFC compliance   */</span></span><br><span class="line"><span class="keyword">var</span> chrsz = <span class="number">8</span>; <span class="comment">/* bits per input character. 8 - ASCII; 16 - Unicode      */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * These are the functions you'll usually want to call</span></span><br><span class="line"><span class="comment"> * They take string arguments and return either hex or base-64 encoded strings</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hex_md5</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> binl2hex(core_md5(str2binl(s), s.length * chrsz));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b64_md5</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> binl2b64(core_md5(str2binl(s), s.length * chrsz));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">str_md5</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> binl2str(core_md5(str2binl(s), s.length * chrsz));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hex_hmac_md5</span>(<span class="params">key, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> binl2hex(core_hmac_md5(key, data));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b64_hmac_md5</span>(<span class="params">key, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> binl2b64(core_hmac_md5(key, data));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">str_hmac_md5</span>(<span class="params">key, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> binl2str(core_hmac_md5(key, data));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Perform a simple self-test to see if the VM is working</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">md5_vm_test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> hex_md5(<span class="string">"abc"</span>) == <span class="string">"900150983cd24fb0d6963f7d28e17f72"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Calculate the MD5 of an array of little-endian words, and a bit length</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">core_md5</span>(<span class="params">x, len</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* append padding */</span></span><br><span class="line">    x[len &gt;&gt; <span class="number">5</span>] |= <span class="number">0x80</span> &lt;&lt; ((len) % <span class="number">32</span>);</span><br><span class="line">    x[(((len + <span class="number">64</span>) &gt;&gt;&gt; <span class="number">9</span>) &lt;&lt; <span class="number">4</span>) + <span class="number">14</span>] = len;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1732584193</span>;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">-271733879</span>;</span><br><span class="line">    <span class="keyword">var</span> c = <span class="number">-1732584194</span>;</span><br><span class="line">    <span class="keyword">var</span> d = <span class="number">271733878</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; x.length; i += <span class="number">16</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> olda = a;</span><br><span class="line">        <span class="keyword">var</span> oldb = b;</span><br><span class="line">        <span class="keyword">var</span> oldc = c;</span><br><span class="line">        <span class="keyword">var</span> oldd = d;</span><br><span class="line"></span><br><span class="line">        a = md5_ff(a, b, c, d, x[i + <span class="number">0</span>], <span class="number">7</span>, <span class="number">-680876936</span>);</span><br><span class="line">        d = md5_ff(d, a, b, c, x[i + <span class="number">1</span>], <span class="number">12</span>, <span class="number">-389564586</span>);</span><br><span class="line">        c = md5_ff(c, d, a, b, x[i + <span class="number">2</span>], <span class="number">17</span>, <span class="number">606105819</span>);</span><br><span class="line">        b = md5_ff(b, c, d, a, x[i + <span class="number">3</span>], <span class="number">22</span>, <span class="number">-1044525330</span>);</span><br><span class="line">        a = md5_ff(a, b, c, d, x[i + <span class="number">4</span>], <span class="number">7</span>, <span class="number">-176418897</span>);</span><br><span class="line">        d = md5_ff(d, a, b, c, x[i + <span class="number">5</span>], <span class="number">12</span>, <span class="number">1200080426</span>);</span><br><span class="line">        c = md5_ff(c, d, a, b, x[i + <span class="number">6</span>], <span class="number">17</span>, <span class="number">-1473231341</span>);</span><br><span class="line">        b = md5_ff(b, c, d, a, x[i + <span class="number">7</span>], <span class="number">22</span>, <span class="number">-45705983</span>);</span><br><span class="line">        a = md5_ff(a, b, c, d, x[i + <span class="number">8</span>], <span class="number">7</span>, <span class="number">1770035416</span>);</span><br><span class="line">        d = md5_ff(d, a, b, c, x[i + <span class="number">9</span>], <span class="number">12</span>, <span class="number">-1958414417</span>);</span><br><span class="line">        c = md5_ff(c, d, a, b, x[i + <span class="number">10</span>], <span class="number">17</span>, <span class="number">-42063</span>);</span><br><span class="line">        b = md5_ff(b, c, d, a, x[i + <span class="number">11</span>], <span class="number">22</span>, <span class="number">-1990404162</span>);</span><br><span class="line">        a = md5_ff(a, b, c, d, x[i + <span class="number">12</span>], <span class="number">7</span>, <span class="number">1804603682</span>);</span><br><span class="line">        d = md5_ff(d, a, b, c, x[i + <span class="number">13</span>], <span class="number">12</span>, <span class="number">-40341101</span>);</span><br><span class="line">        c = md5_ff(c, d, a, b, x[i + <span class="number">14</span>], <span class="number">17</span>, <span class="number">-1502002290</span>);</span><br><span class="line">        b = md5_ff(b, c, d, a, x[i + <span class="number">15</span>], <span class="number">22</span>, <span class="number">1236535329</span>);</span><br><span class="line"></span><br><span class="line">        a = md5_gg(a, b, c, d, x[i + <span class="number">1</span>], <span class="number">5</span>, <span class="number">-165796510</span>);</span><br><span class="line">        d = md5_gg(d, a, b, c, x[i + <span class="number">6</span>], <span class="number">9</span>, <span class="number">-1069501632</span>);</span><br><span class="line">        c = md5_gg(c, d, a, b, x[i + <span class="number">11</span>], <span class="number">14</span>, <span class="number">643717713</span>);</span><br><span class="line">        b = md5_gg(b, c, d, a, x[i + <span class="number">0</span>], <span class="number">20</span>, <span class="number">-373897302</span>);</span><br><span class="line">        a = md5_gg(a, b, c, d, x[i + <span class="number">5</span>], <span class="number">5</span>, <span class="number">-701558691</span>);</span><br><span class="line">        d = md5_gg(d, a, b, c, x[i + <span class="number">10</span>], <span class="number">9</span>, <span class="number">38016083</span>);</span><br><span class="line">        c = md5_gg(c, d, a, b, x[i + <span class="number">15</span>], <span class="number">14</span>, <span class="number">-660478335</span>);</span><br><span class="line">        b = md5_gg(b, c, d, a, x[i + <span class="number">4</span>], <span class="number">20</span>, <span class="number">-405537848</span>);</span><br><span class="line">        a = md5_gg(a, b, c, d, x[i + <span class="number">9</span>], <span class="number">5</span>, <span class="number">568446438</span>);</span><br><span class="line">        d = md5_gg(d, a, b, c, x[i + <span class="number">14</span>], <span class="number">9</span>, <span class="number">-1019803690</span>);</span><br><span class="line">        c = md5_gg(c, d, a, b, x[i + <span class="number">3</span>], <span class="number">14</span>, <span class="number">-187363961</span>);</span><br><span class="line">        b = md5_gg(b, c, d, a, x[i + <span class="number">8</span>], <span class="number">20</span>, <span class="number">1163531501</span>);</span><br><span class="line">        a = md5_gg(a, b, c, d, x[i + <span class="number">13</span>], <span class="number">5</span>, <span class="number">-1444681467</span>);</span><br><span class="line">        d = md5_gg(d, a, b, c, x[i + <span class="number">2</span>], <span class="number">9</span>, <span class="number">-51403784</span>);</span><br><span class="line">        c = md5_gg(c, d, a, b, x[i + <span class="number">7</span>], <span class="number">14</span>, <span class="number">1735328473</span>);</span><br><span class="line">        b = md5_gg(b, c, d, a, x[i + <span class="number">12</span>], <span class="number">20</span>, <span class="number">-1926607734</span>);</span><br><span class="line"></span><br><span class="line">        a = md5_hh(a, b, c, d, x[i + <span class="number">5</span>], <span class="number">4</span>, <span class="number">-378558</span>);</span><br><span class="line">        d = md5_hh(d, a, b, c, x[i + <span class="number">8</span>], <span class="number">11</span>, <span class="number">-2022574463</span>);</span><br><span class="line">        c = md5_hh(c, d, a, b, x[i + <span class="number">11</span>], <span class="number">16</span>, <span class="number">1839030562</span>);</span><br><span class="line">        b = md5_hh(b, c, d, a, x[i + <span class="number">14</span>], <span class="number">23</span>, <span class="number">-35309556</span>);</span><br><span class="line">        a = md5_hh(a, b, c, d, x[i + <span class="number">1</span>], <span class="number">4</span>, <span class="number">-1530992060</span>);</span><br><span class="line">        d = md5_hh(d, a, b, c, x[i + <span class="number">4</span>], <span class="number">11</span>, <span class="number">1272893353</span>);</span><br><span class="line">        c = md5_hh(c, d, a, b, x[i + <span class="number">7</span>], <span class="number">16</span>, <span class="number">-155497632</span>);</span><br><span class="line">        b = md5_hh(b, c, d, a, x[i + <span class="number">10</span>], <span class="number">23</span>, <span class="number">-1094730640</span>);</span><br><span class="line">        a = md5_hh(a, b, c, d, x[i + <span class="number">13</span>], <span class="number">4</span>, <span class="number">681279174</span>);</span><br><span class="line">        d = md5_hh(d, a, b, c, x[i + <span class="number">0</span>], <span class="number">11</span>, <span class="number">-358537222</span>);</span><br><span class="line">        c = md5_hh(c, d, a, b, x[i + <span class="number">3</span>], <span class="number">16</span>, <span class="number">-722521979</span>);</span><br><span class="line">        b = md5_hh(b, c, d, a, x[i + <span class="number">6</span>], <span class="number">23</span>, <span class="number">76029189</span>);</span><br><span class="line">        a = md5_hh(a, b, c, d, x[i + <span class="number">9</span>], <span class="number">4</span>, <span class="number">-640364487</span>);</span><br><span class="line">        d = md5_hh(d, a, b, c, x[i + <span class="number">12</span>], <span class="number">11</span>, <span class="number">-421815835</span>);</span><br><span class="line">        c = md5_hh(c, d, a, b, x[i + <span class="number">15</span>], <span class="number">16</span>, <span class="number">530742520</span>);</span><br><span class="line">        b = md5_hh(b, c, d, a, x[i + <span class="number">2</span>], <span class="number">23</span>, <span class="number">-995338651</span>);</span><br><span class="line"></span><br><span class="line">        a = md5_ii(a, b, c, d, x[i + <span class="number">0</span>], <span class="number">6</span>, <span class="number">-198630844</span>);</span><br><span class="line">        d = md5_ii(d, a, b, c, x[i + <span class="number">7</span>], <span class="number">10</span>, <span class="number">1126891415</span>);</span><br><span class="line">        c = md5_ii(c, d, a, b, x[i + <span class="number">14</span>], <span class="number">15</span>, <span class="number">-1416354905</span>);</span><br><span class="line">        b = md5_ii(b, c, d, a, x[i + <span class="number">5</span>], <span class="number">21</span>, <span class="number">-57434055</span>);</span><br><span class="line">        a = md5_ii(a, b, c, d, x[i + <span class="number">12</span>], <span class="number">6</span>, <span class="number">1700485571</span>);</span><br><span class="line">        d = md5_ii(d, a, b, c, x[i + <span class="number">3</span>], <span class="number">10</span>, <span class="number">-1894986606</span>);</span><br><span class="line">        c = md5_ii(c, d, a, b, x[i + <span class="number">10</span>], <span class="number">15</span>, <span class="number">-1051523</span>);</span><br><span class="line">        b = md5_ii(b, c, d, a, x[i + <span class="number">1</span>], <span class="number">21</span>, <span class="number">-2054922799</span>);</span><br><span class="line">        a = md5_ii(a, b, c, d, x[i + <span class="number">8</span>], <span class="number">6</span>, <span class="number">1873313359</span>);</span><br><span class="line">        d = md5_ii(d, a, b, c, x[i + <span class="number">15</span>], <span class="number">10</span>, <span class="number">-30611744</span>);</span><br><span class="line">        c = md5_ii(c, d, a, b, x[i + <span class="number">6</span>], <span class="number">15</span>, <span class="number">-1560198380</span>);</span><br><span class="line">        b = md5_ii(b, c, d, a, x[i + <span class="number">13</span>], <span class="number">21</span>, <span class="number">1309151649</span>);</span><br><span class="line">        a = md5_ii(a, b, c, d, x[i + <span class="number">4</span>], <span class="number">6</span>, <span class="number">-145523070</span>);</span><br><span class="line">        d = md5_ii(d, a, b, c, x[i + <span class="number">11</span>], <span class="number">10</span>, <span class="number">-1120210379</span>);</span><br><span class="line">        c = md5_ii(c, d, a, b, x[i + <span class="number">2</span>], <span class="number">15</span>, <span class="number">718787259</span>);</span><br><span class="line">        b = md5_ii(b, c, d, a, x[i + <span class="number">9</span>], <span class="number">21</span>, <span class="number">-343485551</span>);</span><br><span class="line"></span><br><span class="line">        a = safe_add(a, olda);</span><br><span class="line">        b = safe_add(b, oldb);</span><br><span class="line">        c = safe_add(c, oldc);</span><br><span class="line">        d = safe_add(d, oldd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>(a, b, c, d);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * These functions implement the four basic operations the algorithm uses.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">md5_cmn</span>(<span class="params">q, a, b, x, s, t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">md5_ff</span>(<span class="params">a, b, c, d, x, s, t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> md5_cmn((b &amp; c) | ((~b) &amp; d), a, b, x, s, t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">md5_gg</span>(<span class="params">a, b, c, d, x, s, t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> md5_cmn((b &amp; d) | (c &amp; (~d)), a, b, x, s, t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">md5_hh</span>(<span class="params">a, b, c, d, x, s, t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> md5_cmn(b ^ c ^ d, a, b, x, s, t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">md5_ii</span>(<span class="params">a, b, c, d, x, s, t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> md5_cmn(c ^ (b | (~d)), a, b, x, s, t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Calculate the HMAC-MD5, of a key and some data</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">core_hmac_md5</span>(<span class="params">key, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> bkey = str2binl(key);</span><br><span class="line">    <span class="keyword">if</span> (bkey.length &gt; <span class="number">16</span>) bkey = core_md5(bkey, key.length * chrsz);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> ipad = <span class="built_in">Array</span>(<span class="number">16</span>),</span><br><span class="line">        opad = <span class="built_in">Array</span>(<span class="number">16</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) &#123;</span><br><span class="line">        ipad[i] = bkey[i] ^ <span class="number">0x36363636</span>;</span><br><span class="line">        opad[i] = bkey[i] ^ <span class="number">0x5C5C5C5C</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> hash = core_md5(ipad.concat(str2binl(data)), <span class="number">512</span> + data.length * chrsz);</span><br><span class="line">    <span class="keyword">return</span> core_md5(opad.concat(hash), <span class="number">512</span> + <span class="number">128</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Add integers, wrapping at 2^32. This uses 16-bit operations internally</span></span><br><span class="line"><span class="comment"> * to work around bugs in some JS interpreters.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safe_add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> lsw = (x &amp; <span class="number">0xFFFF</span>) + (y &amp; <span class="number">0xFFFF</span>);</span><br><span class="line">    <span class="keyword">var</span> msw = (x &gt;&gt; <span class="number">16</span>) + (y &gt;&gt; <span class="number">16</span>) + (lsw &gt;&gt; <span class="number">16</span>);</span><br><span class="line">    <span class="keyword">return</span> (msw &lt;&lt; <span class="number">16</span>) | (lsw &amp; <span class="number">0xFFFF</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Bitwise rotate a 32-bit number to the left.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bit_rol</span>(<span class="params">num, cnt</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (num &lt;&lt; cnt) | (num &gt;&gt;&gt; (<span class="number">32</span> - cnt));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Convert a string to an array of little-endian words</span></span><br><span class="line"><span class="comment"> * If chrsz is ASCII, characters &gt;255 have their hi-byte silently ignored.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">str2binl</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> bin = <span class="built_in">Array</span>();</span><br><span class="line">    <span class="keyword">var</span> mask = (<span class="number">1</span> &lt;&lt; chrsz) - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length * chrsz; i += chrsz)</span><br><span class="line">        bin[i &gt;&gt; <span class="number">5</span>] |= (str.charCodeAt(i / chrsz) &amp; mask) &lt;&lt; (i % <span class="number">32</span>);</span><br><span class="line">    <span class="keyword">return</span> bin;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Convert an array of little-endian words to a string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">binl2str</span>(<span class="params">bin</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">var</span> mask = (<span class="number">1</span> &lt;&lt; chrsz) - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; bin.length * <span class="number">32</span>; i += chrsz)</span><br><span class="line">        str += <span class="built_in">String</span>.fromCharCode((bin[i &gt;&gt; <span class="number">5</span>] &gt;&gt;&gt; (i % <span class="number">32</span>)) &amp; mask);</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Convert an array of little-endian words to a hex string.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">binl2hex</span>(<span class="params">binarray</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> hex_tab = hexcase ? <span class="string">"0123456789ABCDEF"</span> : <span class="string">"0123456789abcdef"</span>;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; binarray.length * <span class="number">4</span>; i++) &#123;</span><br><span class="line">        str += hex_tab.charAt((binarray[i &gt;&gt; <span class="number">2</span>] &gt;&gt; ((i % <span class="number">4</span>) * <span class="number">8</span> + <span class="number">4</span>)) &amp; <span class="number">0xF</span>) +</span><br><span class="line">            hex_tab.charAt((binarray[i &gt;&gt; <span class="number">2</span>] &gt;&gt; ((i % <span class="number">4</span>) * <span class="number">8</span>)) &amp; <span class="number">0xF</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Convert an array of little-endian words to a base-64 string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">binl2b64</span>(<span class="params">binarray</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> tab = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span>;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; binarray.length * <span class="number">4</span>; i += <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> triplet = (((binarray[i &gt;&gt; <span class="number">2</span>] &gt;&gt; <span class="number">8</span> * (i % <span class="number">4</span>)) &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">16</span>) | (((binarray[i + <span class="number">1</span> &gt;&gt; <span class="number">2</span>] &gt;&gt; <span class="number">8</span> * ((i + <span class="number">1</span>) % <span class="number">4</span>)) &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">8</span>) | ((binarray[i + <span class="number">2</span> &gt;&gt; <span class="number">2</span>] &gt;&gt; <span class="number">8</span> * ((i + <span class="number">2</span>) % <span class="number">4</span>)) &amp; <span class="number">0xFF</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i * <span class="number">8</span> + j * <span class="number">6</span> &gt; binarray.length * <span class="number">32</span>) str += b64pad;</span><br><span class="line">            <span class="keyword">else</span> str += tab.charAt((triplet &gt;&gt; <span class="number">6</span> * (<span class="number">3</span> - j)) &amp; <span class="number">0x3F</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//#endregion MD5</span></span><br></pre></td></tr></table></figure>
<h1 id="MD4"><a href="#MD4" class="headerlink" title="MD4"></a>MD4</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//#region MD4</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * A JavaScript implementation of the RSA Data Security, Inc. MD4 Message</span></span><br><span class="line"><span class="comment"> * Digest Algorithm, as defined in RFC 1320.</span></span><br><span class="line"><span class="comment"> * Version 2.1 Copyright (C) Jerrad Pierce, Paul Johnston 1999 - 2002.</span></span><br><span class="line"><span class="comment"> * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet</span></span><br><span class="line"><span class="comment"> * Distributed under the BSD License</span></span><br><span class="line"><span class="comment"> * See http://pajhome.org.uk/crypt/md5 for more info.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Configurable variables. You may need to tweak these to be compatible with</span></span><br><span class="line"><span class="comment"> * the server-side, but the defaults work in most cases.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> hexcase = <span class="number">0</span>; <span class="comment">/* hex output format. 0 - lowercase; 1 - uppercase        */</span></span><br><span class="line"><span class="keyword">var</span> b64pad = <span class="string">""</span>; <span class="comment">/* base-64 pad character. "=" for strict RFC compliance   */</span></span><br><span class="line"><span class="keyword">var</span> chrsz = <span class="number">8</span>; <span class="comment">/* bits per input character. 8 - ASCII; 16 - Unicode      */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * These are the functions you'll usually want to call</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hex_md4</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> binl2hex(core_md4(str2binl(s), s.length * chrsz));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b64_md4</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> binl2b64(core_md4(str2binl(s), s.length * chrsz));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">str_md4</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> binl2str(core_md4(str2binl(s), s.length * chrsz));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hex_hmac_md4</span>(<span class="params">key, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> binl2hex(core_hmac_md4(key, data));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b64_hmac_md4</span>(<span class="params">key, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> binl2b64(core_hmac_md4(key, data));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">str_hmac_md4</span>(<span class="params">key, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> binl2str(core_hmac_md4(key, data));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * Perform a simple self-test to see if the VM is working</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">md4_vm_test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> hex_md4(<span class="string">"abc"</span>) == <span class="string">"a448017aaf21d8525fc10ae87aa6729d"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Calculate the MD4 of an array of little-endian words, and a bit length</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">core_md4</span>(<span class="params">x, len</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* append padding */</span></span><br><span class="line">    x[len &gt;&gt; <span class="number">5</span>] |= <span class="number">0x80</span> &lt;&lt; (len % <span class="number">32</span>);</span><br><span class="line">    x[(((len + <span class="number">64</span>) &gt;&gt;&gt; <span class="number">9</span>) &lt;&lt; <span class="number">4</span>) + <span class="number">14</span>] = len;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1732584193</span>;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">-271733879</span>;</span><br><span class="line">    <span class="keyword">var</span> c = <span class="number">-1732584194</span>;</span><br><span class="line">    <span class="keyword">var</span> d = <span class="number">271733878</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; x.length; i += <span class="number">16</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> olda = a;</span><br><span class="line">        <span class="keyword">var</span> oldb = b;</span><br><span class="line">        <span class="keyword">var</span> oldc = c;</span><br><span class="line">        <span class="keyword">var</span> oldd = d;</span><br><span class="line"></span><br><span class="line">        a = md4_ff(a, b, c, d, x[i + <span class="number">0</span>], <span class="number">3</span>);</span><br><span class="line">        d = md4_ff(d, a, b, c, x[i + <span class="number">1</span>], <span class="number">7</span>);</span><br><span class="line">        c = md4_ff(c, d, a, b, x[i + <span class="number">2</span>], <span class="number">11</span>);</span><br><span class="line">        b = md4_ff(b, c, d, a, x[i + <span class="number">3</span>], <span class="number">19</span>);</span><br><span class="line">        a = md4_ff(a, b, c, d, x[i + <span class="number">4</span>], <span class="number">3</span>);</span><br><span class="line">        d = md4_ff(d, a, b, c, x[i + <span class="number">5</span>], <span class="number">7</span>);</span><br><span class="line">        c = md4_ff(c, d, a, b, x[i + <span class="number">6</span>], <span class="number">11</span>);</span><br><span class="line">        b = md4_ff(b, c, d, a, x[i + <span class="number">7</span>], <span class="number">19</span>);</span><br><span class="line">        a = md4_ff(a, b, c, d, x[i + <span class="number">8</span>], <span class="number">3</span>);</span><br><span class="line">        d = md4_ff(d, a, b, c, x[i + <span class="number">9</span>], <span class="number">7</span>);</span><br><span class="line">        c = md4_ff(c, d, a, b, x[i + <span class="number">10</span>], <span class="number">11</span>);</span><br><span class="line">        b = md4_ff(b, c, d, a, x[i + <span class="number">11</span>], <span class="number">19</span>);</span><br><span class="line">        a = md4_ff(a, b, c, d, x[i + <span class="number">12</span>], <span class="number">3</span>);</span><br><span class="line">        d = md4_ff(d, a, b, c, x[i + <span class="number">13</span>], <span class="number">7</span>);</span><br><span class="line">        c = md4_ff(c, d, a, b, x[i + <span class="number">14</span>], <span class="number">11</span>);</span><br><span class="line">        b = md4_ff(b, c, d, a, x[i + <span class="number">15</span>], <span class="number">19</span>);</span><br><span class="line"></span><br><span class="line">        a = md4_gg(a, b, c, d, x[i + <span class="number">0</span>], <span class="number">3</span>);</span><br><span class="line">        d = md4_gg(d, a, b, c, x[i + <span class="number">4</span>], <span class="number">5</span>);</span><br><span class="line">        c = md4_gg(c, d, a, b, x[i + <span class="number">8</span>], <span class="number">9</span>);</span><br><span class="line">        b = md4_gg(b, c, d, a, x[i + <span class="number">12</span>], <span class="number">13</span>);</span><br><span class="line">        a = md4_gg(a, b, c, d, x[i + <span class="number">1</span>], <span class="number">3</span>);</span><br><span class="line">        d = md4_gg(d, a, b, c, x[i + <span class="number">5</span>], <span class="number">5</span>);</span><br><span class="line">        c = md4_gg(c, d, a, b, x[i + <span class="number">9</span>], <span class="number">9</span>);</span><br><span class="line">        b = md4_gg(b, c, d, a, x[i + <span class="number">13</span>], <span class="number">13</span>);</span><br><span class="line">        a = md4_gg(a, b, c, d, x[i + <span class="number">2</span>], <span class="number">3</span>);</span><br><span class="line">        d = md4_gg(d, a, b, c, x[i + <span class="number">6</span>], <span class="number">5</span>);</span><br><span class="line">        c = md4_gg(c, d, a, b, x[i + <span class="number">10</span>], <span class="number">9</span>);</span><br><span class="line">        b = md4_gg(b, c, d, a, x[i + <span class="number">14</span>], <span class="number">13</span>);</span><br><span class="line">        a = md4_gg(a, b, c, d, x[i + <span class="number">3</span>], <span class="number">3</span>);</span><br><span class="line">        d = md4_gg(d, a, b, c, x[i + <span class="number">7</span>], <span class="number">5</span>);</span><br><span class="line">        c = md4_gg(c, d, a, b, x[i + <span class="number">11</span>], <span class="number">9</span>);</span><br><span class="line">        b = md4_gg(b, c, d, a, x[i + <span class="number">15</span>], <span class="number">13</span>);</span><br><span class="line"></span><br><span class="line">        a = md4_hh(a, b, c, d, x[i + <span class="number">0</span>], <span class="number">3</span>);</span><br><span class="line">        d = md4_hh(d, a, b, c, x[i + <span class="number">8</span>], <span class="number">9</span>);</span><br><span class="line">        c = md4_hh(c, d, a, b, x[i + <span class="number">4</span>], <span class="number">11</span>);</span><br><span class="line">        b = md4_hh(b, c, d, a, x[i + <span class="number">12</span>], <span class="number">15</span>);</span><br><span class="line">        a = md4_hh(a, b, c, d, x[i + <span class="number">2</span>], <span class="number">3</span>);</span><br><span class="line">        d = md4_hh(d, a, b, c, x[i + <span class="number">10</span>], <span class="number">9</span>);</span><br><span class="line">        c = md4_hh(c, d, a, b, x[i + <span class="number">6</span>], <span class="number">11</span>);</span><br><span class="line">        b = md4_hh(b, c, d, a, x[i + <span class="number">14</span>], <span class="number">15</span>);</span><br><span class="line">        a = md4_hh(a, b, c, d, x[i + <span class="number">1</span>], <span class="number">3</span>);</span><br><span class="line">        d = md4_hh(d, a, b, c, x[i + <span class="number">9</span>], <span class="number">9</span>);</span><br><span class="line">        c = md4_hh(c, d, a, b, x[i + <span class="number">5</span>], <span class="number">11</span>);</span><br><span class="line">        b = md4_hh(b, c, d, a, x[i + <span class="number">13</span>], <span class="number">15</span>);</span><br><span class="line">        a = md4_hh(a, b, c, d, x[i + <span class="number">3</span>], <span class="number">3</span>);</span><br><span class="line">        d = md4_hh(d, a, b, c, x[i + <span class="number">11</span>], <span class="number">9</span>);</span><br><span class="line">        c = md4_hh(c, d, a, b, x[i + <span class="number">7</span>], <span class="number">11</span>);</span><br><span class="line">        b = md4_hh(b, c, d, a, x[i + <span class="number">15</span>], <span class="number">15</span>);</span><br><span class="line"></span><br><span class="line">        a = safe_add(a, olda);</span><br><span class="line">        b = safe_add(b, oldb);</span><br><span class="line">        c = safe_add(c, oldc);</span><br><span class="line">        d = safe_add(d, oldd);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>(a, b, c, d);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * These functions implement the basic operation for each round of the</span></span><br><span class="line"><span class="comment"> * algorithm.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">md4_cmn</span>(<span class="params">q, a, b, x, s, t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> safe_add(rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">md4_ff</span>(<span class="params">a, b, c, d, x, s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> md4_cmn((b &amp; c) | ((~b) &amp; d), a, <span class="number">0</span>, x, s, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">md4_gg</span>(<span class="params">a, b, c, d, x, s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> md4_cmn((b &amp; c) | (b &amp; d) | (c &amp; d), a, <span class="number">0</span>, x, s, <span class="number">1518500249</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">md4_hh</span>(<span class="params">a, b, c, d, x, s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> md4_cmn(b ^ c ^ d, a, <span class="number">0</span>, x, s, <span class="number">1859775393</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Calculate the HMAC-MD4, of a key and some data</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">core_hmac_md4</span>(<span class="params">key, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> bkey = str2binl(key);</span><br><span class="line">    <span class="keyword">if</span> (bkey.length &gt; <span class="number">16</span>) bkey = core_md4(bkey, key.length * chrsz);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> ipad = <span class="built_in">Array</span>(<span class="number">16</span>),</span><br><span class="line">        opad = <span class="built_in">Array</span>(<span class="number">16</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) &#123;</span><br><span class="line">        ipad[i] = bkey[i] ^ <span class="number">0x36363636</span>;</span><br><span class="line">        opad[i] = bkey[i] ^ <span class="number">0x5C5C5C5C</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> hash = core_md4(ipad.concat(str2binl(data)), <span class="number">512</span> + data.length * chrsz);</span><br><span class="line">    <span class="keyword">return</span> core_md4(opad.concat(hash), <span class="number">512</span> + <span class="number">128</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Add integers, wrapping at 2^32. This uses 16-bit operations internally</span></span><br><span class="line"><span class="comment"> * to work around bugs in some JS interpreters.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safe_add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> lsw = (x &amp; <span class="number">0xFFFF</span>) + (y &amp; <span class="number">0xFFFF</span>);</span><br><span class="line">    <span class="keyword">var</span> msw = (x &gt;&gt; <span class="number">16</span>) + (y &gt;&gt; <span class="number">16</span>) + (lsw &gt;&gt; <span class="number">16</span>);</span><br><span class="line">    <span class="keyword">return</span> (msw &lt;&lt; <span class="number">16</span>) | (lsw &amp; <span class="number">0xFFFF</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Bitwise rotate a 32-bit number to the left.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rol</span>(<span class="params">num, cnt</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (num &lt;&lt; cnt) | (num &gt;&gt;&gt; (<span class="number">32</span> - cnt));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Convert a string to an array of little-endian words</span></span><br><span class="line"><span class="comment"> * If chrsz is ASCII, characters &gt;255 have their hi-byte silently ignored.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">str2binl</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> bin = <span class="built_in">Array</span>();</span><br><span class="line">    <span class="keyword">var</span> mask = (<span class="number">1</span> &lt;&lt; chrsz) - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length * chrsz; i += chrsz)</span><br><span class="line">        bin[i &gt;&gt; <span class="number">5</span>] |= (str.charCodeAt(i / chrsz) &amp; mask) &lt;&lt; (i % <span class="number">32</span>);</span><br><span class="line">    <span class="keyword">return</span> bin;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Convert an array of little-endian words to a string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">binl2str</span>(<span class="params">bin</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">var</span> mask = (<span class="number">1</span> &lt;&lt; chrsz) - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; bin.length * <span class="number">32</span>; i += chrsz)</span><br><span class="line">        str += <span class="built_in">String</span>.fromCharCode((bin[i &gt;&gt; <span class="number">5</span>] &gt;&gt;&gt; (i % <span class="number">32</span>)) &amp; mask);</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Convert an array of little-endian words to a hex string.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">binl2hex</span>(<span class="params">binarray</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> hex_tab = hexcase ? <span class="string">"0123456789ABCDEF"</span> : <span class="string">"0123456789abcdef"</span>;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; binarray.length * <span class="number">4</span>; i++) &#123;</span><br><span class="line">        str += hex_tab.charAt((binarray[i &gt;&gt; <span class="number">2</span>] &gt;&gt; ((i % <span class="number">4</span>) * <span class="number">8</span> + <span class="number">4</span>)) &amp; <span class="number">0xF</span>) +</span><br><span class="line">            hex_tab.charAt((binarray[i &gt;&gt; <span class="number">2</span>] &gt;&gt; ((i % <span class="number">4</span>) * <span class="number">8</span>)) &amp; <span class="number">0xF</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Convert an array of little-endian words to a base-64 string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">binl2b64</span>(<span class="params">binarray</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> tab = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span>;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; binarray.length * <span class="number">4</span>; i += <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> triplet = (((binarray[i &gt;&gt; <span class="number">2</span>] &gt;&gt; <span class="number">8</span> * (i % <span class="number">4</span>)) &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">16</span>) | (((binarray[i + <span class="number">1</span> &gt;&gt; <span class="number">2</span>] &gt;&gt; <span class="number">8</span> * ((i + <span class="number">1</span>) % <span class="number">4</span>)) &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">8</span>) | ((binarray[i + <span class="number">2</span> &gt;&gt; <span class="number">2</span>] &gt;&gt; <span class="number">8</span> * ((i + <span class="number">2</span>) % <span class="number">4</span>)) &amp; <span class="number">0xFF</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i * <span class="number">8</span> + j * <span class="number">6</span> &gt; binarray.length * <span class="number">32</span>) str += b64pad;</span><br><span class="line">            <span class="keyword">else</span> str += tab.charAt((triplet &gt;&gt; <span class="number">6</span> * (<span class="number">3</span> - j)) &amp; <span class="number">0x3F</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//#endregion MD4</span></span><br></pre></td></tr></table></figure>
<h1 id="SHA1算法"><a href="#SHA1算法" class="headerlink" title="SHA1算法"></a>SHA1算法</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//#region SHA1算法</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined</span></span><br><span class="line"><span class="comment"> * in FIPS PUB 180-1</span></span><br><span class="line"><span class="comment"> * Version 2.1a Copyright Paul Johnston 2000 - 2002.</span></span><br><span class="line"><span class="comment"> * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet</span></span><br><span class="line"><span class="comment"> * Distributed under the BSD License</span></span><br><span class="line"><span class="comment"> * See http://pajhome.org.uk/crypt/md5 for details.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Configurable variables. You may need to tweak these to be compatible with</span></span><br><span class="line"><span class="comment"> * the server-side, but the defaults work in most cases.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> hexcase = <span class="number">0</span>; <span class="comment">/* hex output format. 0 - lowercase; 1 - uppercase        */</span></span><br><span class="line"><span class="keyword">var</span> b64pad = <span class="string">""</span>; <span class="comment">/* base-64 pad character. "=" for strict RFC compliance   */</span></span><br><span class="line"><span class="keyword">var</span> chrsz = <span class="number">8</span>; <span class="comment">/* bits per input character. 8 - ASCII; 16 - Unicode      */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * These are the functions you'll usually want to call</span></span><br><span class="line"><span class="comment"> * They take string arguments and return either hex or base-64 encoded strings</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hex_sha1</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> binb2hex(core_sha1(str2binb(s), s.length * chrsz));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b64_sha1</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> binb2b64(core_sha1(str2binb(s), s.length * chrsz));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">str_sha1</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> binb2str(core_sha1(str2binb(s), s.length * chrsz));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hex_hmac_sha1</span>(<span class="params">key, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> binb2hex(core_hmac_sha1(key, data));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b64_hmac_sha1</span>(<span class="params">key, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> binb2b64(core_hmac_sha1(key, data));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">str_hmac_sha1</span>(<span class="params">key, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> binb2str(core_hmac_sha1(key, data));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Perform a simple self-test to see if the VM is working</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sha1_vm_test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> hex_sha1(<span class="string">"abc"</span>) == <span class="string">"a9993e364706816aba3e25717850c26c9cd0d89d"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Calculate the SHA-1 of an array of big-endian words, and a bit length</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">core_sha1</span>(<span class="params">x, len</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* append padding */</span></span><br><span class="line">    x[len &gt;&gt; <span class="number">5</span>] |= <span class="number">0x80</span> &lt;&lt; (<span class="number">24</span> - len % <span class="number">32</span>);</span><br><span class="line">    x[((len + <span class="number">64</span> &gt;&gt; <span class="number">9</span>) &lt;&lt; <span class="number">4</span>) + <span class="number">15</span>] = len;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> w = <span class="built_in">Array</span>(<span class="number">80</span>);</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1732584193</span>;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">-271733879</span>;</span><br><span class="line">    <span class="keyword">var</span> c = <span class="number">-1732584194</span>;</span><br><span class="line">    <span class="keyword">var</span> d = <span class="number">271733878</span>;</span><br><span class="line">    <span class="keyword">var</span> e = <span class="number">-1009589776</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; x.length; i += <span class="number">16</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> olda = a;</span><br><span class="line">        <span class="keyword">var</span> oldb = b;</span><br><span class="line">        <span class="keyword">var</span> oldc = c;</span><br><span class="line">        <span class="keyword">var</span> oldd = d;</span><br><span class="line">        <span class="keyword">var</span> olde = e;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">80</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j &lt; <span class="number">16</span>) w[j] = x[i + j];</span><br><span class="line">            <span class="keyword">else</span> w[j] = rol(w[j - <span class="number">3</span>] ^ w[j - <span class="number">8</span>] ^ w[j - <span class="number">14</span>] ^ w[j - <span class="number">16</span>], <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">var</span> t = safe_add(safe_add(rol(a, <span class="number">5</span>), sha1_ft(j, b, c, d)),</span><br><span class="line">                safe_add(safe_add(e, w[j]), sha1_kt(j)));</span><br><span class="line">            e = d;</span><br><span class="line">            d = c;</span><br><span class="line">            c = rol(b, <span class="number">30</span>);</span><br><span class="line">            b = a;</span><br><span class="line">            a = t;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        a = safe_add(a, olda);</span><br><span class="line">        b = safe_add(b, oldb);</span><br><span class="line">        c = safe_add(c, oldc);</span><br><span class="line">        d = safe_add(d, oldd);</span><br><span class="line">        e = safe_add(e, olde);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>(a, b, c, d, e);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Perform the appropriate triplet combination function for the current</span></span><br><span class="line"><span class="comment"> * iteration</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sha1_ft</span>(<span class="params">t, b, c, d</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (t &lt; <span class="number">20</span>) <span class="keyword">return</span> (b &amp; c) | ((~b) &amp; d);</span><br><span class="line">    <span class="keyword">if</span> (t &lt; <span class="number">40</span>) <span class="keyword">return</span> b ^ c ^ d;</span><br><span class="line">    <span class="keyword">if</span> (t &lt; <span class="number">60</span>) <span class="keyword">return</span> (b &amp; c) | (b &amp; d) | (c &amp; d);</span><br><span class="line">    <span class="keyword">return</span> b ^ c ^ d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Determine the appropriate additive constant for the current iteration</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sha1_kt</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (t &lt; <span class="number">20</span>) ? <span class="number">1518500249</span> : (t &lt; <span class="number">40</span>) ? <span class="number">1859775393</span> :</span><br><span class="line">        (t &lt; <span class="number">60</span>) ? <span class="number">-1894007588</span> : <span class="number">-899497514</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Calculate the HMAC-SHA1 of a key and some data</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">core_hmac_sha1</span>(<span class="params">key, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> bkey = str2binb(key);</span><br><span class="line">    <span class="keyword">if</span> (bkey.length &gt; <span class="number">16</span>) bkey = core_sha1(bkey, key.length * chrsz);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> ipad = <span class="built_in">Array</span>(<span class="number">16</span>),</span><br><span class="line">        opad = <span class="built_in">Array</span>(<span class="number">16</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) &#123;</span><br><span class="line">        ipad[i] = bkey[i] ^ <span class="number">0x36363636</span>;</span><br><span class="line">        opad[i] = bkey[i] ^ <span class="number">0x5C5C5C5C</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> hash = core_sha1(ipad.concat(str2binb(data)), <span class="number">512</span> + data.length * chrsz);</span><br><span class="line">    <span class="keyword">return</span> core_sha1(opad.concat(hash), <span class="number">512</span> + <span class="number">160</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Add integers, wrapping at 2^32. This uses 16-bit operations internally</span></span><br><span class="line"><span class="comment"> * to work around bugs in some JS interpreters.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safe_add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> lsw = (x &amp; <span class="number">0xFFFF</span>) + (y &amp; <span class="number">0xFFFF</span>);</span><br><span class="line">    <span class="keyword">var</span> msw = (x &gt;&gt; <span class="number">16</span>) + (y &gt;&gt; <span class="number">16</span>) + (lsw &gt;&gt; <span class="number">16</span>);</span><br><span class="line">    <span class="keyword">return</span> (msw &lt;&lt; <span class="number">16</span>) | (lsw &amp; <span class="number">0xFFFF</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Bitwise rotate a 32-bit number to the left.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rol</span>(<span class="params">num, cnt</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (num &lt;&lt; cnt) | (num &gt;&gt;&gt; (<span class="number">32</span> - cnt));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Convert an 8-bit or 16-bit string to an array of big-endian words</span></span><br><span class="line"><span class="comment"> * In 8-bit function, characters &gt;255 have their hi-byte silently ignored.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">str2binb</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> bin = <span class="built_in">Array</span>();</span><br><span class="line">    <span class="keyword">var</span> mask = (<span class="number">1</span> &lt;&lt; chrsz) - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length * chrsz; i += chrsz)</span><br><span class="line">        bin[i &gt;&gt; <span class="number">5</span>] |= (str.charCodeAt(i / chrsz) &amp; mask) &lt;&lt; (<span class="number">32</span> - chrsz - i % <span class="number">32</span>);</span><br><span class="line">    <span class="keyword">return</span> bin;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Convert an array of big-endian words to a string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">binb2str</span>(<span class="params">bin</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">var</span> mask = (<span class="number">1</span> &lt;&lt; chrsz) - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; bin.length * <span class="number">32</span>; i += chrsz)</span><br><span class="line">        str += <span class="built_in">String</span>.fromCharCode((bin[i &gt;&gt; <span class="number">5</span>] &gt;&gt;&gt; (<span class="number">32</span> - chrsz - i % <span class="number">32</span>)) &amp; mask);</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Convert an array of big-endian words to a hex string.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">binb2hex</span>(<span class="params">binarray</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> hex_tab = hexcase ? <span class="string">"0123456789ABCDEF"</span> : <span class="string">"0123456789abcdef"</span>;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; binarray.length * <span class="number">4</span>; i++) &#123;</span><br><span class="line">        str += hex_tab.charAt((binarray[i &gt;&gt; <span class="number">2</span>] &gt;&gt; ((<span class="number">3</span> - i % <span class="number">4</span>) * <span class="number">8</span> + <span class="number">4</span>)) &amp; <span class="number">0xF</span>) +</span><br><span class="line">            hex_tab.charAt((binarray[i &gt;&gt; <span class="number">2</span>] &gt;&gt; ((<span class="number">3</span> - i % <span class="number">4</span>) * <span class="number">8</span>)) &amp; <span class="number">0xF</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Convert an array of big-endian words to a base-64 string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">binb2b64</span>(<span class="params">binarray</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> tab = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span>;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; binarray.length * <span class="number">4</span>; i += <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> triplet = (((binarray[i &gt;&gt; <span class="number">2</span>] &gt;&gt; <span class="number">8</span> * (<span class="number">3</span> - i % <span class="number">4</span>)) &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">16</span>) | (((binarray[i + <span class="number">1</span> &gt;&gt; <span class="number">2</span>] &gt;&gt; <span class="number">8</span> * (<span class="number">3</span> - (i + <span class="number">1</span>) % <span class="number">4</span>)) &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">8</span>) | ((binarray[i + <span class="number">2</span> &gt;&gt; <span class="number">2</span>] &gt;&gt; <span class="number">8</span> * (<span class="number">3</span> - (i + <span class="number">2</span>) % <span class="number">4</span>)) &amp; <span class="number">0xFF</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i * <span class="number">8</span> + j * <span class="number">6</span> &gt; binarray.length * <span class="number">32</span>) str += b64pad;</span><br><span class="line">            <span class="keyword">else</span> str += tab.charAt((triplet &gt;&gt; <span class="number">6</span> * (<span class="number">3</span> - j)) &amp; <span class="number">0x3F</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//#endregion SHA1算法</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>代码片段</category>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>代码片段</tag>
        <tag>javascript</tag>
        <tag>加密&amp;解密</tag>
        <tag>编码</tag>
      </tags>
  </entry>
  <entry>
    <title>url参数操作</title>
    <url>/posts/ea17ae1b.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getQueryString</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (URLSearchParams) &#123;</span><br><span class="line">  <span class="comment">// https://developer.mozilla.org/zh-CN/docs/Web/API/URLSearchParams</span></span><br><span class="line">  <span class="keyword">const</span> params = <span class="keyword">new</span> URLSearchParams(location.search.replace(<span class="regexp">/\?/ig</span>, <span class="string">""</span>));</span><br><span class="line">    <span class="keyword">return</span> params.has(name)? params.get(name) : <span class="literal">null</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(^|&amp;)"</span> + name + <span class="string">"=([^&amp;]*)(&amp;|$)"</span>, <span class="string">"i"</span>);</span><br><span class="line">    <span class="keyword">const</span> r = <span class="built_in">window</span>.location.search.substr(<span class="number">1</span>).match(reg);</span><br><span class="line">    <span class="keyword">if</span> (r != <span class="literal">null</span>) <span class="keyword">return</span> <span class="built_in">unescape</span>(r[<span class="number">2</span>]); <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// https://developer.mozilla.org/zh-CN/docs/Web/API/URLSearchParams</span></span><br><span class="line"><span class="keyword">const</span> params = <span class="keyword">new</span> URLSearchParams(location.search.replace(<span class="regexp">/\?/ig</span>, <span class="string">""</span>)); </span><br><span class="line"><span class="comment">// location.search = "?name=yajun&amp;sex=female"</span></span><br><span class="line">params.has(<span class="string">"yajun"</span>); <span class="comment">// true</span></span><br><span class="line">params.get(<span class="string">"sex"</span>); <span class="comment">// "female"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*获取网址参数*/</span></span><br><span class="line">getQueryString(name) &#123;</span><br><span class="line">  <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(^|&amp;)"</span> + name + <span class="string">"=([^&amp;]*)(&amp;|$)"</span>, <span class="string">"i"</span>);</span><br><span class="line">  <span class="keyword">var</span> r = <span class="built_in">window</span>.location.search.substr(<span class="number">1</span>).match(reg);</span><br><span class="line">  <span class="keyword">if</span> (r != <span class="literal">null</span>) <span class="keyword">return</span> <span class="built_in">unescape</span>(r[<span class="number">2</span>]); <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*获取全部url参数,并转换成json对象*/</span></span><br><span class="line">getAllQuery (url) &#123;</span><br><span class="line">    <span class="keyword">var</span> url = url ? url : <span class="built_in">window</span>.location.href;</span><br><span class="line">    <span class="keyword">var</span> _pa = url.substring(url.indexOf(<span class="string">'?'</span>) + <span class="number">1</span>),</span><br><span class="line">        _arrS = _pa.split(<span class="string">'&amp;'</span>),</span><br><span class="line">        _rs = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, _len = _arrS.length; i &lt; _len; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> pos = _arrS[i].indexOf(<span class="string">'='</span>);</span><br><span class="line">        <span class="keyword">if</span> (pos == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> name = _arrS[i].substring(<span class="number">0</span>, pos),</span><br><span class="line">            value = <span class="built_in">window</span>.decodeURIComponent(_arrS[i].substring(pos + <span class="number">1</span>));</span><br><span class="line">        _rs[name] = value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _rs;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*删除url指定参数，返回url*/</span></span><br><span class="line">delQuery(url, name)&#123;</span><br><span class="line">    <span class="keyword">var</span> baseUrl = url.split(<span class="string">'?'</span>)[<span class="number">0</span>] + <span class="string">'?'</span>;</span><br><span class="line">    <span class="keyword">var</span> query = url.split(<span class="string">'?'</span>)[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span> (query.indexOf(name)&gt;<span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line">        <span class="keyword">var</span> arr = query.split(<span class="string">"&amp;"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            arr[i] = arr[i].split(<span class="string">"="</span>);</span><br><span class="line">            obj[arr[i][<span class="number">0</span>]] = arr[i][<span class="number">1</span>];</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">delete</span> obj[name];</span><br><span class="line">        <span class="keyword">var</span> url = baseUrl + <span class="built_in">JSON</span>.stringify(obj).replace(<span class="regexp">/[\"\&#123;\&#125;]/g</span>,<span class="string">""</span>).replace(<span class="regexp">/\:/g</span>,<span class="string">"="</span>).replace(<span class="regexp">/\,/g</span>,<span class="string">"&amp;"</span>);</span><br><span class="line">        <span class="keyword">return</span> url</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> url;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>代码片段</category>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>代码片段</tag>
        <tag>javascript</tag>
        <tag>类型检查</tag>
      </tags>
  </entry>
  <entry>
    <title>Storage 储存操作</title>
    <url>/posts/2785bf0c.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><a id="more"></a>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseLocalStorage</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(preId, timeSign) &#123;</span><br><span class="line">    <span class="keyword">this</span>.preId = preId <span class="comment">// 定义本地存储数据库前缀</span></span><br><span class="line">    <span class="keyword">this</span>.timeSign = timeSign || <span class="string">'|-|'</span> <span class="comment">// 定义时间戳与存储数据之间的拼接符</span></span><br><span class="line">    <span class="comment">// 操作状态</span></span><br><span class="line">    <span class="keyword">this</span>.status = &#123;</span><br><span class="line">      SUCCESS: <span class="number">0</span>, <span class="comment">// 成功</span></span><br><span class="line">      FAILURE: <span class="number">1</span>, <span class="comment">// 失败</span></span><br><span class="line">      OVERFLOW: <span class="number">2</span>, <span class="comment">// 溢出</span></span><br><span class="line">      TIMEOUT: <span class="number">3</span> <span class="comment">// 过期</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.storage = localStorage || <span class="built_in">window</span>.localStorage <span class="comment">// 保存本地存储链接 </span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 获取本地存储数据库数据真实字段</span></span><br><span class="line"><span class="comment">   * @param &#123;*&#125; key</span></span><br><span class="line"><span class="comment">   * @returns</span></span><br><span class="line"><span class="comment">   * @memberof BaseLocalStorage</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  getKey (key) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.preId + key</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 添加（修改）数据</span></span><br><span class="line"><span class="comment">   * @param &#123;*&#125; key 数据字段标识</span></span><br><span class="line"><span class="comment">   * @param &#123;*&#125; value 数据值</span></span><br><span class="line"><span class="comment">   * @param &#123;*&#125; callback 回调函数</span></span><br><span class="line"><span class="comment">   * @param &#123;*&#125; time 过期时间</span></span><br><span class="line"><span class="comment">   * @memberof BaseLocalStorage</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">set</span> (key, value, callback, time) &#123;</span><br><span class="line">    <span class="keyword">let</span> status = <span class="keyword">this</span>.status.SUCCESS <span class="comment">// 操作状态</span></span><br><span class="line">    key = <span class="keyword">this</span>.getKey(key)</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      time = <span class="keyword">new</span> <span class="built_in">Date</span>(time).getTime() || time.getTime() <span class="comment">// 根据时间参数获取时间戳</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      time = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime() + <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> <span class="comment">// 未传入时间参数或者时间参数有误，获取默认时间：一个月</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.storage.setItem(key, time + <span class="keyword">this</span>.timeSign + (<span class="built_in">Object</span>.prototype.toString.call(value).slice(<span class="number">8</span>, <span class="number">-1</span>) === <span class="string">'Object'</span> ? <span class="built_in">JSON</span>.stringify(value) : value))</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      status = <span class="keyword">this</span>.status.OVERFLOW</span><br><span class="line">    &#125;</span><br><span class="line">    callback &amp;&amp; callback.call(<span class="keyword">this</span>, status, key, value)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 获取数据</span></span><br><span class="line"><span class="comment">   * @param &#123;*&#125; key 数据字段标识</span></span><br><span class="line"><span class="comment">   * @param &#123;*&#125; callback 回调函数</span></span><br><span class="line"><span class="comment">   * @returns</span></span><br><span class="line"><span class="comment">   * @memberof BaseLocalStorage</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">get</span> (key, callback) &#123;</span><br><span class="line">    <span class="keyword">let</span> status = <span class="keyword">this</span>.status.SUCCESS <span class="comment">// 操作状态</span></span><br><span class="line">    key = <span class="keyword">this</span>.getKey(key)</span><br><span class="line">    <span class="keyword">let</span> value = <span class="literal">null</span> <span class="comment">// 默认值</span></span><br><span class="line">    <span class="keyword">let</span> timeSignLen = <span class="keyword">this</span>.timeSign.length <span class="comment">// 时间戳与存储数据之间的拼接符长度</span></span><br><span class="line">    <span class="keyword">let</span> that = <span class="keyword">this</span> <span class="comment">//缓存当前对象</span></span><br><span class="line">    <span class="keyword">let</span> index <span class="comment">// 时间戳与存储数据之间的拼接符起始位置</span></span><br><span class="line">    <span class="keyword">let</span> time <span class="comment">// 时间戳</span></span><br><span class="line">    <span class="keyword">let</span> result <span class="comment">//最终获取的数据</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      value = that.storage.getItem(key) <span class="comment">//获取字段对应的数据字符串</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      result = &#123;</span><br><span class="line">        status: that.status.FAILURE,</span><br><span class="line">        value: <span class="literal">null</span></span><br><span class="line">      &#125;</span><br><span class="line">      callback &amp;&amp; callback.call(<span class="keyword">this</span>, result, status, result.value)</span><br><span class="line">      <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (value) &#123;</span><br><span class="line">      index = value.indexOf(that.timeSign) <span class="comment">// 获取时间戳与数据之间的拼接符起始位置</span></span><br><span class="line">      time = +value.slice(<span class="number">0</span>, index) <span class="comment">//获取时间戳</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">new</span> <span class="built_in">Date</span>(time).getTime() &gt; <span class="keyword">new</span> <span class="built_in">Date</span>().getTime() || time === <span class="number">0</span>) &#123;</span><br><span class="line">        value = value.slice(index + timeSignLen) <span class="comment">//获取数据结果（拼接符后面的字符串</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 过期则结果为null，标记操作状态为过期，并且删除该字段</span></span><br><span class="line">        value = <span class="literal">null</span></span><br><span class="line">        status = that.status.TIMEOUT</span><br><span class="line">        that.remove(key)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      status = that.status.FAILURE</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 设置结果</span></span><br><span class="line">    <span class="keyword">try</span> &#123; value = <span class="built_in">JSON</span>.parse(value) &#125; <span class="keyword">catch</span> (e) &#123; &#125;</span><br><span class="line">    result = &#123;</span><br><span class="line">      status,</span><br><span class="line">      value</span><br><span class="line">    &#125;</span><br><span class="line">    callback &amp;&amp; callback.call(<span class="keyword">this</span>, result.status, result.value)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 删除数据</span></span><br><span class="line"><span class="comment">   * @param &#123;*&#125; key 数据字段标识</span></span><br><span class="line"><span class="comment">   * @param &#123;*&#125; callback 回调函数</span></span><br><span class="line"><span class="comment">   * @memberof BaseLocalStorage</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  remove (key, callback) &#123;</span><br><span class="line">    <span class="keyword">let</span> status = <span class="keyword">this</span>.status.FAILURE</span><br><span class="line">    key = <span class="keyword">this</span>.getKey(key)</span><br><span class="line">    <span class="keyword">let</span> value = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      value = <span class="keyword">this</span>.storage.getItem(key) <span class="comment">// 获取字段对应的数据</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123; &#125;</span><br><span class="line">    <span class="keyword">if</span> (value) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.storage.removeItem(key)</span><br><span class="line">        status = <span class="keyword">this</span>.status.SUCCESS</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 执行回调，注意传入回调函数中的数据值：如果操作状态成功则返回真实的数据结果，否则返回空</span></span><br><span class="line">    callback &amp;&amp; callback.call(<span class="keyword">this</span>, status, status &gt; <span class="number">0</span> ? <span class="literal">null</span> : value.slice(value.indexOf(<span class="keyword">this</span>.timeSign) + <span class="keyword">this</span>.timeSign.length))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// #region 测试用例</span></span><br><span class="line"><span class="keyword">const</span> Leo = <span class="keyword">new</span> BaseLocalStorage(<span class="string">'Leo_'</span>)</span><br><span class="line"></span><br><span class="line">Leo.set(<span class="string">'test'</span>, <span class="string">'XueBin'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">...params</span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">'[set] -&gt; test'</span>, params) &#125;)</span><br><span class="line">Leo.get(<span class="string">'test'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">...params</span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">'[get] -&gt; test'</span>, params) &#125;)</span><br><span class="line">Leo.remove(<span class="string">'test'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">...params</span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">'[remove] -&gt; test'</span>, params) &#125;)</span><br><span class="line">Leo.remove(<span class="string">'test'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">...params</span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">'[remove] -&gt; test'</span>, params) &#125;)</span><br><span class="line">Leo.get(<span class="string">'test'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">...params</span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">'[get] -&gt; test'</span>, params) &#125;)</span><br><span class="line"></span><br><span class="line">Leo.set(<span class="string">'testObj'</span>, &#123; <span class="string">"SUCCESS"</span>: <span class="number">0</span>, <span class="string">"FAILURE"</span>: <span class="number">1</span>, <span class="string">"OVERFLOW"</span>: <span class="number">2</span>, <span class="string">"TIMEOUT"</span>: <span class="number">3</span> &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">...params</span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">'[set] -&gt; testObj'</span>, params) &#125;)</span><br><span class="line">Leo.get(<span class="string">'testObj'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">...params</span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">'[get] -&gt; testObj'</span>, params) &#125;)</span><br><span class="line">Leo.remove(<span class="string">'testObj'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">...params</span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">'[remove] -&gt; testObj'</span>, params) &#125;)</span><br><span class="line">Leo.remove(<span class="string">'testObj'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">...params</span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">'[remove] -&gt; testObj'</span>, params) &#125;)</span><br><span class="line">Leo.get(<span class="string">'testObj'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">...params</span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">'[get] -&gt; testObj'</span>, params) &#125;)</span><br><span class="line"><span class="comment">// #endregion</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StorageFn</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span> () &#123;</span><br><span class="line">        <span class="keyword">this</span>.ls = <span class="built_in">window</span>.localStorage;</span><br><span class="line">        <span class="keyword">this</span>.ss = <span class="built_in">window</span>.sessionStorage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*-----------------cookie---------------------*/</span></span><br><span class="line">    <span class="comment">/*设置cookie*/</span></span><br><span class="line">    setCookie (name, value, day) &#123;</span><br><span class="line">        <span class="keyword">var</span> setting = <span class="built_in">arguments</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(setting).slice(<span class="number">8</span>, <span class="number">-1</span>) === <span class="string">'Object'</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> setting) &#123;</span><br><span class="line">                <span class="keyword">var</span> oDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">                oDate.setDate(oDate.getDate() + day);</span><br><span class="line">                <span class="built_in">document</span>.cookie = i + <span class="string">'='</span> + setting[i] + <span class="string">';expires='</span> + oDate;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> oDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">            oDate.setDate(oDate.getDate() + day);</span><br><span class="line">            <span class="built_in">document</span>.cookie = name + <span class="string">'='</span> + value + <span class="string">';expires='</span> + oDate;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*获取cookie*/</span></span><br><span class="line">    getCookie (name) &#123;</span><br><span class="line">        <span class="keyword">var</span> arr = <span class="built_in">document</span>.cookie.split(<span class="string">'; '</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> arr2 = arr[i].split(<span class="string">'='</span>);</span><br><span class="line">            <span class="keyword">if</span> (arr2[<span class="number">0</span>] == name) &#123;</span><br><span class="line">                <span class="keyword">return</span> arr2[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*删除cookie*/</span></span><br><span class="line">    removeCookie (name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.setCookie(name, <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*-----------------localStorage---------------------*/</span></span><br><span class="line">    <span class="comment">/*设置localStorage*/</span></span><br><span class="line">    setLocal(key, val) &#123;</span><br><span class="line">        <span class="keyword">var</span> setting = <span class="built_in">arguments</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(setting).slice(<span class="number">8</span>, <span class="number">-1</span>) === <span class="string">'Object'</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> setting)&#123;</span><br><span class="line">                <span class="keyword">this</span>.ls.setItem(i, <span class="built_in">JSON</span>.stringify(setting[i]))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.ls.setItem(key, <span class="built_in">JSON</span>.stringify(val))</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*获取localStorage*/</span></span><br><span class="line">    getLocal(key) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key) <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(<span class="keyword">this</span>.ls.getItem(key))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*移除localStorage*/</span></span><br><span class="line">    removeLocal(key) &#123;</span><br><span class="line">        <span class="keyword">this</span>.ls.removeItem(key)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*移除所有localStorage*/</span></span><br><span class="line">    clearLocal() &#123;</span><br><span class="line">        <span class="keyword">this</span>.ls.clear()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*-----------------sessionStorage---------------------*/</span></span><br><span class="line">    <span class="comment">/*设置sessionStorage*/</span></span><br><span class="line">    setSession(key, val) &#123;</span><br><span class="line">        <span class="keyword">var</span> setting = <span class="built_in">arguments</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(setting).slice(<span class="number">8</span>, <span class="number">-1</span>) === <span class="string">'Object'</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> setting)&#123;</span><br><span class="line">                <span class="keyword">this</span>.ss.setItem(i, <span class="built_in">JSON</span>.stringify(setting[i]))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.ss.setItem(key, <span class="built_in">JSON</span>.stringify(val))</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*获取sessionStorage*/</span></span><br><span class="line">    getSession(key) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key) <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(<span class="keyword">this</span>.ss.getItem(key))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*移除sessionStorage*/</span></span><br><span class="line">    removeSession(key) &#123;</span><br><span class="line">        <span class="keyword">this</span>.ss.removeItem(key)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*移除所有sessionStorage*/</span></span><br><span class="line">    clearSession() &#123;</span><br><span class="line">        <span class="keyword">this</span>.ss.clear()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>代码片段</category>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>代码片段</tag>
        <tag>javascript</tag>
        <tag>storage</tag>
        <tag>cookie</tag>
      </tags>
  </entry>
  <entry>
    <title>Number 数字操作</title>
    <url>/posts/9dbaefc0.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*随机数范围*/</span></span><br><span class="line">random (min, max) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">arguments</span>.length === <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="comment">// (min + Math.random() * ( (max+1) - min )) | 0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.floor(min + <span class="built_in">Math</span>.random() * ( (max+<span class="number">1</span>) - min ))</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*将阿拉伯数字翻译成中文的大写数字*/</span></span><br><span class="line">numberToChinese (num) &#123;</span><br><span class="line">    <span class="keyword">var</span> AA = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"零"</span>, <span class="string">"一"</span>, <span class="string">"二"</span>, <span class="string">"三"</span>, <span class="string">"四"</span>, <span class="string">"五"</span>, <span class="string">"六"</span>, <span class="string">"七"</span>, <span class="string">"八"</span>, <span class="string">"九"</span>, <span class="string">"十"</span>);</span><br><span class="line">    <span class="keyword">var</span> BB = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">""</span>, <span class="string">"十"</span>, <span class="string">"百"</span>, <span class="string">"仟"</span>, <span class="string">"萬"</span>, <span class="string">"億"</span>, <span class="string">"点"</span>, <span class="string">""</span>);</span><br><span class="line">    <span class="keyword">var</span> a = (<span class="string">""</span> + num).replace(<span class="regexp">/(^0*)/g</span>, <span class="string">""</span>).split(<span class="string">"."</span>),</span><br><span class="line">        k = <span class="number">0</span>,</span><br><span class="line">        re = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = a[<span class="number">0</span>].length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">switch</span>(k) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                re = BB[<span class="number">7</span>] + re;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                <span class="keyword">if</span>(!<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"0&#123;4&#125;//d&#123;"</span> + (a[<span class="number">0</span>].length - i - <span class="number">1</span>) + <span class="string">"&#125;$"</span>)</span><br><span class="line">                    .test(a[<span class="number">0</span>]))</span><br><span class="line">                    re = BB[<span class="number">4</span>] + re;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                re = BB[<span class="number">5</span>] + re;</span><br><span class="line">                BB[<span class="number">7</span>] = BB[<span class="number">5</span>];</span><br><span class="line">                k = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(k % <span class="number">4</span> == <span class="number">2</span> &amp;&amp; a[<span class="number">0</span>].charAt(i + <span class="number">2</span>) != <span class="number">0</span> &amp;&amp; a[<span class="number">0</span>].charAt(i + <span class="number">1</span>) == <span class="number">0</span>)</span><br><span class="line">            re = AA[<span class="number">0</span>] + re;</span><br><span class="line">        <span class="keyword">if</span>(a[<span class="number">0</span>].charAt(i) != <span class="number">0</span>)</span><br><span class="line">            re = AA[a[<span class="number">0</span>].charAt(i)] + BB[k % <span class="number">4</span>] + re;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(a.length &gt; <span class="number">1</span>) <span class="comment">// 加上小数部分(如果有小数部分)</span></span><br><span class="line">    &#123;</span><br><span class="line">        re += BB[<span class="number">6</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; a[<span class="number">1</span>].length; i++)</span><br><span class="line">            re += AA[a[<span class="number">1</span>].charAt(i)];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(re == <span class="string">'一十'</span>)</span><br><span class="line">        re = <span class="string">"十"</span>;</span><br><span class="line">    <span class="keyword">if</span>(re.match(<span class="regexp">/^一/</span>) &amp;&amp; re.length == <span class="number">3</span>)</span><br><span class="line">        re = re.replace(<span class="string">"一"</span>, <span class="string">""</span>);</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*将数字转换为大写金额*/</span></span><br><span class="line">changeToChinese (Num) &#123;</span><br><span class="line">        <span class="comment">//判断如果传递进来的不是字符的话转换为字符</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> Num == <span class="string">"number"</span>) &#123;</span><br><span class="line">            Num = <span class="keyword">new</span> <span class="built_in">String</span>(Num);</span><br><span class="line">        &#125;;</span><br><span class="line">        Num = Num.replace(<span class="regexp">/,/g</span>, <span class="string">""</span>) <span class="comment">//替换tomoney()中的“,”</span></span><br><span class="line">        Num = Num.replace(<span class="regexp">/ /g</span>, <span class="string">""</span>) <span class="comment">//替换tomoney()中的空格</span></span><br><span class="line">        Num = Num.replace(<span class="regexp">/￥/g</span>, <span class="string">""</span>) <span class="comment">//替换掉可能出现的￥字符</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">isNaN</span>(Num)) &#123; <span class="comment">//验证输入的字符是否为数字</span></span><br><span class="line">            <span class="comment">//alert("请检查小写金额是否正确");</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//字符处理完毕后开始转换，采用前后两部分分别转换</span></span><br><span class="line">        <span class="keyword">var</span> part = <span class="built_in">String</span>(Num).split(<span class="string">"."</span>);</span><br><span class="line">        <span class="keyword">var</span> newchar = <span class="string">""</span>;</span><br><span class="line">        <span class="comment">//小数点前进行转化</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = part[<span class="number">0</span>].length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span>(part[<span class="number">0</span>].length &gt; <span class="number">10</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">                <span class="comment">//若数量超过拾亿单位，提示</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> tmpnewchar = <span class="string">""</span></span><br><span class="line">            <span class="keyword">var</span> perchar = part[<span class="number">0</span>].charAt(i);</span><br><span class="line">            <span class="keyword">switch</span>(perchar) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"0"</span>:</span><br><span class="line">                    tmpnewchar = <span class="string">"零"</span> + tmpnewchar;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"1"</span>:</span><br><span class="line">                    tmpnewchar = <span class="string">"壹"</span> + tmpnewchar;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"2"</span>:</span><br><span class="line">                    tmpnewchar = <span class="string">"贰"</span> + tmpnewchar;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"3"</span>:</span><br><span class="line">                    tmpnewchar = <span class="string">"叁"</span> + tmpnewchar;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"4"</span>:</span><br><span class="line">                    tmpnewchar = <span class="string">"肆"</span> + tmpnewchar;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"5"</span>:</span><br><span class="line">                    tmpnewchar = <span class="string">"伍"</span> + tmpnewchar;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"6"</span>:</span><br><span class="line">                    tmpnewchar = <span class="string">"陆"</span> + tmpnewchar;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"7"</span>:</span><br><span class="line">                    tmpnewchar = <span class="string">"柒"</span> + tmpnewchar;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"8"</span>:</span><br><span class="line">                    tmpnewchar = <span class="string">"捌"</span> + tmpnewchar;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"9"</span>:</span><br><span class="line">                    tmpnewchar = <span class="string">"玖"</span> + tmpnewchar;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">switch</span>(part[<span class="number">0</span>].length - i - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    tmpnewchar = tmpnewchar + <span class="string">"元"</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">if</span>(perchar != <span class="number">0</span>) tmpnewchar = tmpnewchar + <span class="string">"拾"</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">if</span>(perchar != <span class="number">0</span>) tmpnewchar = tmpnewchar + <span class="string">"佰"</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                    <span class="keyword">if</span>(perchar != <span class="number">0</span>) tmpnewchar = tmpnewchar + <span class="string">"仟"</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                    tmpnewchar = tmpnewchar + <span class="string">"万"</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                    <span class="keyword">if</span>(perchar != <span class="number">0</span>) tmpnewchar = tmpnewchar + <span class="string">"拾"</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                    <span class="keyword">if</span>(perchar != <span class="number">0</span>) tmpnewchar = tmpnewchar + <span class="string">"佰"</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                    <span class="keyword">if</span>(perchar != <span class="number">0</span>) tmpnewchar = tmpnewchar + <span class="string">"仟"</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                    tmpnewchar = tmpnewchar + <span class="string">"亿"</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">                    tmpnewchar = tmpnewchar + <span class="string">"拾"</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> newchar = tmpnewchar + newchar;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//小数点之后进行转化</span></span><br><span class="line">        <span class="keyword">if</span>(Num.indexOf(<span class="string">"."</span>) != <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(part[<span class="number">1</span>].length &gt; <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="comment">// alert("小数点之后只能保留两位,系统将自动截断");</span></span><br><span class="line">                part[<span class="number">1</span>] = part[<span class="number">1</span>].substr(<span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; part[<span class="number">1</span>].length; i++) &#123;</span><br><span class="line">                tmpnewchar = <span class="string">""</span></span><br><span class="line">                perchar = part[<span class="number">1</span>].charAt(i)</span><br><span class="line">                <span class="keyword">switch</span>(perchar) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">"0"</span>:</span><br><span class="line">                        tmpnewchar = <span class="string">"零"</span> + tmpnewchar;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">"1"</span>:</span><br><span class="line">                        tmpnewchar = <span class="string">"壹"</span> + tmpnewchar;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">"2"</span>:</span><br><span class="line">                        tmpnewchar = <span class="string">"贰"</span> + tmpnewchar;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">"3"</span>:</span><br><span class="line">                        tmpnewchar = <span class="string">"叁"</span> + tmpnewchar;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">"4"</span>:</span><br><span class="line">                        tmpnewchar = <span class="string">"肆"</span> + tmpnewchar;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">"5"</span>:</span><br><span class="line">                        tmpnewchar = <span class="string">"伍"</span> + tmpnewchar;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">"6"</span>:</span><br><span class="line">                        tmpnewchar = <span class="string">"陆"</span> + tmpnewchar;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">"7"</span>:</span><br><span class="line">                        tmpnewchar = <span class="string">"柒"</span> + tmpnewchar;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">"8"</span>:</span><br><span class="line">                        tmpnewchar = <span class="string">"捌"</span> + tmpnewchar;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">"9"</span>:</span><br><span class="line">                        tmpnewchar = <span class="string">"玖"</span> + tmpnewchar;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(i == <span class="number">0</span>) tmpnewchar = tmpnewchar + <span class="string">"角"</span>;</span><br><span class="line">                <span class="keyword">if</span>(i == <span class="number">1</span>) tmpnewchar = tmpnewchar + <span class="string">"分"</span>;</span><br><span class="line">                newchar = newchar + tmpnewchar;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//替换所有无用汉字</span></span><br><span class="line">        <span class="keyword">while</span>(newchar.search(<span class="string">"零零"</span>) != <span class="number">-1</span>)</span><br><span class="line">            newchar = newchar.replace(<span class="string">"零零"</span>, <span class="string">"零"</span>);</span><br><span class="line">        newchar = newchar.replace(<span class="string">"零亿"</span>, <span class="string">"亿"</span>);</span><br><span class="line">        newchar = newchar.replace(<span class="string">"亿万"</span>, <span class="string">"亿"</span>);</span><br><span class="line">        newchar = newchar.replace(<span class="string">"零万"</span>, <span class="string">"万"</span>);</span><br><span class="line">        newchar = newchar.replace(<span class="string">"零元"</span>, <span class="string">"元"</span>);</span><br><span class="line">        newchar = newchar.replace(<span class="string">"零角"</span>, <span class="string">""</span>);</span><br><span class="line">        newchar = newchar.replace(<span class="string">"零分"</span>, <span class="string">""</span>);</span><br><span class="line">        <span class="keyword">if</span>(newchar.charAt(newchar.length - <span class="number">1</span>) == <span class="string">"元"</span>) &#123;</span><br><span class="line">            newchar = newchar + <span class="string">"整"</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newchar;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>代码片段</category>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>代码片段</tag>
        <tag>javascript</tag>
        <tag>数字</tag>
        <tag>格式化</tag>
      </tags>
  </entry>
  <entry>
    <title>时间格式化</title>
    <url>/posts/df24fa06.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 格式化时间</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param  &#123;time&#125; 时间</span></span><br><span class="line"><span class="comment"> * @param  &#123;cFormat&#125; 格式</span></span><br><span class="line"><span class="comment"> * @return &#123;String&#125; 字符串</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @example formatTime('2018-1-29', '&#123;y&#125;/&#123;m&#125;/&#123;d&#125; &#123;h&#125;:&#123;i&#125;:&#123;s&#125;') // -&gt; 2018/01/29 00:00:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">formatTime(time, cFormat) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">arguments</span>.length === <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    <span class="keyword">if</span> ((time + <span class="string">''</span>).length === <span class="number">10</span>) &#123;</span><br><span class="line">        time = +time * <span class="number">1000</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> format = cFormat || <span class="string">'&#123;y&#125;-&#123;m&#125;-&#123;d&#125; &#123;h&#125;:&#123;i&#125;:&#123;s&#125;'</span>, date</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> time === <span class="string">'object'</span>) &#123;</span><br><span class="line">        date = time</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        date = <span class="keyword">new</span> <span class="built_in">Date</span>(time)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> formatObj = &#123;</span><br><span class="line">        y: date.getFullYear(),</span><br><span class="line">        m: date.getMonth() + <span class="number">1</span>,</span><br><span class="line">        d: date.getDate(),</span><br><span class="line">        h: date.getHours(),</span><br><span class="line">        i: date.getMinutes(),</span><br><span class="line">        s: date.getSeconds(),</span><br><span class="line">        a: date.getDay()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> time_str = format.replace(<span class="regexp">/&#123;(y|m|d|h|i|s|a)+&#125;/g</span>, (result, key) =&gt; &#123;</span><br><span class="line">        <span class="keyword">var</span> value = formatObj[key]</span><br><span class="line">        <span class="keyword">if</span> (key === <span class="string">'a'</span>) <span class="keyword">return</span> [<span class="string">'一'</span>, <span class="string">'二'</span>, <span class="string">'三'</span>, <span class="string">'四'</span>, <span class="string">'五'</span>, <span class="string">'六'</span>, <span class="string">'日'</span>][value - <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> (result.length &gt; <span class="number">0</span> &amp;&amp; value &lt; <span class="number">10</span>) &#123;</span><br><span class="line">            value = <span class="string">'0'</span> + value</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value || <span class="number">0</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> time_str</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回指定长度的月份集合</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param  &#123;time&#125; 时间</span></span><br><span class="line"><span class="comment"> * @param  &#123;len&#125; 长度</span></span><br><span class="line"><span class="comment"> * @param  &#123;direction&#125; 方向：  1: 前几个月;  2: 后几个月;  3:前后几个月  默认 3</span></span><br><span class="line"><span class="comment"> * @return &#123;Array&#125; 数组</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @example   getMonths('2018-1-29', 6, 1)  // -&gt;  ["2018-1", "2017-12", "2017-11", "2017-10", "2017-9", "2017-8", "2017-7"]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">getMonths(time, len, direction) &#123;</span><br><span class="line">    <span class="keyword">var</span> mm = <span class="keyword">new</span> <span class="built_in">Date</span>(time).getMonth(),</span><br><span class="line">        yy = <span class="keyword">new</span> <span class="built_in">Date</span>(time).getFullYear(),</span><br><span class="line">        direction = <span class="built_in">isNaN</span>(direction) ? <span class="number">3</span> : direction,</span><br><span class="line">        index = mm;</span><br><span class="line">    <span class="keyword">var</span> cutMonth = <span class="function"><span class="keyword">function</span>(<span class="params">index</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ( index &lt;= len &amp;&amp; index &gt;= -len) &#123;</span><br><span class="line">            <span class="keyword">return</span> direction === <span class="number">1</span> ? formatPre(index).concat(cutMonth(++index)):</span><br><span class="line">                direction === <span class="number">2</span> ? formatNext(index).concat(cutMonth(++index)):formatCurr(index).concat(cutMonth(++index))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> formatNext = <span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> y = <span class="built_in">Math</span>.floor(i/<span class="number">12</span>),</span><br><span class="line">            m = i%<span class="number">12</span></span><br><span class="line">        <span class="keyword">return</span> [yy+y + <span class="string">'-'</span> + (m+<span class="number">1</span>)]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> formatPre = <span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> y = <span class="built_in">Math</span>.ceil(i/<span class="number">12</span>),</span><br><span class="line">            m = i%<span class="number">12</span></span><br><span class="line">        m = m===<span class="number">0</span> ? <span class="number">12</span> : m</span><br><span class="line">        <span class="keyword">return</span> [yy-y + <span class="string">'-'</span> + (<span class="number">13</span> - m)]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> formatCurr = <span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> y = <span class="built_in">Math</span>.floor(i/<span class="number">12</span>),</span><br><span class="line">            yNext = <span class="built_in">Math</span>.ceil(i/<span class="number">12</span>),</span><br><span class="line">            m = i%<span class="number">12</span>,</span><br><span class="line">            mNext = m===<span class="number">0</span> ? <span class="number">12</span> : m</span><br><span class="line">        <span class="keyword">return</span> [yy-yNext + <span class="string">'-'</span> + (<span class="number">13</span> - mNext),yy+y + <span class="string">'-'</span> + (m+<span class="number">1</span>)]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 数组去重</span></span><br><span class="line">    <span class="keyword">var</span> unique = <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ( <span class="built_in">Array</span>.hasOwnProperty(<span class="string">'from'</span>) ) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(arr));</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> n = &#123;&#125;,r=[]; </span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (!n[arr[i]])&#123;</span><br><span class="line">                    n[arr[i]] = <span class="literal">true</span>; </span><br><span class="line">                    r.push(arr[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> r;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> direction !== <span class="number">3</span> ? cutMonth(index) : unique(cutMonth(index).sort(<span class="function"><span class="keyword">function</span>(<span class="params">t1, t2</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(t1).getTime() - <span class="keyword">new</span> <span class="built_in">Date</span>(t2).getTime()</span><br><span class="line">    &#125;))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回指定长度的天数集合</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param  &#123;time&#125; 时间</span></span><br><span class="line"><span class="comment"> * @param  &#123;len&#125; 长度</span></span><br><span class="line"><span class="comment"> * @param  &#123;direction&#125; 方向： 1: 前几天;  2: 后几天;  3:前后几天  默认 3</span></span><br><span class="line"><span class="comment"> * @return &#123;Array&#125; 数组</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @example date.getDays('2018-1-29', 6) // -&gt; ["2018-1-26", "2018-1-27", "2018-1-28", "2018-1-29", "2018-1-30", "2018-1-31", "2018-2-1"]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">getDays(time, len, diretion) &#123;</span><br><span class="line">    <span class="keyword">var</span> tt = <span class="keyword">new</span> <span class="built_in">Date</span>(time)</span><br><span class="line">    <span class="keyword">var</span> getDay = <span class="function"><span class="keyword">function</span>(<span class="params">day</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> t = <span class="keyword">new</span> <span class="built_in">Date</span>(time)</span><br><span class="line">        t.setDate(t.getDate() + day)</span><br><span class="line">        <span class="keyword">var</span> m = t.getMonth()+<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> t.getFullYear()+<span class="string">'-'</span>+m+<span class="string">'-'</span>+t.getDate()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> arr = []</span><br><span class="line">    <span class="keyword">if</span> (diretion === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= len; i++) &#123;</span><br><span class="line">            arr.unshift(getDay(-i))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(diretion === <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= len; i++) &#123;</span><br><span class="line">            arr.push(getDay(i))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= len; i++) &#123;</span><br><span class="line">            arr.unshift(getDay(-i))</span><br><span class="line">        &#125;</span><br><span class="line">        arr.push(tt.getFullYear()+<span class="string">'-'</span>+(tt.getMonth()+<span class="number">1</span>)+<span class="string">'-'</span>+tt.getDate())</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= len; i++) &#123;</span><br><span class="line">            arr.push(getDay(i))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> diretion === <span class="number">1</span> ? arr.concat([tt.getFullYear()+<span class="string">'-'</span>+(tt.getMonth()+<span class="number">1</span>)+<span class="string">'-'</span>+tt.getDate()]) : </span><br><span class="line">        diretion === <span class="number">2</span> ? [tt.getFullYear()+<span class="string">'-'</span>+(tt.getMonth()+<span class="number">1</span>)+<span class="string">'-'</span>+tt.getDate()].concat(arr) : arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param  &#123;s&#125; 秒数</span></span><br><span class="line"><span class="comment"> * @return &#123;String&#125; 字符串 </span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @example formatHMS(3610) // -&gt; 1h0m10s</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">formatHMS (s) &#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">''</span></span><br><span class="line">    <span class="keyword">if</span> (s &gt; <span class="number">3600</span>) &#123;</span><br><span class="line">        str = <span class="built_in">Math</span>.floor(s/<span class="number">3600</span>)+<span class="string">'h'</span>+<span class="built_in">Math</span>.floor(s%<span class="number">3600</span>/<span class="number">60</span>)+<span class="string">'m'</span>+s%<span class="number">60</span>+<span class="string">'s'</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s &gt; <span class="number">60</span>) &#123;</span><br><span class="line">        str = <span class="built_in">Math</span>.floor(s/<span class="number">60</span>)+<span class="string">'m'</span>+s%<span class="number">60</span>+<span class="string">'s'</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        str = s%<span class="number">60</span>+<span class="string">'s'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*获取某月有多少天*/</span></span><br><span class="line">getMonthOfDay (time) &#123;</span><br><span class="line">    <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(time)</span><br><span class="line">    <span class="keyword">var</span> year = date.getFullYear()</span><br><span class="line">    <span class="keyword">var</span> mouth = date.getMonth() + <span class="number">1</span></span><br><span class="line">    <span class="keyword">var</span> days</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当月份为二月时，根据闰年还是非闰年判断天数</span></span><br><span class="line">    <span class="keyword">if</span> (mouth == <span class="number">2</span>) &#123;</span><br><span class="line">        days = year % <span class="number">4</span> == <span class="number">0</span> ? <span class="number">29</span> : <span class="number">28</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mouth == <span class="number">1</span> || mouth == <span class="number">3</span> || mouth == <span class="number">5</span> || mouth == <span class="number">7</span> || mouth == <span class="number">8</span> || mouth == <span class="number">10</span> || mouth == <span class="number">12</span>) &#123;</span><br><span class="line">        <span class="comment">//月份为：1,3,5,7,8,10,12 时，为大月.则天数为31；</span></span><br><span class="line">        days = <span class="number">31</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//其他月份，天数为：30.</span></span><br><span class="line">        days = <span class="number">30</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> days</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*获取某年有多少天*/</span></span><br><span class="line">getYearOfDay (time) &#123;</span><br><span class="line">    <span class="keyword">var</span> firstDayYear = <span class="keyword">this</span>.getFirstDayOfYear(time);</span><br><span class="line">    <span class="keyword">var</span> lastDayYear = <span class="keyword">this</span>.getLastDayOfYear(time);</span><br><span class="line">    <span class="keyword">var</span> numSecond = (<span class="keyword">new</span> <span class="built_in">Date</span>(lastDayYear).getTime() - <span class="keyword">new</span> <span class="built_in">Date</span>(firstDayYear).getTime())/<span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.ceil(numSecond/(<span class="number">24</span>*<span class="number">3600</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*获取某年的第一天*/</span></span><br><span class="line">getFirstDayOfYear (time) &#123;</span><br><span class="line">    <span class="keyword">var</span> year = <span class="keyword">new</span> <span class="built_in">Date</span>(time).getFullYear();</span><br><span class="line">    <span class="keyword">return</span> year + <span class="string">"-01-01 00:00:00"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*获取某年最后一天*/</span></span><br><span class="line">getLastDayOfYear (time) &#123;</span><br><span class="line">    <span class="keyword">var</span> year = <span class="keyword">new</span> <span class="built_in">Date</span>(time).getFullYear();</span><br><span class="line">    <span class="keyword">var</span> dateString = year + <span class="string">"-12-01 00:00:00"</span>;</span><br><span class="line">    <span class="keyword">var</span> endDay = <span class="keyword">this</span>.getMonthOfDay(dateString);</span><br><span class="line">    <span class="keyword">return</span> year + <span class="string">"-12-"</span> + endDay + <span class="string">" 23:59:59"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*获取某个日期是当年中的第几天*/</span></span><br><span class="line">getDayOfYear (time) &#123;</span><br><span class="line">    <span class="keyword">var</span> firstDayYear = <span class="keyword">this</span>.getFirstDayOfYear(time);</span><br><span class="line">    <span class="keyword">var</span> numSecond = (<span class="keyword">new</span> <span class="built_in">Date</span>(time).getTime() - <span class="keyword">new</span> <span class="built_in">Date</span>(firstDayYear).getTime())/<span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.ceil(numSecond/(<span class="number">24</span>*<span class="number">3600</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*获取某个日期在这一年的第几周*/</span></span><br><span class="line">getDayOfYearWeek (time) &#123;</span><br><span class="line">    <span class="keyword">var</span> numdays = <span class="keyword">this</span>.getDayOfYear(time);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.ceil(numdays / <span class="number">7</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>代码片段</category>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>代码片段</tag>
        <tag>javascript</tag>
        <tag>格式化</tag>
        <tag>日期</tag>
      </tags>
  </entry>
  <entry>
    <title>type 类型判断</title>
    <url>/posts/52b393b5.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DataType</span>(<span class="params">tgt, type</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> dataType = <span class="built_in">Object</span>.prototype.toString.call(tgt).replace(<span class="regexp">/\[object /g</span>, <span class="string">""</span>).replace(<span class="regexp">/\]/g</span>, <span class="string">""</span>).toLowerCase();</span><br><span class="line">    <span class="keyword">return</span> type ? dataType === type : dataType;</span><br><span class="line">&#125;</span><br><span class="line">DataType(<span class="string">"yajun"</span>); <span class="comment">// "string"</span></span><br><span class="line">DataType(<span class="number">19941112</span>); <span class="comment">// "number"</span></span><br><span class="line">DataType(<span class="literal">true</span>); <span class="comment">// "boolean"</span></span><br><span class="line">DataType([], <span class="string">"array"</span>); <span class="comment">// true</span></span><br><span class="line">DataType(&#123;&#125;, <span class="string">"array"</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">isString (o) &#123; <span class="comment">//是否字符串</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(o).slice(<span class="number">8</span>, <span class="number">-1</span>) === <span class="string">'String'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">isNumber (o) &#123; <span class="comment">//是否数字</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(o).slice(<span class="number">8</span>, <span class="number">-1</span>) === <span class="string">'Number'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">isObj (o) &#123; <span class="comment">//是否对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(o).slice(<span class="number">8</span>, <span class="number">-1</span>) === <span class="string">'Object'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">isArray (o) &#123; <span class="comment">//是否数组</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(o).slice(<span class="number">8</span>, <span class="number">-1</span>) === <span class="string">'Array'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">isDate (o) &#123; <span class="comment">//是否时间</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(o).slice(<span class="number">8</span>, <span class="number">-1</span>) === <span class="string">'Date'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">isBoolean (o) &#123; <span class="comment">//是否boolean</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(o).slice(<span class="number">8</span>, <span class="number">-1</span>) === <span class="string">'Boolean'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">isFunction (o) &#123; <span class="comment">//是否函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(o).slice(<span class="number">8</span>, <span class="number">-1</span>) === <span class="string">'Function'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">isNull (o) &#123; <span class="comment">//是否为null</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(o).slice(<span class="number">8</span>, <span class="number">-1</span>) === <span class="string">'Null'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">isUndefined (o) &#123; <span class="comment">//是否undefined</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(o).slice(<span class="number">8</span>, <span class="number">-1</span>) === <span class="string">'Undefined'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">isFalse (o) &#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="string">''</span> || o == <span class="literal">undefined</span> || o == <span class="literal">null</span> || o == <span class="string">'null'</span> || o == <span class="string">'undefined'</span> || o == <span class="number">0</span> || o == <span class="literal">false</span> || o == <span class="literal">NaN</span>) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">isTrue (o) &#123;</span><br><span class="line">    <span class="keyword">return</span> !<span class="keyword">this</span>.isFalse(o)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">isIos () &#123;</span><br><span class="line">    <span class="keyword">var</span> u = navigator.userAgent;</span><br><span class="line">    <span class="keyword">if</span> (u.indexOf(<span class="string">'Android'</span>) &gt; <span class="number">-1</span> || u.indexOf(<span class="string">'Linux'</span>) &gt; <span class="number">-1</span>) &#123;<span class="comment">//安卓手机</span></span><br><span class="line">        <span class="comment">// return "Android";</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (u.indexOf(<span class="string">'iPhone'</span>) &gt; <span class="number">-1</span>) &#123;<span class="comment">//苹果手机</span></span><br><span class="line">        <span class="comment">// return "iPhone";</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (u.indexOf(<span class="string">'iPad'</span>) &gt; <span class="number">-1</span>) &#123;<span class="comment">//iPad</span></span><br><span class="line">        <span class="comment">// return "iPad";</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (u.indexOf(<span class="string">'Windows Phone'</span>) &gt; <span class="number">-1</span>) &#123;<span class="comment">//winphone手机</span></span><br><span class="line">        <span class="comment">// return "Windows Phone";</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">isPC () &#123; <span class="comment">//是否为PC端</span></span><br><span class="line">    <span class="keyword">var</span> userAgentInfo = navigator.userAgent;</span><br><span class="line">    <span class="keyword">var</span> Agents = [<span class="string">"Android"</span>, <span class="string">"iPhone"</span>,</span><br><span class="line">                <span class="string">"SymbianOS"</span>, <span class="string">"Windows Phone"</span>,</span><br><span class="line">                <span class="string">"iPad"</span>, <span class="string">"iPod"</span>];</span><br><span class="line">    <span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> v = <span class="number">0</span>; v &lt; Agents.length; v++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (userAgentInfo.indexOf(Agents[v]) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">browserType()&#123;</span><br><span class="line">    <span class="keyword">var</span> userAgent = navigator.userAgent; <span class="comment">//取得浏览器的userAgent字符串</span></span><br><span class="line">    <span class="keyword">var</span> isOpera = userAgent.indexOf(<span class="string">"Opera"</span>) &gt; <span class="number">-1</span>; <span class="comment">//判断是否Opera浏览器</span></span><br><span class="line">    <span class="keyword">var</span> isIE = userAgent.indexOf(<span class="string">"compatible"</span>) &gt; <span class="number">-1</span> &amp;&amp; userAgent.indexOf(<span class="string">"MSIE"</span>) &gt; <span class="number">-1</span> &amp;&amp; !isOpera; <span class="comment">//判断是否IE浏览器</span></span><br><span class="line">    <span class="keyword">var</span> isEdge = userAgent.indexOf(<span class="string">"Edge"</span>) &gt; <span class="number">-1</span>; <span class="comment">//判断是否IE的Edge浏览器</span></span><br><span class="line">    <span class="keyword">var</span> isFF = userAgent.indexOf(<span class="string">"Firefox"</span>) &gt; <span class="number">-1</span>; <span class="comment">//判断是否Firefox浏览器</span></span><br><span class="line">    <span class="keyword">var</span> isSafari = userAgent.indexOf(<span class="string">"Safari"</span>) &gt; <span class="number">-1</span> &amp;&amp; userAgent.indexOf(<span class="string">"Chrome"</span>) == <span class="number">-1</span>; <span class="comment">//判断是否Safari浏览器</span></span><br><span class="line">    <span class="keyword">var</span> isChrome = userAgent.indexOf(<span class="string">"Chrome"</span>) &gt; <span class="number">-1</span> &amp;&amp; userAgent.indexOf(<span class="string">"Safari"</span>) &gt; <span class="number">-1</span>; <span class="comment">//判断Chrome浏览器</span></span><br><span class="line">    <span class="keyword">if</span> (isIE) &#123;</span><br><span class="line">        <span class="keyword">var</span> reIE = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"MSIE (\\d+\\.\\d+);"</span>);</span><br><span class="line">        reIE.test(userAgent);</span><br><span class="line">        <span class="keyword">var</span> fIEVersion = <span class="built_in">parseFloat</span>(<span class="built_in">RegExp</span>[<span class="string">"$1"</span>]);</span><br><span class="line">        <span class="keyword">if</span>(fIEVersion == <span class="number">7</span>) <span class="keyword">return</span> <span class="string">"IE7"</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(fIEVersion == <span class="number">8</span>) <span class="keyword">return</span> <span class="string">"IE8"</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(fIEVersion == <span class="number">9</span>) <span class="keyword">return</span> <span class="string">"IE9"</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(fIEVersion == <span class="number">10</span>) <span class="keyword">return</span> <span class="string">"IE10"</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(fIEVersion == <span class="number">11</span>) <span class="keyword">return</span> <span class="string">"IE11"</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="string">"IE7以下"</span><span class="comment">//IE版本过低</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isFF) <span class="keyword">return</span> <span class="string">"FF"</span>;</span><br><span class="line">    <span class="keyword">if</span> (isOpera) <span class="keyword">return</span> <span class="string">"Opera"</span>;</span><br><span class="line">    <span class="keyword">if</span> (isEdge) <span class="keyword">return</span> <span class="string">"Edge"</span>;</span><br><span class="line">    <span class="keyword">if</span> (isSafari) <span class="keyword">return</span> <span class="string">"Safari"</span>;</span><br><span class="line">    <span class="keyword">if</span> (isChrome) <span class="keyword">return</span> <span class="string">"Chrome"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">checkStr (str, type) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'phone'</span>:   <span class="comment">//手机号码</span></span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/^1[3|4|5|7|8][0-9]&#123;9&#125;$/</span>.test(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'tel'</span>:     <span class="comment">//座机</span></span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/^(0\d&#123;2,3&#125;-\d&#123;7,8&#125;)(-\d&#123;1,4&#125;)?$/</span>.test(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'card'</span>:    <span class="comment">//身份证</span></span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/^\d&#123;15&#125;|\d&#123;18&#125;$/</span>.test(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'pwd'</span>:     <span class="comment">//密码以字母开头，长度在6~18之间，只能包含字母、数字和下划线</span></span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/^[a-zA-Z]\w&#123;5,17&#125;$/</span>.test(str)</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'postal'</span>:  <span class="comment">//邮政编码</span></span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/[1-9]\d&#123;5&#125;(?!\d)/</span>.test(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'QQ'</span>:      <span class="comment">//QQ号</span></span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/^[1-9][0-9]&#123;4,9&#125;$/</span>.test(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'email'</span>:   <span class="comment">//邮箱</span></span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/^[\w-]+(\.[\w-]+)*@[\w-]+(\.[\w-]+)+$/</span>.test(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'money'</span>:   <span class="comment">//金额(小数点2位)</span></span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/^\d*(?:\.\d&#123;0,2&#125;)?$/</span>.test(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'URL'</span>:     <span class="comment">//网址</span></span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/(http|ftp|https):\/\/[\w\-_]+(\.[\w\-_]+)+([\w\-\.,@?^=%&amp;:/~\+#]*[\w\-\@?^=%&amp;/~\+#])?/</span>.test(str)</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'IP'</span>:      <span class="comment">//IP</span></span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.)&#123;3&#125;(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))/</span>.test(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'date'</span>:    <span class="comment">//日期时间</span></span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/^(\d&#123;4&#125;)\-(\d&#123;2&#125;)\-(\d&#123;2&#125;) (\d&#123;2&#125;)(?:\:\d&#123;2&#125;|:(\d&#123;2&#125;):(\d&#123;2&#125;))$/</span>.test(str) || <span class="regexp">/^(\d&#123;4&#125;)\-(\d&#123;2&#125;)\-(\d&#123;2&#125;)$/</span>.test(str)</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'number'</span>:  <span class="comment">//数字</span></span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/^[0-9]$/</span>.test(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'english'</span>: <span class="comment">//英文</span></span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/^[a-zA-Z]+$/</span>.test(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'chinese'</span>: <span class="comment">//中文</span></span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/^[\u4E00-\u9FA5]+$/</span>.test(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'lower'</span>:   <span class="comment">//小写</span></span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/^[a-z]+$/</span>.test(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'upper'</span>:   <span class="comment">//大写</span></span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/^[A-Z]+$/</span>.test(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'HTML'</span>:    <span class="comment">//HTML标记</span></span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/&lt;("[^"]*"|'[^']*'|[^'"&gt;])*&gt;/</span>.test(str);</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>代码片段</category>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>代码片段</tag>
        <tag>javascript</tag>
        <tag>类型检查</tag>
      </tags>
  </entry>
  <entry>
    <title>将json转为复杂url参数</title>
    <url>/posts/4e473707.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><a id="more"></a>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//json转url参数</span></span><br><span class="line"><span class="keyword">var</span> parseParam = <span class="function"><span class="keyword">function</span>(<span class="params">param, key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> paramStr = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">if</span> (param <span class="keyword">instanceof</span> <span class="built_in">String</span> || param <span class="keyword">instanceof</span> <span class="built_in">Number</span> || param <span class="keyword">instanceof</span> <span class="built_in">Boolean</span>) &#123;</span><br><span class="line">        paramStr += <span class="string">"&amp;"</span> + key + <span class="string">"="</span> + <span class="built_in">encodeURIComponent</span>(param);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $.each(param, <span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> k = key == <span class="literal">null</span> ? i : key + (param <span class="keyword">instanceof</span> <span class="built_in">Array</span> ? <span class="string">"["</span> + i + <span class="string">"]"</span> : <span class="string">"."</span> + i);</span><br><span class="line">            paramStr += <span class="string">'&amp;'</span> + parseParam(<span class="keyword">this</span>, k);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> paramStr.substr(<span class="number">1</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">'tom'</span>,</span><br><span class="line">    <span class="string">"class"</span>: &#123;</span><br><span class="line">        <span class="string">"className"</span>: <span class="string">'class1'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"classMates"</span>: [&#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">'lily'</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(parseParam(obj));<span class="comment">//name=tom&amp;class.className=class1&amp;classMates[0].name=lily</span></span><br><span class="line"><span class="built_in">console</span>.log(parseParam(obj, <span class="string">'stu'</span>));<span class="comment">//stu.name=tom&amp;stu.class.className=class1&amp;stu.classMates[0].name=lily</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>代码片段</category>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>代码片段</tag>
        <tag>json</tag>
        <tag>javascript</tag>
        <tag>url</tag>
      </tags>
  </entry>
  <entry>
    <title>VUE项目中CSS管理</title>
    <url>/posts/b74db743.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="vue-的-scoped"><a href="#vue-的-scoped" class="headerlink" title="vue 的 scoped"></a>vue 的 scoped</h1><p>在 vue 项目中，当 *.vue 文件中 <code>&lt;style&gt;</code> 标签有 <strong>scoped</strong> 属性时，它的 CSS 只作用于当前组件中的元素，很好的实现了样式私有化的目的。</p>
<a id="more"></a>
<p>使用 scoped 之后，父组件的样式将不会渗透到子组件中。不过一个子组件的根节点会同时受其父组件有作用域的 CSS 和子组件有作用域的 CSS 的影响，如果希望父组件样式影响子组件，可以使用 <code>&gt;&gt;&gt;</code>操作符:</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span> <span class="selector-tag">scoped</span>&gt;</span><br><span class="line"><span class="selector-class">.a</span> &gt;&gt;&gt; <span class="selector-class">.b</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<h1 id="sass-变量和-mixin"><a href="#sass-变量和-mixin" class="headerlink" title="sass 变量和 mixin"></a>sass 变量和 mixin</h1><p>一般情况 scss 中的变量和 mixin 的作用域仅限于当前文件，每次在 vue 文件中引用公共变量或者 mixin 的时候，都需要先将<code>mixin.scss</code> import 进来。当我们有很多个 vue 组件的时候，这是一件非常非常麻烦的事情。</p>
<p>这个时候我们就需要用到<code>sass-resources-loader</code>了，它会在 webpack 打包过程中帮助我们将全局 scss 文件 import 到每个 Vue 组件中，举个例子：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">module: &#123;</span><br><span class="line">    rules: &#123;</span><br><span class="line">        test: /\.vue$/,</span><br><span class="line">        loader: <span class="string">'vue-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">            loaders: &#123;</span><br><span class="line">                css: <span class="string">'vue-style-loader!css-loader'</span>,</span><br><span class="line">                scss: [</span><br><span class="line">                    <span class="string">'vue-style-loader'</span>,</span><br><span class="line">                    <span class="string">'css-loader'</span>,</span><br><span class="line">                    <span class="string">'sass-loader'</span>,</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'sass-resources-loader'</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            resources: path.resolve(__dirname, <span class="string">'./src/modules/scss/mixin.scss'</span>)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果我们需要在其它 scss 文件中使用：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">module: &#123;</span><br><span class="line">    rules: [&#123;</span><br><span class="line">        test: /\.scss$/,</span><br><span class="line">        use: [</span><br><span class="line">            <span class="string">'style-loader'</span>,</span><br><span class="line">            <span class="string">'css-loader'</span>,</span><br><span class="line">            <span class="string">'sass-loader'</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                loader: <span class="string">'sass-resources-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    resources: path.resolve(__dirname, <span class="string">'./src/modules/scss/mixin.scss'</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>需要注意的是， <code>sass-resources-loader</code>会将<code>common.scss</code>注入每个 vue 组件中。为避免重复打包，不要在<code>common.scss</code>写具体的 CSS 方法。</p>
</blockquote>
<h1 id="webpack-打包优化"><a href="#webpack-打包优化" class="headerlink" title="webpack 打包优化"></a>webpack 打包优化</h1><p>如果希望将项目中 css 抽离出来单独打包缓存，需要用到 webpack 的插件<code>extract-text-webpack-plugin</code>，下面是官方 vue-loader 文档中的例子：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line">var ExtractTextPlugin = require("extract-text-webpack-plugin")</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    <span class="comment">// other options...</span></span><br><span class="line">    module: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: /\.vue$/,</span><br><span class="line">                loader: <span class="string">'vue-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    loaders: &#123;</span><br><span class="line">                        css: ExtractTextPlugin.extract(&#123;</span><br><span class="line">                            use: <span class="string">'css-loader'</span>,</span><br><span class="line">                            fallback: <span class="string">'vue-style-loader'</span> // &lt;- 这是vue-loader的依赖，所以如果使用npm3，则不需要显式安装</span><br><span class="line">                        &#125;)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        new ExtractTextPlugin(<span class="string">"style.css"</span>)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样就可以将 vue 组件里面的 css 单独打包出来。</p>
<p>如果是移动端的项目，可以选择使用<code>html-webpack-inline-source-plugin</code>把 CSS 内联到 html 里面以减少请求。</p>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>css</tag>
        <tag>前端</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>css 代码片段</title>
    <url>/posts/809788d9.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="关闭按钮"><a href="#关闭按钮" class="headerlink" title="关闭按钮"></a>关闭按钮</h1><p><iframe height="300" scrolling="no" title="GyagJj" src="//codepen.io/MrLeo/embed/GyagJj/?height=300&theme-id=16695&default-tab=result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <span class="exturl" data-url="aHR0cHM6Ly9jb2RlcGVuLmlvL01yTGVvL3Blbi9HeWFnSmov" title="https://codepen.io/MrLeo/pen/GyagJj/">GyagJj<i class="fa fa-external-link"></i></span> by Leo (<span class="exturl" data-url="aHR0cHM6Ly9jb2RlcGVuLmlvL01yTGVv" title="https://codepen.io/MrLeo">@MrLeo<i class="fa fa-external-link"></i></span>) on <span class="exturl" data-url="aHR0cHM6Ly9jb2RlcGVuLmlv" title="https://codepen.io">CodePen<i class="fa fa-external-link"></i></span>.<br></iframe><br><a id="more"></a></p>
<h1 id="pc-reset"><a href="#pc-reset" class="headerlink" title="pc-reset"></a>pc-reset</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* normalize.css */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.15</span>;</span><br><span class="line">  <span class="comment">/* 1 */</span></span><br><span class="line">  <span class="attribute">-ms-text-size-adjust</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="comment">/* 2 */</span></span><br><span class="line">  <span class="attribute">-webkit-text-size-adjust</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="comment">/* 2 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">article</span>,</span><br><span class="line"><span class="selector-tag">aside</span>,</span><br><span class="line"><span class="selector-tag">footer</span>,</span><br><span class="line"><span class="selector-tag">header</span>,</span><br><span class="line"><span class="selector-tag">nav</span>,</span><br><span class="line"><span class="selector-tag">section</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2em</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0.67em</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">figcaption</span>,</span><br><span class="line"><span class="selector-tag">figure</span>,</span><br><span class="line"><span class="selector-tag">main</span> &#123;</span><br><span class="line">  <span class="comment">/* 1 */</span></span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">figure</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">1em</span> <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">hr</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: content-box;</span><br><span class="line">  <span class="comment">/* 1 */</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="comment">/* 1 */</span></span><br><span class="line">  <span class="attribute">overflow</span>: visible;</span><br><span class="line">  <span class="comment">/* 2 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">pre</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: monospace, monospace;</span><br><span class="line">  <span class="comment">/* 1 */</span></span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="comment">/* 2 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: transparent;</span><br><span class="line">  <span class="comment">/* 1 */</span></span><br><span class="line">  <span class="attribute">-webkit-text-decoration-skip</span>: objects;</span><br><span class="line">  <span class="comment">/* 2 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">abbr</span><span class="selector-attr">[title]</span> &#123;</span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line">  <span class="comment">/* 1 */</span></span><br><span class="line">  <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">  <span class="comment">/* 2 */</span></span><br><span class="line">  <span class="attribute">text-decoration</span>: underline dotted;</span><br><span class="line">  <span class="comment">/* 2 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">b</span>,</span><br><span class="line"><span class="selector-tag">strong</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: inherit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">b</span>,</span><br><span class="line"><span class="selector-tag">strong</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bolder;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">code</span>,</span><br><span class="line"><span class="selector-tag">kbd</span>,</span><br><span class="line"><span class="selector-tag">samp</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: monospace, monospace;</span><br><span class="line">  <span class="comment">/* 1 */</span></span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="comment">/* 2 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">dfn</span> &#123;</span><br><span class="line">  <span class="attribute">font-style</span>: italic;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">mark</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ff0</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">small</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">80%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">sub</span>,</span><br><span class="line"><span class="selector-tag">sup</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">75%</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">vertical-align</span>: baseline;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">sub</span> &#123;</span><br><span class="line">  <span class="attribute">bottom</span>: -<span class="number">0.25em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">sup</span> &#123;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">0.5em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">audio</span>,</span><br><span class="line"><span class="selector-tag">video</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">audio</span><span class="selector-pseudo">:not(</span><span class="selector-attr">[controls]</span>) &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">border-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">svg</span><span class="selector-pseudo">:not(</span><span class="selector-pseudo">:root)</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span>,</span><br><span class="line"><span class="selector-tag">input</span>,</span><br><span class="line"><span class="selector-tag">optgroup</span>,</span><br><span class="line"><span class="selector-tag">select</span>,</span><br><span class="line"><span class="selector-tag">textarea</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: sans-serif;</span><br><span class="line">  <span class="comment">/* 1 */</span></span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="comment">/* 1 */</span></span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.15</span>;</span><br><span class="line">  <span class="comment">/* 1 */</span></span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="comment">/* 2 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span>,</span><br><span class="line"><span class="selector-tag">input</span> &#123;</span><br><span class="line">  <span class="comment">/* 1 */</span></span><br><span class="line">  <span class="attribute">overflow</span>: visible;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span>,</span><br><span class="line"><span class="selector-tag">select</span> &#123;</span><br><span class="line">  <span class="comment">/* 1 */</span></span><br><span class="line">  <span class="attribute">text-transform</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span>,</span><br><span class="line"><span class="selector-tag">html</span> <span class="selector-attr">[type="button"]</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 1 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[type="reset"]</span>,</span><br><span class="line"><span class="selector-attr">[type="submit"]</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-appearance</span>: button;</span><br><span class="line">  <span class="comment">/* 2 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span><span class="selector-pseudo">::-moz-focus-inner</span>,</span><br><span class="line"><span class="selector-attr">[type='button']</span><span class="selector-pseudo">::-moz-focus-inner</span>,</span><br><span class="line"><span class="selector-attr">[type='reset']</span><span class="selector-pseudo">::-moz-focus-inner</span>,</span><br><span class="line"><span class="selector-attr">[type='submit']</span><span class="selector-pseudo">::-moz-focus-inner</span> &#123;</span><br><span class="line">  <span class="attribute">border-style</span>: none;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span><span class="selector-pseudo">:-moz-focusring</span>,</span><br><span class="line"><span class="selector-attr">[type='button']</span><span class="selector-pseudo">:-moz-focusring</span>,</span><br><span class="line"><span class="selector-attr">[type='reset']</span><span class="selector-pseudo">:-moz-focusring</span>,</span><br><span class="line"><span class="selector-attr">[type='submit']</span><span class="selector-pseudo">:-moz-focusring</span> &#123;</span><br><span class="line">  <span class="attribute">outline</span>: <span class="number">1px</span> dotted ButtonText;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">fieldset</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.35em</span> <span class="number">0.75em</span> <span class="number">0.625em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">legend</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="comment">/* 1 */</span></span><br><span class="line">  <span class="attribute">color</span>: inherit;</span><br><span class="line">  <span class="comment">/* 2 */</span></span><br><span class="line">  <span class="attribute">display</span>: table;</span><br><span class="line">  <span class="comment">/* 1 */</span></span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="comment">/* 1 */</span></span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="comment">/* 3 */</span></span><br><span class="line">  <span class="attribute">white-space</span>: normal;</span><br><span class="line">  <span class="comment">/* 1 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">progress</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="comment">/* 1 */</span></span><br><span class="line">  <span class="attribute">vertical-align</span>: baseline;</span><br><span class="line">  <span class="comment">/* 2 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">textarea</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[type='checkbox']</span>,</span><br><span class="line"><span class="selector-attr">[type='radio']</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="comment">/* 1 */</span></span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="comment">/* 2 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[type='number']</span><span class="selector-pseudo">::-webkit-inner-spin-button</span>,</span><br><span class="line"><span class="selector-attr">[type='number']</span><span class="selector-pseudo">::-webkit-outer-spin-button</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[type='search']</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-appearance</span>: textfield;</span><br><span class="line">  <span class="comment">/* 1 */</span></span><br><span class="line">  <span class="attribute">outline-offset</span>: -<span class="number">2px</span>;</span><br><span class="line">  <span class="comment">/* 2 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[type='search']</span><span class="selector-pseudo">::-webkit-search-cancel-button</span>,</span><br><span class="line"><span class="selector-attr">[type='search']</span><span class="selector-pseudo">::-webkit-search-decoration</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-appearance</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-pseudo">::-webkit-file-upload-button</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-appearance</span>: button;</span><br><span class="line">  <span class="comment">/* 1 */</span></span><br><span class="line">  <span class="attribute">font</span>: inherit;</span><br><span class="line">  <span class="comment">/* 2 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">details</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 1 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">menu</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">summary</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: list-item;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">canvas</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">template</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[hidden]</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* reset */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span>,</span><br><span class="line"><span class="selector-tag">h1</span>,</span><br><span class="line"><span class="selector-tag">h2</span>,</span><br><span class="line"><span class="selector-tag">h3</span>,</span><br><span class="line"><span class="selector-tag">h4</span>,</span><br><span class="line"><span class="selector-tag">h5</span>,</span><br><span class="line"><span class="selector-tag">h6</span>,</span><br><span class="line"><span class="selector-tag">div</span>,</span><br><span class="line"><span class="selector-tag">dl</span>,</span><br><span class="line"><span class="selector-tag">dt</span>,</span><br><span class="line"><span class="selector-tag">dd</span>,</span><br><span class="line"><span class="selector-tag">ul</span>,</span><br><span class="line"><span class="selector-tag">ol</span>,</span><br><span class="line"><span class="selector-tag">li</span>,</span><br><span class="line"><span class="selector-tag">p</span>,</span><br><span class="line"><span class="selector-tag">blockquote</span>,</span><br><span class="line"><span class="selector-tag">pre</span>,</span><br><span class="line"><span class="selector-tag">hr</span>,</span><br><span class="line"><span class="selector-tag">figure</span>,</span><br><span class="line"><span class="selector-tag">table</span>,</span><br><span class="line"><span class="selector-tag">caption</span>,</span><br><span class="line"><span class="selector-tag">th</span>,</span><br><span class="line"><span class="selector-tag">td</span>,</span><br><span class="line"><span class="selector-tag">form</span>,</span><br><span class="line"><span class="selector-tag">fieldset</span>,</span><br><span class="line"><span class="selector-tag">legend</span>,</span><br><span class="line"><span class="selector-tag">input</span>,</span><br><span class="line"><span class="selector-tag">button</span>,</span><br><span class="line"><span class="selector-tag">textarea</span>,</span><br><span class="line"><span class="selector-tag">menu</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="phone-reset"><a href="#phone-reset" class="headerlink" title="phone-reset"></a>phone-reset</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* normalize.css */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.15</span>;</span><br><span class="line">  <span class="comment">/* 1 */</span></span><br><span class="line">  <span class="attribute">-ms-text-size-adjust</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="comment">/* 2 */</span></span><br><span class="line">  <span class="attribute">-webkit-text-size-adjust</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="comment">/* 2 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">article</span>,</span><br><span class="line"><span class="selector-tag">aside</span>,</span><br><span class="line"><span class="selector-tag">footer</span>,</span><br><span class="line"><span class="selector-tag">header</span>,</span><br><span class="line"><span class="selector-tag">nav</span>,</span><br><span class="line"><span class="selector-tag">section</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2em</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0.67em</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">figcaption</span>,</span><br><span class="line"><span class="selector-tag">figure</span>,</span><br><span class="line"><span class="selector-tag">main</span> &#123;</span><br><span class="line">  <span class="comment">/* 1 */</span></span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">figure</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">1em</span> <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">hr</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: content-box;</span><br><span class="line">  <span class="comment">/* 1 */</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="comment">/* 1 */</span></span><br><span class="line">  <span class="attribute">overflow</span>: visible;</span><br><span class="line">  <span class="comment">/* 2 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">pre</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: monospace, monospace;</span><br><span class="line">  <span class="comment">/* 1 */</span></span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="comment">/* 2 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: transparent;</span><br><span class="line">  <span class="comment">/* 1 */</span></span><br><span class="line">  <span class="attribute">-webkit-text-decoration-skip</span>: objects;</span><br><span class="line">  <span class="comment">/* 2 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">abbr</span><span class="selector-attr">[title]</span> &#123;</span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line">  <span class="comment">/* 1 */</span></span><br><span class="line">  <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">  <span class="comment">/* 2 */</span></span><br><span class="line">  <span class="attribute">text-decoration</span>: underline dotted;</span><br><span class="line">  <span class="comment">/* 2 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">b</span>,</span><br><span class="line"><span class="selector-tag">strong</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: inherit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">b</span>,</span><br><span class="line"><span class="selector-tag">strong</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bolder;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">code</span>,</span><br><span class="line"><span class="selector-tag">kbd</span>,</span><br><span class="line"><span class="selector-tag">samp</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: monospace, monospace;</span><br><span class="line">  <span class="comment">/* 1 */</span></span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="comment">/* 2 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">dfn</span> &#123;</span><br><span class="line">  <span class="attribute">font-style</span>: italic;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">mark</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ff0</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">small</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">80%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">sub</span>,</span><br><span class="line"><span class="selector-tag">sup</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">75%</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">vertical-align</span>: baseline;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">sub</span> &#123;</span><br><span class="line">  <span class="attribute">bottom</span>: -<span class="number">0.25em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">sup</span> &#123;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">0.5em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">audio</span>,</span><br><span class="line"><span class="selector-tag">video</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">audio</span><span class="selector-pseudo">:not(</span><span class="selector-attr">[controls]</span>) &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">border-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">svg</span><span class="selector-pseudo">:not(</span><span class="selector-pseudo">:root)</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span>,</span><br><span class="line"><span class="selector-tag">input</span>,</span><br><span class="line"><span class="selector-tag">optgroup</span>,</span><br><span class="line"><span class="selector-tag">select</span>,</span><br><span class="line"><span class="selector-tag">textarea</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: sans-serif;</span><br><span class="line">  <span class="comment">/* 1 */</span></span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="comment">/* 1 */</span></span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.15</span>;</span><br><span class="line">  <span class="comment">/* 1 */</span></span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="comment">/* 2 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span>,</span><br><span class="line"><span class="selector-tag">input</span> &#123;</span><br><span class="line">  <span class="comment">/* 1 */</span></span><br><span class="line">  <span class="attribute">overflow</span>: visible;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span>,</span><br><span class="line"><span class="selector-tag">select</span> &#123;</span><br><span class="line">  <span class="comment">/* 1 */</span></span><br><span class="line">  <span class="attribute">text-transform</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span>,</span><br><span class="line"><span class="selector-tag">html</span> <span class="selector-attr">[type="button"]</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 1 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[type="reset"]</span>,</span><br><span class="line"><span class="selector-attr">[type="submit"]</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-appearance</span>: button;</span><br><span class="line">  <span class="comment">/* 2 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span><span class="selector-pseudo">::-moz-focus-inner</span>,</span><br><span class="line"><span class="selector-attr">[type='button']</span><span class="selector-pseudo">::-moz-focus-inner</span>,</span><br><span class="line"><span class="selector-attr">[type='reset']</span><span class="selector-pseudo">::-moz-focus-inner</span>,</span><br><span class="line"><span class="selector-attr">[type='submit']</span><span class="selector-pseudo">::-moz-focus-inner</span> &#123;</span><br><span class="line">  <span class="attribute">border-style</span>: none;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span><span class="selector-pseudo">:-moz-focusring</span>,</span><br><span class="line"><span class="selector-attr">[type='button']</span><span class="selector-pseudo">:-moz-focusring</span>,</span><br><span class="line"><span class="selector-attr">[type='reset']</span><span class="selector-pseudo">:-moz-focusring</span>,</span><br><span class="line"><span class="selector-attr">[type='submit']</span><span class="selector-pseudo">:-moz-focusring</span> &#123;</span><br><span class="line">  <span class="attribute">outline</span>: <span class="number">1px</span> dotted ButtonText;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">fieldset</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.35em</span> <span class="number">0.75em</span> <span class="number">0.625em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">legend</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="comment">/* 1 */</span></span><br><span class="line">  <span class="attribute">color</span>: inherit;</span><br><span class="line">  <span class="comment">/* 2 */</span></span><br><span class="line">  <span class="attribute">display</span>: table;</span><br><span class="line">  <span class="comment">/* 1 */</span></span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="comment">/* 1 */</span></span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="comment">/* 3 */</span></span><br><span class="line">  <span class="attribute">white-space</span>: normal;</span><br><span class="line">  <span class="comment">/* 1 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">progress</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="comment">/* 1 */</span></span><br><span class="line">  <span class="attribute">vertical-align</span>: baseline;</span><br><span class="line">  <span class="comment">/* 2 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">textarea</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[type='checkbox']</span>,</span><br><span class="line"><span class="selector-attr">[type='radio']</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="comment">/* 1 */</span></span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="comment">/* 2 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[type='number']</span><span class="selector-pseudo">::-webkit-inner-spin-button</span>,</span><br><span class="line"><span class="selector-attr">[type='number']</span><span class="selector-pseudo">::-webkit-outer-spin-button</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[type='search']</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-appearance</span>: textfield;</span><br><span class="line">  <span class="comment">/* 1 */</span></span><br><span class="line">  <span class="attribute">outline-offset</span>: -<span class="number">2px</span>;</span><br><span class="line">  <span class="comment">/* 2 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[type='search']</span><span class="selector-pseudo">::-webkit-search-cancel-button</span>,</span><br><span class="line"><span class="selector-attr">[type='search']</span><span class="selector-pseudo">::-webkit-search-decoration</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-appearance</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-pseudo">::-webkit-file-upload-button</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-appearance</span>: button;</span><br><span class="line">  <span class="comment">/* 1 */</span></span><br><span class="line">  <span class="attribute">font</span>: inherit;</span><br><span class="line">  <span class="comment">/* 2 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">details</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 1 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">menu</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">summary</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: list-item;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">canvas</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">template</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[hidden]</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* reset */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span>,</span><br><span class="line"><span class="selector-tag">h1</span>,</span><br><span class="line"><span class="selector-tag">h2</span>,</span><br><span class="line"><span class="selector-tag">h3</span>,</span><br><span class="line"><span class="selector-tag">h4</span>,</span><br><span class="line"><span class="selector-tag">h5</span>,</span><br><span class="line"><span class="selector-tag">h6</span>,</span><br><span class="line"><span class="selector-tag">div</span>,</span><br><span class="line"><span class="selector-tag">dl</span>,</span><br><span class="line"><span class="selector-tag">dt</span>,</span><br><span class="line"><span class="selector-tag">dd</span>,</span><br><span class="line"><span class="selector-tag">ul</span>,</span><br><span class="line"><span class="selector-tag">ol</span>,</span><br><span class="line"><span class="selector-tag">li</span>,</span><br><span class="line"><span class="selector-tag">p</span>,</span><br><span class="line"><span class="selector-tag">blockquote</span>,</span><br><span class="line"><span class="selector-tag">pre</span>,</span><br><span class="line"><span class="selector-tag">hr</span>,</span><br><span class="line"><span class="selector-tag">figure</span>,</span><br><span class="line"><span class="selector-tag">table</span>,</span><br><span class="line"><span class="selector-tag">caption</span>,</span><br><span class="line"><span class="selector-tag">th</span>,</span><br><span class="line"><span class="selector-tag">td</span>,</span><br><span class="line"><span class="selector-tag">form</span>,</span><br><span class="line"><span class="selector-tag">fieldset</span>,</span><br><span class="line"><span class="selector-tag">legend</span>,</span><br><span class="line"><span class="selector-tag">input</span>,</span><br><span class="line"><span class="selector-tag">button</span>,</span><br><span class="line"><span class="selector-tag">textarea</span>,</span><br><span class="line"><span class="selector-tag">menu</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="comment">/* 禁止选中文本 */</span></span><br><span class="line">  <span class="attribute">-webkit-user-select</span>: none;</span><br><span class="line">  <span class="attribute">user-select</span>: none;</span><br><span class="line">  <span class="attribute">font</span>: Oswald, <span class="string">'Open Sans'</span>, Helvetica, Arial, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 禁止长按链接与图片弹出菜单 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-touch-callout</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*ios android去除自带阴影的样式*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-tag">input</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-tap-highlight-color</span>: <span class="built_in">rgba</span>(0, 0, 0, 0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type='text']</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-appearance</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>代码片段</category>
        <category>css</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>代码片段</tag>
        <tag>css</tag>
        <tag>前端</tag>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title>金融投资</title>
    <url>/posts/e93cef39.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote>
<p>好的金融投资决策，就是要找到那些“价格低于价值”的资产。你看不懂的机会永远不叫“错失的机会”。</p>
</blockquote>
<a id="more"></a>]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>金句</tag>
        <tag>摘抄</tag>
        <tag>金融</tag>
        <tag>投资</tag>
      </tags>
  </entry>
  <entry>
    <title>未哭过长夜的人，不足以语人生</title>
    <url>/posts/f50a909e.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>直男在社交中的很多问题归根结底都是不懂他人的感受，或者是因为性别差异，或者是由于阅历不够。他们站在自己的立场上，以为自己关心的就是别人关心的，自己在乎的就是别人在乎的，即使有人提醒他们要考虑别人的感受，他们通常也不知道别人的感受到底是什么。还好，魔鬼约会学里有个<span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvZ2RrVGt2OGJiRGdQTDlGcGtFcW52UQ==" title="https://mp.weixin.qq.com/s/gdkTkv8bbDgPL9FpkEqnvQ"><strong>镜像原则理论</strong><i class="fa fa-external-link"></i></span>完美地解决了恋爱中的这些矛盾，那就是很多时候我们不需要去了解和猜测对方的感受和想法，我们只需针对对方表现出来的行为做出相近态度的回应就够了。</p>
<div class="note ">
            <p><span class="exturl" data-url="aHR0cHM6Ly95b3V0dS5iZS9ZNmpLYk9ZZ2d2RT90PTIyNQ==" title="https://youtu.be/Y6jKbOYggvE?t=225"><strong>52赫兹的故事</strong>：1989年，美军发现了一只52赫兹的鲸鱼，其他鲸鱼都是15~25赫兹，它每天旅行40多千米，行踪也毫无规律，从来也不会留恋某处，其他鲸鱼也无法发现识别出它的歌声赫兹，他好像就是一个哑巴一样，这么多年了没有任何的家人朋友，唱歌时没人能听见，难过时没有人能理睬，尽情的在北太平洋遨游，用它52赫兹的歌声努力寻找着家人同类还有爱情。也许这就我最期待的模样，在人群中找到一个彼此频率相合，只有彼此能够听到对方的话，走进彼此的心里，这个故事还有另外一个名字叫做《这个世界怎么只有我自己》<i class="fa fa-external-link"></i></span></p>
          </div>
<div class="note ">
            <p>人们总说，人望山鱼窥荷，而我说，人生三重，看山是山，看山不是山，看山又是山。<br>你说，哪怕抱得美人归，也为所难免再对突然出现的她怦然心动。我笑你这份缘，何尝不是这一世佛陀阿难的傻、摩登伽女的痴。<br>你说，爱情经不起异地等待的考验。我说，情死于无忌，爱生于无惧。<br>你说，门当户不对是对婚姻最大的阻碍。我说，男人给你最好的聘礼是一世的迁就，女人给你最好的嫁妆是一世的温柔。<br>你说，有家的地方没有梦想，有梦想的地方没有家。我说，比起一将功成，铩羽而归何尝不是一份气概。<br>那些可遇不可求，就让它清风徐来，就让它水波不兴。</p>
          </div>
<a id="more"></a>
<div class="note ">
            <p><em>一则故事：</em></p><blockquote><p>有一个非常虔诚的信徒，他想要佛祖给他指条明路，然后佛祖在他面前铺下了一片荆棘，他以为是佛祖给他的考验，所以就忍着疼痛往前走，后来荆棘越长越高，他还是坚持要往前走，走着走着后面他就是掉了。</p></blockquote><p><em>故事听到这里有什么感受？</em></p><blockquote><p>故事没有就此结束，死后他就见到佛祖，然后他就问佛祖说：我这是到了终点吗？</p><p>佛祖摇摇头，然后这个信徒就很生气，跟佛祖说：我这么虔诚，我躲过了这么多困难，为什么我还不能到达终点？</p></blockquote><p><em>你知道佛祖怎么跟他说的吗？</em></p><blockquote><p>佛祖说：我让地上长满荆棘就是为了告诉你，这条路是错的，让你换一个方向。</p></blockquote><p>感情中呢，我们是需要“不撞南墙不回头”的勇气。但是，<span class="exturl" data-url="aHR0cDovL3Aud2VpYm8uY29tL3Nob3cvY2hhbm5lcldiSDUvMTAzNDo0MzExNzQyNzU5NTY2MTIz" title="http://p.weibo.com/show/channerWbH5/1034:4311742759566123"><strong>南墙我撞了，故事我忘了，你我真的不要了</strong><i class="fa fa-external-link"></i></span>。这种急流勇退何尝不是一种智慧。</p>
          </div>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly95b3V0dS5iZS9jSDdNUzhYdklucz90PTE2" title="https://youtu.be/cH7MS8XvIns?t=16">机场比婚礼的殿堂见证了更多真诚的吻，医院的墙比教堂听到更多的祈祷<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly95b3V0dS5iZS9jSDdNUzhYdklucz90PTE1MA==" title="https://youtu.be/cH7MS8XvIns?t=150">毕业前，孟子”不失其赤子之心也”；毕业至不惑之年，孔子”知其不可而为之”；不惑之年至耳顺之年，老子”无为而无不为”；耳顺之年至天年，释氏”凡所有相，皆是虚幻”<i class="fa fa-external-link"></i></span></p>
</blockquote>
<blockquote>
<p>情死于无忌，爱生于无惧</p>
</blockquote>
<blockquote>
<h3 id="只想陪你，去爱天爱地的四处风流"><a href="#只想陪你，去爱天爱地的四处风流" class="headerlink" title="只想陪你，去爱天爱地的四处风流"></a><span class="exturl" data-url="aHR0cHM6Ly95b3V0dS5iZS9ZNmpLYk9ZZ2d2RQ==" title="https://youtu.be/Y6jKbOYggvE">只想陪你，去爱天爱地的四处风流<i class="fa fa-external-link"></i></span></h3><p><span class="exturl" data-url="aHR0cHM6Ly95b3V0dS5iZS9ZNmpLYk9ZZ2d2RT90PTEz" title="https://youtu.be/Y6jKbOYggvE?t=13">女生对车的认识：颜色、大小、长短，还有猛禽适合搬家；渣男开大G、渣女开奔驰E、绿茶A7。而我不一样，熬夜开滴滴。<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly95b3V0dS5iZS9ZNmpLYk9ZZ2d2RT90PTM1" title="https://youtu.be/Y6jKbOYggvE?t=35">“你有没有这样的一种经历，某个瞬间在大街上看到一个熟悉的背影，心突然就乱了节拍，直到发现原来只是陌生人，于是一整天全是回忆。” 这种感觉就像：从未拥有过Ta一秒钟，心里却失去过千万次的感觉。<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly95b3V0dS5iZS9ZNmpLYk9ZZ2d2RT90PTYz" title="https://youtu.be/Y6jKbOYggvE?t=63">该配合您演出的我怎能视而不见。<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly95b3V0dS5iZS9ZNmpLYk9ZZ2d2RT90PTgx" title="https://youtu.be/Y6jKbOYggvE?t=81">可以称呼您吗，这样我就可以把你放在心上。<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly95b3V0dS5iZS9ZNmpLYk9ZZ2d2RT90PTk4" title="https://youtu.be/Y6jKbOYggvE?t=98">“知道我这前半生最强烈的三次心跳是什么时候吗？” “分别是 上课被老师点名；下楼梯时一脚踩空；还有就是你刚刚对我微笑的时候。”<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly95b3V0dS5iZS9ZNmpLYk9ZZ2d2RT90PTE0Mg==" title="https://youtu.be/Y6jKbOYggvE?t=142">女人的嘴，骗人的鬼；女人的嘴是Gucci、Prada、CHANEL（香奈儿）、Dior；接吻是小羊皮、抚摸是海蓝之谜、牵手是莱伯妮。<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly95b3V0dS5iZS9ZNmpLYk9ZZ2d2RT90PTE3Nw==" title="https://youtu.be/Y6jKbOYggvE?t=177">海王：本以为走进了哥哥的心房，没想到只是游进了哥哥的鱼塘；以为哥哥只有一个鱼塘，没想到哥哥是个海王，还掌管着七大洋。<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly95b3V0dS5iZS9ZNmpLYk9ZZ2d2RT90PTIwMA==" title="https://youtu.be/Y6jKbOYggvE?t=200">蓝鲸：眼中有春秋，胜过我见过爱过的山川与河流；向太阳挥手，和海鸥问候，去爱天爱地的四处风流。「化身孤岛的鲸」<i class="fa fa-external-link"></i></span></p>
</blockquote>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly95b3V0dS5iZS8xLTNGUTR0cE9ZWQ==" title="https://youtu.be/1-3FQ4tpOYY">先说爱的先不爱，后动心的不死心。如果找不到一个再爱的理由，那就找一个重新开始的理由。<i class="fa fa-external-link"></i></span></p>
</blockquote>
<blockquote>
<h3 id="圣经说：别惊动我爱的人，等他自己情愿"><a href="#圣经说：别惊动我爱的人，等他自己情愿" class="headerlink" title="圣经说：别惊动我爱的人，等他自己情愿"></a><span class="exturl" data-url="aHR0cHM6Ly95b3V0dS5iZS9fWW9pSkhURWF0QT90PTg3" title="https://youtu.be/_YoiJHTEatA?t=87">圣经说：别惊动我爱的人，等他自己情愿<i class="fa fa-external-link"></i></span></h3><p> 道理都是瞎掰的。提醒你，生活可以苟且，风花雪月却是正当下，才是真的。</p>
<p> 我有在想这样一个问题：不戴首饰的女生是出于什么样的心理，是因为对爱情的失望而不想去吸引异性？还是因为对于目前的她，什么饰品都比不上他曾经送的？或者说~</p>
<p> 人生就是用大把的时间迷茫，在用那么几个瞬间成长。</p>
<p> 李敖：”女人对婚姻的看法只有一种，而男人对婚姻的看法会有一千零一种，所以学会不去误解女生”。”一段感情，其实只要男方愿意坚持下去，她真的能和你走下去，没有例外”。</p>
</blockquote>
<blockquote>
<h3 id="她不欠我的，都是我自愿的"><a href="#她不欠我的，都是我自愿的" class="headerlink" title="她不欠我的，都是我自愿的"></a><span class="exturl" data-url="aHR0cHM6Ly95b3V0dS5iZS9uR0Jjbm0zUnpSbw==" title="https://youtu.be/nGBcnm3RzRo">她不欠我的，都是我自愿的<i class="fa fa-external-link"></i></span></h3><p>在一段感情中，如果他不主动联系你，那他真的没那么喜欢你，不是因为忙。不要看对方怎么说，要看对方怎么做。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly95b3V0dS5iZS9uR0Jjbm0zUnpSbz90PTE0Ng==" title="https://youtu.be/nGBcnm3RzRo?t=146">感动不是心动，不要心软将就。<i class="fa fa-external-link"></i></span>不要看一个人对你好的时候有多好，看他有多不忍心伤害你。当你疑惑他还爱不爱你的时候，他已经没有开始那么爱你了</p>
<p>有一天，街边有一个醉酒的男子，他恍恍惚惚的好像看到了上帝。上帝问他”你痛吗”，男子说”很痛”。上帝问他”她欠你很多吗”，男子说”很多”。上帝便说”放心，她欠你的会有人帮你讨回来的”。男子这时候就慌了，他急忙问上帝，能不能把刚刚的话重复一遍，上帝再次问他”她欠你很多吗”，男子拼命的摇头。<span class="exturl" data-url="aHR0cHM6Ly95b3V0dS5iZS9uR0Jjbm0zUnpSbz90PTE4OQ==" title="https://youtu.be/nGBcnm3RzRo?t=189">“她不欠我的，都是我自愿的”。<i class="fa fa-external-link"></i></span></p>
</blockquote>
<blockquote>
<p>《威廉·迈斯特的学习时代》未哭过长夜的人，不足以语人生。</p>
</blockquote>
<blockquote>
<h1 id="使人变渺小的感情可耻，使人变小孩的感情可贵"><a href="#使人变渺小的感情可耻，使人变小孩的感情可贵" class="headerlink" title="使人变渺小的感情可耻，使人变小孩的感情可贵"></a><span class="exturl" data-url="aHR0cHM6Ly95b3V0dS5iZS8yYmtoeW1HdVpsMD90PTE0NQ==" title="https://youtu.be/2bkhymGuZl0?t=145">使人变渺小的感情可耻，使人变小孩的感情可贵<i class="fa fa-external-link"></i></span></h1><p>很多人小时候都很爱吃西红柿，以为自己会一辈子爱吃，但是长大后呢，不爱吃就是不爱吃。你说为什么呢？</p>
<p>口味变了而已吧。</p>
<p>好像真的没有太多其他理由了，我们没有错，西红柿也没有错，错的是哪些自以为是的一辈子。</p>
</blockquote>
<blockquote>
<p>永远不要用错误的方式去做一件正确的事情，即便你内心充满了正义和热血</p>
<p>我们试着想这样两件事情：</p>
<p>​    第一件，你被关在一个房间里面，要被关整整一百天，但是呢这个房间里有一个完完全全符合你对肉体期望的异性，而且你们俩在房间里做任何事情，这个世界上永远不会有人知道，无论是伴侣还是恋人，即便你们从房间里出来之后，生活照常继续啊，你们在房间里做的任何事就跟没发生一样，你会怎么做？<em>你先不用着急回答</em></p>
<p>​    我们现在来说第二件事情，第二件事情就是，你老爸躺在病床上癌症晚期。。。举个例子啊，这个世界上只有一种药可以救他，但这个药真的天价，你这辈子怎么赚钱都负担不起，这时候出现一个恶魔，恶魔愿意救助他，不但愿意治好你老爸，之后还愿意给你一个亿的现金，但是总是要付出代价的嘛，代价就是你的至交好友会当街横死街头，而且这个世界上也不会有任何人知道你跟这件事有半分瓜葛，这时候你会怎么做呢？</p>
<p><span class="exturl" data-url="aHR0cDovL3Aud2VpYm8uY29tL3Nob3cvY2hhbm5lcldiSDUvMTAzNDo0Mjk3OTg2OTAyMDQxNjY5" title="http://p.weibo.com/show/channerWbH5/1034:4297986902041669">永远不要去试探人性，因为当人性坍塌的一刹那是丑陋的<i class="fa fa-external-link"></i></span>。或者说当你想要去试探的时候，那一刻你也并不美丽嘛</p>
<p>万里西风无端起，东边千山草满地，人性不该试问是否美丽，它本身就是个谜</p>
</blockquote>
<blockquote>
<p><span class="exturl" data-url="aHR0cDovL3Aud2VpYm8uY29tL3Nob3cvY2hhbm5lcldiSDUvMTAzNDo0MzE5MzU0NzU0Mzc1NDcz" title="http://p.weibo.com/show/channerWbH5/1034:4319354754375473">抽烟伤肺不伤心<i class="fa fa-external-link"></i></span>。幸福不就是，她在闹，他在笑嘛。</p>
</blockquote>
<blockquote>
<p>嘴上说不想谈恋爱的人，心里都藏着一个不可能的人</p>
</blockquote>
<blockquote>
<p>一段感情最怕的就是去猜测，在一起之前呢，会去想对方对自己有没有感觉？在一起的时候呢，还会去想，很想知道对方到底有多爱自己，分开以后呢，就不止一个人去想了，还会发动身边的亲朋好友一起去想，对方还爱不爱自己？所以有时候真不如自己主动去跟对方说一句话，勇敢点去跟对方表达自己的感受。有时候啊，先开口道歉的人不一定是错的，最先表达爱的人不一定是感情中的弱者。只是他们更懂得珍惜。</p>
<p>真正的离开都是悄无声息的。</p>
<p>其实一段感情最后的不如意，到后面并不是存在着谁放过谁，而是自己放过自己。</p>
<p>很多时候别人向我倾诉，在一段感情中遇到的困扰，其实我能解答的并不多。因为情这个字，太重，就算拿得起，也很难放下。情这个字，太深，当他刻在心里后，再怎么去磨平，都留下了烙印。</p>
<p>对不起，我没有办法把过去抹去；对不起，我还想再次拥抱你；对不起，我们还在保质期。</p>
</blockquote>
<blockquote>
<p>至近至远东西，至深至浅清溪。至高至明日月，至亲至疏夫妻。</p>
<p>什么事情都有可能向两个完全不同的方向发展。就像夫妻间可以是最亲密的，也可以是最陌生的，这个发展走向怎么样，主要取决一个“度”字。再好的东西过度了，它也是毒药。</p>
<p>尘原本就难相遇，无望的浮云不如还给风雨，你不做牛郎我哪敢是织女，情死于猜忌，爱生于无惧</p>
</blockquote>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly93ZWliby5jb20vdHYvdi9IOEpjdEFDUzk/ZmlkPTEwMzQ6NDMyMDc4NDAwMTUxOTMyMA==" title="https://weibo.com/tv/v/H8JctACS9?fid=1034:4320784001519320">原谅一个人最需要的是学会忘记。<i class="fa fa-external-link"></i></span></p>
<p>温格·朱莉的《幸福婚姻法则》讲到了幸福婚姻的五大共识，其中一条就是说，家庭既然是难言之隐的避难所，那婚姻就应该具有藏污纳垢的能力。那试想一下如何藏污纳垢？无非就是把握好“记忆”和“遗忘”的天平哦。就想说，如果你因为失去太阳而哭泣，那你将失去星星。</p>
<p>往事如烟，紧锁的岁月锁不住对你的思念；沧海桑田，细说的演变挡不住我再走一遍。</p>
</blockquote>
<blockquote>
<p>我们都是游客。人生在这个世界上，一直都是独自旅行。中途可能会有人陪伴，但终究是各奔东西了。</p>
</blockquote>
<blockquote>
<p>最大的遗憾莫过于，她的离开教会你成长。而你成长之后的温柔，再也给不了她。</p>
<p>要相信自己。人生本来就是这样嘛，人们追求和憧憬的事情，是为了丰富我们精彩的人生，这是加法。但到最后，我们都应该给人生做减法。就像大部分人向往最后的落脚点，在自然的那份返璞归真的心态。而做完减法，我们剩下的就只是一颗包容万物的赤子之心。到时你会发现人间的真情意是那么的美好。而以这颗心态，你所接触到的也会是真情实意。</p>
<p>别太在意未来的模样，只需见证生命的成长，用赤子之心直面风浪，让自己多看看太阳。</p>
</blockquote>
<blockquote>
<p>男人的两大爱好，拉良家下水，劝风尘从良；女人的两大爱好，和穷人谈钱，和富人谈感情。</p>
</blockquote>
<blockquote>
<p>见面怜清瘦，呼儿问苦辛，低徊鬼人子，不敢叹风尘。</p>
</blockquote>
<blockquote>
<p>孽缘，新华词典的解释是有缘无份。比起有缘无分的空痴想，有份无缘的枉断肠更让人心碎。</p>
<p>即便爱对你爱理不睬，也不要乱了自己的节拍，爱要精彩也要坦白，才不会在惊鸿一瞥后发出感慨。</p>
</blockquote>
<blockquote>
<p>祝你笑靥如画无以伦比。愿此间，山有木卿有意，愿世间，春秋与天地，眼中只有你。</p>
</blockquote>
<blockquote>
<p>我们说好要一起白头，可笑的是曾以为你的善解人意，最后都成为了我的作茧自缚。</p>
</blockquote>
<blockquote>
<p>又有谁能够真正去参与另一半的过去呢，最重要的还是把握现在跟未来。</p>
<p>有没有听过这样一句话：总有人会不在乎你不完美的过去，和你共勉吧。</p>
</blockquote>
<blockquote>
<p>理论跟实践是有分别的。</p>
<p>理想跟现实的交集都是小概率事件，生活就是操不完的蛋。</p>
</blockquote>
<blockquote>
<p>别让爱在最美的时候松开，要知道未来的骄傲终究会来，抬起头生活便不会被打败</p>
</blockquote>
<blockquote>
<p>我以为我是在等一个时机，其实我是在等自己放弃。</p>
</blockquote>
<blockquote>
<p>发短信这件事，好像和每天在发生的事变得完全无关。</p>
</blockquote>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL2F2MjU4OTY0ODYv" title="https://www.bilibili.com/video/av25896486/">爱情关系上面的事情，我不太懂，但是从生物工程上面来说 少则三天，多则三年，多巴胺和去甲肾上腺素就会停止分泌，或许到时候，你对他就没什么感觉了。<i class="fa fa-external-link"></i></span></p>
</blockquote>
<blockquote>
<p>美国作家格雷格说：“恰恰是你以为你想要的东西，阻止了你追求你真正在找寻的东西。”</p>
</blockquote>
<blockquote>
<p>2018 年的人性未解之谜：朋友圈善良孤独正义深情，微博聊骚点赞求交往。</p>
</blockquote>
<blockquote>
<p>有些爱没办法各安天涯，因为那些情话还在我心里发芽。很想给你打电话，即便你不说话，即便你还是给不了我想要的回答。</p>
</blockquote>
<blockquote>
<p>我现在的工作状态就是：我的下班回家后我手机还有 97% 的电量</p>
</blockquote>
<blockquote>
<p>简单和复杂都是人生必经阶段。<br>年轻的时候，什么都想做什么都想要，把自己放在别人的眼光里，效仿一些值得效仿的东西，追求一切值得追求的东西，努力做个斜杠青年，是人生的复杂阶段；而另一个阶段呢，做事情不再照顾别人的眼光，人的思维从反求诸外转向反求诸己，这时候你想成为一个简单的自己。所以说，人首先是一个简单的人，要先学会和自己相处，再去尝试和别人相处。</p>
</blockquote>
<blockquote>
<p>因为太过珍惜，所以不敢有贪念。因为不想失去，所以不愿改变。我在努力用自己的方式，维护一段弥足珍贵的情感，却未曾料到，将她越推越远。</p>
</blockquote>
<blockquote>
<p>It’s only black if you haven’t opened it.</p>
</blockquote>
<blockquote>
<p>思前想后，我还是不想这么早结束，一纸情书并不能把我的爱全部倾诉，这段时间的接触，我已经输得体无完肤</p>
</blockquote>
<blockquote>
<p><span class="exturl" data-url="aHR0cDovL3Aud2VpYm8uY29tL3Nob3cvY2hhbm5lcldiSDUvMTAzNDo0MzE2MDcwNDEzMDQwNjYz" title="http://p.weibo.com/show/channerWbH5/1034:4316070413040663">什么是爱情？<i class="fa fa-external-link"></i></span></p>
<p>首先问你一个问题。在一片非常大的麦穗林里面，你要去摘一片最大最好的麦穗。但是有两个前提，第一个就是你要头也不回的往前走，第二个就是你只可以摘一次。你觉得你可以摘得到吗？</p>
<p>在路途中我们难得能遇到一颗看似不错的，但是却有不知道它是不是最好的，又因为只可以摘一颗所以选择了放弃，想要再走走再看看，然后走着走着到了尽头才发现自己手上一颗也没有摘到。</p>
<p>这就是爱情，爱情就是这样的。———— 苏格拉底</p>
<p>最好的就在身边，而你却只是打了个照面，还没来得及纠缠就要说再见，就像场绚丽的烟火表演，如此轮回，一年又一年</p>
</blockquote>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly93ZWliby5jb20vdHYvdi9INzNnSHNwN3Q/ZmlkPTEwMzQ6NDMxNjgwNzkzOTY5NTQxNA==" title="https://weibo.com/tv/v/H73gHsp7t?fid=1034:4316807939695414">最怕你说，我只想这样。那意味着我们的未来就此锁上，一直想给你一个欢笑的天堂，哪怕你中途丢下我一个人离场，希望你忘了伤，我想我能做的也只能是这样<i class="fa fa-external-link"></i></span></p>
</blockquote>
<blockquote>
<p>谢谢你的突如其来，光辉了我的青春岁月。</p>
</blockquote>
<blockquote>
<p>不想让爱你的心绑住一秒，天知道有你的地方有多么美妙，天南地北云飞扬，我都想带你一起去瞧一瞧。</p>
</blockquote>
<blockquote>
<p>单身久了看什么都眉清目秀，脑子里那些各种浪漫的段子啊剧情啊，早就演练过一遍又一遍了。</p>
<p>对于女生来说，男生明白这两点非常重要的：首先第一点，打折的衣服等于不要钱；第二点，女人的衣柜永远缺少一件衣服，剩下的就看你的求生欲了。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93ZWliby5jb20vdHYvdi9IOWw2YXF3djU/ZmlkPTEwMzQ6NDMyMjIzNTQ4MjA5MjMxOQ==" title="https://weibo.com/tv/v/H9l6aqwv5?fid=1034:4322235482092319">很多时候最美的三个字不是“我爱你”，而是“我懂你”。我们之间偶尔不同，但是互相尊重。<i class="fa fa-external-link"></i></span></p>
<p>别让埋怨汇成一片，水涨船高爱就看不见，世事变迁，不妨想想当初你觅食爱情的脸，那是你笃定时的誓言。</p>
</blockquote>
<blockquote>
<p>降温的时候，床以外的地方都是远方，手够不到的地方都是他乡。</p>
<p>男人间的友谊起源于喜欢同一类型的女孩，女人间的友谊起源于讨厌同一类型的女孩，又止于喜欢同一个男孩。</p>
<p>这个社会的七大谎言：我就逛逛我不买；简单说说五分钟；再打一局我就睡；买个面包明天吃；现在出门马上到；今天一定不熬夜；我在找他我是狗。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93ZWliby5jb20vdHYvdi9IOUUxN0UzWnQ/ZmlkPTEwMzQ6NDMyMjk3NDYxOTExNzI3MQ==" title="https://weibo.com/tv/v/H9E17E3Zt?fid=1034:4322974619117271">喜欢一个人就是，说不上他哪里好，但偏偏谁都代替不了。<i class="fa fa-external-link"></i></span></p>
<p>记得早先少年时，大家勤勤恳恳，说一句是一句；从前的日色变得很慢，车马邮件都很慢，一生只够爱一个人。</p>
<p>放弃其实很容易，但是要坚持是真的难。</p>
<p>如人饮水，冷暖自知。</p>
<p>爱情是否需要天赋，我从来都不在乎，我想只需追逐你的脚步，不管走到哪个国度，都是闪烁无尽的幸福。</p>
</blockquote>
<blockquote>
<p>嘘寒问暖情切切，只为博红颜一笑。</p>
<p>情不知所起一往而深，爱不知所终倏忽而逝。</p>
</blockquote>
<blockquote>
<p>有时候我们想要的真相不过就是合乎我们口味的真相。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93ZWliby5jb20vdHYvdi9IYWZIWHlEbGQ/ZmlkPTEwMzQ6NDMyNDQwMzc0MDM4MjM5OA==" title="https://weibo.com/tv/v/HafHXyDld?fid=1034:4324403740382398">可能她已在风中晾干了泪痕，或者已不再怀恨。别轻易敲开真相的大门，毕竟相爱的是他们两人。<i class="fa fa-external-link"></i></span></p>
</blockquote>
<blockquote>
<p>你见或者不见我，我就在那里，不悲不喜；</p>
<p>你念或者不念我，情就在那里，不来不去；</p>
<p>你爱或者不爱我，爱就在那里，不增不减；</p>
<p>你跟或者不跟我，我的手就在你的手里，不舍不弃；</p>
<p>来我怀里，或者让我住进你心里，默然相爱，寂静喜欢。</p>
</blockquote>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly93ZWliby5jb20vdHYvdi9IY1p2QWdvakk/ZmlkPTEwMzQ6NDMzMDk1MTEyODM1MDU2MQ==" title="https://weibo.com/tv/v/HcZvAgojI?fid=1034:4330951128350561">天下攘攘，有些人与我们擦肩而过，却没办法遇见，遇见了却没办法相识，相识了却没办法熟悉，熟悉了却还是要说再见。<i class="fa fa-external-link"></i></span></p>
</blockquote>
<blockquote>
<p>大种中无色，色中无大种，亦不离大种，而有色可得；心中无彩画，彩画中无心，然不离于心，有彩画可得，若人欲了之，三世一切佛，应观法界性，一切唯心造。——《地藏菩萨本愿功德经》</p>
<p>➡️<em>佛家是说，你心里想什么，看到的世界就会是什么样子的，正因为你内心用情至深，所以才会看到这样一个世界。</em></p>
</blockquote>
<blockquote>
<p><u>行周公之礼；文雅之名叫云雨巫山、共赴阳台、高唐之会；清史演义中是叫“研究箭法”；皇帝叫幸之，牛人叫御之，普通人叫苟且；强盗叫采花，和尚叫开光。</u></p>
</blockquote>
<blockquote>
<p>小时候喜欢看动物世界，角马迁徙让我印象特别深刻，他们几乎一整年都在迁徙的路上，每年有蒋健120万头角马往返于赛伦盖蒂草原和马塞马拉草原之间寻找食物，然后有个泅渡坦桑尼亚和肯尼亚交界处的“天国之渡”的马拉河，地上是狮子、猎豹、鬣狗，天上有秃鹫，河里还有鳄鱼，还有“易怒症”的河马，你说这经历了一年的饥饿干渴、体力不支，还要被天敌追杀，最后只有不到三成的角马能够回到当初诞生自己的南部草原。有时候，我也会抱怨生活太艰难，但是每次想起角马迁徙，便觉得生命可以艰难、可以短暂，但是却充满韧性。</p>
<p>住进布达拉宫，我是雪域最大的王；流浪在拉萨街头，我是世间最美的情郎。 ——仓央嘉措</p>
<p>问佛里面有一句：留人间多少爱 迎浮世千重变  和有情人做快乐事 别问是劫是缘</p>
<p>人们常说：有工作的地方没有家，有家的地方却没有工作，他乡容纳不下灵魂，故乡安置不了肉身，一个叫家的地方找不到养家糊口的路，找到了养家糊口的地方却安不了家，从此便有了漂泊、有了远方、有了乡愁。</p>
</blockquote>
<blockquote>
<p>我希望自己是铠甲，可以庇护自己的爱人，在我们追求社会地位的时候，很容易迷失自己，在不当的时间，出现在不合适的地方，喝着不该喝的酒，最后才发现，其实最快的捷径就是不断提升自己的自制力。</p>
<p>你拥有绝佳的自制力，自制力就是权力，你拥有权力。</p>
<p>尝遍人间味道，如今只想把握今朝，你那么好，此生未了，唯有和你一世逍遥。</p>
</blockquote>
<blockquote>
<p>感情这件事最好不要有太多人参与。</p>
<p>我见过文静害羞的女孩出门就跟被人开房，也见过大大咧咧抽烟喝酒的女生坚守一份感情，见过穿西装打领带的人对着父母大吼大叫破口大骂，也见过满身纹身但对长辈无微不至的照顾，有时候我们不应该从别人那里去了解一个人，更不要去相信眼前看到的，如果你不完全了解一个人就不应该随意的去评价。</p>
<p>我见过有人一手好牌打烂，也见过有人通过自己的努力变成春风得意的少年，但我觉得这些人中间的差别就是，他们对生活的、对事业、对所遇到的人是否怀有一颗敬畏之心。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93ZWliby5jb20vMjk5MzEwNzcyMC9Iam5wUEZhTE8=" title="https://weibo.com/2993107720/HjnpPFaLO">动情是容易的，因为不会太长久。留恋是不幸的，因为曾经拥有。无奈我们看懂彼此是彼此的过客，爱情是个轮廓它不可能是私有。<i class="fa fa-external-link"></i></span></p>
</blockquote>
<blockquote>
<p>现在成年人的发泄方式：换头像、换朋友全封面、删朋友圈、或者是三天可见、改签名。</p>
<p>所有的一见钟情都是见色起意，所有的日久生情都是权衡利弊。</p>
<p>男生跟女生遇到真爱的第一征兆：在男生身上是变得胆怯，在女生身上是变得大胆。</p>
<p>红衣佳人白衣友，朝与同歌暮同酒，世人谓我恋长安，其实只恋长安某。<em>这句话表达了叔同先生的痴情。</em></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93ZWliby5jb20vMjk5MzEwNzcyMC9IajR2SnhSbmg=" title="https://weibo.com/2993107720/Hj4vJxRnh">毫不怀疑的去相信一个人会得到两种结果：一个是得到一个值得铭记一生的教训；另外一个是得到一个值得托付一生的人<i class="fa fa-external-link"></i></span></p>
</blockquote>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly93ZWliby5jb20vdHYvdi9Ialo1ODNBRWU/ZmlkPTEwMzQ6NDM0NzYwOTY4MzU3MTUxMg==" title="https://weibo.com/tv/v/HjZ583AEe?fid=1034:4347609683571512">一个人最好的状态就是眼里写满故事，脸上不见风霜。<i class="fa fa-external-link"></i></span></p>
<p>像他永远不会来那样生活，像他明天就会出现那样期待，兜兜转转，终有人与你共黄昏，有人问你粥可温。</p>
<p>不必去归咎他是否温柔，可能某些爱终究只是说不出口，或许兜兜转转还是忧愁，但带不走的美丽，依然还在心中</p>
</blockquote>
<blockquote>
<p>自幼贫民窟长大的女孩，侥幸多念了两本书，枉以为可以与人平起平坐，但是人生从来都是接力赛，你我都是凡人，想冲出原始阶层是有可能，但不多，女子尤甚。在婚姻面前，爱情太渺小，真正的助力并非他人的压力和低看，而是流淌在骨子里的基因、敏感、脆弱  <span class="exturl" data-url="aHR0cDovL3QuY24vRU01OXpKZQ==" title="http://t.cn/EM59zJe"><em>——亦舒《承欢记》</em><i class="fa fa-external-link"></i></span></p>
</blockquote>
<blockquote>
<p>爱情和婚姻最大的区别在于，爱情只需要说一遍我爱你，而婚姻需要说两次。当我们在爱情中说：”我爱你“的时候，是因为我爱发光的你。而在婚姻中再次说”我爱你“的时候，是因为我爱伤痕累累的你。真正强大的感情，最后重要落实到两个字”气量“或者”胸怀“。</p>
</blockquote>
<blockquote>
<h3 id="在暧昧没发生之前，谁都觉得能控制住自己的情感"><a href="#在暧昧没发生之前，谁都觉得能控制住自己的情感" class="headerlink" title="在暧昧没发生之前，谁都觉得能控制住自己的情感"></a><span class="exturl" data-url="aHR0cHM6Ly95b3V0dS5iZS9CNnZ5Z3ptRGs0Yw==" title="https://youtu.be/B6vygzmDk4c">在暧昧没发生之前，谁都觉得能控制住自己的情感<i class="fa fa-external-link"></i></span></h3></blockquote>
<blockquote>
<h3 id="在得到的时候学会珍惜，在不爱的时候再去爱"><a href="#在得到的时候学会珍惜，在不爱的时候再去爱" class="headerlink" title="在得到的时候学会珍惜，在不爱的时候再去爱"></a><span class="exturl" data-url="aHR0cHM6Ly95b3V0dS5iZS9LbU1tQi1LaV9pYw==" title="https://youtu.be/KmMmB-Ki_ic">在得到的时候学会珍惜，在不爱的时候再去爱<i class="fa fa-external-link"></i></span></h3></blockquote>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>金句</tag>
        <tag>摘抄</tag>
        <tag>情感</tag>
        <tag>PUA</tag>
        <tag>情话</tag>
        <tag>套路</tag>
      </tags>
  </entry>
  <entry>
    <title>一步步基于vue-cli搭建vue2.0项目</title>
    <url>/posts/b191399c.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><ul>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnL2VuLw==" title="https://nodejs.org/en/">node<i class="fa fa-external-link"></i></span> &amp; npm</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew install node</span><br></pre></td></tr></table></figure>
</li>
<li><p>检查 node &amp; npm</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ node -v</span><br><span class="line">$ npm -v</span><br></pre></td></tr></table></figure>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9jbGkudnVlanMub3JnLw==" title="https://cli.vuejs.org/">vue-cli<i class="fa fa-external-link"></i></span></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g vue-cli</span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g @vue/cli @vue/cli-init @vue/cli-service-global</span><br></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vue init &lt;template-name&gt; &lt;project-name&gt;</span><br></pre></td></tr></table></figure>
<p>举例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vue init webpack vue-step-by-step</span><br></pre></td></tr></table></figure>
<p>根据提示依次输入相关信息 ↓<br><img src="https://image.xuebin.me/FkJL3BJVzwCx4ZsJfq07RUh8OpJf" alt><br>最后出现<code>finished</code>安装完成 ↓<br><img src="https://image.xuebin.me/FuojPwH5ToccPFjaFl6vbzi3MuQc" alt><br>在终端中运行 ↓</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd vue-step-by-step</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure>
<p>即可查看初始化完成的效果</p>
<h1 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h1><p>项目初始化完成后添加项目常用依赖包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save vuex axios qs</span><br><span class="line">npm install --save-dev node-sass sass-loader pug pug-loader</span><br></pre></td></tr></table></figure>
<p>包含<span class="exturl" data-url="aHR0cHM6Ly92dWV4LnZ1ZWpzLm9yZy96aC1jbi8=" title="https://vuex.vuejs.org/zh-cn/"><code>vuex</code><i class="fa fa-external-link"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2F4aW9zL2F4aW9z" title="https://github.com/axios/axios"><code>axios</code><i class="fa fa-external-link"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xqaGFyYi9xcw==" title="https://github.com/ljharb/qs"><code>qs</code><i class="fa fa-external-link"></i></span>、<code>sass</code>、<code>pug</code>等，其他依赖包根据项目需求自己选择<br><span class="exturl" data-url="aHR0cHM6Ly9yb3V0ZXIudnVlanMub3JnL3poLWNuLw==" title="https://router.vuejs.org/zh-cn/"><code>vue-router</code><i class="fa fa-external-link"></i></span>在脚手架 init 的时候会提示是否选择安装</p>
<h1 id="完善项目结构"><a href="#完善项目结构" class="headerlink" title="完善项目结构"></a>完善项目结构</h1><h2 id="添加views文件夹"><a href="#添加views文件夹" class="headerlink" title="添加views文件夹"></a>添加<code>views</code>文件夹</h2><blockquote>
<p>src 下添加 views 文件夹主要存放页面级的 vue 组件<br>src 下的 components 文件夹主要用于存放通用的组件</p>
</blockquote>
<p>在 views 文件夹中创建<code>Home.vue</code>作为主页</p>
<p>删除<code>App.vue</code>中无用的内容，只保留<code>router-view</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果是移动端项目用 rem 作为单位，可以在<code>src/main.js</code>中添加如下代码做自适应 ↓</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.addEventListener) &#123;</span><br><span class="line">  <span class="keyword">const</span> html = <span class="built_in">document</span>.documentElement</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setFont</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> k = <span class="number">750</span></span><br><span class="line">    html.style.fontSize = (html.clientWidth / k) * <span class="number">100</span> + <span class="string">'px'</span></span><br><span class="line">  &#125;</span><br><span class="line">  setFont()</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    setFont()</span><br><span class="line">  &#125;, <span class="number">300</span>)</span><br><span class="line">  <span class="built_in">document</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, setFont, <span class="literal">false</span>)</span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>, setFont, <span class="literal">false</span>)</span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, setFont, <span class="literal">false</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="调整router配置"><a href="#调整router配置" class="headerlink" title="调整router配置"></a>调整<span class="exturl" data-url="aHR0cHM6Ly9yb3V0ZXIudnVlanMub3JnL3poLWNuLw==" title="https://router.vuejs.org/zh-cn/"><code>router</code><i class="fa fa-external-link"></i></span>配置</h2><blockquote>
<p>更多路由相关使用方法请访问：<span class="exturl" data-url="aHR0cHM6Ly9yb3V0ZXIudnVlanMub3JnL3poLWNuLw==" title="https://router.vuejs.org/zh-cn/">https://router.vuejs.org/zh-cn/<i class="fa fa-external-link"></i></span></p>
</blockquote>
<p>目录结构 ↓</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">router</span><br><span class="line">    ├── index.js          # 我们组装模块并导出 store 的地方</span><br><span class="line">    └── modules</span><br><span class="line">        ├── home.js       # 首页模块</span><br><span class="line">        ├── cart.js       # 购物车模块</span><br><span class="line">        └── products.js   # 产品模块</span><br></pre></td></tr></table></figure>
<p>修改路由主文件<code>router/index.js</code></p>
<p>使用<code>require.context</code>实现路由<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3d1Y2hhbmdtaW5nL2Jsb2cvYmxvYi9tYXN0ZXIvZG9jcy93ZWJwYWNrL3JlcXVpcmUtY29udGV4dC11c2FnZS5tZA==" title="https://github.com/wuchangming/blog/blob/master/docs/webpack/require-context-usage.md"><code>去中心化</code><i class="fa fa-external-link"></i></span></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> router = <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  base: <span class="string">'/'</span>, <span class="comment">// 应用的基路径</span></span><br><span class="line">  mode: <span class="string">'hash'</span>, <span class="comment">// "hash" (URL hash 模式) | "history"(HTML5 History 模式) | "abstract" (Node.js 环境)</span></span><br><span class="line">  scrollBehavior(to, <span class="keyword">from</span>, savedPosition) &#123;</span><br><span class="line">    <span class="comment">// 路由切换的滚动行为，只在 HTML5 history 模式下可用</span></span><br><span class="line">    <span class="keyword">if</span> (savedPosition) &#123;</span><br><span class="line">      <span class="keyword">return</span> savedPosition</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  routes: (<span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 去中心化</span></span><br><span class="line">    <span class="comment">// console.log('r', r); // __webpack_require__</span></span><br><span class="line">    <span class="keyword">let</span> sourceMap = []</span><br><span class="line">    <span class="keyword">let</span> res = r.keys().map(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> rKey = r(key)</span><br><span class="line">      sourceMap.push(...rKey.default)</span><br><span class="line">      <span class="comment">// console.log('key', key, rKey); // ./modules/home/route.js  // &#123;default: Array(3), __esModule: true&#125;</span></span><br><span class="line">      <span class="keyword">return</span> rKey</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> sourceMap</span><br><span class="line">  &#125;)(<span class="built_in">require</span>.context(<span class="string">'./'</span>, <span class="literal">true</span>, /^\.\/modules\/\w+\.js$/)),</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// console.log('router beforeEach=&gt;', to, from)</span></span><br><span class="line">  <span class="comment">// 全局路由切换前执行</span></span><br><span class="line">  <span class="comment">// 是否有用户信息，并且用户ID是否存在</span></span><br><span class="line">  <span class="comment">// if (window.localStorage.getItem("loginInfo") &amp;&amp; JSON.stringify(window.localStorage.getItem("loginInfo")).userId) &#123;</span></span><br><span class="line">  <span class="comment">//     next(&#123;path: '/login'&#125;)//重定向到登录页面</span></span><br><span class="line">  <span class="comment">// &#125; else &#123;</span></span><br><span class="line">  <span class="comment">//     next()//正常跳转</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.afterEach(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// console.log('router afterEach=&gt;', router)</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure>
<p>在 router 文件夹下添加 <code>modules</code> 文件夹</p>
<p>在 modules 文件夹下添加 <code>home.js</code> ，这个 home.js 对应首页业务模块，首页相关的路由页面都可以写到 home.js 文件里。</p>
<p>如果以后添加其他业务模块，只需要在 modules 文件夹添加相对应的业务模块文件，并在其中添加业务相关的路由页面。这样所有不同业务线的开发人员就可以互不干扰 ↓</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'../../views/Home'</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/'</span>,</span><br><span class="line">    name: <span class="string">'index'</span>,</span><br><span class="line">    redirect: <span class="string">'/home'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/home'</span>,</span><br><span class="line">    name: <span class="string">'home'</span>,</span><br><span class="line">    component: Home,</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> routes</span><br></pre></td></tr></table></figure>
<p>对于不需要即时加载的非一级页面可以使用异步路由组件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// region 异步组件 - 路由地址demo</span></span><br><span class="line"><span class="comment">// ES 提案的 import（推荐）</span></span><br><span class="line">&#123; <span class="attr">name</span>: <span class="string">'index'</span>, <span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">component</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'../views/index'</span>)&#125;,</span><br><span class="line"><span class="comment">// ES 提案的 import，带分组，指定webpackChunkName，相同的name打包到一个js文件</span></span><br><span class="line">&#123; <span class="attr">name</span>: <span class="string">'index'</span>, <span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">component</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(webpackChunkName:<span class="string">'viewsIndex'</span>,<span class="string">'../views/index'</span>)&#125;,</span><br><span class="line"><span class="comment">// Webpack 风格的异步组件</span></span><br><span class="line">&#123; <span class="attr">name</span>: <span class="string">'index'</span>, <span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">component</span>: <span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">require</span>.ensure([<span class="string">'views/Foo.vue'</span>], () =&gt; resolve(<span class="built_in">require</span>(<span class="string">'views/Foo.vue'</span>)))&#125;,</span><br><span class="line"><span class="comment">// Webpack 风格的异步组件，带分组</span></span><br><span class="line">&#123; <span class="attr">name</span>: <span class="string">'index'</span>, <span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">component</span>: <span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">require</span>.ensure([], () =&gt; resolve(<span class="built_in">require</span>(<span class="string">'views/index.vue'</span>)), <span class="string">'group-index'</span>)&#125;,</span><br><span class="line"><span class="comment">// AMD 风格的异步组件</span></span><br><span class="line">&#123; <span class="attr">name</span>: <span class="string">'index'</span>, <span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">component</span>: <span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">require</span>([<span class="string">'views/index.vue'</span>], resolve)&#125;,</span><br><span class="line"><span class="comment">// endregion</span></span><br></pre></td></tr></table></figure>
<h2 id="添加store文件夹"><a href="#添加store文件夹" class="headerlink" title="添加store文件夹"></a>添加<code>store</code>文件夹</h2><blockquote>
<p>src 下的 store 文件夹主要是存放 <span class="exturl" data-url="aHR0cHM6Ly92dWV4LnZ1ZWpzLm9yZy96aC1jbi8=" title="https://vuex.vuejs.org/zh-cn/">vuex<i class="fa fa-external-link"></i></span> 相关信息的<br>更多 vuex 相关使用方法请访问：<span class="exturl" data-url="aHR0cHM6Ly92dWV4LnZ1ZWpzLm9yZy96aC1jbi8=" title="https://vuex.vuejs.org/zh-cn/">https://vuex.vuejs.org/zh-cn/<i class="fa fa-external-link"></i></span></p>
</blockquote>
<p>在 store 文件夹下创建目录结构 ↓</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">store</span><br><span class="line">    ├── index.js               # 我们组装模块并导出 store 的地方</span><br><span class="line">    ├── root.js                # 根级别的 getter</span><br><span class="line">    ├── actions-types.js       # 根级别的 action 的方法名常量</span><br><span class="line">    ├── mutation-types.js      # 定义链接 mutation 的方法名常量</span><br><span class="line">    └── modules</span><br><span class="line">        ├── base.js            # 首页模块</span><br><span class="line">        ├── cart.js            # 购物车模块</span><br><span class="line">        └── products.js        # 产品模块</span><br></pre></td></tr></table></figure>
<p>下面开始改造 store 文件夹 ↓</p>
<ol>
<li><p>在<code>mutation-types.js</code>中添加一个常量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> BASE = &#123;</span><br><span class="line">  setUserInfo: <span class="string">'base/setUserInfo'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">mutations</span> (<span class="params">states</span>) </span>&#123;</span><br><span class="line">  addFirstUpperCaseToPrototype()</span><br><span class="line">  addFlatToPrototype()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">// 单个state赋值 https://forum.vuejs.org/t/vuex-state/39459/5</span></span><br><span class="line">    ...Object.keys(states).reduce(</span><br><span class="line">      (obj, key) =&gt; (&#123;</span><br><span class="line">        ...obj,</span><br><span class="line">        [<span class="string">`set<span class="subst">$&#123;key.firstUpperCase()&#125;</span>`</span>]: <span class="function">(<span class="params">state, payload</span>) =&gt;</span> (state[key] = payload)</span><br><span class="line">      &#125;),</span><br><span class="line">      &#123;&#125;</span><br><span class="line">    ),</span><br><span class="line">    <span class="comment">// 多个state批量赋值</span></span><br><span class="line">    setData (state, payload) &#123;</span><br><span class="line">      <span class="comment">// state = &#123; ...state, ...payload &#125; // eslint-disable-line</span></span><br><span class="line">      <span class="built_in">Object</span>.assign(state, payload)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 深度合并赋值</span></span><br><span class="line">    setDataDeep: mergeJSON,</span><br><span class="line">    <span class="comment">// 表格页码改变</span></span><br><span class="line">    pageChange (state, payload) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; list, total &#125; = payload</span><br><span class="line">      state.total = total</span><br><span class="line">      list.forEach(<span class="function">(<span class="params">el, index</span>) =&gt;</span> &#123;</span><br><span class="line">        el.key = index</span><br><span class="line">      &#125;)</span><br><span class="line">      state.list.splice(<span class="number">0</span>, state.list.length, ...list)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// #region addFirstUpperCaseToPrototype - String原型链方法firstUpperCase</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * String原型链方法firstUpperCase</span></span><br><span class="line"><span class="comment"> * @export</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">addFirstUpperCaseToPrototype</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">/* eslint-disable */</span></span><br><span class="line">  <span class="built_in">String</span>.prototype.firstUpperCase = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">([first, ...rest]</span>) =&gt;</span> first.toUpperCase() + rest.join(<span class="string">''</span>))(<span class="keyword">this</span>) <span class="comment">// return this.replace(/^\S/, s =&gt; s.toUpperCase())</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* eslint-enable */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// #endregion</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #region addFlatToPrototype - Array原型链方法flat</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Array原型链方法flat</span></span><br><span class="line"><span class="comment"> * @export</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">addFlatToPrototype</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">/* eslint-disable */</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">Array</span>.prototype.flat) &#123;</span><br><span class="line">    <span class="built_in">Array</span>.prototype.flat = <span class="function"><span class="keyword">function</span>(<span class="params">num = <span class="number">1</span></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="built_in">Number</span>(num) || <span class="built_in">Number</span>(num) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">let</span> arr = []</span><br><span class="line">      <span class="keyword">this</span>.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(item)) &#123;</span><br><span class="line">          arr = arr.concat(item.flat(--num))</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          arr.push(item)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">return</span> arr</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* eslint-enable */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// #endregion</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #region mergeJSON - 合并JSON</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 直接修改 main 将 minor 合并到 main</span></span><br><span class="line"><span class="comment"> * @export</span></span><br><span class="line"><span class="comment"> * @param &#123;*&#125; main</span></span><br><span class="line"><span class="comment"> * @param &#123;*&#125; minor</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">mergeJSON</span> (<span class="params">main = &#123;&#125;, minor = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">Object</span>.keys(minor).forEach(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> type = <span class="built_in">Object</span>.prototype.toString.call(minor[key])</span><br><span class="line">    <span class="keyword">if</span> (type === <span class="string">'[object Object]'</span>) &#123;</span><br><span class="line">      mergeJSON(main[key] || &#123;&#125;, minor[key] || &#123;&#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      main[key] = type === <span class="string">'[object Null]'</span> || type === <span class="string">'[object Undefined]'</span> ? main[key] : minor[key]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// #endregion</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在<code>action-types.js</code>中添加一个常量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> BASE = &#123;</span><br><span class="line">  login: <span class="string">'base/login'</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改<code>modules/base.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> &#123; BASE, mutations &#125; <span class="keyword">from</span> <span class="string">'../mutation-types'</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">'qs'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> states = &#123;</span><br><span class="line">  version: <span class="string">''</span>,</span><br><span class="line">  token: <span class="literal">null</span>,</span><br><span class="line">  user: &#123;</span><br><span class="line">    userID: <span class="string">''</span>,</span><br><span class="line">    userName: <span class="string">''</span>,</span><br><span class="line">    name: <span class="string">''</span>,</span><br><span class="line">    tel: <span class="string">''</span>,</span><br><span class="line">    email: <span class="string">''</span>,</span><br><span class="line">    head: <span class="string">''</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  namespaced: <span class="literal">true</span>, <span class="comment">// https://vuex.vuejs.org/zh/guide/modules.html#命名空间</span></span><br><span class="line">  state: states,</span><br><span class="line">  getters: &#123;</span><br><span class="line">    versionGetter(state, getters) &#123;</span><br><span class="line">      <span class="keyword">return</span> state.version</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    ...mutations(states),</span><br><span class="line">    setUserInfo(state, userInfo) &#123;</span><br><span class="line">      userInfo.userID &amp;&amp; (state.user.userID = userInfo.userID)</span><br><span class="line">      userInfo.USERNAME &amp;&amp; (state.user.userName = userInfo.USERNAME)</span><br><span class="line">      userInfo.NAME &amp;&amp; (state.user.name = userInfo.NAME)</span><br><span class="line">      userInfo.TEL &amp;&amp; (state.user.tel = userInfo.TEL)</span><br><span class="line">      userInfo.EMAIL &amp;&amp; (state.user.email = userInfo.EMAIL)</span><br><span class="line">      userInfo.HEAD &amp;&amp; (state.user.head = userInfo.HEAD)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    <span class="keyword">async</span> login(&#123; commit, dispatch, state &#125;, &#123; userName, password &#125;) &#123;</span><br><span class="line">      <span class="keyword">let</span> userInfo = <span class="keyword">await</span> axios.post(<span class="string">'/api/login'</span>, qs.stringify(&#123; userName, password &#125;))</span><br><span class="line">      commit(BASE.SET_USER_INFO, userInfo)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>修改 vuex 主文件<code>index.js</code>，组合所有状态模块</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="keyword">import</span> root <span class="keyword">from</span> <span class="string">'./root'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base <span class="keyword">from</span> <span class="string">'./modules/base'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// import createLogger from 'vuex/dist/logger' //vuex内置的Logger日志插件</span></span><br><span class="line"><span class="keyword">const</span> debug = process.env.NODE_ENV !== <span class="string">'production'</span> <span class="comment">// 发布品种时需要用 Webpack 的 DefinePlugin 来转换 process.env.NODE_ENV !== 'production' 的值为 false</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  ...root</span><br><span class="line">  modules: &#123;</span><br><span class="line">    base,</span><br><span class="line">    <span class="comment">// https://vuex.vuejs.org/zh/guide/modules.html#模块动态注册</span></span><br><span class="line">  &#125;,</span><br><span class="line">  strict: debug, <span class="comment">// 开发阶段使用</span></span><br><span class="line">  <span class="comment">// plugins: debug ? [createLogger()] : []//vuex插件,https://vuex.vuejs.org/zh/guide/plugins.html</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改<code>main.js</code>，引入 vuex</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store/index'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  <span class="comment">// components: &#123; App &#125;,</span></span><br><span class="line">  <span class="comment">// template: '&lt;App/&gt;',</span></span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App), <span class="comment">// https://cn.vuejs.org/v2/guide/render-function.html#JSX</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YmNkOTY3YjZmYjlhMDVkMDcxOTdiMWU=" title="https://juejin.im/post/5bcd967b6fb9a05d07197b1e">https://juejin.im/post/5bcd967b6fb9a05d07197b1e<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81ODYwY2M0NzEyOGZlMTAwNjllMTljMjY=" title="https://juejin.im/post/5860cc47128fe10069e19c26">Vuex 实战：如何在大规模 Vue 应用中组织 Vuex 代码<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NldmlvL3N1cGVyLXZ1ZXg=" title="https://github.com/cevio/super-vuex">super-vuex<i class="fa fa-external-link"></i></span></p>
</blockquote>
<h2 id="添加mixins文件夹"><a href="#添加mixins文件夹" class="headerlink" title="添加mixins文件夹"></a>添加<code>mixins</code>文件夹</h2><p>目录结构 ↓</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mixins</span><br><span class="line">    ├── index.js               # 全局mixin</span><br></pre></td></tr></table></figure>
<h2 id="添加filters文件夹"><a href="#添加filters文件夹" class="headerlink" title="添加filters文件夹"></a>添加<code>filters</code>文件夹</h2><p>目录结构 ↓</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">filters</span><br><span class="line">    ├── index.js               # 全局过滤器</span><br></pre></td></tr></table></figure>
<h2 id="添加utils文件夹"><a href="#添加utils文件夹" class="headerlink" title="添加utils文件夹"></a>添加<code>utils</code>文件夹</h2><p>目录结构 ↓</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">utils</span><br><span class="line">    ├── fetch.js               # axios</span><br><span class="line">    ├── filters.js             # 全局filter</span><br><span class="line">    └── mixin.js               # 全局mixin</span><br></pre></td></tr></table></figure>
<p><code>src/main.js</code>中添加全局引用 ↓</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> filters <span class="keyword">from</span> <span class="string">'./utils/filters'</span></span><br><span class="line"><span class="keyword">import</span> fetch <span class="keyword">from</span> <span class="string">'./utils/fetch'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 全局注册fetch */</span></span><br><span class="line">Vue.prototype.$fetch = fetch</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 注册全局过滤器 */</span></span><br><span class="line"><span class="built_in">Object</span>.keys(filters).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">  Vue.filter(key, filters[key])</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="封装-axios"><a href="#封装-axios" class="headerlink" title="封装 axios"></a>封装 axios</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'../router'</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">'qs'</span></span><br><span class="line"><span class="keyword">import</span> Toast <span class="keyword">from</span> <span class="string">'../components/toast'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #region config</span></span><br><span class="line"><span class="comment">// 每页条数</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> ROW = <span class="number">10</span></span><br><span class="line"><span class="comment">// 加载最小时间</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> MINI_TIME = <span class="number">300</span></span><br><span class="line"><span class="comment">// 超时时间（超时时间）</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> TIME_OUT_MAX = <span class="number">8000</span></span><br><span class="line"><span class="comment">// 环境value</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> _env = process.env.NODE_ENV</span><br><span class="line"><span class="comment">// 请求组（判断当前请求数）</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> _requests = []</span><br><span class="line"><span class="comment">// #endregion</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #region 实例化axios</span></span><br><span class="line"><span class="keyword">const</span> _instance = axios.create(&#123;</span><br><span class="line">  timeout: TIME_OUT_MAX,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// #endregion</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// region request统一处理操作</span></span><br><span class="line">_instance.defaults.headers.post[<span class="string">'Content-Type'</span>] = <span class="string">'application/x-www-form-urlencoded;charset=UTF-8'</span></span><br><span class="line"><span class="comment">// POST传参序列化</span></span><br><span class="line">_instance.interceptors.request.use(</span><br><span class="line">  config =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (config.method === <span class="string">'post'</span>) &#123;</span><br><span class="line">      config.data = qs.stringify(config.data)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    Toast(<span class="string">'错误的传参'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">  &#125;,</span><br><span class="line">)</span><br><span class="line"><span class="comment">// endregion</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// region response统一处理操作</span></span><br><span class="line">_instance.interceptors.response.use(</span><br><span class="line">  res =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> _message = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">if</span> (res.status !== <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(res)</span><br><span class="line">      <span class="keyword">switch</span> (res.status) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">404</span>:</span><br><span class="line">          _message = <span class="string">'404,错误请求'</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">401</span>:</span><br><span class="line">          router.push(&#123; <span class="attr">path</span>: <span class="string">'/login'</span>, <span class="attr">query</span>: &#123; <span class="attr">redirect</span>: router.currentRoute.fullPath &#125; &#125;)</span><br><span class="line">          _message = <span class="string">'未授权'</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">403</span>:</span><br><span class="line">          _message = <span class="string">'禁止访问'</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">408</span>:</span><br><span class="line">          _message = <span class="string">'请求超时'</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">500</span>:</span><br><span class="line">          _message = <span class="string">'服务器内部错误'</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">501</span>:</span><br><span class="line">          _message = <span class="string">'功能未实现'</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">503</span>:</span><br><span class="line">          _message = <span class="string">'服务不可用'</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">504</span>:</span><br><span class="line">          _message = <span class="string">'网关错误'</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">          _message = <span class="string">'未知错误'</span></span><br><span class="line">      &#125;</span><br><span class="line">      Toast(_message)</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(_message)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> res</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(error)</span><br><span class="line">    Toast(error || <span class="string">'服务器繁忙，请稍后重试'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error || <span class="string">'服务器繁忙，请稍后重试'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">)</span><br><span class="line"><span class="comment">// endregion</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #region send get/post</span></span><br><span class="line"><span class="keyword">let</span> toast = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送GET请求</span></span><br><span class="line"><span class="comment"> * @param api 接口api</span></span><br><span class="line"><span class="comment"> * @param params 请求参数</span></span><br><span class="line"><span class="comment"> * @returns &#123;Promise.&lt;T&gt;&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">api, params</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!toast) toast = Toast(&#123; <span class="attr">time</span>: <span class="number">-1</span>, <span class="attr">message</span>: <span class="string">'加载中'</span>, <span class="attr">icon</span>: <span class="string">'loading'</span> &#125;)</span><br><span class="line">    <span class="keyword">let</span> &#123; data &#125; = <span class="keyword">await</span> _instance.get(api, &#123; params &#125;)</span><br><span class="line">    toast.close()</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    toast.close()</span><br><span class="line">    Toast(&#123; <span class="attr">message</span>: <span class="string">'网络异常'</span>, <span class="attr">position</span>: <span class="string">'bottom'</span> &#125;)</span><br><span class="line">    <span class="keyword">throw</span> e</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送POST请求</span></span><br><span class="line"><span class="comment"> * @param api 接口api</span></span><br><span class="line"><span class="comment"> * @param params 请求参数</span></span><br><span class="line"><span class="comment"> * @returns &#123;Promise.&lt;T&gt;&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">post</span>(<span class="params">api, params</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!toast) toast = Toast(&#123; <span class="attr">time</span>: <span class="number">-1</span>, <span class="attr">message</span>: <span class="string">'加载中'</span>, <span class="attr">icon</span>: <span class="string">'loading'</span> &#125;)</span><br><span class="line">    <span class="keyword">let</span> &#123; data &#125; = <span class="keyword">await</span> _instance.post(api, qs.stringify(params))</span><br><span class="line">    toast.close()</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    toast.close()</span><br><span class="line">    Toast(&#123; <span class="attr">message</span>: <span class="string">'网络异常'</span>, <span class="attr">position</span>: <span class="string">'bottom'</span> &#125;)</span><br><span class="line">    <span class="keyword">throw</span> e</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// #endregion</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  _instance,</span><br><span class="line">  <span class="keyword">get</span>,</span><br><span class="line">  post,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="config-配置"><a href="#config-配置" class="headerlink" title="config 配置"></a>config 配置</h2><h3 id="build-生成的文件路径使用相对路径"><a href="#build-生成的文件路径使用相对路径" class="headerlink" title="build 生成的文件路径使用相对路径"></a>build 生成的文件路径使用相对路径</h3><p>修改<code>config/index.js</code>文件中<code>build</code>节点的<code>assetsPublicPath</code>值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  dev: &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  build: &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    assetsPublicPath: <span class="string">'./'</span>,</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="开发的的时候需要使用代理-proxy-跨域访问服务器接口"><a href="#开发的的时候需要使用代理-proxy-跨域访问服务器接口" class="headerlink" title="开发的的时候需要使用代理(proxy)跨域访问服务器接口"></a>开发的的时候需要使用代理(proxy)跨域访问服务器接口</h3><p>修改<code>config/index.js</code>文件中<code>dev</code>节点的<code>proxyTable</code>值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  dev: &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    proxyTable: &#123;</span><br><span class="line">      <span class="string">'/api'</span>: &#123;</span><br><span class="line">        target: <span class="string">'https://123.57.89.97:8081'</span>,</span><br><span class="line">        changeOrigin: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// pathRewrite: &#123;</span></span><br><span class="line">        <span class="comment">//   '^/api': '/api'</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="分离线上环境和本地环境的配置信息"><a href="#分离线上环境和本地环境的配置信息" class="headerlink" title="分离线上环境和本地环境的配置信息"></a>分离线上环境和本地环境的配置信息</h3><p>修改<code>config/dev.env.js</code>与<code>config/prod.env.js</code>，为不同的环境配置文件添加与<code>NODE_ENV</code>同级的环境变量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  NODE_ENV: <span class="string">'"development"'</span>,</span><br><span class="line">  API: <span class="string">'"https://123.57.89.97:8081"'</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="通用样式-SCSS"><a href="#通用样式-SCSS" class="headerlink" title="通用样式(SCSS)"></a>通用样式(SCSS)</h1><p>目录结构 ↓</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">assets</span><br><span class="line">    └── scss</span><br><span class="line">        ├── base.scss         # 基础样式</span><br><span class="line">        ├── common.scss       # 通用样式</span><br><span class="line">        ├── fun.scss          # 函数</span><br><span class="line">        ├── mixin.scss        # 混合</span><br><span class="line">        └── variable.js       # 变量</span><br></pre></td></tr></table></figure>
<h2 id="base-scss"><a href="#base-scss" class="headerlink" title="base.scss"></a>base.scss</h2><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">charset</span> <span class="string">"utf-8"</span>;</span><br><span class="line">@<span class="keyword">import</span> <span class="string">'variable'</span>;</span><br><span class="line">@<span class="keyword">import</span> <span class="string">'fun'</span>;</span><br><span class="line">@<span class="keyword">import</span> <span class="string">'mixin'</span>;</span><br><span class="line">@<span class="keyword">import</span> <span class="string">'common'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*基础样式*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span>,</span><br><span class="line"><span class="selector-id">#app</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: Arial, <span class="string">'Microsoft YaHei'</span>, <span class="string">'微软雅黑'</span>, Verdana, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span>,</span><br><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">* &gt; <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">max-height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin-left</span>: auto;</span><br><span class="line">  <span class="attribute">margin-right</span>: auto;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">padding-right</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">2.55555556</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  -webkit-tap-highlight-<span class="attribute">color</span>: transparent;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#000000</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f8f8f8</span>;</span><br><span class="line"></span><br><span class="line">  &amp;::after &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">' '</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200%</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>);</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: scale(<span class="number">0.5</span>);</span><br><span class="line">    <span class="attribute">transform</span>: scale(<span class="number">0.5</span>);</span><br><span class="line">    -webkit-<span class="attribute">transform-origin</span>: <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">transform-origin</span>: <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//页面切换动画</span></span><br><span class="line"><span class="selector-class">.slide</span> &#123;</span><br><span class="line">  &amp;-enter,</span><br><span class="line">  &amp;-leave-to &#123;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: translate(<span class="number">100%</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="attribute">transform</span>: translate(<span class="number">100%</span>, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &amp;-enter-active,</span><br><span class="line">  &amp;-leave-active &#123;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">0.5s</span> cubic-bezier(<span class="number">0.55</span>, <span class="number">0</span>, <span class="number">0.1</span>, <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &amp;-enter-to,</span><br><span class="line">  &amp;-leave &#123;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: translate(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="attribute">transform</span>: translate(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="common-scss"><a href="#common-scss" class="headerlink" title="common.scss"></a>common.scss</h2><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">charset</span> <span class="string">"UTF-8"</span>;</span><br><span class="line">@<span class="keyword">import</span> <span class="string">'fun'</span>;</span><br><span class="line">@<span class="keyword">import</span> <span class="string">'mixin'</span>;</span><br><span class="line">@<span class="keyword">import</span> <span class="string">'variable'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*通用样式*/</span></span><br><span class="line"></span><br><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clear</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">clear</span>: both <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">float</span>: none <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">  zoom: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clearfix</span>:after &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="fun-scss"><a href="#fun-scss" class="headerlink" title="fun.scss"></a>fun.scss</h2><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">charset</span> <span class="string">"UTF-8"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*函数*/</span></span><br><span class="line"></span><br><span class="line">@function rem(<span class="variable">$pixels</span>) &#123;</span><br><span class="line">  @return <span class="variable">$pixels</span> / 100px * 1rem;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="mixin-scss"><a href="#mixin-scss" class="headerlink" title="mixin.scss"></a>mixin.scss</h2><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">charset</span> <span class="string">"UTF-8"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*混合*/</span></span><br><span class="line"></span><br><span class="line">@<span class="keyword">mixin</span> fullpage &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="variable-scss"><a href="#variable-scss" class="headerlink" title="variable.scss"></a>variable.scss</h2><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">charset</span> <span class="string">"UTF-8"</span>;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">import</span> <span class="string">'fun'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*变量*/</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$headerHeight</span>: rem(<span class="number">50px</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>demo 地址</strong>：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL01yTGVvL3dlZGl2ZQ==" title="https://github.com/MrLeo/wedive">https://github.com/MrLeo/wedive<i class="fa fa-external-link"></i></span></p>
</blockquote>
<h1 id="查缺补漏"><a href="#查缺补漏" class="headerlink" title="查缺补漏"></a>查缺补漏</h1><h3 id="我用了-axios-为什么-IE-浏览器不识别-IE9"><a href="#我用了-axios-为什么-IE-浏览器不识别-IE9" class="headerlink" title="我用了 axios , 为什么 IE 浏览器不识别(IE9+)"></a>我用了 <code>axios</code> , 为什么 IE 浏览器不识别(IE9+)</h3><p>那是因为 IE 整个家族都不支持 promise, 解决方案:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install es6-promise</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在 main.js 引入即可</span></span><br><span class="line"><span class="comment">// ES6的polyfill</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'es6-promise'</span>).polyfill()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>前端</tag>
        <tag>vue</tag>
        <tag>vue-cli</tag>
      </tags>
  </entry>
  <entry>
    <title>动态脚本加载</title>
    <url>/posts/f72281e3.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><a id="more"></a>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">remoteLoad</span> (<span class="params">url, hasCallback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> createScript(url)</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 创建script</span></span><br><span class="line"><span class="comment">   * @param url</span></span><br><span class="line"><span class="comment">   * @returns &#123;Promise&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">createScript</span> (<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> scriptElement = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>)</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(scriptElement)</span><br><span class="line">    <span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      scriptElement.addEventListener(<span class="string">'load'</span>, e =&gt; &#123;</span><br><span class="line">        removeScript(scriptElement)</span><br><span class="line">        <span class="keyword">if</span> (!hasCallback) &#123;</span><br><span class="line">          resolve(e)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">      scriptElement.addEventListener(<span class="string">'error'</span>, e =&gt; &#123;</span><br><span class="line">        removeScript(scriptElement)</span><br><span class="line">        reject(e)</span><br><span class="line">      &#125;, <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (hasCallback) &#123;</span><br><span class="line">        <span class="built_in">window</span>.____callback____ = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          resolve()</span><br><span class="line">          <span class="built_in">window</span>.____callback____ = <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (hasCallback) &#123;</span><br><span class="line">      url += <span class="string">'&amp;callback=____callback____'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    scriptElement.src = url</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> promise</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 移除script标签</span></span><br><span class="line"><span class="comment">   * @param scriptElement script dom</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">removeScript</span> (<span class="params">scriptElement</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.body.removeChild(scriptElement)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>代码片段</category>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>代码片段</tag>
        <tag>javascript</tag>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title>axios</title>
    <url>/posts/a09486d2.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><ul>
<li>在项目开发中<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2F4aW9zL2F4aW9z" title="https://github.com/axios/axios">ajax<i class="fa fa-external-link"></i></span>请求是必不可缺少</li>
<li>一部分<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2F4aW9zL2F4aW9z" title="https://github.com/axios/axios">ajax<i class="fa fa-external-link"></i></span>请求不需要 loading 或则请求时间少于多少是不显示 loading</li>
<li>项目中对请求的同一化处理（错误处理，返回数据格式化处理，loading 处理，token 处理）</li>
<li>配置基于个人 vue 项目进行配置，已加载 vux 相关组件，会进行一些依赖的 import（可以按需配置）</li>
</ul>
<a id="more"></a>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="comment">//项目的一些环境配置参数，读取host</span></span><br><span class="line"><span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">'@/config'</span></span><br><span class="line"><span class="comment">//vuex状态管理，这里主要进行对全局loading的控制</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'@/store'</span></span><br><span class="line"><span class="comment">//vue-router对相应状态码的页面操作（router实例）</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'@/router'</span></span><br><span class="line"><span class="comment">//console对应封装</span></span><br><span class="line"><span class="keyword">import</span> &#123; log &#125; <span class="keyword">from</span> <span class="string">'@/utils'</span></span><br></pre></td></tr></table></figure>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>对于 axios 的封装中我们定义几个参数进行申明</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 加载最小时间</span></span><br><span class="line"><span class="keyword">const</span> MINI_TIME = <span class="number">300</span></span><br><span class="line"><span class="comment">// 超时时间（超时时间）</span></span><br><span class="line"><span class="keyword">let</span> TIME_OUT_MAX = <span class="number">5000</span></span><br><span class="line"><span class="comment">// 环境value</span></span><br><span class="line"><span class="keyword">let</span> _env = process.env.NODE_ENV</span><br><span class="line"><span class="comment">// 请求接口host</span></span><br><span class="line"><span class="keyword">let</span> _apiHost = config.api</span><br><span class="line"><span class="comment">// 请求组（判断当前请求数）</span></span><br><span class="line"><span class="keyword">let</span> _requests = []</span><br></pre></td></tr></table></figure>
<p>一般一个项目中的根 host 和 Content-Type 都是统一的，这里对 axios 进行统一的配置（如果这个后端需要 formData 格式的表单即 <code>content-type=&#39;application/x-www-form-urlencoded;charset=utf-8&#39;</code> 数据，需要对请求数据进行表单序列化，比较快的方式就是引入 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xqaGFyYi9xcw==" title="https://github.com/ljharb/qs">qs<i class="fa fa-external-link"></i></span> 库 <code>qs.stringify</code> 进行处理后传输）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.defaults.headers.common[<span class="string">'Content-Type'</span>] = <span class="string">'application/json'</span></span><br><span class="line">axios.defaults.baseURL = _apiHost</span><br></pre></td></tr></table></figure>
<p>一般情况下项目中同一时刻都会有不止一个请求在进行（还没有返回），要判断当前是否还存在进行中的 ajax，就需要对_requests 这个数组进行维护；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加请求，显示loading</span></span><br><span class="line"><span class="comment"> * @param &#123;请求配置&#125; config</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pushRequest</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">  log(<span class="string">`<span class="subst">$&#123;config.url&#125;</span>--begin`</span>)</span><br><span class="line">  _requests.push(config)</span><br><span class="line">  Vue.$vux.loading.show(&#123;</span><br><span class="line">    text: <span class="string">'Loading'</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  store.dispatch(<span class="string">'loading'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 移除请求，无请求时关闭loading</span></span><br><span class="line"><span class="comment"> * @param &#123;请求配置&#125; config</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">popRequest</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">  log(<span class="string">`<span class="subst">$&#123;config.url&#125;</span>--end`</span>)</span><br><span class="line">  <span class="keyword">let</span> _index = _requests.findIndex(<span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> r === config</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">if</span> (_index &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">    _requests.splice(_index, <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!_requests.length) &#123;</span><br><span class="line">    Vue.$vux.loading.hide(<span class="number">0</span>)</span><br><span class="line">    store.dispatch(<span class="string">'loading'</span>, <span class="literal">false</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接下来对 axios 基于上面的准备进行处理</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 请求地址，请求数据，是否静默，请求方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (url, data = &#123;&#125;, isSilence = <span class="literal">false</span>, method = <span class="string">'POST'</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> _opts = &#123; method, url &#125;</span><br><span class="line">  <span class="comment">//通用数据的合并（token）</span></span><br><span class="line">  <span class="keyword">let</span> _data = <span class="built_in">Object</span>.assign(&#123;&#125;, data, &#123; <span class="attr">token</span>: store.getters.token &#125;)</span><br><span class="line">  <span class="keyword">const</span> _query = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> _key <span class="keyword">in</span> _data) &#123;</span><br><span class="line">    <span class="keyword">if</span> (_data.hasOwnProperty(_key) &amp;&amp; _data[_key] !== <span class="string">''</span>) &#123;</span><br><span class="line">      _query[_key] = _data[_key]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//axios实例请求定时器ID</span></span><br><span class="line">  <span class="keyword">let</span> _timer = <span class="literal">null</span></span><br><span class="line">  <span class="comment">//判断请求类型</span></span><br><span class="line">  <span class="keyword">if</span> (method.toLocaleUpperCase() === <span class="string">'POST'</span>) &#123;</span><br><span class="line">    _opts.data = _query</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    _opts.params = _query</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//返回一个promise</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//实例化axios</span></span><br><span class="line">    <span class="keyword">const</span> _instance = axios.create(&#123;</span><br><span class="line">      timeout: TIME_OUT_MAX</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//定义请求的唯一标识</span></span><br><span class="line">    <span class="keyword">let</span> _random = &#123; <span class="attr">stamp</span>: <span class="built_in">Date</span>.now(), <span class="attr">url</span>: <span class="string">`<span class="subst">$&#123;_apiHost + url&#125;</span>`</span> &#125;</span><br><span class="line">    <span class="comment">//判断是否静默（静默的话就不加入请求标识队列，不是则申明此请求实例的定时器）</span></span><br><span class="line">    <span class="keyword">if</span> (!isSilence) &#123;</span><br><span class="line">      _timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        pushRequest(_random)</span><br><span class="line">      &#125;, MINI_TIME)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//axios实例发送当前请求</span></span><br><span class="line">    <span class="comment">//请求完成：1、取消当前请求的定时器；2、在当前请求标识队列中移除当前标识；</span></span><br><span class="line">    <span class="number">3</span>、成功的话返回统一处理后的数据，失败则对状态码进行判断</span><br><span class="line">    _instance(_opts)</span><br><span class="line">      .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> responseData = res.data</span><br><span class="line">        clearTimeout(_timer)</span><br><span class="line">        popRequest(_random)</span><br><span class="line">        resolve(res.data)</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> _response = res.response</span><br><span class="line">        <span class="keyword">let</span> _message = <span class="literal">null</span></span><br><span class="line">        clearTimeout(_timer)</span><br><span class="line">        popRequest(_random)</span><br><span class="line">        <span class="keyword">switch</span> (_response.status) &#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="number">404</span>:</span><br><span class="line">            _message = <span class="string">'404,错误请求'</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">          <span class="keyword">case</span> <span class="number">401</span>:</span><br><span class="line">            router.push(&#123; <span class="attr">path</span>: <span class="string">'/login'</span>, <span class="attr">query</span>: &#123; <span class="attr">redirect</span>: router.currentRoute.fullPath &#125; &#125;)</span><br><span class="line">            _message = <span class="string">'未授权'</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">          <span class="keyword">case</span> <span class="number">403</span>:</span><br><span class="line">            _message = <span class="string">'禁止访问'</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">          <span class="keyword">case</span> <span class="number">408</span>:</span><br><span class="line">            _message = <span class="string">'请求超时'</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">          <span class="keyword">case</span> <span class="number">500</span>:</span><br><span class="line">            _message = <span class="string">'服务器内部错误'</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">          <span class="keyword">case</span> <span class="number">501</span>:</span><br><span class="line">            _message = <span class="string">'功能未实现'</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">          <span class="keyword">case</span> <span class="number">503</span>:</span><br><span class="line">            _message = <span class="string">'服务不可用'</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">          <span class="keyword">case</span> <span class="number">504</span>:</span><br><span class="line">            _message = <span class="string">'网关错误'</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">          <span class="keyword">default</span>:</span><br><span class="line">            _message = <span class="string">'未知错误'</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!isSilence) &#123;</span><br><span class="line">          Vue.$vux.toast.show(&#123;</span><br><span class="line">            text: _response.data &amp;&amp; _response.data.error ? _response.data.error : _message,</span><br><span class="line">            type: <span class="string">'warn'</span>,</span><br><span class="line">            width: <span class="string">'10em'</span></span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        reject(res)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL01yTGVvL3Z1ZS0yLjAtdGVtcGxhdGUvYmxvYi9tYXN0ZXIvc3JjL3V0aWxzL2ZldGNoLmpz" title="https://github.com/MrLeo/vue-2.0-template/blob/master/src/utils/fetch.js">完整代码<i class="fa fa-external-link"></i></span></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>前端</tag>
        <tag>开发</tag>
        <tag>vue</tag>
        <tag>http</tag>
        <tag>axios</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-cli项目下的配置简析</title>
    <url>/posts/dd966ac9.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><h3 id="安装命令行工具（CLI）"><a href="#安装命令行工具（CLI）" class="headerlink" title="安装命令行工具（CLI）"></a>安装命令行工具（CLI）</h3><p>Vue.js 提供了很人性化的命令行工具，在全局安装了依赖以后，便能轻松的在文件系统任意角落利用脚手架创建并启动一个配备了带热重载、保存时静态检查以及可用于生产环境的构建配置的项目，具体命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 全局安装 vue-cli</span></span><br><span class="line">$ npm install --global vue-cli</span><br><span class="line"><span class="comment"># 创建一个基于 webpack 模板的新项目</span></span><br><span class="line">$ vue init webpack my-project</span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">$ <span class="built_in">cd</span> my-project</span><br><span class="line">$ npm install</span><br><span class="line">$ npm run dev</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="查看安装结果"><a href="#查看安装结果" class="headerlink" title="查看安装结果"></a>查看安装结果</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vue -V</span><br><span class="line">2.8.1</span><br></pre></td></tr></table></figure>
<h2 id="项目组成"><a href="#项目组成" class="headerlink" title="项目组成"></a>项目组成</h2><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><pre><code>├── build
│   ├── build.js
│   ├── check-versions.js
│   ├── dev-client.js
│   ├── dev-server.js
│   ├── utils.js
│   ├── vue-loader.conf.js
│   ├── webpack.base.conf.js
│   ├── webpack.dev.conf.js
│   ├── webpack.test.conf.js
│   └── webpack.prod.conf.js
├── config
│   ├── dev.env.js
│   ├── index.js
│   ├── test.env.js
│   └── prod.env.js
├── node_modules
├── src
│   ├── App.vue
│   ├── assets
│   │   └── img.png
│   ├── components
│   │   └── Hello.vue
│   └── main.js
├── static
├── test
│   └── unit
│   │   ├─── coverage
│   │   ├─── specs
│   │   ├─── .eslintrc
│   │   ├─── index.js
│   │   └── karma.conf.js
│   └── e2e
├── .babelrc
├── .editorconfig
├── .gitignore
├── .postcssrc.js
├── index.html
├── package.json
└── README.md
</code></pre><h2 id="build"><a href="#build" class="headerlink" title="/build"></a>/build</h2><h3 id="build-js"><a href="#build-js" class="headerlink" title="build.js"></a>build.js</h3><p>在执行 <code>npm run build</code> 的时候，执行的 js 脚本，主要是加载了生产环境下的 webpack 配置，并根据 webpack 配置重新构建出生产环境下使用的压缩项目，最终资源文件会生成到根目录下 <code>dist</code> 文件中。</p>
<h3 id="check-version-js"><a href="#check-version-js" class="headerlink" title="check-version.js"></a>check-version.js</h3><p>在 build 之前的一个 check 步骤，作为构建生产项目包之前的一个校验处理。</p>
<h3 id="dev-client-js"><a href="#dev-client-js" class="headerlink" title="dev-client.js"></a>dev-client.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'eventsource-polyfill'</span>)</span><br><span class="line"><span class="keyword">var</span> hotClient = <span class="built_in">require</span>(<span class="string">'webpack-hot-middleware/client?noInfo=true&amp;reload=true'</span>)</span><br><span class="line"></span><br><span class="line">hotClient.subscribe(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (event.action === <span class="string">'reload'</span>) &#123;</span><br><span class="line">    <span class="built_in">window</span>.location.reload()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>加载了热重载插件，并在监听到事件的 <code>action</code> 变化为 <code>reload</code> 的时候，实现网页 reload。</p>
<h3 id="dev-server-js"><a href="#dev-server-js" class="headerlink" title="dev-server.js"></a>dev-server.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line">...</span><br><span class="line"><span class="keyword">var</span> hotMiddleware = <span class="built_in">require</span>(<span class="string">'webpack-hot-middleware'</span>)(compiler, &#123;</span><br><span class="line">  log: <span class="literal">false</span>,</span><br><span class="line">  heartbeat: <span class="number">2000</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>利用了 express 实现了一个本地开发的服务，同时配置了热重载功能以配合本地开发浏览器端自动 reload 刷新。</p>
<h3 id="utils-js"><a href="#utils-js" class="headerlink" title="utils.js"></a>utils.js</h3><p><code>utils.js</code>主要是对外给响应的 webpack 配置使用的工具方法，包含了对外提供静态资源 asset 路径：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">exports.assetsPath = <span class="function"><span class="keyword">function</span>(<span class="params">_path</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> assetsSubDirectory = process.env.NODE_ENV === <span class="string">'production'</span> ? config.build.assetsSubDirectory : config.dev.assetsSubDirectory</span><br><span class="line">  <span class="keyword">return</span> path.posix.join(assetsSubDirectory, _path)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对外提供各种 loaders 的配置，如 cssLoaders, css/postcss/less/sass/scss/stylus/styl 等预处理或后处理器配置等：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">  css: generateLoaders(),</span><br><span class="line">  postcss: generateLoaders(),</span><br><span class="line">  less: generateLoaders(<span class="string">'less'</span>),</span><br><span class="line">  sass: generateLoaders(<span class="string">'sass'</span>, &#123; <span class="attr">indentedSyntax</span>: <span class="literal">true</span> &#125;),</span><br><span class="line">  scss: generateLoaders(<span class="string">'sass'</span>),</span><br><span class="line">  stylus: generateLoaders(<span class="string">'stylus'</span>),</span><br><span class="line">  styl: generateLoaders(<span class="string">'stylus'</span>),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="vue-loader-conf-js"><a href="#vue-loader-conf-js" class="headerlink" title="vue-loader.conf.js"></a>vue-loader.conf.js</h3><p>顾名思义，该文件就是为 vue 单文件所用的配置，主要是一些单文件内使用 css 预处理的配置，还有一些文件资源的转化配置项。</p>
<h3 id="webpack-base-conf-js"><a href="#webpack-base-conf-js" class="headerlink" title="webpack.base.conf.js"></a>webpack.base.conf.js</h3><p>webpack 的通用配置文件，即无论环境是 <code>test</code>,<code>develop</code>还是 <code>production</code>，都需要加载的 webpack 配置，该文件很重要，也时长需要修改配置：</p>
<blockquote>
<p>入口文件 entry</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">entry: &#123;</span><br><span class="line">  app: <span class="string">'./src/main.js'</span>,</span><br><span class="line">  utils:[<span class="string">'./src/assets/libs/jquery.js'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>默认只有 app 为入口的<code>main.js</code>，utils 为自定义入口，通过配置多个文件入口，可以减少 build 后的文件大小，同时也可以配合 <code>CommonsChunkPlugin</code>插件进行项目分包。</p>
<blockquote>
<p>输出文件 output</p>
</blockquote>
<p>config 的配置在 config/index.js 文件中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">  path: config.build.assetsRoot, <span class="comment">//导出目录的绝对路径</span></span><br><span class="line">  filename: <span class="string">'[name].js'</span>, <span class="comment">//导出文件的文件名</span></span><br><span class="line">  publicPath: process.env.NODE_ENV === <span class="string">'production'</span>? config.build.assetsPublicPath : config.dev.assetsPublicPath <span class="comment">//生产模式或开发模式下html、js等文件内部引用的公共路径</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>文件解析 resolve</p>
</blockquote>
<p>主要设置模块如何被解析。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">  extensions: [<span class="string">'.js'</span>, <span class="string">'.vue'</span>, <span class="string">'.json'</span>], <span class="comment">//自动解析确定的拓展名,使导入模块时不带拓展名</span></span><br><span class="line">  alias: &#123;   <span class="comment">// 创建import或require引入时，文件使用的别名</span></span><br><span class="line">    <span class="string">'vue$'</span>: <span class="string">'vue/dist/vue.esm.js'</span>,</span><br><span class="line">    <span class="string">'@'</span>: resolve(<span class="string">'src'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中默认定义了<code>vue$</code>为 <code>vue.esm.js</code>文件的别名， <code>@</code>为 <code>/src</code>目录的别名，通过 <code>@/xxx.js</code> 或者 <code>@/xxx.vue</code>可以快速引入文件，注意 vue 文件内只有.js 和.vue 文件可以使用@去寻址，scss 或者 less 等文件是不被允许的使用<code>@</code>去找寻文件的。</p>
<blockquote>
<p>模块解析机制 module</p>
</blockquote>
<p>该模块主要用于定义不同文件后缀的文件，应该使用何种 loaders（加载器）进行加载解析，与 webpack 1.x 不同的是，原来的 <code>loaders</code> 被替换为 <code>rules</code>;这里需要注意，默认的 vue-cli 已经为你配备了<code>.vue</code>,<code>.js</code>,<code>img类</code>,<code>媒体类</code>,<code>字体类</code>等的文件的解析，同时，<code>.vue</code>组件中如需用到的预处理语言，则需要在 <code>&lt;style&gt;</code>标签上增加 <code>lang</code>属性即可，如</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"scss"</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line">        body&#123;</span><br><span class="line"><span class="css">          <span class="selector-tag">background-color</span>:<span class="selector-id">#FFF</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="webpack-dev-conf-js"><a href="#webpack-dev-conf-js" class="headerlink" title="webpack.dev.conf.js"></a>webpack.dev.conf.js</h3><blockquote>
<p>通过 merge 方法合并 webpack.base.conf.js 基础配置</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>)</span><br><span class="line"><span class="keyword">var</span> baseWebpackConfig = <span class="built_in">require</span>(<span class="string">'./webpack.base.conf'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = merge(baseWebpackConfig, &#123;&#125;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>模块配置</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  <span class="comment">//通过传入一些配置来获取rules配置，此处传入了sourceMap: false,表示不生成sourceMap</span></span><br><span class="line">  rules: utils.styleLoaders(&#123; <span class="attr">sourceMap</span>: config.dev.cssSourceMap &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里引用了刚才 utils.js 中 styleLoaders 方法，自动生成的配置如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">exports.styleLoaders = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//定义输出的数组</span></span><br><span class="line">  <span class="keyword">var</span> output = []</span><br><span class="line">  <span class="comment">// 调用cssLoaders方法返回各类型的样式对象(css: loader)</span></span><br><span class="line">  <span class="keyword">var</span> loaders = exports.cssLoaders(options)</span><br><span class="line">  <span class="comment">//循环遍历loaders</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> extension <span class="keyword">in</span> loaders) &#123;</span><br><span class="line">    <span class="comment">//根据遍历获得的key(extension)来得到value(loader)</span></span><br><span class="line">    <span class="keyword">var</span> loader = loaders[extension]</span><br><span class="line">    output.push(&#123;</span><br><span class="line">      <span class="comment">// 通过正则匹配判断各类型的样式文件，并生成test和对应loaders</span></span><br><span class="line">      test: <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'\\.'</span> + extension + <span class="string">'$'</span>),</span><br><span class="line">      use: loader,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> output</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的代码中调用了 exports.cssLoaders(options),主要用于对各类 css 预处理的 loaders 实现,具体实现如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">exports.cssLoaders = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  options = options || &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> cssLoader = &#123;</span><br><span class="line">    loader: <span class="string">'css-loader'</span>,</span><br><span class="line">    options: &#123;</span><br><span class="line">      <span class="comment">//生成环境下压缩文件</span></span><br><span class="line">      minimize: process.env.NODE_ENV === <span class="string">'production'</span>,</span><br><span class="line">      <span class="comment">//根据参数是否生成sourceMap文件</span></span><br><span class="line">      sourceMap: options.sourceMap,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">generateLoaders</span>(<span class="params">loader, loaderOptions</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 预置css-loader</span></span><br><span class="line">    <span class="keyword">var</span> loaders = [cssLoader]</span><br><span class="line">    <span class="comment">// 如果参数loader存在</span></span><br><span class="line">    <span class="keyword">if</span> (loader) &#123;</span><br><span class="line">      <span class="comment">//如果配置的预处理需要，则push一个进入loaders数组</span></span><br><span class="line">      loaders.push(&#123;</span><br><span class="line">        loader: loader + <span class="string">'-loader'</span>,</span><br><span class="line">        options: <span class="built_in">Object</span>.assign(&#123;&#125;, loaderOptions, &#123;</span><br><span class="line">          sourceMap: options.sourceMap,</span><br><span class="line">        &#125;),</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果传入的options存在extract且为true</span></span><br><span class="line">    <span class="keyword">if</span> (options.extract) &#123;</span><br><span class="line">      <span class="comment">//通过使用ExtractTextPlugin插件分离js中引入的css文件</span></span><br><span class="line">      <span class="keyword">return</span> ExtractTextPlugin.extract(&#123;</span><br><span class="line">        use: loaders,</span><br><span class="line">        <span class="comment">//没有被提取分离的使用vue-style-loader加载</span></span><br><span class="line">        fallback: <span class="string">'vue-style-loader'</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//如果没有传入的options存在extract或为false时，统一使用vue-style-loader处理</span></span><br><span class="line">      <span class="keyword">return</span> [<span class="string">'vue-style-loader'</span>].concat(loaders)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">//返回css类型对应的loader组成的对象 generateLoaders()来生成loader</span></span><br><span class="line">    css: generateLoaders(),</span><br><span class="line">    postcss: generateLoaders(),</span><br><span class="line">    less: generateLoaders(<span class="string">'less'</span>),</span><br><span class="line">    sass: generateLoaders(<span class="string">'sass'</span>, &#123; <span class="attr">indentedSyntax</span>: <span class="literal">true</span> &#125;),</span><br><span class="line">    scss: generateLoaders(<span class="string">'sass'</span>),</span><br><span class="line">    stylus: generateLoaders(<span class="string">'stylus'</span>),</span><br><span class="line">    styl: generateLoaders(<span class="string">'stylus'</span>),</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>插件配置</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">  <span class="comment">// 编译时配置的全局变量</span></span><br><span class="line">  <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">    <span class="comment">//当前环境为开发环境</span></span><br><span class="line">    <span class="string">'process.env'</span>: config.dev.env,</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="comment">//热重载插件</span></span><br><span class="line">  <span class="keyword">new</span> webpack.HotModuleReplacementPlugin(),</span><br><span class="line">  <span class="comment">//不触发错误,即编译后运行的包正常运行</span></span><br><span class="line">  <span class="keyword">new</span> webpack.NoEmitOnErrorPlugin(),</span><br><span class="line">  <span class="comment">//自动生成html文件</span></span><br><span class="line">  <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">    filename: <span class="string">'index.html'</span>, <span class="comment">//生成的文件名</span></span><br><span class="line">    template: <span class="string">'index.html'</span>, <span class="comment">//模板</span></span><br><span class="line">    inject: <span class="literal">true</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="comment">//友好的错误提示</span></span><br><span class="line">  <span class="keyword">new</span> FriendlyErrorsPlugin(),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h3 id="webpack-prod-conf-js"><a href="#webpack-prod-conf-js" class="headerlink" title="webpack.prod.conf.js"></a>webpack.prod.conf.js</h3><p>该文件是生产环境打包用到的配置文件，同样使用 merge 的方式合并了基础配置，形成了生产要用的配置：</p>
<blockquote>
<p>判断环境</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断环境，如果是testing的话，则加载test.env</span></span><br><span class="line"><span class="keyword">var</span> env = process.env.NODE_ENV === <span class="string">'testing'</span> ? <span class="built_in">require</span>(<span class="string">'../config/test.env'</span>) : config.build.env</span><br></pre></td></tr></table></figure>
<blockquote>
<p>加载样式处理器</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  <span class="comment">//同样使用了utils.styleLoaders的方法处理，这里不赘述</span></span><br><span class="line">    rules: utils.styleLoaders(&#123;</span><br><span class="line">      sourceMap: config.build.productionSourceMap,</span><br><span class="line">      extract: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//通过判断配置值，判断是否生产source-map</span></span><br><span class="line">  devtool: config.build.productionSourceMap ? <span class="string">'#source-map'</span> : <span class="literal">false</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>输出文件</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">  <span class="comment">//配置的生产资源路径</span></span><br><span class="line">  path: config.build.assetsRoot,</span><br><span class="line">  <span class="comment">//生成的文件名，一般会生成入口名称.[hash].js，如app.7d0bcfcc47ab773ebe20834b27a0927a.js</span></span><br><span class="line">  filename: utils.assetsPath(<span class="string">'js/[name].[chunkhash].js'</span>),</span><br><span class="line">  <span class="comment">//生成的异步文件块，一般是分配id.[hash].js，如0.app.7d0bcfcc47ab773ebe20834b27a0927a.js</span></span><br><span class="line">  chunkFilename: utils.assetsPath(<span class="string">'js/[id].[chunkhash].js'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意，这里的异步文件块，系统会根据自己在 <code>router</code> 下 <code>index.js</code> 当中引入的异步组件自动生成，所以我们无需重命名这部分的文件，否则容易导致文件索引出错，出现 404 错误。</p>
<blockquote>
<p>插件</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这里定义全局环境为生产</span></span><br><span class="line"><span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">    <span class="string">'process.env'</span>: env</span><br><span class="line">  &#125;),</span><br><span class="line"><span class="comment">//js压缩插件</span></span><br><span class="line"><span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class="line">  compress: &#123;</span><br><span class="line">    <span class="comment">//不显示警告</span></span><br><span class="line">    warnings: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//生产source-map</span></span><br><span class="line">  sourceMap: <span class="literal">true</span></span><br><span class="line">&#125;),</span><br><span class="line"><span class="comment">//在css文件单独分离出来</span></span><br><span class="line"><span class="keyword">new</span> ExtractTextPlugin(&#123;</span><br><span class="line">    <span class="comment">//生成的文件名，一般会生成入口名称.[hash].css，如app.7d0bcfcc47ab773ebe20834b27a0927a.css</span></span><br><span class="line">    filename: utils.assetsPath(<span class="string">'css/[name].[contenthash].css'</span>)</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="comment">//css配置插件，可以提取并压缩css文件</span></span><br><span class="line"><span class="keyword">new</span> OptimizeCSSPlugin(&#123;</span><br><span class="line">    cssProcessorOptions: &#123;</span><br><span class="line">      safe: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;),</span><br><span class="line"><span class="comment">//CommonsChunkPlugin 公共块提取插件</span></span><br><span class="line"> <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">   <span class="comment">//配置生成的文件名称：vendor</span></span><br><span class="line">    name: <span class="string">'vendor'</span>,</span><br><span class="line">    minChunks: <span class="function"><span class="keyword">function</span> (<span class="params">module, count</span>) </span>&#123;</span><br><span class="line">     <span class="comment">//这里是默认的使用方法，将node_module引用到打包在一起</span></span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="comment">//正则匹配</span></span><br><span class="line">        <span class="built_in">module</span>.resource &amp;&amp;</span><br><span class="line">        /\.js$/.test(<span class="built_in">module</span>.resource) &amp;&amp;</span><br><span class="line">        <span class="built_in">module</span>.resource.indexOf(</span><br><span class="line">          path.join(__dirname, <span class="string">'../node_modules'</span>)</span><br><span class="line">        ) === <span class="number">0</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;),</span><br></pre></td></tr></table></figure>
<p>注意，这里通过 <code>CommonsChunkPlugin</code> 插件将 vue, vuex 等包文件统一打在了名为:vendor 的 js 中，最后会生成一个类似叫 <code>vendor.7d0bcfcc47ab773ebe20834b27a0927a.js</code>,当然为了防止 app 打包的 hash 的每次变化，导致资源无法缓存，我们需要增加一个 <code>manifest</code>，去将运行时的代码单独编译到 manifest 文件，以防每次编译都导致 vendor.js 的 hash 改变：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">    name: <span class="string">'manifest'</span>,</span><br><span class="line">    chunks: [<span class="string">'vendor'</span>]</span><br><span class="line">  &#125;),</span><br></pre></td></tr></table></figure>
<p>有时候，我们需要将我们引入的第三发库 js，单独打包另外一个文件，假如叫 utils.js，我们同样可以使用<code>CommonsChunkPlugin</code> 进行处理：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">  names: [<span class="string">'utils'</span>],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>别忘了我们需要为它加入 manifest 处理，只需在已有的基础上简单修改：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">    name: <span class="string">'manifest'</span>,</span><br><span class="line">    chunks: [<span class="string">'vendor'</span>,<span class="string">'utils'</span>]</span><br><span class="line">  &#125;),</span><br></pre></td></tr></table></figure>
<p>当然，我们需要为其增加一个入口文件，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">entry: &#123;</span><br><span class="line">  app: <span class="string">'./src/main.js'</span>,</span><br><span class="line">  utils:[<span class="string">'./src/assets/libs/jquery.js'</span>] <span class="comment">//这里可以根据你自己需求增加其他三方库文件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>其他插件</p>
</blockquote>
<p>此外，还有其他的一些插件，如 <code>compression-webpack-plugin</code>,用于根据正则匹配进行压缩处理的； <code>webpack-bundle-analyzer</code>可以为你的包的尺寸优化等的，自己可以摸索一下。</p>
<h2 id="config"><a href="#config" class="headerlink" title="/config"></a>/config</h2><h3 id="环境变量定义"><a href="#环境变量定义" class="headerlink" title="环境变量定义"></a>环境变量定义</h3><p>该部分定义了生产，开发和测试的全局环境变量，以调整在不同环境下使用不同的 webpack 配置，通过定义 <code>NODE_ENV</code>变量：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>)</span><br><span class="line"><span class="keyword">var</span> prodEnv = <span class="built_in">require</span>(<span class="string">'./prod.env'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = merge(prodEnv, &#123;</span><br><span class="line">  NODE_ENV: <span class="string">'"development"'</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="node-modules"><a href="#node-modules" class="headerlink" title="/node_modules"></a>/node_modules</h2><h3 id="npm-安装的第三包"><a href="#npm-安装的第三包" class="headerlink" title="npm 安装的第三包"></a>npm 安装的第三包</h3><p>这里估计使用过 npm 的同学都不会陌生，这里放置的都是我们通过<code>npm install</code>方式安装的第三方工具类，可供我们通过 require 关键字快速引入。</p>
<h2 id="test"><a href="#test" class="headerlink" title="/test"></a>/test</h2><h3 id="unit"><a href="#unit" class="headerlink" title="unit"></a>unit</h3><p>该文件主要是对 vue-cli 建立的项目配备了 unit-test 的配套，可以让用户快速编写组件级别的单元测试，并通过在根目录下使用 <code>npm run unit</code>命令去进行代码的单元测试：</p>
<blockquote>
<p>index.js</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> testsContext = <span class="built_in">require</span>.context(<span class="string">'./specs'</span>, <span class="literal">true</span>, /\.spec$/)</span><br><span class="line">testsContext.keys().forEach(testsContext)</span><br></pre></td></tr></table></figure>
<p>通过 require 当前目录下 <code>specs</code> 中的用例文件，去进行.vue 单元测试</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> srcContext = <span class="built_in">require</span>.context(<span class="string">'../../src'</span>, <span class="literal">true</span>, /^\.\/(?!main(\.js)?$)/)</span><br><span class="line">srcContext.keys().forEach(srcContext)</span><br></pre></td></tr></table></figure>
<p>这里定义了读取的源文件目录，第一行通过正则的方式去读取<code>../../src</code>下，除了<code>main.js</code>以外的文件进行遍历，我么如果只需对局部的文件进行单元测试，我们可以把路径范围缩小 如只对 src 下的 components 进行单元测试：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> srcContext = <span class="built_in">require</span>.context(<span class="string">'../../src/components'</span>, <span class="literal">true</span>, /^\.\/(?!main(\.js)?$)/)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>karma.conf.js</p>
</blockquote>
<p>由于 vue-cli 配备的单元测试，使用了 karma.js，这里我们只需要使用默认的配置即可，一般不用更改。</p>
<blockquote>
<p>specs</p>
</blockquote>
<p>这里是测试用例当中的 <code>断言</code> 部分，通过编写 <code>*.spec.js</code>去对组件中的逻辑部分进行断言判断，达到单元测试的效果,下面是一个对组件实例化，并对组件中的视图文字进行断言的例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Hello <span class="keyword">from</span> <span class="string">'@/components/Hello'</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">'Hello.vue'</span>, () =&gt; &#123;</span><br><span class="line">  it(<span class="string">'should render correct contents'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> Constructor = Vue.extend(Hello)</span><br><span class="line">    <span class="keyword">const</span> vm = <span class="keyword">new</span> Constructor().$mount()</span><br><span class="line">    expect(vm.$el.querySelector(<span class="string">'.hello h1'</span>).textContent).to.equal(<span class="string">'Welcome to Your Vue.js App'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>coverage</p>
</blockquote>
<p>karma 的单元测试，同时提供了 <code>coverage Rate</code>即单元测试的覆盖率，会根据不同文件，从行数到函数的数量，描述你的单元测试是否完整，通过 <code>npm run unit</code>完成后，查看 <code>coverage\lcov-report\index.html</code>可以看到覆盖率结果：</p>
<p><img src="https://7ktvc3.com1.z0.glb.clouddn.com/vue_webpack_coverage.png" alt="简析vue-cli快速搭建项目下的配置"></p>
<h2 id="根目录"><a href="#根目录" class="headerlink" title="根目录"></a>根目录</h2><h3 id="babelrc"><a href="#babelrc" class="headerlink" title=".babelrc"></a>.babelrc</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"presets"</span>: [</span><br><span class="line">    [<span class="string">"env"</span>, &#123;</span><br><span class="line">      <span class="string">"modules"</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="string">"targets"</span>: &#123;</span><br><span class="line">        <span class="string">"browsers"</span>: [<span class="string">"&gt; 1%"</span>, <span class="string">"last 2 versions"</span>, <span class="string">"not ie &lt;= 8"</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">"stage-2"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"plugins"</span>: [<span class="string">"transform-runtime"</span>],</span><br><span class="line">  <span class="string">"env"</span>: &#123;</span><br><span class="line">    <span class="string">"test"</span>: &#123;</span><br><span class="line">      <span class="string">"presets"</span>: [<span class="string">"env"</span>, <span class="string">"stage-2"</span>],</span><br><span class="line">      <span class="string">"plugins"</span>: [<span class="string">"istanbul"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>制定了 babel 的配置，定义了加载的插件和测试运行时所需的插件 <code>istanbul</code></p>
<h3 id="editorconfig"><a href="#editorconfig" class="headerlink" title=".editorconfig"></a>.editorconfig</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">root = <span class="literal">true</span></span><br><span class="line">[*]</span><br><span class="line">charset = utf<span class="number">-8</span></span><br><span class="line">indent_style = space</span><br><span class="line">indent_size = <span class="number">2</span></span><br><span class="line">end_of_line = lf</span><br><span class="line">insert_final_newline = <span class="literal">true</span></span><br><span class="line">trim_trailing_whitespace = <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>定义了编辑格式：利用<code>utf-8</code>编码， 空格缩进方式 <code>space</code> , 行缩进 <code>两个字符</code> 还有 结尾插入新行，处理字符首尾空白字符。</p>
<h3 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h3><p>很熟悉的配置，即 git 仓库同步时需要忽略提交的文件，可以通过准确和正则的方式进行所需要忽略，不赘述。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">node_modules/</span><br><span class="line">dist/</span><br><span class="line">npm-debug.log*</span><br><span class="line">yarn-debug.log*</span><br><span class="line">yarn-error.log*</span><br><span class="line">test/unit/coverage</span><br><span class="line">test/e2e/reports</span><br><span class="line">selenium-debug.log</span><br><span class="line"></span><br><span class="line"># Editor directories and files</span><br><span class="line">.idea</span><br><span class="line">.vscode</span><br><span class="line">.settings</span><br><span class="line">.git</span><br><span class="line">.vs</span><br><span class="line">.suo</span><br><span class="line">.history</span><br><span class="line">.project</span><br><span class="line">*.ntvs*</span><br><span class="line">*.njsproj</span><br><span class="line">*.sln</span><br></pre></td></tr></table></figure>
<h3 id="postcssrc-js"><a href="#postcssrc-js" class="headerlink" title=".postcssrc.js"></a>.postcssrc.js</h3><p>新版的 webpack 只要配备了 postcss 的 loaders，都会检查根目录是否有该配置文件，通过导出 <code>plugins</code>，进行配置你所需要的，下面是我使用了 <code>autoprefixer</code> 和 <code>postcss-sprites</code>的配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: &#123;</span><br><span class="line">    <span class="comment">// to edit target browsers: use "browserslist" field in package.json</span></span><br><span class="line">    autoprefixer: &#123;&#125;,</span><br><span class="line">    <span class="string">'postcss-sprites'</span>: &#123;</span><br><span class="line">      <span class="comment">// stylesheetPath: './css',</span></span><br><span class="line">      spritePath: <span class="string">'./css/images/'</span>,</span><br><span class="line">      filterBy: <span class="function"><span class="keyword">function</span>(<span class="params">image</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Allow only png files</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="regexp">/\.png$/</span>.test(image.url)) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="built_in">Promise</span>.reject()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve()</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>uvoice<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"container"</span> <span class="attr">id</span>=<span class="string">"J_container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>html 模板，可以供 htmlPlugins 插件使用，后面编译好的脚本会自动 injected 到注释行内。</p>
<h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><p>估计用过 npm 的同学，也应该了解了，这个文件是用于记录和管理 npm 包的依赖和版本号，不赘述。</p>
<h3 id="README-md"><a href="#README-md" class="headerlink" title="README.md"></a>README.md</h3><p>文件如其名，就是阅读说明，你们可以在里面对项目的一些使用或者命令行进行描述，以作记录。</p>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>前端</tag>
        <tag>开发</tag>
        <tag>vue</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>node安装与卸载</title>
    <url>/posts/e24c0ec0.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="brew-安装"><a href="#brew-安装" class="headerlink" title="brew 安装"></a>brew 安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure>
<p>安装完成后按照提示执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew link --overwrite node</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="官网下载安装-https-nodejs-org"><a href="#官网下载安装-https-nodejs-org" class="headerlink" title="官网下载安装: https://nodejs.org/"></a>官网下载安装: <span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnL2VuLw==" title="https://nodejs.org/en/">https://nodejs.org/<i class="fa fa-external-link"></i></span></h2><h1 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h1><h2 id="brew-的安装方式"><a href="#brew-的安装方式" class="headerlink" title="brew 的安装方式"></a>brew 的安装方式</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew uninstall nodejs</span><br></pre></td></tr></table></figure>
<h2 id="官网下载-pkg-安装包的"><a href="#官网下载-pkg-安装包的" class="headerlink" title="官网下载 pkg 安装包的"></a>官网下载 pkg 安装包的</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo rm -rf /usr/<span class="built_in">local</span>/&#123;bin/&#123;node,npm&#125;,lib/node_modules/npm,lib/node,share/man/*/node.*&#125;</span><br></pre></td></tr></table></figure>
<p>最后运行以下代码:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo rm /usr/<span class="built_in">local</span>/bin/npm</span><br><span class="line">sudo rm /usr/<span class="built_in">local</span>/share/man/man1/node.1</span><br><span class="line">sudo rm /usr/<span class="built_in">local</span>/lib/dtrace/node.d</span><br><span class="line">sudo rm -rf ~/.npm</span><br><span class="line">sudo rm -rf ~/.node-gyp</span><br><span class="line">sudo rm /opt/<span class="built_in">local</span>/bin/node</span><br><span class="line">sudo rm /opt/<span class="built_in">local</span>/include/node</span><br><span class="line">sudo rm -rf /opt/<span class="built_in">local</span>/lib/node_modules</span><br></pre></td></tr></table></figure>
<h2 id="其它方式干净卸载"><a href="#其它方式干净卸载" class="headerlink" title="其它方式干净卸载"></a>其它方式干净卸载</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">lsbom -f -l -s -pf /var/db/receipts/org.nodejs.pkg.bom \</span><br><span class="line">| <span class="keyword">while</span> <span class="built_in">read</span> i; <span class="keyword">do</span></span><br><span class="line">  sudo rm /usr/<span class="built_in">local</span>/<span class="variable">$&#123;i&#125;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">sudo rm -rf /usr/<span class="built_in">local</span>/lib/node \</span><br><span class="line">     /usr/<span class="built_in">local</span>/lib/node_modules \</span><br><span class="line">     /var/db/receipts/org.nodejs.*</span><br></pre></td></tr></table></figure>
<p>保存为 <code>uninstallNodejs.sh</code>，然后在终端运行此文件 &lt;<span class="exturl" data-url="aHR0cHM6Ly93d3cudHVpY29vbC5jb20vYXJ0aWNsZXMvWnJlVUJy" title="https://www.tuicool.com/articles/ZreUBr">参考：Mac OSX 下卸载 Nodejs<i class="fa fa-external-link"></i></span>&gt;</p>
]]></content>
      <categories>
        <category>前端</category>
        <category>node</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>前端</tag>
        <tag>node</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>MacOS基础命令</title>
    <url>/posts/6f2ded1f.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><table>
<thead>
<tr>
<th>命令</th>
<th>举例</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>cd</td>
<td></td>
<td>切换目录  change directory</td>
</tr>
<tr>
<td></td>
<td>cd ~</td>
<td>切换到用户目录</td>
</tr>
<tr>
<td></td>
<td>cd ..</td>
<td>切换到上一级目录</td>
</tr>
<tr>
<td></td>
<td>cd  Desktop</td>
<td>切换到桌面目录  (前提是当前所在目录为用户目录)</td>
</tr>
<tr>
<td></td>
<td>cd  /Applications/</td>
<td>切换到应用目录</td>
</tr>
<tr>
<td>pwd</td>
<td></td>
<td>显示当前所在目录  print working directory</td>
</tr>
<tr>
<td></td>
<td>pwd</td>
<td>显示当前目录</td>
</tr>
<tr>
<td>ls</td>
<td></td>
<td>显示目录下的文件  list directory</td>
</tr>
<tr>
<td></td>
<td>ls</td>
<td>显示当前目录下的目录和文件名称</td>
</tr>
<tr>
<td></td>
<td>ls -l</td>
<td>显示当前目录下的目录和文件详细列表</td>
</tr>
<tr>
<td></td>
<td>ls -lh</td>
<td>显示当前目录下的目录和文件详细列表  并方便阅读</td>
</tr>
<tr>
<td></td>
<td>ls -lh  /Users</td>
<td>显示/Users下的所有目录和文件详细列表  并方便阅读</td>
</tr>
<tr>
<td></td>
<td>ls -G</td>
<td>显示当前目录下的目录和文件名称  并用颜色区分文件、目录、链接</td>
</tr>
<tr>
<td>mkdir</td>
<td></td>
<td>新建目录（新建文件夹）make  directories</td>
</tr>
<tr>
<td></td>
<td>mkdir  hello</td>
<td>在当前目录下创建名称为hello的目录</td>
</tr>
<tr>
<td></td>
<td>mkdir  Desktop/hello</td>
<td>在桌面创建hello目录  (前提是当前所在目录为用户目录)</td>
</tr>
<tr>
<td></td>
<td>mkdir -p  hello/kitty</td>
<td>新建一个hello，同时在hello目录里再新建一个kitty目录  -p代表递归建立目录</td>
</tr>
<tr>
<td>touch</td>
<td></td>
<td>用来新建文件（touch的作用是修改文件时间，如果文件不存在，则创建文件）</td>
</tr>
<tr>
<td></td>
<td>touch  a.txt</td>
<td>在当前目录下新建一个a.txt文件</td>
</tr>
<tr>
<td></td>
<td>touch  Desktop/a.docx</td>
<td>在桌面新建一个a.docx的文件  (前提是当前所在目录为用户目录)</td>
</tr>
<tr>
<td>open</td>
<td></td>
<td>打开文件或目录</td>
</tr>
<tr>
<td></td>
<td>open  a.txt</td>
<td>打开a.txt文件</td>
</tr>
<tr>
<td></td>
<td>open  safari.app</td>
<td>打开safari.app  (前提是当前所在目录为Applications)</td>
</tr>
<tr>
<td></td>
<td>open  ~/Downloads/</td>
<td>打开下载目录</td>
</tr>
<tr>
<td></td>
<td>open .</td>
<td>打开当前目录</td>
</tr>
<tr>
<td>mv</td>
<td></td>
<td>移动文件或目录（剪切）move</td>
</tr>
<tr>
<td></td>
<td>mv a.txt  ..</td>
<td>将当前目录下的a.txt文件移动到  上一级目录下</td>
</tr>
<tr>
<td></td>
<td>mv a.txt  Desktop/</td>
<td>将当前目录下的a.txt文件移动到桌面  (前提是当前所在目录为用户目录)</td>
</tr>
<tr>
<td></td>
<td>mv a.txt  b.txt</td>
<td>将文件a.txt  更名为 b.txt</td>
</tr>
<tr>
<td>cp</td>
<td></td>
<td>复制文件或目录  copy</td>
</tr>
<tr>
<td></td>
<td>cp a.txt  ~</td>
<td>将文件a.txt  复制到用户目录下</td>
</tr>
<tr>
<td></td>
<td>cp a.txt  ~/b.txt</td>
<td>将文件a.txt  复制到用户目录下 并改名为b.txt</td>
</tr>
<tr>
<td></td>
<td>cp -r  hello ..</td>
<td>将目录hello复制到上一级目录下  注意-r的使用 -r代表复制的对象为目录</td>
</tr>
<tr>
<td>rm</td>
<td></td>
<td>删除文件或者目录 remove (新手运行删除命令请格外小心)</td>
</tr>
<tr>
<td></td>
<td>rm a.txt</td>
<td>删除文件a.txt</td>
</tr>
<tr>
<td></td>
<td>rm -r  hello</td>
<td>删除目录hello</td>
</tr>
<tr>
<td></td>
<td>rm -rf hello</td>
<td></td>
</tr>
<tr>
<td>ln</td>
<td></td>
<td>给文件或者目录建立链接  links</td>
</tr>
<tr>
<td></td>
<td>ln -s  /Applications/QQ.app ~/Desktop/</td>
<td>给QQ建立软链接文件到桌面（相当于windows下的发送QQ的快捷方式到桌面）</td>
</tr>
<tr>
<td>man</td>
<td></td>
<td>查看命令手册  manual</td>
</tr>
<tr>
<td></td>
<td>man ls</td>
<td>查看ls命令的手册  (按空格翻页 按Q退出)</td>
</tr>
<tr>
<td></td>
<td>man touch</td>
<td>查看ls命令的手册</td>
</tr>
<tr>
<td>echo</td>
<td></td>
<td>输出命令</td>
</tr>
<tr>
<td></td>
<td>echo ‘ls’</td>
<td>输出字符串ls</td>
</tr>
<tr>
<td></td>
<td>echo <code>ls</code></td>
<td>输出ls命令执行结果</td>
</tr>
<tr>
<td></td>
<td>echo  $(ls)</td>
<td>输出ls命令执行结果</td>
</tr>
<tr>
<td></td>
<td>echo -e  “hello\n”</td>
<td>输出hello并换行  -e代表支持输出控制字符 包括\a警告音 \n换行  \t制表符 等</td>
</tr>
<tr>
<td>cat</td>
<td></td>
<td>输出文件内容</td>
</tr>
<tr>
<td></td>
<td>cat  a.txt</td>
<td>显示文件a.txt的所有内容</td>
</tr>
<tr>
<td></td>
<td>cat  -b a.txt</td>
<td>显示文件a.txt的所有内容  并显示行号</td>
</tr>
<tr>
<td>head</td>
<td></td>
<td>显示文件</td>
</tr>
<tr>
<td></td>
<td>head -n 5  a.txt</td>
<td>显示文件a.txt的前5行</td>
</tr>
<tr>
<td>chmod</td>
<td></td>
<td>修改文件权限  change file modes or Access Control Lists</td>
</tr>
<tr>
<td></td>
<td>chmod 755  a.sh</td>
<td>给a.sh文件赋予执行权限</td>
</tr>
<tr>
<td>sh</td>
<td></td>
<td>运行shell脚本</td>
</tr>
<tr>
<td></td>
<td>sh a.sh</td>
<td>运行脚本文件a.sh  （前提是当前目录下存在a.sh文件，并且文件有可执行权限）</td>
</tr>
<tr>
<td>find</td>
<td></td>
<td>查找命令</td>
</tr>
<tr>
<td></td>
<td>find  ~/Downloads/ -name a*</td>
<td>查找下载目录下的所有a开头的文件和目录</td>
</tr>
<tr>
<td></td>
<td>find  ~/Desktop/ -name a.txt</td>
<td>查找桌面名字叫做a.txt的文件</td>
</tr>
<tr>
<td></td>
<td>find  ~/Desktop/*</td>
<td>查找桌面所有文件和目录</td>
</tr>
<tr>
<td></td>
<td>find .  -name *.txt</td>
<td>查找当前目录下的txt结尾的文件</td>
</tr>
<tr>
<td></td>
<td>find .  -atime -1</td>
<td>查找当前目录下1天内被访问过的文件</td>
</tr>
<tr>
<td></td>
<td>find .  -atime +2</td>
<td>查找当前目录下2天前被访问过的文件</td>
</tr>
<tr>
<td></td>
<td>find .  -mtime -2</td>
<td>搜索当前目录2天内被修改过的文件</td>
</tr>
<tr>
<td></td>
<td>find .  -ctime -2</td>
<td>搜索当前目录2天内文件属性被修改的文件</td>
</tr>
<tr>
<td></td>
<td>find .  -size -64k</td>
<td>查找当前目录小于64k的文件</td>
</tr>
<tr>
<td></td>
<td>find .  -size +1k -a -size -2k</td>
<td>查找当前目录大于1k并且小于2k的文件</td>
</tr>
<tr>
<td></td>
<td>find .  -perm 755</td>
<td>查找当前目录有执行权限的文件</td>
</tr>
<tr>
<td></td>
<td>find .  -size +2k -a -size -50k -exec ls -lh {} \;</td>
<td>查询到的文件用ls  -lh显示</td>
</tr>
<tr>
<td></td>
<td>find .  -inum 234533 -exec rm -rf {} \;</td>
<td>查询i节点文件为262541的文件  直接删除</td>
</tr>
<tr>
<td>whereis</td>
<td></td>
<td>查找命令所在目录</td>
</tr>
<tr>
<td></td>
<td>whereis  ls</td>
<td>查找ls命令所在目录</td>
</tr>
<tr>
<td>which</td>
<td></td>
<td>查找命令所在目录  可以看别名</td>
</tr>
<tr>
<td></td>
<td>which cd</td>
<td>查找ls命令所在目录</td>
</tr>
<tr>
<td>grep</td>
<td></td>
<td>字符串搜索命令  将显示字符串匹配的所在行所有内容</td>
</tr>
<tr>
<td></td>
<td>grep  “hello” a.txt</td>
<td>搜索a.txt文件中包含字符串”hello”的所有行</td>
</tr>
<tr>
<td></td>
<td>grep -v  “hello” a.txt</td>
<td>搜索a.txt文件中不包含字符串”hello”的所有行</td>
</tr>
<tr>
<td></td>
<td>grep -n  “hello” a.txt</td>
<td>搜索a.txt文件中包含字符串”hello”的所有行  并显示行号</td>
</tr>
<tr>
<td>w</td>
<td></td>
<td>查看当前用户登录信息及相关系统信息</td>
</tr>
<tr>
<td>who</td>
<td></td>
<td>查看当前用户登录信息</td>
</tr>
<tr>
<td>last</td>
<td></td>
<td>查看历史登录信息</td>
</tr>
<tr>
<td>alias</td>
<td></td>
<td>给命令起别名（临时生效，如果需要持久生效，需要把命令写在用户配置文件中）</td>
</tr>
<tr>
<td></td>
<td>alias  ll=”ls -l”</td>
<td>用ll代替ls  -l命令</td>
</tr>
<tr>
<td></td>
<td>alias  grep=”grep –color=auto”</td>
<td>作用为grep使用时  直接附带参数–color=auto 即匹配内容用颜色标记出</td>
</tr>
<tr>
<td>history</td>
<td></td>
<td>查看历史输入命令</td>
</tr>
<tr>
<td></td>
<td>history  -c</td>
<td>清空历史命令</td>
</tr>
<tr>
<td>netstat</td>
<td></td>
<td>查看网络信息</td>
</tr>
<tr>
<td></td>
<td>netstat  -an</td>
<td>查看网络连接及网络接口信息</td>
</tr>
<tr>
<td>管道</td>
<td></td>
<td>命令结果的传递  用竖线 \</td>
<td>分隔命令</td>
</tr>
<tr>
<td></td>
<td>命令1 \</td>
<td>命令2</td>
<td>命令1正确执行的结果  作为命令2的操作对象</td>
</tr>
<tr>
<td></td>
<td>head -n 4  a.txt \</td>
<td>grep “hello”</td>
<td>输出a.txt文件前4行的内容，然后在结果中找出所有包含hello的行</td>
</tr>
<tr>
<td>压缩</td>
<td></td>
<td>压缩文件夹</td>
</tr>
<tr>
<td></td>
<td>zip  filename.zip dirname</td>
<td>压缩dirname目录为filename.zip文件</td>
</tr>
<tr>
<td>解压缩</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>unzip  filename.zip</td>
<td>解压缩filename.zip文件</td>
</tr>
<tr>
<td>FTP</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>ftp  [hostname\</td>
<td>ip-address]</td>
<td>连接到ftp</td>
</tr>
<tr>
<td></td>
<td>put  [local-file]  [remote-file]</td>
<td>上传本地单文文件（localfile）到远程文件（remotefile）</td>
</tr>
<tr>
<td></td>
<td>get  [remote-file]  [local-file]</td>
<td>下载远程单文件</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>mac</category>
      </categories>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac终端-iTerm2</title>
    <url>/posts/14eb7497.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzI3NDQ3Mzcw" title="https://www.zhihu.com/question/27447370">https://www.zhihu.com/question/27447370<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL2F5dXRoL2l0ZXJtMi16c2gtb2gtbXktenNoLXRoZS1tb3N0LXBvd2VyLWZ1bGwtb2YtdGVybWluYWwtb24tbWFjb3MtYmRiMjgyM2ZiMDRj" title="https://medium.com/ayuth/iterm2-zsh-oh-my-zsh-the-most-power-full-of-terminal-on-macos-bdb2823fb04c">https://medium.com/ayuth/iterm2-zsh-oh-my-zsh-the-most-power-full-of-terminal-on-macos-bdb2823fb04c<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9qZXJlbXlzdTAxMzEuZ2l0aHViLmlvL1Rvb2wtTWFjLWlUZXJtLTItT2gtTXktWnNoLVBvd2VybGV2ZWw5ay3oqK3lrpov" title="https://jeremysu0131.github.io/Tool-Mac-iTerm-2-Oh-My-Zsh-Powerlevel9k-設定/">https://jeremysu0131.github.io/Tool-Mac-iTerm-2-Oh-My-Zsh-Powerlevel9k-設定/ <i class="fa fa-external-link"></i></span></p>
</blockquote>
<a id="more"></a>
<h1 id="智能选中"><a href="#智能选中" class="headerlink" title="智能选中"></a>智能选中</h1><p>双击选中、三击选中整行、四击智能选中（智能规则可<span class="exturl" data-url="aHR0cHM6Ly93d3cuaXRlcm0yLmNvbS9kb2N1bWVudGF0aW9uLXNtYXJ0LXNlbGVjdGlvbi5odG1s" title="https://www.iterm2.com/documentation-smart-selection.html">配置<i class="fa fa-external-link"></i></span>），选中即复制</p>
<h1 id="巧用-⌘-键"><a href="#巧用-⌘-键" class="headerlink" title="巧用 ⌘ 键"></a>巧用 ⌘ 键</h1><p>按住 ⌘ 键</p>
<ul>
<li>可以拖拽选中的字符串；</li>
<li>点击 url：调用默认浏览器访问该网址；</li>
<li>点击文件：调用默认程序打开文件；</li>
<li>如果文件名是<code>filename:42</code>，且默认文本编辑器是 <code>Macvim</code>、<code>Textmate</code>或<code>BBEdit</code>，将会直接打开到这一行；</li>
<li>点击文件夹：在 <code>finder</code> 中打开该文件夹；</li>
<li>同时按住<code>⌥</code>键，可以以矩形选中，类似于 vim 中的<code>⌃ v</code>操作。</li>
</ul>
<h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><p>新建标签：<code>⌘ + t</code></p>
<p>关闭标签：<code>⌘ + w</code></p>
<p>切换标签：<br><code>⌘ + 数字</code> <code>⌘ + 左右方向键</code></p>
<p>切换全屏：<code>⌘ + enter</code></p>
<p>查找：<code>⌘ + f</code></p>
<h2 id="分屏"><a href="#分屏" class="headerlink" title="分屏"></a>分屏</h2><p>垂直分屏：<code>⌘ + d</code></p>
<p>水平分屏：<code>⌘ + ⇧ + d</code></p>
<p>切换屏幕：<br><code>⌘ + ⌥ + 方向键</code><br><code>⌘ + [</code> 或 <code>⌘ + ]</code></p>
<p>查看历史命令：<code>⌘ + ;</code></p>
<p>查看剪贴板历史：<code>⌘ + ⇧ + h</code></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>清除当前行：<code>⌃ + u</code></p>
<p>到行首：<code>⌃ + a</code></p>
<p>到行尾：<code>⌃ + e</code></p>
<p>前进后退：<code>⌃ + f/b</code> (相当于左右方向键)</p>
<p>上一条命令：<code>⌃ + p</code></p>
<p>搜索命令历史：<code>⌃ + r</code></p>
<p>删除当前光标的字符：<code>⌃ + d</code></p>
<p>删除光标之前的字符：<code>⌃ + h</code></p>
<p>删除光标之前的单词：<code>⌃ + w</code></p>
<p>删除到文本末尾：<code>⌃ + k</code></p>
<p>交换光标处文本：<code>⌃ + t</code></p>
<p>清屏 1：<code>⌘ + r</code></p>
<p>清屏 2：<code>⌃ + l</code></p>
<p>时间线：<code>⌘ + ⇧ + e</code></p>
<h2 id="自带有哪些很实用的功能-快捷键"><a href="#自带有哪些很实用的功能-快捷键" class="headerlink" title="自带有哪些很实用的功能/快捷键"></a>自带有哪些很实用的功能/快捷键</h2><p><code>⌘ + 数字</code> 在各 tab 标签直接来回切换</p>
<p>选择即复制 + 鼠标中键粘贴，这个很实用</p>
<p><code>⌘ + f</code> 所查找的内容会被自动复制</p>
<p><code>⌘ + d</code> 横着分屏 /<br><code>⌘ + ⇧ + d</code> 竖着分屏</p>
<p><code>⌘ + r</code> = <code>clear</code>，而且只是换到新一屏，不会想 <code>clear</code> 一样创建一个空屏</p>
<p><code>⌃ + u</code> 清空当前行，无论光标在什么位置</p>
<p>输入开头命令后 按 <code>⌘ + ;</code> 会自动列出输入过的命令</p>
<p><code>⌘ + ⇧ + h</code> 会列出剪切板历史</p>
<p>可以在 Preferences &gt; keys 设置全局快捷键调出 iterm，这个也可以用过 Alfred 实现</p>
<h2 id="常用的一些快捷键"><a href="#常用的一些快捷键" class="headerlink" title="常用的一些快捷键"></a>常用的一些快捷键</h2><p><code>⌘ + 1 / 2</code> 左右 tab 之间来回切换，这个在 前面 已经介绍过了</p>
<p><code>⌘←</code> / <code>⌘→</code> 到一行命令最左边/最右边 ，这个功能同 <code>C+a</code> / <code>C+e</code></p>
<p><code>⌥←</code> / <code>⌥→</code> 按单词前移/后移，相当与 <code>C+f</code> / <code>C+b</code>，其实这个功能在 Iterm 中已经预定义好了，<code>⌥f</code> / <code>⌥b</code>，看个人习惯了</p>
<p>好像就这几个</p>
<p>设置方法如下</p>
<p>当然除了这些可以自定义的也不能忘了 linux 下那些好用的组合</p>
<p><code>C+a</code> / <code>C+e</code> 这个几乎在哪都可以使用</p>
<p><code>C+p</code> / <code>!!</code> 上一条命令</p>
<p><code>C+k</code> 从光标处删至命令行尾 (本来 <code>C+u</code> 是删至命令行首，但 iterm 中是删掉整行)</p>
<p><code>C+w</code> <code>A+d</code> 从光标处删至字首/尾</p>
<p><code>C+h</code> <code>C+d</code> 删掉光标前后的自负</p>
<p><code>C+y</code> 粘贴至光标后</p>
<p><code>C+r</code> 搜索命令历史，这个较常用</p>
<h2 id="标记跳转"><a href="#标记跳转" class="headerlink" title="标记跳转"></a>标记跳转</h2><blockquote>
<p>类似编辑器的 mark 工具，iTerm2 也可以在命令行位置设置标记</p>
</blockquote>
<p>设置标记：<code>⌘ + ⇧ + m</code></p>
<p>跳转到上个标记：<code>⌘ + ⇧ + j</code></p>
<p>多个标记切换：<code>⌘ + ⇧ + 方向键</code></p>
<h2 id="选中即复制"><a href="#选中即复制" class="headerlink" title="选中即复制"></a>选中即复制</h2><p>iterm2 有 2 种好用的选中即复制模式。</p>
<p>一种是用鼠标，在 iterm2 中，选中某个路径或者某个词汇，那么，iterm2 就自 动复制了。<br>另一种是无鼠标模式，⌘+f,弹出 iterm2 的查找模式，输入要查找并复制的内容的前几个字母，确认找到的是自己的内容之后，输入 tab，查找窗口将自动变化内容，并将其复制。如果输入的是 ⇧+tab，则自动将查找内容的左边选中并复制。</p>
<p>自动完成<br>输入打头几个字母，然后输入 <code>⌘+;</code> iterm2 将自动列出之前输入过的类似命令。</p>
<h2 id="剪切历史"><a href="#剪切历史" class="headerlink" title="剪切历史"></a>剪切历史</h2><p>输入 <code>⌘+⇧+h</code>，iterm2 将自动列出剪切板的历史记录。如果需要将剪切板的历史记录保存到磁盘，在 Preferences &gt; General &gt; Save copy/paste history to disk 中设置。</p>
<h2 id="及时回放"><a href="#及时回放" class="headerlink" title="及时回放"></a>及时回放</h2><blockquote>
<p>某个交互命令会覆写屏幕上的输入，之前的历史信息可能会被覆盖掉，无法查看，iterm2 这个及时回放功能，会记录历史输入，输出，有点类似视频录制。</p>
</blockquote>
<p>进入回放：<code>⌘ + opt + b</code></p>
<p>方向键控制时间 ：<code>arrow</code></p>
<p>退出回放：<code>esc</code></p>
<h1 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh"></a>oh-my-zsh</h1><blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzI5OTc3MjU1" title="https://www.zhihu.com/question/29977255">https://www.zhihu.com/question/29977255<i class="fa fa-external-link"></i></span></p>
</blockquote>
<h2 id="智能补全"><a href="#智能补全" class="headerlink" title="智能补全"></a>智能补全</h2><p>cd ~/ 切换目录，敲击<code>两下tab</code>，会列出当前目录下的所有目录，并且可以使用键盘上下左右键来选择要进入的目录。</p>
<p>命令选项补齐，比如输入 docker，然后按 tab，即可显示出 docker 都有哪些命令选项。</p>
<h2 id="智能切换目录"><a href="#智能切换目录" class="headerlink" title="智能切换目录"></a>智能切换目录</h2><p>进入一个很深的目录，例如 <code>/var/log/nginx/error/lastyear/may/first/monday</code>, 用 zsh 可以这样输入 <code>cd /v/l/n/e/l/m/f/m</code> 然后按 tab 即可补全整个路径。或者你实现知道当前目录名称，可以直接输入目录，即可进去目录。</p>
<p>在 zsh 下可以记录最近进过的 10 个目录，只需要输入<code>d</code>，然后就可以看到对应的 0-9 的目录，输入<code>cd -数字</code>即可进入对应的目录。</p>
<p>或者直接输入 <code>cd -</code> 然后 <code>tab</code>，会列出最近使用过的 31 个目录。</p>
<h1 id="Tmux"><a href="#Tmux" class="headerlink" title="Tmux"></a>Tmux</h1><blockquote>
<p><span class="exturl" data-url="aHR0cDovL2xvdWlzemhhaS5naXRodWIuaW8vMjAxNy8wOS8zMC90bXV4Lw==" title="http://louiszhai.github.io/2017/09/30/tmux/">http://louiszhai.github.io/2017/09/30/tmux/<i class="fa fa-external-link"></i></span></p>
</blockquote>
<p>tmux是一款优秀的终端复用软件，它比Screen更加强大，至于如何强大，网上有大量的文章讨论了这点，本文不再重复。tmux之所以受人们喜爱，主要得益于以下三处功能：</p>
<ul>
<li>丝滑分屏（split），虽然iTem2也提供了横向和竖向分屏功能，但这种分屏功能非常拙劣，完全等同于屏幕新开一个窗口，新开的pane不会自动进入到当前目录，也没有记住当前登录状态。这意味着如果我ssh进入到远程服务器时，iTem2新开的pane中，我依然要重新走一遍ssh登录的老路（omg）。tmux就不会这样，tmux窗口中，新开的pane，默认进入到之前的路径，如果是ssh连接，登录状态也依旧保持着，如此一来，我就可以随意的增删pane，这种灵活性，好处不言而喻。</li>
<li>保护现场（attach），即使命令行的工作只进行到一半，关闭终端后还可以重新进入到操作现场，继续工作。对于ssh远程连接而言，即使网络不稳定也没有关系，掉线后重新连接，可以直奔现场，之前运行中的任务，依旧在跑，就好像从来没有离开过一样；特别是在远程服务器上运行耗时的任务，tmux可以帮你一直保持住会话。如此一来，你就可以随时随地放心地进行移动办公，只要你附近的计算机装有tmux（没有你也可以花几分钟装一个），你就能继续刚才的工作。</li>
<li>会话共享（适用于结对编程或远程教学），将 tmux 会话的地址分享给他人，这样他们就可以通过 SSH 接入该会话。如果你要给同事演示远程服务器的操作，他不必直勾勾地盯着你的屏幕，借助tmux，他完全可以进入到你的会话，然后静静地看着他桌面上你风骚的键盘走位，只要他愿意，甚至还可以录个屏。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装tmux</span></span><br><span class="line">brew install tmux</span><br></pre></td></tr></table></figure>
<h2 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h2><h3 id="新建会话"><a href="#新建会话" class="headerlink" title="新建会话"></a>新建会话</h3><p>新建一个tmux session非常简单，语法为<code>tmux new -s session-name</code>，也可以简写为<code>tmux</code>，为了方便管理，建议指定会话名称，如下。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tmux <span class="comment"># 新建一个无名称的会话</span></span><br><span class="line">tmux new -s demo <span class="comment"># 新建一个名称为demo的会话</span></span><br></pre></td></tr></table></figure>
<h3 id="断开当前会话"><a href="#断开当前会话" class="headerlink" title="断开当前会话"></a>断开当前会话</h3><p>会话中操作了一段时间，我希望断开会话同时下次还能接着用，怎么做？此时可以使用detach命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tmux detach <span class="comment"># 断开当前会话，会话在后台运行</span></span><br></pre></td></tr></table></figure>
<p>也许你觉得这个太麻烦了，是的，tmux的会话中，我们已经可以使用tmux快捷键了。使用快捷键组合<code>Ctrl+b</code> + <code>d</code>，三次按键就可以断开当前会话。</p>
<h3 id="进入之前的会话"><a href="#进入之前的会话" class="headerlink" title="进入之前的会话"></a>进入之前的会话</h3><p>断开会话后，想要接着上次留下的现场继续工作，就要使用到tmux的attach命令了，语法为<code>tmux attach-session -t session-name</code>，可简写为<code>tmux a -t session-name</code> 或 <code>tmux a</code>。通常我们使用如下两种方式之一即可：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tmux a <span class="comment"># 默认进入第一个会话</span></span><br><span class="line">tmux a -t demo <span class="comment"># 进入到名称为demo的会话</span></span><br></pre></td></tr></table></figure>
<h3 id="关闭会话"><a href="#关闭会话" class="headerlink" title="关闭会话"></a>关闭会话</h3><p>会话的使命完成后，一定是要关闭的。我们可以使用tmux的kill命令，kill命令有<code>kill-pane</code>、<code>kill-server</code>、<code>kill-session</code> 和 <code>kill-window</code>共四种，其中<code>kill-session</code>的语法为<code>tmux kill-session -t session-name</code>。如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tmux <span class="built_in">kill</span>-session -t demo <span class="comment"># 关闭demo会话</span></span><br><span class="line">tmux <span class="built_in">kill</span>-server <span class="comment"># 关闭服务器，所有的会话都将关闭</span></span><br></pre></td></tr></table></figure>
<h3 id="查看所有的会话"><a href="#查看所有的会话" class="headerlink" title="查看所有的会话"></a>查看所有的会话</h3><p>管理会话的第一步就是要查看所有的会话，我们可以使用如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tmux list-session <span class="comment"># 查看所有会话</span></span><br><span class="line">tmux ls <span class="comment"># 查看所有会话，提倡使用简写形式</span></span><br></pre></td></tr></table></figure>
<p>如果刚好处于会话中怎么办？别担心，我们可以使用对应的tmux快捷键<code>Ctrl+b</code> + <code>s</code>，此时tmux将打开一个会话列表，按上下键(⬆︎⬇︎)或者鼠标滚轮，可选中目标会话，按左右键（⬅︎➜）可收起或展开会话的窗口，选中目标会话或窗口后，按回车键即可完成切换。</p>
<p><img src="http://louiszhai.github.io/docImages/tmux02.png" alt></p>
<h2 id="Tmux快捷指令"><a href="#Tmux快捷指令" class="headerlink" title="Tmux快捷指令"></a>Tmux快捷指令</h2><p>关于快捷指令，首先要认识到的是：tmux的所有指令，都包含同一个前缀，默认为<code>Ctrl+b</code>，输入完前缀过后，控制台激活，命令按键才能生效。前面tmux会话相关的操作中，我们共用到了两个快捷键<code>Ctrl+b</code> + <code>d</code>、<code>Ctrl+b</code> + <code>s</code>，但这仅仅是冰山一角，欲窥tmux庞大的快捷键体系，请看下表。</p>
<p>表一：系统指令。</p>
<table>
<thead>
<tr>
<th style="text-align:center">前缀</th>
<th style="text-align:center">指令</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>Ctrl+b</code></td>
<td style="text-align:center"><code>?</code></td>
<td style="text-align:center">显示快捷键帮助文档</td>
</tr>
<tr>
<td style="text-align:center"><code>Ctrl+b</code></td>
<td style="text-align:center"><code>d</code></td>
<td style="text-align:center">断开当前会话</td>
</tr>
<tr>
<td style="text-align:center"><code>Ctrl+b</code></td>
<td style="text-align:center"><code>D</code></td>
<td style="text-align:center">选择要断开的会话</td>
</tr>
<tr>
<td style="text-align:center"><code>Ctrl+b</code></td>
<td style="text-align:center"><code>Ctrl+z</code></td>
<td style="text-align:center">挂起当前会话</td>
</tr>
<tr>
<td style="text-align:center"><code>Ctrl+b</code></td>
<td style="text-align:center"><code>r</code></td>
<td style="text-align:center">强制重载当前会话</td>
</tr>
<tr>
<td style="text-align:center"><code>Ctrl+b</code></td>
<td style="text-align:center"><code>s</code></td>
<td style="text-align:center">显示会话列表用于选择并切换</td>
</tr>
<tr>
<td style="text-align:center"><code>Ctrl+b</code></td>
<td style="text-align:center"><code>:</code></td>
<td style="text-align:center">进入命令行模式，此时可直接输入<code>ls</code>等命令</td>
</tr>
<tr>
<td style="text-align:center"><code>Ctrl+b</code></td>
<td style="text-align:center"><code>[</code></td>
<td style="text-align:center">进入复制模式，按<code>q</code>退出</td>
</tr>
<tr>
<td style="text-align:center"><code>Ctrl+b</code></td>
<td style="text-align:center"><code>]</code></td>
<td style="text-align:center">粘贴复制模式中复制的文本</td>
</tr>
<tr>
<td style="text-align:center"><code>Ctrl+b</code></td>
<td style="text-align:center"><code>~</code></td>
<td style="text-align:center">列出提示信息缓存</td>
</tr>
</tbody>
</table>
<p>表二：窗口（window）指令。</p>
<table>
<thead>
<tr>
<th style="text-align:center">前缀</th>
<th style="text-align:center">指令</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>Ctrl+b</code></td>
<td style="text-align:center"><code>c</code></td>
<td style="text-align:center">新建窗口</td>
</tr>
<tr>
<td style="text-align:center"><code>Ctrl+b</code></td>
<td style="text-align:center"><code>&amp;</code></td>
<td style="text-align:center">关闭当前窗口（关闭前需输入<code>y</code> or <code>n</code>确认）</td>
</tr>
<tr>
<td style="text-align:center"><code>Ctrl+b</code></td>
<td style="text-align:center"><code>0~9</code></td>
<td style="text-align:center">切换到指定窗口</td>
</tr>
<tr>
<td style="text-align:center"><code>Ctrl+b</code></td>
<td style="text-align:center"><code>p</code></td>
<td style="text-align:center">切换到上一窗口</td>
</tr>
<tr>
<td style="text-align:center"><code>Ctrl+b</code></td>
<td style="text-align:center"><code>n</code></td>
<td style="text-align:center">切换到下一窗口</td>
</tr>
<tr>
<td style="text-align:center"><code>Ctrl+b</code></td>
<td style="text-align:center"><code>w</code></td>
<td style="text-align:center">打开窗口列表，用于且切换窗口</td>
</tr>
<tr>
<td style="text-align:center"><code>Ctrl+b</code></td>
<td style="text-align:center"><code>,</code></td>
<td style="text-align:center">重命名当前窗口</td>
</tr>
<tr>
<td style="text-align:center"><code>Ctrl+b</code></td>
<td style="text-align:center"><code>.</code></td>
<td style="text-align:center">修改当前窗口编号（适用于窗口重新排序）</td>
</tr>
<tr>
<td style="text-align:center"><code>Ctrl+b</code></td>
<td style="text-align:center"><code>f</code></td>
<td style="text-align:center">快速定位到窗口（输入关键字匹配窗口名称）</td>
</tr>
</tbody>
</table>
<p>表三：面板（pane）指令。</p>
<table>
<thead>
<tr>
<th style="text-align:center">前缀</th>
<th style="text-align:center">指令</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>Ctrl+b</code></td>
<td style="text-align:center"><code>&quot;</code></td>
<td style="text-align:center">当前面板上下一分为二，下侧新建面板</td>
</tr>
<tr>
<td style="text-align:center"><code>Ctrl+b</code></td>
<td style="text-align:center"><code>%</code></td>
<td style="text-align:center">当前面板左右一分为二，右侧新建面板</td>
</tr>
<tr>
<td style="text-align:center"><code>Ctrl+b</code></td>
<td style="text-align:center"><code>x</code></td>
<td style="text-align:center">关闭当前面板（关闭前需输入<code>y</code> or <code>n</code>确认）</td>
</tr>
<tr>
<td style="text-align:center"><code>Ctrl+b</code></td>
<td style="text-align:center"><code>z</code></td>
<td style="text-align:center">最大化当前面板，再重复一次按键后恢复正常（v1.8版本新增）</td>
</tr>
<tr>
<td style="text-align:center"><code>Ctrl+b</code></td>
<td style="text-align:center"><code>!</code></td>
<td style="text-align:center">将当前面板移动到新的窗口打开（原窗口中存在两个及以上面板有效）</td>
</tr>
<tr>
<td style="text-align:center"><code>Ctrl+b</code></td>
<td style="text-align:center"><code>;</code></td>
<td style="text-align:center">切换到最后一次使用的面板</td>
</tr>
<tr>
<td style="text-align:center"><code>Ctrl+b</code></td>
<td style="text-align:center"><code>q</code></td>
<td style="text-align:center">显示面板编号，在编号消失前输入对应的数字可切换到相应的面板</td>
</tr>
<tr>
<td style="text-align:center"><code>Ctrl+b</code></td>
<td style="text-align:center"><code>{</code></td>
<td style="text-align:center">向前置换当前面板</td>
</tr>
<tr>
<td style="text-align:center"><code>Ctrl+b</code></td>
<td style="text-align:center"><code>}</code></td>
<td style="text-align:center">向后置换当前面板</td>
</tr>
<tr>
<td style="text-align:center"><code>Ctrl+b</code></td>
<td style="text-align:center"><code>Ctrl+o</code></td>
<td style="text-align:center">顺时针旋转当前窗口中的所有面板</td>
</tr>
<tr>
<td style="text-align:center"><code>Ctrl+b</code></td>
<td style="text-align:center"><code>方向键</code></td>
<td style="text-align:center">移动光标切换面板</td>
</tr>
<tr>
<td style="text-align:center"><code>Ctrl+b</code></td>
<td style="text-align:center"><code>o</code></td>
<td style="text-align:center">选择下一面板</td>
</tr>
<tr>
<td style="text-align:center"><code>Ctrl+b</code></td>
<td style="text-align:center"><code>空格键</code></td>
<td style="text-align:center">在自带的面板布局中循环切换</td>
</tr>
<tr>
<td style="text-align:center"><code>Ctrl+b</code></td>
<td style="text-align:center"><code>Alt+方向键</code></td>
<td style="text-align:center">以5个单元格为单位调整当前面板边缘</td>
</tr>
<tr>
<td style="text-align:center"><code>Ctrl+b</code></td>
<td style="text-align:center"><code>Ctrl+方向键</code></td>
<td style="text-align:center">以1个单元格为单位调整当前面板边缘（Mac下被系统快捷键覆盖）</td>
</tr>
<tr>
<td style="text-align:center"><code>Ctrl+b</code></td>
<td style="text-align:center"><code>t</code></td>
<td style="text-align:center">显示时钟</td>
</tr>
</tbody>
</table>
<h2 id="保存Tmux会话"><a href="#保存Tmux会话" class="headerlink" title="保存Tmux会话"></a>保存Tmux会话</h2><p>信息时代，数据尤为重要。tmux保护现场的能力依赖于tmux进程，如果进程退出，则意味着会话数据的丢失，因此关机重启后，tmux中的会话将被清空，这不是我们想要见到的。幸运的是，目前有这样两款插件：<code>Tmux Resurrect</code> 和 <code>Tmux Continuum</code>，可以永久保存tmux会话（它们均适用于tmux v1.9及以上版本）。</p>
<h3 id="Tmux-Resurrect"><a href="#Tmux-Resurrect" class="headerlink" title="Tmux Resurrect"></a>Tmux Resurrect</h3><p>Tmux Resurrect无须任何配置，就能够备份tmux会话中的各种细节，包括窗口、面板的顺序、布局、工作目录，运行程序等等数据。因此它能在系统重启后完全地恢复会话。由于其幂等的恢复机制，它不会试图去恢复一个已经存在的窗口或者面板，所以，即使你不小心多恢复了几次会话，它也不会出现问题，这样主动恢复时我们就不必担心手抖多按了一次。另外，如果你是<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RtdXhpbmF0b3IvdG11eGluYXRvcg==" title="https://github.com/tmuxinator/tmuxinator">tmuxinator<i class="fa fa-external-link"></i></span>用户，我也建议你迁移到 tmux-resurrect插件上来，具体请参考<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RtdXgtcGx1Z2lucy90bXV4LXJlc3VycmVjdC9ibG9iL21hc3Rlci9kb2NzL21pZ3JhdGluZ19mcm9tX3RtdXhpbmF0b3IubWQjbWlncmF0aW5nLWZyb20tdG11eGluYXRvcg==" title="https://github.com/tmux-plugins/tmux-resurrect/blob/master/docs/migrating_from_tmuxinator.md#migrating-from-tmuxinator">Migrating from <code>tmuxinator</code><i class="fa fa-external-link"></i></span>。</p>
<p>Tmux Resurrec安装过程如下所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.tmux</span><br><span class="line">mkdir plugins</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/tmux-plugins/tmux-resurrect.git</span><br></pre></td></tr></table></figure>
<p>安装后需在<code>~/.tmux.conf</code>中增加一行配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">run-shell ~/.tmux/plugins/tmux-resurrect/resurrect.tmux</span><br></pre></td></tr></table></figure>
<p>至此安装成功，按下<code>prefix + r</code>重载tmux配置。</p>
<p>Tmux Resurrec提供如下两个操作：</p>
<ul>
<li><strong>保存</strong>，快捷指令是<code>prefix</code> + <code>Ctrl + s</code>，tmux状态栏在保存开始，保存后分别提示”Saving…”，”Tmux environment saved !”。</li>
<li><strong>恢复</strong>，快捷指令是<code>prefix</code> + <code>Ctrl + r</code>，tmux状态栏在恢复开始，恢复后分别提示”Restoring…”，”Tmux restore complete !”。</li>
</ul>
<p>保存时，tmux会话的详细信息会以文本文件的格式保存到<code>~/.tmux/resurrect</code>目录，恢复时则从此处读取，由于数据文件是明文的，因此你完全可以自由管理或者编辑这些会话状态文件（如果备份频繁，记得定期清除历史备份）。</p>
<p><strong>可选的配置</strong></p>
<p>Tmux Resurrec本身是免配置开箱即用的，但同时也提供了如下选项以便修改其默认设置。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> -g @resurrect-save <span class="string">'S'</span> <span class="comment"># 修改保存指令为S</span></span><br><span class="line"><span class="built_in">set</span> -g @resurrect-restore <span class="string">'R'</span> 修改恢复指令为R</span><br><span class="line"><span class="comment"># 修改会话数据的保持路径，此处不能使用除了$HOME, $HOSTNAME, ~之外的环境变量</span></span><br><span class="line"><span class="built_in">set</span> -g @resurrect-dir <span class="string">'/some/path'</span></span><br></pre></td></tr></table></figure>
<p>默认情况下只有一个保守的列表项（即<code>vi vim nvim emacs man less more tail top htop irssi mutt</code>）可以恢复，对此 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RtdXgtcGx1Z2lucy90bXV4LXJlc3VycmVjdC9ibG9iL21hc3Rlci9kb2NzL3Jlc3RvcmluZ19wcm9ncmFtcy5tZA==" title="https://github.com/tmux-plugins/tmux-resurrect/blob/master/docs/restoring_programs.md">Restoring programs doc<i class="fa fa-external-link"></i></span> 解释了怎么去恢复额外的项目。</p>
<p><strong>进阶的备份</strong></p>
<p>除了基础备份外，Tmux Resurrec还提供<strong>进阶的备份功能</strong>，如下所示：</p>
<ul>
<li>恢复vim 和 neovim 会话</li>
<li>恢复面板内容</li>
<li>恢复shell的历史记录（实验性功能）</li>
</ul>
<p>进阶的备份功能默认不开启，需要特别配置。</p>
<p>1）恢复vim 和 neovim 会话，需要完成如下两步：</p>
<ul>
<li><p>通过vim的vim-obsession插件保存vim/neovim会话。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.vim/bundle</span><br><span class="line">git <span class="built_in">clone</span> git://github.com/tpope/vim-obsession.git</span><br><span class="line">vim -u NONE -c <span class="string">"helptags vim-obsession/doc"</span> -c q</span><br></pre></td></tr></table></figure>
</li>
<li><p>在<code>~/.tmux.conf</code>中增加两行配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> -g @resurrect-strategy-vim <span class="string">'session'</span> <span class="comment"># for vim</span></span><br><span class="line"><span class="built_in">set</span> -g @resurrect-strategy-nvim <span class="string">'session'</span> <span class="comment"># for neovim</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>2）恢复面板内容，需在<code>~/.tmux.conf</code>中增加一行配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> -g @resurrect-capture-pane-contents <span class="string">'on'</span> <span class="comment"># 开启恢复面板内容功能</span></span><br></pre></td></tr></table></figure>
<p>目前使用该功能时，请确保tmux的<code>default-command</code>没有包含<code>&amp;&amp;</code> 或者<code>||</code>操作符，否则将导致<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RtdXgtcGx1Z2lucy90bXV4LXJlc3VycmVjdC9pc3N1ZXMvOTg=" title="https://github.com/tmux-plugins/tmux-resurrect/issues/98">bug<i class="fa fa-external-link"></i></span>。（查看<code>default-command</code>的值，请使用命令<code>tmux show -g default-command</code>。）</p>
<p>3）恢复shell的历史记录，需在<code>~/.tmux.conf</code>中增加一行配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> -g @resurrect-save-shell-history <span class="string">'on'</span></span><br></pre></td></tr></table></figure>
<p>由于技术的限制，保存时，只有无前台任务运行的面板，它的shell历史记录才能被保存。</p>
<h3 id="Tmux-Continuum"><a href="#Tmux-Continuum" class="headerlink" title="Tmux Continuum"></a>Tmux Continuum</h3><p>可能你嫌手动保存和恢复太过麻烦，别担心，这不是问题。Tmux Continuum 在 Tmux Resurrec的基础上更进一步，现在保存和恢复全部自动化了，如你所愿，可以无感使用tmux，不用再担心备份问题。</p>
<p>Tmux Continuum安装过程如下所示（它依赖Tmux Resurrect，请保证已安装Tmux Resurrect插件）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.tmux/plugins</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/tmux-plugins/tmux-continuum.git</span><br></pre></td></tr></table></figure>
<p>安装后需在<code>~/.tmux.conf</code>中增加一行配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">run-shell ~/.tmux/plugins/tmux-continuum/continuum.tmux</span><br></pre></td></tr></table></figure>
<p>Tmux Continuum默认每隔15mins备份一次，我设置的是一天一次：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> -g @continuum-save-interval <span class="string">'1440'</span></span><br></pre></td></tr></table></figure>
<p><strong>关闭自动备份</strong>，只需设置时间间隔为 <code>0</code> 即可：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> -g @continuum-save-interval <span class="string">'0'</span></span><br></pre></td></tr></table></figure>
<p>想要在<strong>tmux启动时就恢复最后一次保存的会话环境</strong>，需增加如下配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> -g @continuum-restore <span class="string">'on'</span> <span class="comment"># 启用自动恢复</span></span><br></pre></td></tr></table></figure>
<p>如果不想要启动时自动恢复的功能了，直接移除上面这行就行。想要绝对确定自动恢复不会发生，就在用户根目录下创建一个<code>tmux_no_auto_restore</code>空文件（创建命令：<code>touch ~/tmux_no_auto_restore</code>），该文件存在时，自动恢复将不触发。</p>
<p>对于tmux高级用户（可能就是你）而言，同时运行多个tmux服务器也是有可能的。你可能并不希望后面启用的几个tmux服务器自动恢复或者自动保存会话。因此Tmux Continuum会优先在第一个启用的tmux服务器中生效，随后启用的tmux服务器不再享受自动恢复或自动保存会话的待遇。</p>
<p>实际上，不管Tmux Continuum功能有没有启用，或者多久保存一次，我们都有办法从状态栏知晓。Tmux Continuum提供了一个查看运行状态的插值<code>#{continuum_status}</code>，它支持<code>status-right</code> 和 <code>status-left</code>两种状态栏设置，如下所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> -g status-right <span class="string">'Continuum status: #&#123;continuum_status&#125;'</span></span><br></pre></td></tr></table></figure>
<p>tmux运行时，<code>#{continuum_status}</code> 将显示保存的时间间隔（单位为分钟），此时状态栏会显示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Continuum status: 1440</span><br></pre></td></tr></table></figure>
<p>如果其自动保存功能关闭了，那么状态栏会显示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Continuum status: off</span><br></pre></td></tr></table></figure>
<p>借助Tmux Continuum插件，Mac重启时，我们甚至可以选择在<code>Terminal</code> 或者 <code>iTerm2</code> 中自动全屏启用tmux。</p>
<p>为此，需在<code>~/.tmux.conf</code>中增加一行配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> -g @continuum-boot <span class="string">'on'</span></span><br></pre></td></tr></table></figure>
<p>Mac下，自动启用tmux还支持如下选项：</p>
<ul>
<li><code>set -g @continuum-boot-options &#39;fullscreen&#39;</code> ，<code>Terminal</code>自动全屏，tmux命令在<code>Terminal</code>中执行。</li>
<li><code>set -g @continuum-boot-options &#39;iterm&#39;</code> ， <code>iTerm2</code> 替换 <code>Terminal</code> 应用，tmux命令在<code>iTerm2</code>中执行。</li>
<li><code>set -g @continuum-boot-options &#39;iterm,fullscreen&#39;</code>，<code>iTerm2</code>自动全屏，tmux命令在<code>iTerm2</code>中执行。</li>
</ul>
<p>Linux中则没有这些选项，它只能设置为自动启用tmux服务器。</p>
<h3 id="Tpm"><a href="#Tpm" class="headerlink" title="Tpm"></a>Tpm</h3><p>以上，我们直接安装了tmux插件。这没有问题，可当插件越来越多时，我们就会需要统一的插件管理器。因此官方提供了tpm（支持tmux v1.9及以上版本）。</p>
<p>tpm安装过程如下所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.tmux/plugins</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/tmux-plugins/tpm</span><br></pre></td></tr></table></figure>
<p>安装后需在<code>~/.tmux.conf</code>中增加如下配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认需要引入的插件</span></span><br><span class="line"><span class="built_in">set</span> -g @plugin <span class="string">'tmux-plugins/tpm'</span></span><br><span class="line"><span class="built_in">set</span> -g @plugin <span class="string">'tmux-plugins/tmux-sensible'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 引入其他插件的示例</span></span><br><span class="line"><span class="comment"># set -g @plugin 'github_username/plugin_name' # 格式：github用户名/插件名</span></span><br><span class="line"><span class="comment"># set -g @plugin 'git@github.com/user/plugin' # 格式：git@github插件地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化tmux插件管理器(保证这行在~/.tmux.conf的非常靠后的位置)</span></span><br><span class="line">run <span class="string">'~/.tmux/plugins/tpm/tpm'</span></span><br></pre></td></tr></table></figure>
<p>然后按下<code>prefix + r</code>重载tmux配置，使得tpm生效。</p>
<p>基于tpm插件管理器，<strong>安装插件</strong>仅需如下两步：</p>
<ol>
<li>在<code>~/.tmux.conf</code>中增加新的插件，如<code>set -g @plugin &#39;...&#39;</code>。</li>
<li>按下<code>prefix</code> + <code>I</code>键下载插件，并刷新tmux环境。</li>
</ol>
<p><strong>更新插件</strong>，请按下<code>prefix</code> + <code>U</code> 键，选择待更新的插件后，回车确认并更新。</p>
<p><strong>卸载插件</strong>，需如下两步：</p>
<ol>
<li>在<code>~/.tmux.conf</code>中移除插件所在行。</li>
<li>按下<code>prefix</code> + <code>alt</code> + <code>u</code> 移除插件。</li>
</ol>
<h2 id="会话共享"><a href="#会话共享" class="headerlink" title="会话共享"></a>会话共享</h2><h3 id="结对编程"><a href="#结对编程" class="headerlink" title="结对编程"></a>结对编程</h3><p>tmux多会话连接实时同步的功能，使得结对编程成为了可能，这也是开发者最喜欢的功能之一。现在就差一步了，就是借助tmate把tmux会话分享出去。</p>
<p>tmate是tmux的管理工具，它可以轻松的创建tmux会话，并且自动生成ssh链接。</p>
<p>安装tmate</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install tmate</span><br></pre></td></tr></table></figure>
<p>使用tmate新建一个tmux会话</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tmate</span><br></pre></td></tr></table></figure>
<p>此时屏幕下方会显示ssh url，如下所示：<img src="http://louiszhai.github.io/docImages/tmux07.png" alt></p>
<p>查看tmate生成的ssh链接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tmate show-messages</span><br></pre></td></tr></table></figure>
<p>生成的ssh url如下所示，其中一个为只读，另一个可编辑。</p>
<p><img src="http://louiszhai.github.io/docImages/tmux08.png" alt></p>
<h3 id="共享账号-amp-组会话"><a href="#共享账号-amp-组会话" class="headerlink" title="共享账号&amp;组会话"></a>共享账号&amp;组会话</h3><p>使用tmate远程共享tmux会话，受制于多方的网络质量，必然会存在些许延迟。如果共享会话的多方拥有同一个远程服务器的账号，那么我们可以使用<code>组会话</code>解决这个问题。</p>
<p>先在远程服务器上新建一个公共会话，命名为<code>groupSession</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tmux new -s groupSession</span><br></pre></td></tr></table></figure>
<p>其他用户不去直接连接这个会话，而是通过创建一个新的会话来加入上面的公共会话<code>groupSession</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tmux new -t groupSession -s otherSession</span><br></pre></td></tr></table></figure>
<p>此时两个用户都可以在同一个会话里操作，就会好像第二个用户连接到了<code>groupSession</code>的会话一样。此时两个用户都可以创建新建的窗口，新窗口的内容依然会实时同步，但是其中一个用户切换到其它窗口，对另外一个用户没有任何影响，因此在这个共享的组会话中，用户各自的操作可以通过新建窗口来执行。即使第二个用户关闭<code>otherSession</code>会话，共享会话<code>groupSession</code>依然存在。</p>
<p>组会话在共享的同时，又保留了相对的独立，非常适合结对编程场景，它是结对编程最简单的方式，如果账号不能共享，我们就要使用下面的方案了。</p>
<h3 id="独立账号-amp-Socket共享会话"><a href="#独立账号-amp-Socket共享会话" class="headerlink" title="独立账号&amp;Socket共享会话"></a>独立账号&amp;Socket共享会话</h3><p>开始之前我们需要确保用户对远程服务器上同一个目录拥有相同的读写权限，假设这个目录为<code>/var/tmux/</code>。</p>
<p>使用new-session（简写new）创建会话时，使用的是默认的socket位置，默认socket无法操作，所以我们需要创建一个指定socket文件的会话。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tmux -S /var/tmux/sharefile</span><br></pre></td></tr></table></figure>
<p>另一个用户进入时，需要指定socket文件加入会话。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tmux -S /var/tmux/sharefile attach</span><br></pre></td></tr></table></figure>
<p>这样，两个不同的用户就可以共享同一个会话了。</p>
<p>通常情况下，不同的用户使用不同的配置文件来创建会话，但是，使用指定socket文件创建的tmux会话，会话加载的是第一个创建会话的用户的<code>~/.tmux.conf</code>配置文件，随后加入会话的其他用户，依然使用同一份配置文件。</p>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="需要的时候把-iterm2-呼出来-不需要的时候自动隐藏"><a href="#需要的时候把-iterm2-呼出来-不需要的时候自动隐藏" class="headerlink" title="需要的时候把 iterm2 呼出来,不需要的时候自动隐藏"></a>需要的时候把 iterm2 呼出来,不需要的时候自动隐藏</h2><p><code>iTerm2 &gt; Preferences &gt; Keys</code>，左侧 <code>Hotkey</code> 选项 勾选 <code>Show/hide iTerm2 with a system-wide hotkey</code>，设置快捷键</p>
<h2 id="复用上个会话的目录"><a href="#复用上个会话的目录" class="headerlink" title="复用上个会话的目录"></a>复用上个会话的目录</h2><p><code>iTerm2 &gt; Preferences &gt; Profiles &gt; Working Directory &gt; Reuse previous session’s directory</code></p>
<h2 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> zsh-config=<span class="string">'vim ~/.zshrc'</span></span><br></pre></td></tr></table></figure>
<h2 id="终端下命令行下用-Sublime、vscode、atom-打开文件夹或目录"><a href="#终端下命令行下用-Sublime、vscode、atom-打开文件夹或目录" class="headerlink" title="终端下命令行下用 Sublime、vscode、atom 打开文件夹或目录"></a>终端下命令行下用 Sublime、vscode、atom 打开文件夹或目录</h2><h3 id="vscode-命令行调用"><a href="#vscode-命令行调用" class="headerlink" title="vscode 命令行调用"></a>vscode 命令行调用</h3><p>VS Code 提供了一个 <code>code</code> 命令，用来在 shell 环境下调用编辑器。使用快捷键 <code>⇧⌘P</code>（或 F1） 唤起命令面板，输入以下命令即可完成安装。</p>
<p><img src="https://image.xuebin.me/shell_command.png" alt="shell command"></p>
<ul>
<li><p>code 命令后可接多个路径或文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">code pro6.js pro6.scss ../</span><br></pre></td></tr></table></figure>
</li>
<li><p>文件对比：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">code -d new-file.js old-file.js</span><br></pre></td></tr></table></figure>
</li>
<li><p>打开文件并跳至指定行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">code -g source/cn/static/global/tracker.js:15</span><br></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>更多 code 命令行使用方法，参见《<span class="exturl" data-url="aHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20vZG9jcy9lZGl0b3IvY29kZWJhc2ljcyNfYWRkaXRpb25hbC1jb21tYW5kLWxpbmUtYXJndW1lbnRz" title="https://code.visualstudio.com/docs/editor/codebasics#_additional-command-line-arguments">Additional Command line arguments<i class="fa fa-external-link"></i></span>》。</p>
</blockquote>
<h3 id="手动添加"><a href="#手动添加" class="headerlink" title="手动添加"></a>手动添加</h3><ol>
<li><p>打开终端，随便一个目录输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd</span><br></pre></td></tr></table></figure>
</li>
<li><p>检查是否有<code>.zshrc</code>文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls -al</span><br></pre></td></tr></table></figure>
<p><img src="https://image.xuebin.me/zshrc.png" alt=".zshrc文件"></p>
</li>
</ol>
<p>1)  添加启动命令</p>
<pre><code><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo nano .zshrc</span><br></pre></td></tr></table></figure>


在文件末尾加上别名：

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">alias atom='/Applications/Atom.app/Contents/MacOS/Atom'</span><br><span class="line">alias subl='/Applications/SublimeText.app/Contents/SharedSupport/bin/subl'</span><br><span class="line">alias code='/Applications/Visual\ Studio\ Code.app/Contents/Resources/app/bin/code'</span><br></pre></td></tr></table></figure>


`⌘ + X` 再输入 `y` 保存，重启 iterm2。
</code></pre><blockquote>
<p>查找 APP 路径：</p>
<p><img src="https://image.xuebin.me/app%E6%98%BE%E7%A4%BA%E5%8C%85%E5%86%85%E5%AE%B9.png" alt="finder-应用程序-右键“显示包内容”"></p>
</blockquote>
<h2 id="vim配色"><a href="#vim配色" class="headerlink" title="vim配色"></a>vim配色</h2><p>终端输入<code>vim ~/.vimrc</code>，设置内容如下，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">syntax on</span><br><span class="line">set number</span><br><span class="line">set ruler</span><br></pre></td></tr></table></figure>
<h1 id="Prezto"><a href="#Prezto" class="headerlink" title="Prezto"></a>Prezto</h1><p>Prezto是Zsh的配置框架，作用是简化Zsh的配置难度，Prezto的使用可以参考这两篇文章：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NvcmluLWlvbmVzY3UvcHJlenRv" title="https://github.com/sorin-ionescu/prezto">prezto官网<i class="fa fa-external-link"></i></span>和<span class="exturl" data-url="aHR0cHM6Ly9taWtlYnVzcy5jb20vMjAxNC8wNC8wNy9jdXN0b21pemluZy1wcmV6dG8v" title="https://mikebuss.com/2014/04/07/customizing-prezto/">Customizing Your Prezto Prompt<i class="fa fa-external-link"></i></span>。</p>
<p>根据第一篇文章安装好Prezto后，需要按需配置Prezto，配置文件是~/.zpreztorc文件，将历史记录补全、语法高亮、git等插件的功能打开，另外在选择主题的时候，可以根据命令<code>prompt -l</code>列举出所有的主题，根据<code>prompt -p themename</code>预览主题的样式。我使用的就是它经典的主题sorin，其他的主题没有尝试过，你可以根据自己的喜好安装和配置。</p>
<h1 id="Spaceship-ZSH"><a href="#Spaceship-ZSH" class="headerlink" title="Spaceship ZSH"></a><span class="exturl" data-url="aHR0cHM6Ly9kZW55c2Rvdmhhbi5jb20vc3BhY2VzaGlwLXByb21wdC8=" title="https://denysdovhan.com/spaceship-prompt/">Spaceship ZSH<i class="fa fa-external-link"></i></span></h1><h1 id="powerlevel9k主题"><a href="#powerlevel9k主题" class="headerlink" title="powerlevel9k主题"></a><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JoaWxidXJuL3Bvd2VybGV2ZWw5aw==" title="powerlevel9k">powerlevel9k<i class="fa fa-external-link"></i></span>主题</h1><p><img src="https://camo.githubusercontent.com/31da002de611cfef95f6daaa8b1baedef4079703/687474703a2f2f6268696c6275726e2e6f72672f636f6e74656e742f696d616765732f323031352f30312f706c396b2d696d70726f7665642e706e67" alt></p>
<h2 id="配置项"><a href="#配置项" class="headerlink" title="配置项"></a>配置项</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JoaWxidXJuL3Bvd2VybGV2ZWw5ay93aWtpL1N0eWxpemluZy1Zb3VyLVByb21wdA==" title="https://github.com/bhilburn/powerlevel9k/wiki/Stylizing-Your-Prompt">Stylizing Your Prompt<i class="fa fa-external-link"></i></span></p>
<h2 id="其他人的配置"><a href="#其他人的配置" class="headerlink" title="其他人的配置"></a>其他人的配置</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JoaWxidXJuL3Bvd2VybGV2ZWw5ay93aWtpL1Nob3ctT2ZmLVlvdXItQ29uZmln" title="https://github.com/bhilburn/powerlevel9k/wiki/Show-Off-Your-Config">Show Off Your Config<i class="fa fa-external-link"></i></span></p>
<h2 id="我的配置"><a href="#我的配置" class="headerlink" title="我的配置"></a>我的配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># =======================================================================================================================================</span></span><br><span class="line"><span class="comment"># 以下是 .zshrc 配置信息</span></span><br><span class="line"><span class="comment"># =======================================================================================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If you come from bash you might have to change your $PATH.</span></span><br><span class="line"><span class="comment"># export PATH=$HOME/bin:/usr/local/bin:$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Path to your oh-my-zsh installation.</span></span><br><span class="line"><span class="built_in">export</span> ZSH=/Users/leo/.oh-my-zsh</span><br><span class="line"><span class="built_in">export</span> DEFAULT_USER=<span class="string">"Leo"</span></span><br><span class="line"><span class="built_in">export</span> LPASS_AGENT_TIMEOUT=0</span><br><span class="line"><span class="built_in">export</span> TERM=<span class="string">"xterm-256color"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># # 代理</span></span><br><span class="line"><span class="comment"># export https_proxy=http://127.0.0.1:7890</span></span><br><span class="line"><span class="comment"># export http_proxy=http://127.0.0.1:7890</span></span><br><span class="line"><span class="comment"># export all_proxy=socks5://127.0.0.1:7891</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set name of the theme to load. Optionally, if you set this to "random"</span></span><br><span class="line"><span class="comment"># it'll load a random theme each time that oh-my-zsh is loaded.</span></span><br><span class="line"><span class="comment"># See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes</span></span><br><span class="line"><span class="comment"># 主题</span></span><br><span class="line"><span class="comment"># ZSH_THEME="robbyrussell"</span></span><br><span class="line"><span class="comment"># ZSH_THEME="agnoster"</span></span><br><span class="line"><span class="comment"># ZSH_THEME="powerline"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># =======================================================================================================================================</span></span><br><span class="line"><span class="comment"># powerlevel9k 主题</span></span><br><span class="line"><span class="comment"># https://github.com/bhilburn/powerlevel9k</span></span><br><span class="line"><span class="comment"># https://github.com/bhilburn/powerlevel9k/wiki/Show-Off-Your-Config#v1rguls-configuration</span></span><br><span class="line"><span class="comment"># =======================================================================================================================================</span></span><br><span class="line">ZSH_THEME=<span class="string">"powerlevel9k/powerlevel9k"</span></span><br><span class="line"><span class="comment"># 调整字体模式</span></span><br><span class="line">POWERLEVEL9K_MODE=<span class="string">'nerdfont-complete'</span></span><br><span class="line"><span class="comment"># 左侧提示符显示内容:系统时间(time)、root权限指示(root_indicator)、username and host(context)、当前工作目录(dir)、目录写入权限(dir_writable)、git信息(vcs)</span></span><br><span class="line">POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(time context root_indicator dir dir_writable vcs)</span><br><span class="line"><span class="comment"># 右侧提示符显示内容:上一命令执行状态(status)、后台任务个数(background_jobs)、上一命令执行时间(command_execution_time)、可用RAM(ram)、系统的负载均值(load)</span></span><br><span class="line">POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(status background_jobs command_execution_time ram load)</span><br><span class="line"><span class="comment"># context也就是你的用户名以及终端名称，默认是 `%n@%m`。 </span></span><br><span class="line">POWERLEVEL9K_CONTEXT_TEMPLATE=<span class="string">"Leo"</span></span><br><span class="line"><span class="comment"># 低于这个值的命令执行时间不显示，0 也就是命令执行时间多长都显示</span></span><br><span class="line">POWERLEVEL9K_COMMAND_EXECUTION_TIME_THRESHOLD=<span class="string">"1"</span></span><br><span class="line"><span class="comment"># 时间格式化</span></span><br><span class="line">POWERLEVEL9K_TIME_FORMAT=<span class="string">"%D&#123;%H:%M&#125;"</span></span><br><span class="line"><span class="comment"># 显示分支版本</span></span><br><span class="line">POWERLEVEL9K_SHOW_CHANGESET=<span class="literal">true</span></span><br><span class="line"><span class="comment"># =======================================================================================================================================</span></span><br><span class="line"><span class="comment"># powerlevel9k-配置结束</span></span><br><span class="line"><span class="comment"># =======================================================================================================================================</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment the following line to use case-sensitive completion.</span></span><br><span class="line"><span class="comment"># 取消注释以下行使用区分大小写的完成。</span></span><br><span class="line"><span class="comment"># CASE_SENSITIVE="true"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment the following line to use hyphen-insensitive completion. Case</span></span><br><span class="line"><span class="comment"># sensitive completion must be off. _ and - will be interchangeable.</span></span><br><span class="line"><span class="comment"># 取消注释下面的行以使用连字符不敏感的完成。区分大小写的完成必须关闭。_ 和-将是可互换的。</span></span><br><span class="line"><span class="comment"># HYPHEN_INSENSITIVE="true"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment the following line to disable bi-weekly auto-update checks.</span></span><br><span class="line"><span class="comment"># 取消注释以下行禁用每两周检查自动升级。</span></span><br><span class="line"><span class="comment"># DISABLE_AUTO_UPDATE="true"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment the following line to change how often to auto-update (in days).</span></span><br><span class="line"><span class="comment"># 取消注释以下行来改变频率自动更新(天)。</span></span><br><span class="line"><span class="comment"># export UPDATE_ZSH_DAYS=13</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment the following line to disable colors in ls.</span></span><br><span class="line"><span class="comment"># 取消注释以下行ls禁用的颜色。</span></span><br><span class="line"><span class="comment"># DISABLE_LS_COLORS="true"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment the following line to disable auto-setting terminal title.</span></span><br><span class="line"><span class="comment"># 取消注释以下行禁用自动对焦功能终端标题。</span></span><br><span class="line"><span class="comment"># DISABLE_AUTO_TITLE="true"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment the following line to enable command auto-correction.</span></span><br><span class="line"><span class="comment"># 取消注释以下行来启用命令自动校对功能。</span></span><br><span class="line"><span class="comment"># ENABLE_CORRECTION="true"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment the following line to display red dots whilst waiting for completion.</span></span><br><span class="line"><span class="comment"># 取消注释以下行来显示红点同时等待完成。</span></span><br><span class="line">COMPLETION_WAITING_DOTS=<span class="string">"true"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment the following line if you want to disable marking untracked files</span></span><br><span class="line"><span class="comment"># under VCS as dirty. This makes repository status check for large repositories</span></span><br><span class="line"><span class="comment"># much, much faster.</span></span><br><span class="line"><span class="comment"># 如果要禁用在 VCS 下标记未跟踪文件为脏, 请取消注释以下行。这使得存储库状态对大型存储库的检查速度要快得多。</span></span><br><span class="line"><span class="comment"># DISABLE_UNTRACKED_FILES_DIRTY="true"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment the following line if you want to change the command execution time</span></span><br><span class="line"><span class="comment"># stamp shown in the history command output.</span></span><br><span class="line"><span class="comment"># The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"</span></span><br><span class="line"><span class="comment"># 如果要更改历史命令输出中显示的命令执行时间戳, 请取消注释以下行。可选的三格式:  "mm/dd/日/日 " |  "dd.mm.yyyy " |  "日"-mm-dd  "</span></span><br><span class="line"><span class="comment"># HIST_STAMPS="mm/dd/yyyy"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Would you like to use another custom folder than $ZSH/custom?</span></span><br><span class="line"><span class="comment"># 是否要使用其他自定义文件夹而不是 $ZSH/自定义？</span></span><br><span class="line"><span class="comment"># ZSH_CUSTOM=/path/to/new-custom-folder</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)</span></span><br><span class="line"><span class="comment"># Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/</span></span><br><span class="line"><span class="comment"># Example format: plugins=(rails git textmate ruby lighthouse)</span></span><br><span class="line"><span class="comment"># Add wisely, as too many plugins slow down shell startup.</span></span><br><span class="line">plugins=(zsh-syntax-highlighting zsh-autosuggestions z brew node npm osx git git-extras)</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> <span class="variable">$ZSH</span>/oh-my-zsh.sh</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> <span class="variable">$HOME</span>/.bash_profile <span class="comment"># 环境变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># User configuration</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># export MANPATH="/usr/local/man:$MANPATH"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># You may need to manually set your language environment</span></span><br><span class="line"><span class="comment"># export LANG=en_US.UTF-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Preferred editor for local and remote sessions</span></span><br><span class="line"><span class="comment"># if [[ -n $SSH_CONNECTION ]]; then</span></span><br><span class="line"><span class="comment">#   export EDITOR='vim'</span></span><br><span class="line"><span class="comment"># else</span></span><br><span class="line"><span class="comment">#   export EDITOR='mvim'</span></span><br><span class="line"><span class="comment"># fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Compilation flags</span></span><br><span class="line"><span class="comment"># export ARCHFLAGS="-arch x86_64"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ssh</span></span><br><span class="line"><span class="comment"># export SSH_KEY_PATH="~/.ssh/rsa_id"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set personal aliases, overriding those provided by oh-my-zsh libs,</span></span><br><span class="line"><span class="comment"># plugins, and themes. Aliases can be placed here, though oh-my-zsh</span></span><br><span class="line"><span class="comment"># users are encouraged to define aliases within the ZSH_CUSTOM folder.</span></span><br><span class="line"><span class="comment"># For a full list of active aliases, run `alias`.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Example aliases</span></span><br><span class="line"><span class="comment"># alias zshconfig="mate ~/.zshrc"</span></span><br><span class="line"><span class="comment"># alias ohmyzsh="mate ~/.oh-my-zsh"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># =======================================================================================================================================</span></span><br><span class="line"><span class="comment"># 别名</span></span><br><span class="line"><span class="comment"># =======================================================================================================================================</span></span><br><span class="line"><span class="built_in">alias</span> code=<span class="string">'/Applications/Visual\ Studio\ Code.app/Contents/Resources/app/bin/code'</span></span><br><span class="line"><span class="built_in">alias</span> zsh-config=<span class="string">'code ~/.zshrc'</span></span><br><span class="line"><span class="built_in">alias</span> zsh-badges=<span class="string">'code ~/.badges'</span></span><br><span class="line"><span class="built_in">alias</span> nginx-config=<span class="string">'code /usr/local/etc/nginx/nginx.conf'</span></span><br><span class="line"><span class="built_in">alias</span> nginx-services=<span class="string">'cd /usr/local/etc/nginx/servers/ &amp;&amp; ls'</span></span><br><span class="line"><span class="built_in">alias</span> nginx-log=<span class="string">'cd /usr/local/Cellar/nginx/ &amp;&amp; ls'</span></span><br><span class="line"><span class="built_in">alias</span> npm-registry-zpfe=<span class="string">'npm config set registry http://npm.zhaopin.com'</span></span><br><span class="line"><span class="built_in">alias</span> npm-registry-npm=<span class="string">'npm config set registry https://registry.npmjs.org/'</span></span><br><span class="line"><span class="built_in">alias</span> glog=<span class="string">"git log --graph --pretty=format:'%Cred%h%Creset - %C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit --date=relative"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># =======================================================================================================================================</span></span><br><span class="line"><span class="comment"># 别名-配置结束</span></span><br><span class="line"><span class="comment"># =======================================================================================================================================</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># =======================================================================================================================================</span></span><br><span class="line"><span class="comment"># badge徽标</span></span><br><span class="line"><span class="comment"># 徽标配置文件：~/.badges</span></span><br><span class="line"><span class="comment">#   /Users/leo/OneDrive                                                📦</span></span><br><span class="line"><span class="comment">#   /Users/leo                                                         🏠</span></span><br><span class="line"><span class="comment"># Profiles Badge Text</span></span><br><span class="line"><span class="comment">#   \(user.badge) \n \(session.name) \n \(session.path) \n \(session.username)@\(session.hostname)</span></span><br><span class="line"><span class="comment"># =======================================================================================================================================</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">iterm2_print_user_vars</span></span>() &#123;</span><br><span class="line">  iterm2_set_user_var badge $(dir_badges)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">dir_badges</span></span>() &#123;</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">read</span> directory badge || [[ -n <span class="string">"<span class="variable">$directory</span>"</span> ]]</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">if</span> [[ <span class="string">"<span class="variable">$PWD</span>"</span> == <span class="variable">$directory</span>* ]]; <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="variable">$badge</span></span><br><span class="line">            <span class="built_in">break</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span> &lt; ~/.badges</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># =======================================================================================================================================</span></span><br><span class="line"><span class="comment"># badge徽标-配置结束</span></span><br><span class="line"><span class="comment"># =======================================================================================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span> -e <span class="string">"<span class="variable">$&#123;HOME&#125;</span>/.iterm2_shell_integration.zsh"</span> &amp;&amp; <span class="built_in">source</span> <span class="string">"<span class="variable">$&#123;HOME&#125;</span>/.iterm2_shell_integration.zsh"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># =======================================================================================================================================</span></span><br><span class="line"><span class="comment"># Auto add env parameter $PROMPT_COMMAND when use non-Linux tty login by ssh.</span></span><br><span class="line"><span class="comment"># =======================================================================================================================================</span></span><br><span class="line"><span class="comment"># export PROMPT_COMMAND='echo -ne "\033]0;$&#123;USER&#125;@$&#123;HOSTNAME&#125;: $&#123;PWD&#125;\007"'</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$SSH_CONNECTION</span>"</span> != <span class="string">''</span> -a <span class="string">"<span class="variable">$TERM</span>"</span> != <span class="string">'linux'</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">declare</span> -a HOSTIP</span><br><span class="line">    HOSTIP=`<span class="built_in">echo</span> <span class="variable">$SSH_CONNECTION</span> |awk <span class="string">'&#123;print $3&#125;'</span>`</span><br><span class="line">    <span class="built_in">export</span> PROMPT_COMMAND=<span class="string">'echo -ne "\033]0;$&#123;USER&#125;@$HOSTIP:[$&#123;HOSTNAME%%.*&#125;]:$&#123;PWD/#$HOME/~&#125; \007"'</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment">###-tns-completion-start-###</span></span><br><span class="line"><span class="keyword">if</span> [ -f /Users/leo/.tnsrc ]; <span class="keyword">then</span> </span><br><span class="line">    <span class="built_in">source</span> /Users/leo/.tnsrc </span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment">###-tns-completion-end-###</span></span><br></pre></td></tr></table></figure>
<p>如果图标显示不出来可以进入 iTerm 的设置 &gt; Profiles &gt; Text &gt; Change Font &gt; 选择 <code>Hack Nerd Font</code> 字体 Regular 大小 18pt，完成后重新启动 iTerm ，设置完成。</p>
<h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><blockquote>
<p>打开配置文件：<code>~/.zshrc</code></p>
</blockquote>
<ul>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3d0aW5nL2F1dG9qdW1w" title="https://github.com/wting/autojump">autojump<i class="fa fa-external-link"></i></span>：快速切换目录</p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3J1cGEveg==" title="https://github.com/rupa/z">z<i class="fa fa-external-link"></i></span>: 功能同autojump，比autojump更轻量更快</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install z</span><br></pre></td></tr></table></figure>
<p><img src="https://user-gold-cdn.xitu.io/2019/1/15/168516fb5ec8eadc?imageslim" alt></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2p1bmVndW5uL2Z6Zg==" title="https://github.com/junegunn/fzf">fzf<i class="fa fa-external-link"></i></span>: 快速模糊搜寻器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install fzf</span><br></pre></td></tr></table></figure>
<p>在命令行的任何地方按下 <code>CTRL-T</code>, <code>CTRL-R</code>, and <code>ALT-C</code> (bash, zsh, fish)，就可以开启交互式模糊搜索界面，递归搜索当前目录下的文件。输入搜索项后，上、下键选择结果，回车上屏：<img src="https://user-gold-cdn.xitu.io/2019/1/15/168516fbb0f385c8?imageslim" alt></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3pzaC11c2Vycy96c2gtc3ludGF4LWhpZ2hsaWdodGluZw==" title="https://github.com/zsh-users/zsh-syntax-highlighting">zsh-syntax-highlighting<i class="fa fa-external-link"></i></span>：zsh 可用命令高亮</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</span><br></pre></td></tr></table></figure>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3pzaC11c2Vycy96c2gtYXV0b3N1Z2dlc3Rpb25z" title="https://github.com/zsh-users/zsh-autosuggestions">zsh-autosuggestions<i class="fa fa-external-link"></i></span>：命令自动提示</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="variable">$ZSH_CUSTOM</span>/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YzNkY2VjZWYyNjVkYTYxNjMwMjRiMWM=" title="https://juejin.im/post/5c3dcecef265da6163024b1c">优秀的命令行工具整理<i class="fa fa-external-link"></i></span></p>
</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YzQzZDkxY2YyNjVkYTYxMzM1NmQ5MGM=" title="https://juejin.im/post/5c43d91cf265da613356d90c">开发工具分享<i class="fa fa-external-link"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>mac</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>终端</tag>
        <tag>iTerm2</tag>
        <tag>zsh</tag>
      </tags>
  </entry>
  <entry>
    <title>scss</title>
    <url>/posts/df41afa4.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><img src="https://image.xuebin.me/4763463-7b9f34271ace44a8.png" alt></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>前端</tag>
        <tag>开发</tag>
        <tag>scss</tag>
      </tags>
  </entry>
  <entry>
    <title>3D全景漫游</title>
    <url>/posts/14be803b.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="全景漫游常见制作方法对比"><a href="#全景漫游常见制作方法对比" class="headerlink" title="全景漫游常见制作方法对比"></a>全景漫游常见制作方法对比</h1><p><img src="https://isux.tencent.com/wp-content/uploads/2016/03/20160329103750899.jpg" alt="全景漫游常见制作方法对比"></p>
<a id="more"></a>
<h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9xenMucXEuY29tL2lvdC9hY3Qvc3RhcnBsYW4vaW5kZXguaHRtbD9nX2Y9NTc1NyZhbXA7c3JjdHlwZT02MSZhbXA7dGlja2V0PQ==" title="https://qzs.qq.com/iot/act/starplan/index.html?g_f=5757&amp;srctype=61&amp;ticket=">QQ 物联星球计划<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cub256ZW9uemUuY29tLmJyL2NsaWVudGVzL2RyZWFtcGFyay8zNjAv" title="https://www.onzeonze.com.br/clientes/dreampark/360/">公园全景地图<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9rcnBhbm8uY29tL2tycGFub2Nsb3VkL3ZpZGVvL2RpbWFzL2luZGV4Lmh0bWw/dj0xMTlwcjk=" title="https://krpano.com/krpanocloud/video/dimas/index.html?v=119pr9">全景视频<i class="fa fa-external-link"></i></span></li>
</ul>
<h1 id="krpano"><a href="#krpano" class="headerlink" title="krpano"></a><span class="exturl" data-url="aHR0cHM6Ly9rcnBhbm8uY29tL2RvY3UvdHV0b3JpYWxzLw==" title="https://krpano.com/docu/tutorials/">krpano<i class="fa fa-external-link"></i></span></h1><iframe width="560" height="315" src="https://www.youtube.com/embed/x1F3X-f9roo" frameborder="0" allowfullscreen></iframe>

<h2 id="Krpano-功能介绍"><a href="#Krpano-功能介绍" class="headerlink" title="Krpano 功能介绍"></a>Krpano 功能介绍</h2><p>Krpano viewer 的主程序所使用的 XML 文件十分简洁，默认情况下仅可以做到场景的载入。其他所有功能，都以插件的形式实现，而每个插件既可以在自己的 XML 文件进行配置。 然后供主程序 XML 文件调用，也可以在主程序的 XML 文件中直接在<code>&lt;plugin&gt;</code>标签引入并进行配置。这样做的好处就是功能明确，结构清晰，便于扩展，利于维护。</p>
<h2 id="Krpano-的所有标签如下"><a href="#Krpano-的所有标签如下" class="headerlink" title="Krpano 的所有标签如下"></a>Krpano 的所有标签如下</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">inelude</span>&gt;</span>标签：载人其他的xml文件。</span><br><span class="line"><span class="tag">&lt;<span class="name">preview</span>&gt;</span>标签：在装载全景图片的过程中显示一个小的全景图。  </span><br><span class="line"><span class="tag">&lt;<span class="name">image</span>&gt;</span>标签：载人图片。</span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>标签：存储当前视的信息。</span><br><span class="line"><span class="tag">&lt;<span class="name">area</span>&gt;</span>标签：定义全景图中被展示的区域</span><br><span class="line"><span class="tag">&lt;<span class="name">display</span>&gt;</span>标签：定义渲染的质量和性能。</span><br><span class="line"><span class="tag">&lt;<span class="name">control</span>&gt;</span>标签：鼠标键盘的控制设置。</span><br><span class="line"><span class="tag">&lt;<span class="name">cursois</span>&gt;</span>标签：自定义光标的样式。</span><br><span class="line"><span class="tag">&lt;<span class="name">autorotate</span>&gt;</span>标签：当无用户交互时．自动扭曲／移动，缩放。</span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span>标签：载人其他flash程序，图片或者按钮，图标等。</span><br><span class="line"><span class="tag">&lt;<span class="name">hotspot</span>&gt;</span>标签：设置热点。</span><br><span class="line"><span class="tag">&lt;<span class="name">events</span>&gt;</span>标签：设置事件的响应。</span><br><span class="line"><span class="tag">&lt;<span class="name">aetion</span>&gt;</span>标签：定义行为．需要用脚本语言解释器解释。</span><br><span class="line"><span class="tag">&lt;<span class="name">eontextmenu</span>&gt;</span>标签：自定义鼠标右键菜单。</span><br><span class="line"><span class="tag">&lt;<span class="name">progress</span>&gt;</span>标签：设置装载时过程。</span><br><span class="line"><span class="tag">&lt;<span class="name">network</span>&gt;</span>标签：设置下载或者decode时的图片。</span><br><span class="line"><span class="tag">&lt;<span class="name">memory</span>&gt;</span>标签：设置内存使用情况。</span><br><span class="line"><span class="tag">&lt;<span class="name">security</span>&gt;</span>标签：设置安全性。</span><br><span class="line"><span class="tag">&lt;<span class="name">textstyle</span>&gt;</span>标签：定义样式。</span><br><span class="line"><span class="tag">&lt;<span class="name">lensflareset</span>&gt;</span>标签：定义一个镜头光晕样式。</span><br><span class="line"><span class="tag">&lt;<span class="name">lensflare</span>&gt;</span>标签：定义一个镜头光晕。</span><br><span class="line"><span class="tag">&lt;<span class="name">data</span>&gt;</span>标签：存储一些数据</span><br><span class="line"><span class="tag">&lt;<span class="name">scene</span>&gt;</span>标签：定义场景。</span><br></pre></td></tr></table></figure>
<h1 id="three-js"><a href="#three-js" class="headerlink" title="three.js"></a><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21yZG9vYi90aHJlZS5qcw==" title="https://github.com/mrdoob/three.js">three.js<i class="fa fa-external-link"></i></span></h1><blockquote>
<p>通过<span class="exturl" data-url="aHR0cHM6Ly90dGw3LnBjNi5jb20vZ20vcGFubzJ2ci56aXA=" title="https://ttl7.pc6.com/gm/pano2vr.zip"><code>pano2vr</code><i class="fa fa-external-link"></i></span>直接将鱼眼全景图生成立体空间的六个面；也可通过<code>Photoshop</code>或其他的专业 3D 建模工具，将鱼眼图贴到 3D 球面上，再将球面转为立方面，获得立体空间的六个面。</p>
<p><strong>使用到的 JS 库：</strong></p>
<ul>
<li>three.min.js</li>
<li>CSS3DRenderer.js</li>
</ul>
<p>源码 Demo：<span class="exturl" data-url="aHR0cHM6Ly9tcmxlby5naXRodWIuaW8vM0RQYW5vcmFtYQ==" title="https://mrleo.github.io/3DPanorama">https://mrleo.github.io/3DPanorama<i class="fa fa-external-link"></i></span></p>
<p><em>参考：<span class="exturl" data-url="aHR0cHM6Ly9pc3V4LnRlbmNlbnQuY29tLzNkLmh0bWw=" title="https://isux.tencent.com/3d.html">打造 H5 里的“3D 全景漫游”秘籍<i class="fa fa-external-link"></i></span></em></p>
</blockquote>
<h2 id="设置相机"><a href="#设置相机" class="headerlink" title="设置相机"></a>设置相机</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">camera = <span class="keyword">new</span> THREE.PerspectiveCamera(<span class="number">50</span>, <span class="built_in">window</span>.innerWidth / <span class="built_in">window</span>.innerHeight, <span class="number">1</span>, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure>
<h2 id="设置场景"><a href="#设置场景" class="headerlink" title="设置场景"></a>设置场景</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">scene = <span class="keyword">new</span> THREE.Scene()</span><br></pre></td></tr></table></figure>
<h2 id="定义-3D-空间的-6-个面的背景"><a href="#定义-3D-空间的-6-个面的背景" class="headerlink" title="定义 3D 空间的 6 个面的背景"></a>定义 3D 空间的 6 个面的背景</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sides = [</span><br><span class="line">  &#123;</span><br><span class="line">    url: <span class="string">'../static/img/gugong/posx.jpg'</span>,</span><br><span class="line">    position: [<span class="number">-512</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    rotation: [<span class="number">0</span>, <span class="built_in">Math</span>.PI / <span class="number">2</span>, <span class="number">0</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    url: <span class="string">'../static/img/gugong/negx.jpg'</span>,</span><br><span class="line">    position: [<span class="number">512</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    rotation: [<span class="number">0</span>, -<span class="built_in">Math</span>.PI / <span class="number">2</span>, <span class="number">0</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    url: <span class="string">'../static/img/gugong/posy.jpg'</span>,</span><br><span class="line">    position: [<span class="number">0</span>, <span class="number">512</span>, <span class="number">0</span>],</span><br><span class="line">    rotation: [<span class="built_in">Math</span>.PI / <span class="number">2</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI],</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    url: <span class="string">'../static/img/gugong/negy.jpg'</span>,</span><br><span class="line">    position: [<span class="number">0</span>, <span class="number">-512</span>, <span class="number">0</span>],</span><br><span class="line">    rotation: [-<span class="built_in">Math</span>.PI / <span class="number">2</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI],</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    url: <span class="string">'../static/img/gugong/posz.jpg'</span>,</span><br><span class="line">    position: [<span class="number">0</span>, <span class="number">0</span>, <span class="number">512</span>],</span><br><span class="line">    rotation: [<span class="number">0</span>, <span class="built_in">Math</span>.PI, <span class="number">0</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    url: <span class="string">'../static/img/gugong/negz.jpg'</span>,</span><br><span class="line">    position: [<span class="number">0</span>, <span class="number">0</span>, <span class="number">-512</span>],</span><br><span class="line">    rotation: [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h2 id="将定义好的-6-各面添加到空间中，并为每个空间指定-ID"><a href="#将定义好的-6-各面添加到空间中，并为每个空间指定-ID" class="headerlink" title="将定义好的 6 各面添加到空间中，并为每个空间指定 ID"></a>将定义好的 6 各面添加到空间中，并为每个空间指定 ID</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; sides.length; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> side = sides[i]</span><br><span class="line">  <span class="keyword">var</span> element = <span class="built_in">document</span>.createElement(<span class="string">'section'</span>)</span><br><span class="line">  element.id = <span class="string">'section_'</span> + i</span><br><span class="line">  <span class="keyword">var</span> imgElement = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>)</span><br><span class="line">  imgElement.width = <span class="number">1026</span> <span class="comment">// 2 pixels extra to close the gap.</span></span><br><span class="line">  imgElement.src = side.url</span><br><span class="line">  element.appendChild(imgElement)</span><br><span class="line">  <span class="keyword">var</span> object = <span class="keyword">new</span> THREE.CSS3DObject(element)</span><br><span class="line">  object.position.fromArray(side.position)</span><br><span class="line">  object.rotation.fromArray(side.rotation)</span><br><span class="line">  scene.add(object)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="设置渲染器"><a href="#设置渲染器" class="headerlink" title="设置渲染器"></a>设置渲染器</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">renderer = <span class="keyword">new</span> THREE.CSS3DRenderer() <span class="comment">//定义渲染器</span></span><br><span class="line">renderer.setSize(<span class="built_in">window</span>.innerWidth, <span class="built_in">window</span>.innerHeight) <span class="comment">//设置尺寸</span></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(renderer.domElement) <span class="comment">//将场景加入页面</span></span><br></pre></td></tr></table></figure>
<h2 id="空间实时渲染"><a href="#空间实时渲染" class="headerlink" title="空间实时渲染"></a>空间实时渲染</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  requestAnimationFrame(animate)</span><br><span class="line">  <span class="comment">//lon = Math.max(-180, Math.min(180, lon));//限制固定角度内旋转</span></span><br><span class="line">  <span class="comment">//lon += 0.1;//自动旋转</span></span><br><span class="line">  lon += <span class="number">0</span></span><br><span class="line">  lat = <span class="built_in">Math</span>.max(<span class="number">-85</span>, <span class="built_in">Math</span>.min(<span class="number">85</span>, lat))</span><br><span class="line">  phi = THREE.Math.degToRad(<span class="number">90</span> - lat)</span><br><span class="line">  theta = THREE.Math.degToRad(lon)</span><br><span class="line">  target.x = <span class="built_in">Math</span>.sin(phi) * <span class="built_in">Math</span>.cos(theta)</span><br><span class="line">  target.y = <span class="built_in">Math</span>.cos(phi)</span><br><span class="line">  target.z = <span class="built_in">Math</span>.sin(phi) * <span class="built_in">Math</span>.sin(theta)</span><br><span class="line">  camera.lookAt(target)</span><br><span class="line">  renderer.render(scene, camera)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="为每个面构建空间的图标物件"><a href="#为每个面构建空间的图标物件" class="headerlink" title="为每个面构建空间的图标物件"></a>为每个面构建空间的图标物件</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addIcon</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> imgIcon = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>)</span><br><span class="line">  imgIcon.src = <span class="string">'../static/img/arrow_right.png'</span></span><br><span class="line">  imgIcon.classList.add(<span class="string">'icon'</span>)</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'section_4'</span>).appendChild(imgIcon)</span><br><span class="line">&#125;</span><br><span class="line">addIcon()</span><br></pre></td></tr></table></figure>
<h2 id="窗体大小改变更新相机"><a href="#窗体大小改变更新相机" class="headerlink" title="窗体大小改变更新相机"></a>窗体大小改变更新相机</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onWindowResize</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  camera.aspect = <span class="built_in">window</span>.innerWidth / <span class="built_in">window</span>.innerHeight</span><br><span class="line">  camera.updateProjectionMatrix()</span><br><span class="line">  renderer.setSize(<span class="built_in">window</span>.innerWidth, <span class="built_in">window</span>.innerHeight)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="监听鼠标事件"><a href="#监听鼠标事件" class="headerlink" title="监听鼠标事件"></a>监听鼠标事件</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onDocumentMouseDown</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event.preventDefault()</span><br><span class="line">  <span class="built_in">document</span>.addEventListener(<span class="string">'mousemove'</span>, onDocumentMouseMove, <span class="literal">false</span>)</span><br><span class="line">  <span class="built_in">document</span>.addEventListener(<span class="string">'mouseup'</span>, onDocumentMouseUp, <span class="literal">false</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onDocumentMouseMove</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> movementX = event.movementX || event.mozMovementX || event.webkitMovementX || <span class="number">0</span></span><br><span class="line">  <span class="keyword">var</span> movementY = event.movementY || event.mozMovementY || event.webkitMovementY || <span class="number">0</span></span><br><span class="line">  lon -= movementX * <span class="number">0.1</span></span><br><span class="line">  lat += movementY * <span class="number">0.1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onDocumentMouseUp</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.removeEventListener(<span class="string">'mousemove'</span>, onDocumentMouseMove)</span><br><span class="line">  <span class="built_in">document</span>.removeEventListener(<span class="string">'mouseup'</span>, onDocumentMouseUp)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 鼠标滚轮改变相机焦距</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onDocumentMouseWheel</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  camera.fov -= event.wheelDeltaY * <span class="number">0.05</span></span><br><span class="line">  camera.updateProjectionMatrix()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="监听触摸事件"><a href="#监听触摸事件" class="headerlink" title="监听触摸事件"></a>监听触摸事件</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onDocumentTouchStart</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event.preventDefault()</span><br><span class="line">  <span class="keyword">var</span> touch = event.touches[<span class="number">0</span>]</span><br><span class="line">  touchX = touch.screenX</span><br><span class="line">  touchY = touch.screenY</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onDocumentTouchMove</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event.preventDefault()</span><br><span class="line">  <span class="keyword">var</span> touch = event.touches[<span class="number">0</span>]</span><br><span class="line">  lon -= (touch.screenX - touchX) * <span class="number">0.1</span></span><br><span class="line">  lat += (touch.screenY - touchY) * <span class="number">0.1</span></span><br><span class="line">  touchX = touch.screenX</span><br><span class="line">  touchY = touch.screenY</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="基于-Three-js-的-360X180-度全景图预览插件"><a href="#基于-Three-js-的-360X180-度全景图预览插件" class="headerlink" title="基于 Three.js 的 360X180 度全景图预览插件"></a><span class="exturl" data-url="aHR0cHM6Ly93d3cuaHRtbGVhZi5jb20valF1ZXJ5L0ltYWdlLUVmZmVjdHMvMjAxNTA4MTEyMzk0Lmh0bWw=" title="https://www.htmleaf.com/jQuery/Image-Effects/201508112394.html">基于 Three.js 的 360X180 度全景图预览插件<i class="fa fa-external-link"></i></span></h1><blockquote>
<p>Photo Sphere Viewer 是一款基于 Three.js 的 360X180 度全景图预览 js 插件。该 js 插件可以 360 度旋转查看全景图，也可以上下 180 度查看图片。使用该插件的唯一要求是浏览器支持 canvas 或 WebGL。</p>
</blockquote>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>使用该全景图插件时要引入 three.min.js 和 photo-sphere-viewer.min.js 文件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">"js/three.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script src=<span class="string">"js/photo-sphere-viewer.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h2 id="HTML-结构"><a href="#HTML-结构" class="headerlink" title="HTML 结构"></a>HTML 结构</h2><p>可以创建一个空的<code>&lt;div&gt;</code>来放置全景图，通过 CSS 来设置它的尺寸。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="初始化插件"><a href="#初始化插件" class="headerlink" title="初始化插件"></a>初始化插件</h2><p>要初始化该全景图插件，可以创建一个新的 PhotoSphereViewer 对象，然后在这个对象中插入一个参数对象，有两个参数是必须设置的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> PSV = <span class="keyword">new</span> PhotoSphereViewer(&#123;</span><br><span class="line">  <span class="comment">// Path to the panorama</span></span><br><span class="line">  panorama: <span class="string">'1.jpg'</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Container</span></span><br><span class="line">  container: div,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a>配置参数</h2><p>下面是该全景图插件的所有可用配置参数：</p>
<ul>
<li><code>panorama</code>：必填参数，全景图的路径。</li>
<li><code>container</code>：必填参数，放置全景图的<code>div</code>元素。</li>
<li><code>autoload</code>：可选，默认值为<code>true</code>，<code>true</code>为自动调用全景图，<code>false</code>为在后面加载全景图（通过<code>.load()</code>方法）。</li>
<li><code>usexmpdata</code>：可选，默认值为<code>true</code>，如果 Photo Sphere Viewer 必须读入 XMP 数据则为<code>true</code>。</li>
<li><code>default_position</code>：可选，默认值为<code>{}</code>，定义默认的位置，及用户看见的第一个点，例如：<code>{long: Math.PI, lat: Math.PI/2}</code>。</li>
<li><code>min_fov</code>：可选，默认值为 30，观察的最小区域，单位 degrees，在 1-179 之间。</li>
<li><code>max_fov</code>：可选，默认值为 90，观察的最大区域，单位 degrees，在 1-179 之间。</li>
<li><code>allow_user_interactions</code>：可选，默认值为<code>true</code>，设置为<code>false</code>则禁止用户和全景图交互（导航条不可用）。</li>
<li><code>tilt_up_max</code>：可选，默认值为<code>Math.PI/2</code>，向上倾斜的最大角度，单位 radians。</li>
<li><code>tilt_down_max</code>：可选，默认值为<code>Math.PI/2</code>，向下倾斜的最大角度，单位 radians。</li>
<li><code>zoom_level</code>：可选，默认值为 0，默认的缩放级别，值在 0-100 之间。</li>
<li><code>long_offset</code>：可选，默认值为<code>PI/360</code>，mouse/touch 移动时每像素经过的经度值。</li>
<li><code>lat_offset</code>：可选，默认值为<code>PI/180</code>，mouse/touch 移动时每像素经过的纬度值。</li>
<li><code>time_anim</code>：可选，默认值为 2000，全景图在<code>time_anim</code>毫秒后会自动进行动画。（设置为 false 禁用它）</li>
<li><code>theta_offset</code>：过时的选项，可选，默认值为 1440，自动动画时水平方向的速度。</li>
<li><code>anim_speed</code>：可选，默认值为<code>2rpm</code>，动画的速度，每秒/分钟多少 radians/degrees/revolutions。</li>
<li><code>navbar</code>：可选值，默认为<code>false</code>。显示导航条。</li>
<li><code>navbar_style</code>：可选值，默认为<code>{}</code>。导航条的自定义样式。下面是可用的样式列表：<ul>
<li><code>backgroundColor</code>：导航条的背景颜色，默认值为<code>rgba(61, 61, 61, 0.5)</code>。</li>
<li><code>buttonsColor</code>：按钮的前景颜色，默认值为<code>transparent</code>。</li>
<li><code>activeButtonsBackgroundColor</code>：按钮激活状态的背景颜色，默认值为<code>rgba(255, 255, 255, 0.1)</code>。</li>
<li><code>buttonsHeight</code>：按钮的高度，单位像素，默认值为<code>20</code>。</li>
<li><code>autorotateThickness</code>：autorotate 图标的厚度，单位像素，默认值为<code>1</code>。</li>
<li><code>zoomRangeWidth</code>：缩放的范围，单位显示，默认值 50。</li>
<li><code>zoomRangeThickness</code>：缩放的范围的厚度，单位像素，默认值 1。</li>
<li><code>zoomRangeDisk</code>：缩放范围的圆盘直径，单位像素，默认值为 7。</li>
<li><code>fullscreenRatio</code>：全屏图标的比例，默认值为<code>3/4</code>。</li>
<li><code>fullscreenThickness</code>：全屏图标的厚度，单位像素，默认值为 2。</li>
</ul>
</li>
<li><code>loading_msg</code>：可选，默认值为<code>Loading…</code>，图片加载时的提示文字。</li>
<li><code>loading_img</code>：可选，默认值为<code>null</code>，在加载时显示的图片的路径。</li>
<li><code>size</code>：可选，默认值<code>null</code>，全景图容器的最终尺寸。例如：<code>{width: 500, height: 300}</code>。</li>
<li><code>onready</code>：可选值，默认值为<code>null</code>。当全景图准备就绪并且第一张图片显示时的回调函数。</li>
</ul>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuaGV3ZWJnbC5jb20v" title="https://www.hewebgl.com/">WebGL 中文网<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly83MjB5dW4uY29tLw==" title="https://720yun.com/">720 云全景虚拟现实社区<i class="fa fa-external-link"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>3D</tag>
        <tag>全景</tag>
      </tags>
  </entry>
  <entry>
    <title>WebTorrent Desktop – 支持 BT 种子、磁力链接，可以「边播边下」</title>
    <url>/posts/90e279c8.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote>
<p>一款可以直接在线播放视频的 BT 下载客户端，支持种子文件与磁力链接，拥有 Win/macOS/Linux 客户端程序</p>
<p>官方网站：<span class="exturl" data-url="aHR0cHM6Ly93ZWJ0b3JyZW50LmlvLw==" title="https://webtorrent.io/">https://webtorrent.io/<i class="fa fa-external-link"></i></span></p>
<p>小众软件的介绍：<span class="exturl" data-url="aHR0cHM6Ly93d3cuYXBwaW5uLmNvbS93ZWJ0b3JyZW50LWRlc2t0b3Av" title="https://www.appinn.com/webtorrent-desktop/">https://www.appinn.com/webtorrent-desktop/<i class="fa fa-external-link"></i></span></p>
</blockquote>
<a id="more"></a>
<p><img src="https://webtorrent.io/img/screenshot-player2.png" alt="图片来自官方网站"></p>
<p>对于视频、电影/电视剧，<strong>下载后再播放</strong> 和 <strong>直接播放</strong> 是完全两个不同的境界，这也是之前很多软件<em>提供过</em>的服务。然而由于视频内容的问题，类似服务逐步取消、退化。</p>
<p>本来，有版权的在线视频服务是一个非常好的替代，可惜内容源被管制，需求又是刚性的，于是古老的下载方式又渐渐流行起来。</p>
<p><img src="https://img3.appinn.com/images/201704/2017-04-12-12-54-23.jpg" alt="图片来自小众软件"></p>
<p>WebTorrent 的实现方式很酷，在 <span class="exturl" data-url="aHR0cHM6Ly93ZWJ0b3JyZW50LmlvLw==" title="https://webtorrent.io/">WebTorrent 首页<i class="fa fa-external-link"></i></span> 就放着一个可以在线播放的视频文件</p>
<p>上面显示了一个播放器、文件大小、种子数，以及正在连接的其它几个 IP。</p>
<p>WebTorrent 是用于 Node.js 和浏览器的流 torrent 客户端，完全使用 JavaScript 编写。WebTorrent 是个轻量级，快速的开源 BT 客户端，拥有非常棒的用户体验。</p>
<p>在 node.js 中，模块只是简单的 torrent 客户端，使用 TCP 和 UDP 来和其他 torrent 客户端进行通讯。</p>
<p>在浏览器中，WebTorrent 使用 WebRTC (数据通道)进行点对点的传输，无需任何浏览器插件，扩展或者安装。注意：在浏览器上，WebTorrent 不 支持 UDP/TCP 点对点传输。</p>
<p>由于是基于 node.js、WebRTC 的开源技术，任何人都可以通过 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy93ZWJ0b3JyZW50" title="https://github.com/feross/webtorrent">Github<i class="fa fa-external-link"></i></span> 获取源码并搭建一个视频网站，爱折腾的同学可以尝试下。</p>
<p>普通用户下载并运行 WebTorrent Desktop 就可以了，将种子文件拖进界面，或者粘贴磁力链接，稍微缓冲 WebTorrent Desktop 就开始播放了。</p>
<p><img src="https://webtorrent.io/img/screenshot-main.png" alt="WebTorrent Desktop 客户端截图"></p>
<blockquote>
<p><strong>技巧：</strong></p>
<p>如果碰到无法播放的情况，将种子扔进 <span class="exturl" data-url="aHR0cHM6Ly9pbnN0YW50LmlvLw==" title="https://instant.io/">instant.io<i class="fa fa-external-link"></i></span>，一会就可以播放了。</p>
<p><img src="https://img3.appinn.com/images/201704/2017-04-12-1-09-17.jpg!o" alt="图片来自小众软件"></p>
<p>这个 Instant.io 是基于 WebTorrent 的文件传输工具，都开源，能自己折腾.</p>
</blockquote>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>视频播放</tag>
        <tag>下载</tag>
      </tags>
  </entry>
  <entry>
    <title>vue双向绑定学习笔记</title>
    <url>/posts/55718283.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="vue-双向绑定效果"><a href="#vue-双向绑定效果" class="headerlink" title="vue 双向绑定效果"></a>vue 双向绑定效果</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"mvvm-app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"word"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;word&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"sayHi"</span>&gt;</span>change model<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/observer.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/watcher.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/compile.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/mvvm.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> MVVM(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#mvvm-app'</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            word: <span class="string">'Hello World!'</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            sayHi: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.word = <span class="string">'Hi, everybody!'</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>效果：</strong></p>
<p><img src="https://image.xuebin.me/vue双向绑定效果.gif.gif" alt="vue双向绑定效果.gif.gif"></p>
<a id="more"></a>
<h1 id="实现双向绑定效果的做法"><a href="#实现双向绑定效果的做法" class="headerlink" title="实现双向绑定效果的做法"></a>实现双向绑定效果的做法</h1><blockquote>
<p>目前几种主流的 mvc(vm)框架都实现了单向数据绑定，而我所理解的双向数据绑定无非就是在单向绑定的基础上给可输入元素（input、textare 等）添加了 change(input)事件，来动态修改 model 和 view，并没有多高深。所以无需太过介怀是实现的单向或双向绑定。</p>
</blockquote>
<p>实现数据绑定的做法有大致如下几种：</p>
<ul>
<li><p><strong>发布者-订阅者模式（backbone.js）</strong></p>
<p>一般通过 sub, pub 的方式实现数据和视图的绑定监听，更新数据方式通常做法是 <code>vm.set(&#39;property&#39;, value)</code>，这里有篇文章讲的比较详细，有兴趣可点<span class="exturl" data-url="aHR0cHM6Ly93d3cuaHRtbC1qcy5jb20vYXJ0aWNsZS9TdHVkeS1vZi10d293YXktZGF0YS1iaW5kaW5nLUphdmFTY3JpcHQtdGFsay1hYm91dC1KYXZhU2NyaXB0LWV2ZXJ5LWRheQ==" title="https://www.html-js.com/article/Study-of-twoway-data-binding-JavaScript-talk-about-JavaScript-every-day">这里<i class="fa fa-external-link"></i></span>。</p>
<blockquote>
<p>这种方式现在毕竟太 low 了，我们更希望通过 <code>vm.property = value</code>这种方式更新数据，同时自动更新视图，于是有了下面两种方式</p>
</blockquote>
</li>
<li><p><strong>脏值检查（angular.js）</strong></p>
<p>angular.js 是通过脏值检测的方式比对数据是否有变更，来决定是否更新视图，最简单的方式就是通过 <code>setInterval()</code> 定时轮询检测数据变动，当然 Google 不会这么 low，angular 只有在指定的事件触发时进入脏值检测，大致如下：</p>
<ul>
<li>DOM 事件，譬如用户输入文本，点击按钮等( ng-click )</li>
<li>XHR 响应事件 ( $http )</li>
<li>浏览器 Location 变更事件 ( $location )</li>
<li>Timer 事件( $timeout , $interval )</li>
<li>执行 $digest() 或 $apply()</li>
</ul>
</li>
<li><p><strong>数据劫持（vue.js）</strong></p>
<p>vue.js 则是采用数据劫持结合发布者-订阅者模式的方式，通过<code>Object.defineProperty()</code>来劫持各个属性的<code>setter</code>，<code>getter</code>，在数据变动时发布消息给订阅者，触发相应的监听回调。</p>
</li>
</ul>
<h1 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h1><p>已经了解到 vue 是通过数据劫持的方式来做数据绑定的，其中最核心的方法便是通过<code>Object.defineProperty()</code>来实现对属性的劫持，达到监听数据变动的目的，无疑这个方法是本文中最重要、最基础的内容之一，如果不熟悉 defineProperty，猛戳<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2RlZmluZVByb3BlcnR5" title="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty">这里<i class="fa fa-external-link"></i></span><br>整理了一下，要实现 mvvm 的双向绑定，就必须要实现以下几点：</p>
<ol>
<li>实现一个数据监听器 Observer，能够对数据对象的所有属性进行监听，如有变动可拿到最新值并通知订阅者;</li>
<li>实现一个指令解析器 Compile，对每个元素节点的指令进行扫描和解析，根据指令模板替换数据，以及绑定相应的更新函数;</li>
<li>实现一个 Watcher，作为连接 Observer 和 Compile 的桥梁，能够订阅并收到每个属性变动的通知，执行指令绑定的相应回调函数，从而更新视图;</li>
<li>mvvm 入口函数，整合以上三者.</li>
</ol>
<p>上述流程如图所示：</p>
<p><img src="https://image.xuebin.me/vue双向绑定流程.png" alt="vue双向绑定流程.png"></p>
<h2 id="实现-Observer"><a href="#实现-Observer" class="headerlink" title="实现 Observer"></a>实现 Observer</h2><p>我们知道可以利用<code>Obeject.defineProperty()</code>来监听属性变动。<br>那么将需要 observe 的数据对象进行递归遍历，包括子属性对象的属性，都加上 <code>setter</code>和<code>getter</code>。<br>这样的话，给这个对象的某个值赋值，就会触发<code>setter</code>，那么就能监听到了数据变化..</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> data = &#123; <span class="attr">name</span>: <span class="string">'kindeng'</span> &#125;</span><br><span class="line">observe(data)</span><br><span class="line">data.name = <span class="string">'dmq'</span> <span class="comment">// 哈哈哈，监听到值变化了 kindeng --&gt; dmq</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 观察数据对象并递归遍历</span></span><br><span class="line"><span class="comment"> * @param &#123;any&#125; data 数据对象</span></span><br><span class="line"><span class="comment"> * @returns</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">observe</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!data || <span class="keyword">typeof</span> data !== <span class="string">'object'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 取出所有属性遍历</span></span><br><span class="line">  <span class="built_in">Object</span>.keys(data).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    defineReactive(data, key, data[key])</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 为数据对象添加getter和setter</span></span><br><span class="line"><span class="comment"> * @param &#123;any&#125; data 数据对象</span></span><br><span class="line"><span class="comment"> * @param &#123;any&#125; key 数据对象中的键</span></span><br><span class="line"><span class="comment"> * @param &#123;any&#125; val 数据对象中的键的对应值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span>(<span class="params">data, key, val</span>) </span>&#123;</span><br><span class="line">  observe(val) <span class="comment">// 监听子属性</span></span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(data, key, &#123;</span><br><span class="line">    enumerable: <span class="literal">true</span>, <span class="comment">// 可枚举</span></span><br><span class="line">    configurable: <span class="literal">false</span>, <span class="comment">// 不能再define</span></span><br><span class="line">    <span class="keyword">get</span>: function() &#123;</span><br><span class="line">      <span class="keyword">return</span> val</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span>: function(newVal) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'哈哈哈，监听到值变化了 '</span>, val, <span class="string">' --&gt; '</span>, newVal)</span><br><span class="line">      val = newVal</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样我们已经可以监听每个数据的变化了，那么监听到变化之后就是怎么通知订阅者了，所以接下来我们需要实现一个<code>消息订阅器</code>，很简单，维护一个数组，用来收集订阅者，数据变动触发 notify，再调用订阅者的 update 方法，代码改善之后是这样：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ... 省略</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span>(<span class="params">data, key, val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> dep = <span class="keyword">new</span> Dep()</span><br><span class="line">  observe(val) <span class="comment">// 监听子属性</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(data, key, &#123;</span><br><span class="line">    <span class="comment">// ... 省略</span></span><br><span class="line">    <span class="keyword">set</span>: function(newVal) &#123;</span><br><span class="line">      <span class="keyword">if</span> (val === newVal) <span class="keyword">return</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'哈哈哈，监听到值变化了 '</span>, val, <span class="string">' --&gt; '</span>, newVal)</span><br><span class="line">      val = newVal</span><br><span class="line">      dep.notify() <span class="comment">// 通知所有订阅者</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dep</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.subs = []</span><br><span class="line">&#125;</span><br><span class="line">Dep.prototype = &#123;</span><br><span class="line">  addSub: <span class="function"><span class="keyword">function</span>(<span class="params">sub</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.subs.push(sub)</span><br><span class="line">  &#125;,</span><br><span class="line">  notify: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.subs.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">sub</span>) </span>&#123;</span><br><span class="line">      sub.update()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>那么问题来了，谁是订阅者？怎么往订阅器添加订阅者？<br>没错，上面的思路整理中我们已经明确订阅者应该是 Watcher, 而且<code>var dep = new Dep();</code>是在 <code>defineReactive</code>方法内部定义的，所以想通过<code>dep</code>添加订阅者，就必须要在闭包内操作，所以我们可以在 <code>getter</code>里面动手脚：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Observer.js</span></span><br><span class="line"><span class="comment">// ...省略</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(data, key, &#123;</span><br><span class="line">  <span class="keyword">get</span>: function() &#123;</span><br><span class="line">    <span class="comment">// 由于需要在闭包内添加watcher，所以通过Dep定义一个全局target属性，暂存watcher, 添加完移除</span></span><br><span class="line">    Dep.target &amp;&amp; dep.addDep(Dep.target)</span><br><span class="line">    <span class="keyword">return</span> val</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ... 省略</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Watcher.js</span></span><br><span class="line">Watcher.prototype = &#123;</span><br><span class="line">  <span class="keyword">get</span>: function(key) &#123;</span><br><span class="line">    Dep.target = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">this</span>.value = data[key] <span class="comment">// 这里会触发属性的getter，从而添加订阅者</span></span><br><span class="line">    Dep.target = <span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里已经实现了一个 Observer 了，已经具备了监听数据和数据变化通知订阅者的功能。</p>
<h3 id="Observer-完整代码"><a href="#Observer-完整代码" class="headerlink" title="Observer 完整代码"></a>Observer 完整代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Observer</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.data = data</span><br><span class="line">  <span class="keyword">this</span>.walk(data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Observer.prototype = &#123;</span><br><span class="line">  walk: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> me = <span class="keyword">this</span></span><br><span class="line">    <span class="built_in">Object</span>.keys(data).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">      me.convert(key, data[key])</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  convert: <span class="function"><span class="keyword">function</span>(<span class="params">key, val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.defineReactive(<span class="keyword">this</span>.data, key, val)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  defineReactive: <span class="function"><span class="keyword">function</span>(<span class="params">data, key, val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dep = <span class="keyword">new</span> Dep()</span><br><span class="line">    <span class="keyword">var</span> childObj = observe(val)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(data, key, &#123;</span><br><span class="line">      enumerable: <span class="literal">true</span>, <span class="comment">// 可枚举</span></span><br><span class="line">      configurable: <span class="literal">false</span>, <span class="comment">// 不能再define</span></span><br><span class="line">      <span class="keyword">get</span>: function() &#123;</span><br><span class="line">        <span class="keyword">if</span> (Dep.target) &#123;</span><br><span class="line">          dep.depend()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> val</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="keyword">set</span>: function(newVal) &#123;</span><br><span class="line">        <span class="keyword">if</span> (newVal === val) &#123;</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        val = newVal</span><br><span class="line">        <span class="comment">// 新的值是object的话，进行监听</span></span><br><span class="line">        childObj = observe(newVal)</span><br><span class="line">        <span class="comment">// 通知订阅者</span></span><br><span class="line">        dep.notify()</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">observe</span>(<span class="params">value, vm</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!value || <span class="keyword">typeof</span> value !== <span class="string">'object'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Observer(value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> uid = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dep</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.id = uid++</span><br><span class="line">  <span class="keyword">this</span>.subs = []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Dep.prototype = &#123;</span><br><span class="line">  addSub: <span class="function"><span class="keyword">function</span>(<span class="params">sub</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.subs.push(sub)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  depend: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Dep.target.addDep(<span class="keyword">this</span>)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  removeSub: <span class="function"><span class="keyword">function</span>(<span class="params">sub</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> index = <span class="keyword">this</span>.subs.indexOf(sub)</span><br><span class="line">    <span class="keyword">if</span> (index != <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.subs.splice(index, <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  notify: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.subs.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">sub</span>) </span>&#123;</span><br><span class="line">      sub.update()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Dep.target = <span class="literal">null</span></span><br></pre></td></tr></table></figure>
<h2 id="实现-Compile"><a href="#实现-Compile" class="headerlink" title="实现 Compile"></a>实现 Compile</h2><p>compile 主要做的事情是解析模板指令，将模板中的变量替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，更新视图.</p>
<p><img src="https://image.xuebin.me/解析模板指令流程.png" alt="解析模板指令流程.png"></p>
<p>因为遍历解析的过程有多次操作 dom 节点，为提高性能和效率，会先将跟节点<code>el</code>转换成文档碎片<code>fragment</code>进行解析编译操作，解析完成，再将<code>fragment</code>添加回原来的真实 dom 节点中</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Compile</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.$el = <span class="keyword">this</span>.isElementNode(el) ? el : <span class="built_in">document</span>.querySelector(el)</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.$el) &#123;</span><br><span class="line">    <span class="keyword">this</span>.$fragment = <span class="keyword">this</span>.node2Fragment(<span class="keyword">this</span>.$el)</span><br><span class="line">    <span class="keyword">this</span>.init()</span><br><span class="line">    <span class="keyword">this</span>.$el.appendChild(<span class="keyword">this</span>.$fragment)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">Compile.prototype = &#123;</span><br><span class="line">  init: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.compileElement(<span class="keyword">this</span>.$fragment)</span><br><span class="line">  &#125;,</span><br><span class="line">  node2Fragment: <span class="function"><span class="keyword">function</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> fragment = <span class="built_in">document</span>.createDocumentFragment(),</span><br><span class="line">      child</span><br><span class="line">    <span class="comment">// 将原生节点拷贝到fragment</span></span><br><span class="line">    <span class="keyword">while</span> ((child = el.firstChild)) &#123;</span><br><span class="line">      fragment.appendChild(child)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fragment</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>compileElement 方法将遍历所有节点及其子节点，进行扫描解析编译，调用对应的指令渲染函数进行数据渲染，并调用对应的指令更新函数进行绑定</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Compile.prototype = &#123;</span><br><span class="line">  <span class="comment">// ... 省略</span></span><br><span class="line">  compileElement: <span class="function"><span class="keyword">function</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> childNodes = el.childNodes,</span><br><span class="line">      me = <span class="keyword">this</span></span><br><span class="line">    ;[].slice.call(childNodes).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> text = node.textContent</span><br><span class="line">      <span class="keyword">var</span> reg = <span class="regexp">/\&#123;\&#123;(.*)\&#125;\&#125;/</span> <span class="comment">// 表达式文本</span></span><br><span class="line">      <span class="comment">// 按元素节点方式编译</span></span><br><span class="line">      <span class="keyword">if</span> (me.isElementNode(node)) &#123;</span><br><span class="line">        me.compile(node)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (me.isTextNode(node) &amp;&amp; reg.test(text)) &#123;</span><br><span class="line">        me.compileText(node, <span class="built_in">RegExp</span>.$<span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 遍历编译子节点</span></span><br><span class="line">      <span class="keyword">if</span> (node.childNodes &amp;&amp; node.childNodes.length) &#123;</span><br><span class="line">        me.compileElement(node)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  compile: <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> nodeAttrs = node.attributes,</span><br><span class="line">      me = <span class="keyword">this</span></span><br><span class="line">    ;[].slice.call(nodeAttrs).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">attr</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 规定：指令以 v-xxx 命名</span></span><br><span class="line">      <span class="comment">// 如 &lt;span v-text="content"&gt;&lt;/span&gt; 中指令为 v-text</span></span><br><span class="line">      <span class="keyword">var</span> attrName = attr.name <span class="comment">// v-text</span></span><br><span class="line">      <span class="keyword">if</span> (me.isDirective(attrName)) &#123;</span><br><span class="line">        <span class="keyword">var</span> exp = attr.value <span class="comment">// content</span></span><br><span class="line">        <span class="keyword">var</span> dir = attrName.substring(<span class="number">2</span>) <span class="comment">// text</span></span><br><span class="line">        <span class="keyword">if</span> (me.isEventDirective(dir)) &#123;</span><br><span class="line">          <span class="comment">// 事件指令, 如 v-on:click</span></span><br><span class="line">          compileUtil.eventHandler(node, me.$vm, exp, dir)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 普通指令</span></span><br><span class="line">          compileUtil[dir] &amp;&amp; compileUtil[dir](node, me.$vm, exp)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指令处理集合</span></span><br><span class="line"><span class="keyword">var</span> compileUtil = &#123;</span><br><span class="line">  text: <span class="function"><span class="keyword">function</span>(<span class="params">node, vm, exp</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.bind(node, vm, exp, <span class="string">'text'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...省略</span></span><br><span class="line">  bind: <span class="function"><span class="keyword">function</span>(<span class="params">node, vm, exp, dir</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> updaterFn = updater[dir + <span class="string">'Updater'</span>]</span><br><span class="line">    <span class="comment">// 第一次初始化视图</span></span><br><span class="line">    updaterFn &amp;&amp; updaterFn(node, vm[exp])</span><br><span class="line">    <span class="comment">// 实例化订阅者，此操作会在对应的属性消息订阅器中添加了该订阅者watcher</span></span><br><span class="line">    <span class="keyword">new</span> Watcher(vm, exp, <span class="function"><span class="keyword">function</span>(<span class="params">value, oldValue</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 一旦属性值有变化，会收到通知执行此更新函数，更新视图</span></span><br><span class="line">      updaterFn &amp;&amp; updaterFn(node, value, oldValue)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新函数</span></span><br><span class="line"><span class="keyword">var</span> updater = &#123;</span><br><span class="line">  textUpdater: <span class="function"><span class="keyword">function</span>(<span class="params">node, value</span>) </span>&#123;</span><br><span class="line">    node.textContent = <span class="keyword">typeof</span> value == <span class="string">'undefined'</span> ? <span class="string">''</span> : value</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里通过递归遍历保证了每个节点及子节点都会解析编译到，包括了&#123;&#123;&#125;&#125;表达式声明的文本节点。指令的声明规定是通过特定前缀的节点属性来标记，如<code>&lt;span v-text=&quot;content&quot; other-attr</code>中<code>v-text</code>便是指令，而<code>other-attr</code>不是指令，只是普通的属性。<br>监听数据、绑定更新函数的处理是在<code>compileUtil.bind()</code>这个方法中，通过<code>new Watcher()</code>添加回调来接收数据变化的通知。</p>
<h3 id="Compile-完整代码"><a href="#Compile-完整代码" class="headerlink" title="Compile 完整代码"></a>Compile 完整代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Compile</span>(<span class="params">el, vm</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.$vm = vm</span><br><span class="line">  <span class="keyword">this</span>.$el = <span class="keyword">this</span>.isElementNode(el) ? el : <span class="built_in">document</span>.querySelector(el)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.$el) &#123;</span><br><span class="line">    <span class="keyword">this</span>.$fragment = <span class="keyword">this</span>.node2Fragment(<span class="keyword">this</span>.$el)</span><br><span class="line">    <span class="keyword">this</span>.init()</span><br><span class="line">    <span class="keyword">this</span>.$el.appendChild(<span class="keyword">this</span>.$fragment)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Compile.prototype = &#123;</span><br><span class="line">  node2Fragment: <span class="function"><span class="keyword">function</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> fragment = <span class="built_in">document</span>.createDocumentFragment(),</span><br><span class="line">      child</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将原生节点拷贝到fragment</span></span><br><span class="line">    <span class="keyword">while</span> ((child = el.firstChild)) &#123;</span><br><span class="line">      fragment.appendChild(child)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fragment</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  init: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.compileElement(<span class="keyword">this</span>.$fragment)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  compileElement: <span class="function"><span class="keyword">function</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> childNodes = el.childNodes,</span><br><span class="line">      me = <span class="keyword">this</span></span><br><span class="line"></span><br><span class="line">    ;[].slice.call(childNodes).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> text = node.textContent</span><br><span class="line">      <span class="keyword">var</span> reg = <span class="regexp">/\&#123;\&#123;(.*)\&#125;\&#125;/</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (me.isElementNode(node)) &#123;</span><br><span class="line">        me.compile(node)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (me.isTextNode(node) &amp;&amp; reg.test(text)) &#123;</span><br><span class="line">        me.compileText(node, <span class="built_in">RegExp</span>.$<span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (node.childNodes &amp;&amp; node.childNodes.length) &#123;</span><br><span class="line">        me.compileElement(node)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  compile: <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> nodeAttrs = node.attributes,</span><br><span class="line">      me = <span class="keyword">this</span></span><br><span class="line"></span><br><span class="line">    ;[].slice.call(nodeAttrs).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">attr</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> attrName = attr.name</span><br><span class="line">      <span class="keyword">if</span> (me.isDirective(attrName)) &#123;</span><br><span class="line">        <span class="keyword">var</span> exp = attr.value</span><br><span class="line">        <span class="keyword">var</span> dir = attrName.substring(<span class="number">2</span>)</span><br><span class="line">        <span class="comment">// 事件指令</span></span><br><span class="line">        <span class="keyword">if</span> (me.isEventDirective(dir)) &#123;</span><br><span class="line">          compileUtil.eventHandler(node, me.$vm, exp, dir)</span><br><span class="line">          <span class="comment">// 普通指令</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          compileUtil[dir] &amp;&amp; compileUtil[dir](node, me.$vm, exp)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        node.removeAttribute(attrName)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  compileText: <span class="function"><span class="keyword">function</span>(<span class="params">node, exp</span>) </span>&#123;</span><br><span class="line">    compileUtil.text(node, <span class="keyword">this</span>.$vm, exp)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  isDirective: <span class="function"><span class="keyword">function</span>(<span class="params">attr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> attr.indexOf(<span class="string">'v-'</span>) == <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  isEventDirective: <span class="function"><span class="keyword">function</span>(<span class="params">dir</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dir.indexOf(<span class="string">'on'</span>) === <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  isElementNode: <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> node.nodeType == <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  isTextNode: <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> node.nodeType == <span class="number">3</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指令处理集合</span></span><br><span class="line"><span class="keyword">var</span> compileUtil = &#123;</span><br><span class="line">  text: <span class="function"><span class="keyword">function</span>(<span class="params">node, vm, exp</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.bind(node, vm, exp, <span class="string">'text'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  html: <span class="function"><span class="keyword">function</span>(<span class="params">node, vm, exp</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.bind(node, vm, exp, <span class="string">'html'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  model: <span class="function"><span class="keyword">function</span>(<span class="params">node, vm, exp</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.bind(node, vm, exp, <span class="string">'model'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> me = <span class="keyword">this</span>,</span><br><span class="line">      val = <span class="keyword">this</span>._getVMVal(vm, exp)</span><br><span class="line">    node.addEventListener(<span class="string">'input'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> newValue = e.target.value</span><br><span class="line">      <span class="keyword">if</span> (val === newValue) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      me._setVMVal(vm, exp, newValue)</span><br><span class="line">      val = newValue</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  class: function(node, vm, exp) &#123;</span><br><span class="line">    <span class="keyword">this</span>.bind(node, vm, exp, <span class="string">'class'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  bind: <span class="function"><span class="keyword">function</span>(<span class="params">node, vm, exp, dir</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> updaterFn = updater[dir + <span class="string">'Updater'</span>]</span><br><span class="line"></span><br><span class="line">    updaterFn &amp;&amp; updaterFn(node, <span class="keyword">this</span>._getVMVal(vm, exp))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> Watcher(vm, exp, <span class="function"><span class="keyword">function</span>(<span class="params">value, oldValue</span>) </span>&#123;</span><br><span class="line">      updaterFn &amp;&amp; updaterFn(node, value, oldValue)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 事件处理</span></span><br><span class="line">  eventHandler: <span class="function"><span class="keyword">function</span>(<span class="params">node, vm, exp, dir</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> eventType = dir.split(<span class="string">':'</span>)[<span class="number">1</span>],</span><br><span class="line">      fn = vm.$options.methods &amp;&amp; vm.$options.methods[exp]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (eventType &amp;&amp; fn) &#123;</span><br><span class="line">      node.addEventListener(eventType, fn.bind(vm), <span class="literal">false</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  _getVMVal: <span class="function"><span class="keyword">function</span>(<span class="params">vm, exp</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> val = vm._data</span><br><span class="line">    exp = exp.split(<span class="string">'.'</span>)</span><br><span class="line">    exp.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">k</span>) </span>&#123;</span><br><span class="line">      val = val[k]</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> val</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  _setVMVal: <span class="function"><span class="keyword">function</span>(<span class="params">vm, exp, value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> val = vm._data</span><br><span class="line">    exp = exp.split(<span class="string">'.'</span>)</span><br><span class="line">    exp.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">k, i</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 非最后一个key，更新val的值</span></span><br><span class="line">      <span class="keyword">if</span> (i &lt; exp.length - <span class="number">1</span>) &#123;</span><br><span class="line">        val = val[k]</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        val[k] = value</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> updater = &#123;</span><br><span class="line">  textUpdater: <span class="function"><span class="keyword">function</span>(<span class="params">node, value</span>) </span>&#123;</span><br><span class="line">    node.textContent = <span class="keyword">typeof</span> value == <span class="string">'undefined'</span> ? <span class="string">''</span> : value</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  htmlUpdater: <span class="function"><span class="keyword">function</span>(<span class="params">node, value</span>) </span>&#123;</span><br><span class="line">    node.innerHTML = <span class="keyword">typeof</span> value == <span class="string">'undefined'</span> ? <span class="string">''</span> : value</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  classUpdater: <span class="function"><span class="keyword">function</span>(<span class="params">node, value, oldValue</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> className = node.className</span><br><span class="line">    className = className.replace(oldValue, <span class="string">''</span>).replace(<span class="regexp">/\s$/</span>, <span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> space = className &amp;&amp; <span class="built_in">String</span>(value) ? <span class="string">' '</span> : <span class="string">''</span></span><br><span class="line"></span><br><span class="line">    node.className = className + space + value</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  modelUpdater: <span class="function"><span class="keyword">function</span>(<span class="params">node, value, oldValue</span>) </span>&#123;</span><br><span class="line">    node.value = <span class="keyword">typeof</span> value == <span class="string">'undefined'</span> ? <span class="string">''</span> : value</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="实现-Watcher"><a href="#实现-Watcher" class="headerlink" title="实现 Watcher"></a>实现 Watcher</h2><p>Watcher 订阅者作为 Observer 和 Compile 之间通信的桥梁，主要做的事情是:</p>
<ol>
<li>在自身实例化时往属性订阅器(dep)里面添加自己</li>
<li>自身必须有一个 update()方法</li>
<li>待属性变动 dep.notice()通知时，能调用自身的 update()方法，并触发 Compile 中绑定的回调，则功成身退。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Watcher</span>(<span class="params">vm, exp, cb</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.cb = cb</span><br><span class="line">  <span class="keyword">this</span>.vm = vm</span><br><span class="line">  <span class="keyword">this</span>.exp = exp</span><br><span class="line">  <span class="comment">// 此处为了触发属性的getter，从而在dep添加自己，结合Observer更易理解</span></span><br><span class="line">  <span class="keyword">this</span>.value = <span class="keyword">this</span>.get()</span><br><span class="line">&#125;</span><br><span class="line">Watcher.prototype = &#123;</span><br><span class="line">  update: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.run() <span class="comment">// 属性值变化收到通知</span></span><br><span class="line">  &#125;,</span><br><span class="line">  run: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> value = <span class="keyword">this</span>.get() <span class="comment">// 取到最新值</span></span><br><span class="line">    <span class="keyword">var</span> oldVal = <span class="keyword">this</span>.value</span><br><span class="line">    <span class="keyword">if</span> (value !== oldVal) &#123;</span><br><span class="line">      <span class="keyword">this</span>.value = value</span><br><span class="line">      <span class="keyword">this</span>.cb.call(<span class="keyword">this</span>.vm, value, oldVal) <span class="comment">// 执行Compile中绑定的回调，更新视图</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">get</span>: function() &#123;</span><br><span class="line">    Dep.target = <span class="keyword">this</span> <span class="comment">// 将当前订阅者指向自己</span></span><br><span class="line">    <span class="keyword">var</span> value = <span class="keyword">this</span>.vm[exp] <span class="comment">// 触发getter，添加自己到属性订阅器中</span></span><br><span class="line">    Dep.target = <span class="literal">null</span> <span class="comment">// 添加完毕，重置</span></span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这里再次列出Observer和Dep，方便理解</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(data, key, &#123;</span><br><span class="line">  <span class="keyword">get</span>: function() &#123;</span><br><span class="line">    <span class="comment">// 由于需要在闭包内添加watcher，所以可以在Dep定义一个全局target属性，暂存watcher, 添加完移除</span></span><br><span class="line">    Dep.target &amp;&amp; dep.addDep(Dep.target)</span><br><span class="line">    <span class="keyword">return</span> val</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ... 省略</span></span><br><span class="line">&#125;)</span><br><span class="line">Dep.prototype = &#123;</span><br><span class="line">  notify: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.subs.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">sub</span>) </span>&#123;</span><br><span class="line">      sub.update() <span class="comment">// 调用订阅者的update方法，通知变化</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实例化<code>Watcher</code>的时候，调用<code>get()</code>方法，通过<code>Dep.target = watcherInstance</code>标记订阅者是当前 watcher 实例，强行触发属性定义的<code>getter</code>方法，<code>getter</code>方法执行的时候，就会在属性的订阅器<code>dep</code>添加当前 watcher 实例，从而在属性值有变化的时候，watcherInstance 就能收到更新通知。</p>
<h3 id="Watcher-完整代码"><a href="#Watcher-完整代码" class="headerlink" title="Watcher 完整代码"></a>Watcher 完整代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Watcher</span>(<span class="params">vm, exp, cb</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.cb = cb</span><br><span class="line">  <span class="keyword">this</span>.vm = vm</span><br><span class="line">  <span class="keyword">this</span>.exp = exp</span><br><span class="line">  <span class="keyword">this</span>.depIds = &#123;&#125;</span><br><span class="line">  <span class="keyword">this</span>.value = <span class="keyword">this</span>.get()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Watcher.prototype = &#123;</span><br><span class="line">  update: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.run()</span><br><span class="line">  &#125;,</span><br><span class="line">  run: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> value = <span class="keyword">this</span>.get()</span><br><span class="line">    <span class="keyword">var</span> oldVal = <span class="keyword">this</span>.value</span><br><span class="line">    <span class="keyword">if</span> (value !== oldVal) &#123;</span><br><span class="line">      <span class="keyword">this</span>.value = value</span><br><span class="line">      <span class="keyword">this</span>.cb.call(<span class="keyword">this</span>.vm, value, oldVal)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  addDep: <span class="function"><span class="keyword">function</span>(<span class="params">dep</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 每次调用run()的时候会触发相应属性的getter</span></span><br><span class="line">    <span class="comment">// getter里面会触发dep.depend()，继而触发这里的addDep</span></span><br><span class="line">    <span class="comment">// 2. 假如相应属性的dep.id已经在当前watcher的depIds里，说明不是一个新的属性，仅仅是改变了其值而已</span></span><br><span class="line">    <span class="comment">// 则不需要将当前watcher添加到该属性的dep里</span></span><br><span class="line">    <span class="comment">// 3. 假如相应属性是新的属性，则将当前watcher添加到新属性的dep里</span></span><br><span class="line">    <span class="comment">// 如通过 vm.child = &#123;name: 'a'&#125; 改变了 child.name 的值，child.name 就是个新属性</span></span><br><span class="line">    <span class="comment">// 则需要将当前watcher(child.name)加入到新的 child.name 的dep里</span></span><br><span class="line">    <span class="comment">// 因为此时 child.name 是个新值，之前的 setter、dep 都已经失效，如果不把 watcher 加入到新的 child.name 的dep中</span></span><br><span class="line">    <span class="comment">// 通过 child.name = xxx 赋值的时候，对应的 watcher 就收不到通知，等于失效了</span></span><br><span class="line">    <span class="comment">// 4. 每个子属性的watcher在添加到子属性的dep的同时，也会添加到父属性的dep</span></span><br><span class="line">    <span class="comment">// 监听子属性的同时监听父属性的变更，这样，父属性改变时，子属性的watcher也能收到通知进行update</span></span><br><span class="line">    <span class="comment">// 这一步是在 this.get() --&gt; this.getVMVal() 里面完成，forEach时会从父级开始取值，间接调用了它的getter</span></span><br><span class="line">    <span class="comment">// 触发了addDep(), 在整个forEach过程，当前wacher都会加入到每个父级过程属性的dep</span></span><br><span class="line">    <span class="comment">// 例如：当前watcher的是'child.child.name', 那么child, child.child, child.child.name这三个属性的dep都会加入当前watcher</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.depIds.hasOwnProperty(dep.id)) &#123;</span><br><span class="line">      dep.addSub(<span class="keyword">this</span>)</span><br><span class="line">      <span class="keyword">this</span>.depIds[dep.id] = dep</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">get</span>: function() &#123;</span><br><span class="line">    Dep.target = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">var</span> value = <span class="keyword">this</span>.getVMVal()</span><br><span class="line">    Dep.target = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  getVMVal: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> exp = <span class="keyword">this</span>.exp.split(<span class="string">'.'</span>)</span><br><span class="line">    <span class="keyword">var</span> val = <span class="keyword">this</span>.vm._data</span><br><span class="line">    exp.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">k</span>) </span>&#123;</span><br><span class="line">      val = val[k]</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> val</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>基本上 vue 中数据绑定相关比较核心的几个模块也是这几个，猛戳<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZQ==" title="https://github.com/vuejs/vue">这里<i class="fa fa-external-link"></i></span> , 在<code>src</code> 目录可找到 vue 源码。</p>
<h2 id="实现-MVVM"><a href="#实现-MVVM" class="headerlink" title="实现 MVVM"></a>实现 MVVM</h2><p>MVVM 作为数据绑定的入口，整合 Observer、Compile 和 Watcher 三者，通过 Observer 来监听自己的 model 数据变化，通过 Compile 来解析编译模板指令，最终利用 Watcher 搭起 Observer 和 Compile 之间的通信桥梁，达到数据变化 -&gt; 视图更新；视图交互变化(input) -&gt; 数据 model 变更的双向绑定效果。</p>
<p>一个简单的 MVVM 构造器是这样子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MVVM</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.$options = options</span><br><span class="line">  <span class="keyword">var</span> data = (<span class="keyword">this</span>._data = <span class="keyword">this</span>.$options.data)</span><br><span class="line">  observe(data, <span class="keyword">this</span>)</span><br><span class="line">  <span class="keyword">this</span>.$compile = <span class="keyword">new</span> Compile(options.el || <span class="built_in">document</span>.body, <span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是这里有个问题，从代码中可看出监听的数据对象是 options.data，每次需要更新视图，则必须通过<code>var vm = new MVVM({data:{name: &#39;kindeng&#39;}}); vm._data.name = &#39;dmq&#39;;</code>这样的方式来改变数据。</p>
<p>显然不符合我们一开始的期望，我们所期望的调用方式应该是这样的：<br><code>var vm = new MVVM({data: {name: &#39;kindeng&#39;}}); vm.name = &#39;dmq&#39;;</code></p>
<p>所以这里需要给 MVVM 实例添加一个属性代理的方法，使访问 vm 的属性代理为访问 vm._data 的属性，改造后的代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MVVM</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.$options = options</span><br><span class="line">  <span class="keyword">var</span> data = (<span class="keyword">this</span>._data = <span class="keyword">this</span>.$options.data),</span><br><span class="line">    me = <span class="keyword">this</span></span><br><span class="line">  <span class="comment">// 属性代理，实现 vm.xxx -&gt; vm._data.xxx</span></span><br><span class="line">  <span class="built_in">Object</span>.keys(data).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    me._proxy(key)</span><br><span class="line">  &#125;)</span><br><span class="line">  observe(data, <span class="keyword">this</span>)</span><br><span class="line">  <span class="keyword">this</span>.$compile = <span class="keyword">new</span> Compile(options.el || <span class="built_in">document</span>.body, <span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MVVM.prototype = &#123;</span><br><span class="line">  _proxy: <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> me = <span class="keyword">this</span></span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(me, key, &#123;</span><br><span class="line">      configurable: <span class="literal">false</span>,</span><br><span class="line">      enumerable: <span class="literal">true</span>,</span><br><span class="line">      <span class="keyword">get</span>: function proxyGetter() &#123;</span><br><span class="line">        <span class="keyword">return</span> me._data[key]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="keyword">set</span>: function proxySetter(newVal) &#123;</span><br><span class="line">        me._data[key] = newVal</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里主要还是利用了<code>Object.defineProperty()</code>这个方法来劫持了 vm 实例对象的属性的读写权，使读写 vm 实例的属性转成读写了<code>vm._data</code>的属性值，达到鱼目混珠的效果。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9pbWFnZS54dWViaW4ubWUvbXZ2bV9kZW1vLnppcA==" title="https://image.xuebin.me/mvvm_demo.zip">下载 Demo<i class="fa fa-external-link"></i></span></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>前端</tag>
        <tag>vue</tag>
        <tag>双向绑定</tag>
      </tags>
  </entry>
  <entry>
    <title>【转载】各类 HTTP 返回状态代码详解</title>
    <url>/posts/fb88cc15.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9qdXN0Y29kaW5nLml0ZXllLmNvbS9ibG9nLzgzMzA1OA==" title="target=_blank">HTTP 状态码<i class="fa fa-external-link"></i></span></p>
</blockquote>
<p>如果某项请求发送到您的服务器要求显示您网站上的某个网页（例如，用户通过浏览器访问您的网页或 Googlebot 抓取网页时），服务器将会返回 HTTP 状态代码以响应请求。</p>
<p>此状态代码提供关于请求状态的信息， 告诉 Googlebot 关于您的网站和请求的网页的信息。一些常见的状态代码包括：</p>
<ul>
<li><strong>200</strong> – 服务器成功返回网页</li>
<li><strong>404</strong> – 请求的网页不存在</li>
<li><strong>503</strong> – 服务器暂时不可用</li>
</ul>
<a id="more"></a>
<p>下面提供 HTTP 状态代码的完整列表。 点击链接可了解详情。 您也可以访问有关 HTTP 状态代码的 <span class="exturl" data-url="aHR0cHM6Ly93d3cudzMub3JnL1Byb3RvY29scy9yZmMyNjE2L3JmYzI2MTYtc2VjMTAuaHRtbA==" title="https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html">W3C 网页以获得更多信息<i class="fa fa-external-link"></i></span> 。</p>
<ul>
<li><code>1xx</code>：请求收到，继续处理<em>（临时响应）</em></li>
<li><code>2xx</code>：操作成功收到，分析、接受<em>（成功）</em></li>
<li><code>3xx</code>：完成此请求必须进一步处理<em>（重定向）</em></li>
<li><code>4xx</code>：请求包含一个错误语法或不能完成<em>（请求错误）</em></li>
<li><code>5xx</code>：服务器执行一个完全有效请求失败<em>（服务器错误）</em></li>
</ul>
<h2 id="1xx-（临时响应）"><a href="#1xx-（临时响应）" class="headerlink" title="1xx （临时响应）"></a>1xx （临时响应）</h2><p>表示临时响应并需要请求者继续执行操作的状态代码。</p>
<table>
<thead>
<tr>
<th>代码</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>100（继续）</td>
<td>请求者应当继续提出请求。 服务器返回此代码表示已收到请求的第一部分，正在等待其余部分}</td>
</tr>
<tr>
<td>101（切换协议）</td>
<td>请求者已要求服务器切换协议，服务器已确认并准备切换</td>
</tr>
</tbody>
</table>
<h2 id="2xx-（成功）"><a href="#2xx-（成功）" class="headerlink" title="2xx （成功）"></a>2xx （成功）</h2><p>表示服务器成功处理了请求的状态代码。</p>
<table>
<thead>
<tr>
<th>代码</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>200（成功）</td>
<td>服务器已成功处理了请求。 通常，这表示服务器提供了请求的网页。 如果针对您的 robots.txt 文件显示此状态，则表示 Googlebot 已成功检索到该文件</td>
</tr>
<tr>
<td>201（已创建）</td>
<td>请求成功并且服务器创建了新的资源</td>
</tr>
<tr>
<td>202（已接受）</td>
<td>服务器已接受请求，但尚未处理</td>
</tr>
<tr>
<td>203（非授权信息）</td>
<td>服务器已成功处理了请求，但返回的信息可能来自另一来源</td>
</tr>
<tr>
<td>204（无内容）</td>
<td>服务器成功处理了请求，但没有返回任何内容</td>
</tr>
<tr>
<td>205（重置内容）</td>
<td>服务器成功处理了请求，但没有返回任何内容。 与 204 响应不同，此响应要求请求者重置文档视图（例如，清除表单内容以输入新内容）</td>
</tr>
<tr>
<td>206（部分内容）</td>
<td>服务器成功处理了部分 GET 请求</td>
</tr>
</tbody>
</table>
<h2 id="3xx-（重定向）"><a href="#3xx-（重定向）" class="headerlink" title="3xx （重定向）"></a>3xx （重定向）</h2><p>要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。 Google 建议您在每次请求中使用重定向不要超过 5 次。 您可以使用网站管理员工具查看一下 Googlebot 在抓取重定向网页时是否遇到问题。 <strong>诊断</strong> 下的 <span class="exturl" data-url="aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9zdXBwb3J0L3dlYm1hc3RlcnMvYmluL2Fuc3dlci5weT9hbnN3ZXI9MzUxNTY=" title="https://www.google.com/support/webmasters/bin/answer.py?answer=35156">网络抓取<i class="fa fa-external-link"></i></span> 页面列出了由于重定向错误而导致 Googlebot 无法抓取的网址。</p>
<table>
<thead>
<tr>
<th>代码</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>300（多种选择）</td>
<td>针对请求，服务器可执行多种操作。 服务器可根据请求者（用户代理）选择一项操作，或提供操作列表供请求者选择</td>
</tr>
<tr>
<td>301（永久移动）</td>
<td>请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。 您应使用此代码告诉 Googlebot 某个网页或网站已永久移动到新位置</td>
</tr>
<tr>
<td>302（暂时移动）</td>
<td>服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。 此代码与响应 GET 或 HEAD 请求的 301 代码类似，会自动将请求者转到不同的位置，但您不应使用此代码来告诉 Googlebot 某个网页或网站已经移动，因为 Googlebot 会继续抓取原有位置并编入索引</td>
</tr>
<tr>
<td>303（查看其他位置）</td>
<td>请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。 对于除 HEAD 之外的所有请求，服务器会自动转到其他位置</td>
</tr>
<tr>
<td>304（未修改）</td>
<td>自从上次请求后，请求的网页未修改过。服务器返回此响应时，不会返回网页内容。如果网页自请求者上次请求后再也没有更改 过，您应当将服务器配置为返回此响应（称为 If-Modified-Since HTTP 标头）。 由于服务器可以告诉 Googlebot 自从上次抓取后网页没有更改过，因此可节省带宽和开销</td>
</tr>
<tr>
<td>305（使用代理）</td>
<td>请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理</td>
</tr>
<tr>
<td>307（暂时重定向）</td>
<td>服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。 此代码与响应 GET 和 HEAD 请求的 301 代码类似，会自动将请求者转到不同的位置，但您不应使用此代码来告诉 Googlebot 某个页面或网站已经移动，因为 Googlebot 会继续抓取原有位置并编入索引</td>
</tr>
</tbody>
</table>
<h2 id="4xx-（请求错误）"><a href="#4xx-（请求错误）" class="headerlink" title="4xx （请求错误）"></a>4xx （请求错误）</h2><p>这些状态代码表示请求可能出错，妨碍了服务器的处理。</p>
<table>
<thead>
<tr>
<th>代码</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>400 （错误请求）</td>
<td>服务器不理解请求的语法</td>
</tr>
<tr>
<td>401（未授权）</td>
<td>请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应</td>
</tr>
<tr>
<td>403（禁止）</td>
<td>服务器拒绝请求。 如果您看到 Googlebot 在尝试抓取您网站上的有效网页时收到此状态代码（可以在 Google 网站管理员工具诊 断 下的网络抓取 页面上看到此信息），可能是您的服务器或主机拒绝 Googlebot 访问</td>
</tr>
<tr>
<td>404（未找到）</td>
<td>服务器找不到请求的网页。 例如，如果请求服务器上不存在的网页，服务器通常会返回此代码。如果您的网站上没有 robots.txt 文件，而您在 Google 网站管理员工具”诊断”标签的 robots.txt 页 上看到此状态，那么这是正确的状态。 但是，如果您有 robots.txt 文件而又看到此状态，则说明您的 robots.txt 文件可能命名错误或位于错误的位置 （该文件应当位于顶级域名，名为 robots.txt）。如果您看到有关 Googlebot 尝试抓取的网址的此状态（在”诊断”标签的 HTTP 错误页上），则表示 Googlebot 追踪的可能是另一个页面的无效链接（是旧链接或输入有误的链接）</td>
</tr>
<tr>
<td>405（禁用的方法）</td>
<td>禁用请求中指定的方法</td>
</tr>
<tr>
<td>406（不可接受）</td>
<td>无法使用请求的内容特性响应请求的网页</td>
</tr>
<tr>
<td>407（需要代理授权）</td>
<td>此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理。 如果服务器返回此响应，还会指明请求者应当使用的代理</td>
</tr>
<tr>
<td>408（请求超时）</td>
<td>服务器等候请求时发生超时</td>
</tr>
<tr>
<td>409（冲突）</td>
<td>服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。 服务器在响应与前一个请求相冲突的 PUT 请求时可能会返回此代码，同时会附上两个请求的差异列表</td>
</tr>
<tr>
<td>410（已删除）</td>
<td>如果请求的资源已永久删除，服务器就会返回此响应。 该代码与 404（未找到）代码相似，但在资源以前存在而现在不存在的情况下，有时会用来替代 404 代码。 如果资源已永久删除，您应当使用 301 指定资源的新位置</td>
</tr>
<tr>
<td>411（需要有效长度）</td>
<td>服务器不接受不含有效内容长度标头字段的请求</td>
</tr>
<tr>
<td>412（未满足前提条件）</td>
<td>服务器未满足请求者在请求中设置的其中一个前提条件</td>
</tr>
<tr>
<td>413（请求实体过大）</td>
<td>服务器无法处理请求，因为请求实体过大，超出服务器的处理能力</td>
</tr>
<tr>
<td>414（请求的 URI 过长）</td>
<td>请求的 URI（通常为网址）过长，服务器无法处理</td>
</tr>
<tr>
<td>415（不支持的媒体类型）</td>
<td>请求的格式不受请求页面的支持</td>
</tr>
<tr>
<td>416（请求范围不符合要求）</td>
<td>如果页面无法提供请求的范围，则服务器会返回此状态代码</td>
</tr>
<tr>
<td>417（未满足期望要求）</td>
<td>服务器未满足”期望”请求标头字段的要求</td>
</tr>
</tbody>
</table>
<h2 id="5xx-（服务器错误）"><a href="#5xx-（服务器错误）" class="headerlink" title="5xx （服务器错误）"></a>5xx （服务器错误）</h2><p>这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。</p>
<table>
<thead>
<tr>
<th>代码</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>500（服务器内部错误）</td>
<td>服务器遇到错误，无法完成请求</td>
</tr>
<tr>
<td>501（尚未实施）</td>
<td>服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码</td>
</tr>
<tr>
<td>502（错误网关）</td>
<td>服务器充当网关或代理，从上游服务器收到无效响应</td>
</tr>
<tr>
<td>503（服务不可用）</td>
<td>服务器目前无法使用（由于超载或停机维护）。 通常，这只是暂时状态。</td>
</tr>
<tr>
<td>504（网关超时）</td>
<td>服务器充当网关或代理，但没有及时从上游服务器收到请求</td>
</tr>
<tr>
<td>505（HTTP 版本不受支持）</td>
<td>服务器不支持请求中所用的 HTTP 协议版本</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>通过Chrome调试运行在IOS-safari上的页面</title>
    <url>/posts/587f8f31.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote>
<p>本文重点讨论如何在 Windows 系统中通过 chrome 浏览器调试运行在 iPhone Safari 浏览器中的网页。如果你有一台 iMac/MacBook，可忽略该文档。iMac 环境下，直接通过 USB 将 iphone 与 iMac/MacBook 链接，之后在 iMac/MacBook 中打开 Safari 进入调试模式，即可对运行在手机中的页面进行调试。详情见：<span class="exturl" data-url="aHR0cHM6Ly93ZWJkZXNpZ24udHV0c3BsdXMuY29tL2FydGljbGVzL3F1aWNrLXRpcC11c2luZy13ZWItaW5zcGVjdG9yLXRvLWRlYnVnLW1vYmlsZS1zYWZhcmktLXdlYmRlc2lnbi04Nzg3" title="https://webdesign.tutsplus.com/articles/quick-tip-using-web-inspector-to-debug-mobile-safari--webdesign-8787">Using Web Inspector to Debug Mobile Safari<i class="fa fa-external-link"></i></span> 或 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2xpYnJhcnkvY29udGVudC9kb2N1bWVudGF0aW9uL0FwcGxlQXBwbGljYXRpb25zL0NvbmNlcHR1YWwvU2FmYXJpX0RldmVsb3Blcl9HdWlkZS9HZXR0aW5nU3RhcnRlZC9HZXR0aW5nU3RhcnRlZC5odG1s" title="https://developer.apple.com/library/content/documentation/AppleApplications/Conceptual/Safari_Developer_Guide/GettingStarted/GettingStarted.html">Safari Web Inspector Guide<i class="fa fa-external-link"></i></span></p>
</blockquote>
<a id="more"></a>
<h1 id="安装-iTunes"><a href="#安装-iTunes" class="headerlink" title="安装 iTunes"></a>安装 iTunes</h1><p>Windows 系统首先要安装 iTunes ，打开 Apple 官网下载 iTunes 并完成 iTunes 安装，否则计算机无法正确识别 iPhone 设备。</p>
<h1 id="开启调试模式"><a href="#开启调试模式" class="headerlink" title="开启调试模式"></a>开启调试模式</h1><p>要远程调试 IOS Safari ，必须启用 Web 检查 功能，打开 iPhone 依次进入 <code>设置</code> &gt; <code>Safari</code> &gt; <code>高级</code> &gt; <code>Web 检查</code> &gt; 启用。</p>
<h1 id="ios-webkit-debug-proxy"><a href="#ios-webkit-debug-proxy" class="headerlink" title="ios-webkit-debug-proxy"></a>ios-webkit-debug-proxy</h1><p>ios-webkit-debug-proxy 是一个 DevTools proxy ，项目托管在 Github 上。其使得开发者可以发送命令到真实（或虚拟）IOS 设备中的 Safari 浏览器或 UIWebViews 。</p>
<h2 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h2><p>项目地址：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FydHlndXMvaW9zLXdlYmtpdC1kZWJ1Zy1wcm94eS13aW4zMg==" title="https://github.com/artygus/ios-webkit-debug-proxy-win32">https://github.com/artygus/ios-webkit-debug-proxy-win32<i class="fa fa-external-link"></i></span>。</p>
<p>在 Binaries 小节点击下载链接。</p>
<p>下载后完成解压缩，将 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FydHlndXMvaW9zLXdlYmtpdC1kZWJ1Zy1wcm94eS13aW4zMg==" title="https://github.com/artygus/ios-webkit-debug-proxy-win32">ios-webkit-debug-proxy-win32<i class="fa fa-external-link"></i></span> 目录复制到 <code>C:\</code> 盘。</p>
<p>在系统环境变量添加 <code>C:\ios-webkit-debug-proxy-win32</code>。</p>
<h2 id="启动-proxy"><a href="#启动-proxy" class="headerlink" title="启动 proxy"></a>启动 proxy</h2><p>打开命令行终端，执行：</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">ios_webkit_debug_proxy.exe -f chrome-devtools://devtools/bundled/inspector.html</span><br></pre></td></tr></table></figure>
<p>输出结果如下：</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">ios_webkit_debug_proxy.exe -f chrome-devtools://devtools/bundled/inspector.html</span><br><span class="line">Listing devices on :<span class="number">9221</span></span><br><span class="line">Connected :<span class="number">9222</span> to iPhone (c356a29f73043a36aa6de64b088d55aeeda8f034)</span><br></pre></td></tr></table></figure>
<h2 id="开始调试"><a href="#开始调试" class="headerlink" title="开始调试"></a>开始调试</h2><p>打开 chrome 浏览器，在地址栏输入 <span class="exturl" data-url="aHR0cHM6Ly9sb2NhbGhvc3Q6OTIyMS8=" title="https://localhost:9221/">https://localhost:9221/<i class="fa fa-external-link"></i></span> ，这里会显示所有已连接的设备清单，选择一个设备并点击打开。</p>
<p>打开的页面可看到当前 iphone 中 Safari 浏览器打开的所有页面，点击要调试的页面链接打开即可进入调试界面。此时可能会有一个错误提示如下:</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="function">Note: <span class="title">Your</span> <span class="title">browser</span> <span class="title">may</span> <span class="title">block1</span>,2 <span class="title">the</span> <span class="title">above</span> <span class="title">links</span> <span class="title">with</span> <span class="title">JavaScript</span> <span class="title">console</span> <span class="title">error</span>:</span></span><br><span class="line"><span class="function">  <span class="title">Not</span> <span class="title">allowed</span> <span class="title">to</span> <span class="title">load</span> <span class="title">local</span> <span class="title">resource</span>: <span class="title">chrome</span>-<span class="title">devtools</span>://...</span></span><br><span class="line"><span class="function"><span class="title">To</span> <span class="title">open</span> <span class="title">a</span> <span class="title">link</span>: <span class="title">right</span>-<span class="title">click</span> <span class="title">on</span> <span class="title">the</span> <span class="title">link</span> (<span class="title">control</span>-<span class="title">click</span> <span class="title">on</span> <span class="title">Mac</span>), '<span class="title">Copy</span> <span class="title">Link</span> <span class="title">Address</span>', <span class="title">and</span> <span class="title">paste</span> <span class="title">it</span> <span class="title">into</span> <span class="title">address</span> <span class="title">bar</span>.</span></span><br></pre></td></tr></table></figure>
<p>提示浏览器禁止页面加载本地资源，需在上面的链接上点击右键复制链接，然后手动新建一个标签页将链接粘贴进去，回车访问。</p>
<p>根据提示说明复制链接并打开，即可看到常见的 chrome 调试窗口。</p>
<p>接下来，就可以进行正常的调试工作了。</p>
<hr>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9pb3Mtd2Via2l0LWRlYnVnLXByb3h5" title="target=_blank">ios-webkit-debug-proxy<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FydHlndXMvaW9zLXdlYmtpdC1kZWJ1Zy1wcm94eS13aW4zMg==" title="target=_blank">ios-webkit-debug-proxy-win32<i class="fa fa-external-link"></i></span></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>调试</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>前端</tag>
        <tag>调试</tag>
      </tags>
  </entry>
  <entry>
    <title>继承</title>
    <url>/posts/11d8b32d.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//region A</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.a=a</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">A.prototype.AShow=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a+<span class="string">':show'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//endregion</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//region B</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    A.call(<span class="keyword">this</span>,a)</span><br><span class="line">    <span class="keyword">this</span>.b=<span class="string">'b'</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Object.setPrototypeOf( B.prototype, A.prototype )// ES6+，B继承A，修改既存的`B.prototype`</span></span><br><span class="line"></span><br><span class="line">B.prototype=<span class="built_in">Object</span>.create(A.prototype)<span class="comment">// ES5，B继承A，扔掉默认既存的`B.prototype`</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(B.prototype,<span class="string">'constructor'</span>,&#123;<span class="comment">// ES5，修复B继承A后丢失的.constructor</span></span><br><span class="line">    enumerable:<span class="literal">false</span>,</span><br><span class="line">    writable:<span class="literal">true</span>,</span><br><span class="line">    configurable:<span class="literal">true</span>,</span><br><span class="line">    value:B<span class="comment">// 使‘.constructor’指向‘B’</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">B.prototype.BShow=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.b+<span class="string">':show'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> B(<span class="string">'a'</span>,<span class="string">'b'</span>)</span><br><span class="line">b.AShow()</span><br><span class="line">b.BShow()</span><br><span class="line"><span class="comment">//endregion</span></span><br></pre></td></tr></table></figure>
<p>重要的部分是<code>B.prototype=Object.create(A.prototype)</code>。<code>Object.create(..)</code>凭空 <em>创建</em> 了一个“新”对象，并将这个新对象内部的<code>[[Prototype]]</code>链接到你指定的对象上（在这里是A.prototype）。</p>
<p>换句话说，这一行的意思是：“做一个 <em>新的</em> 链接到 ‘A.prototype’ 的 ‘B.prototype’ 对象”。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9lZWY2MmExOWU3YzEgI+KAnO+8iOWOn+Wei++8iee7p+aJv+KAnQ==" title="https://www.jianshu.com/p/eef62a19e7c1 #“（原型）继承”">“（原型）继承”<i class="fa fa-external-link"></i></span></p>
<h1 id="类继承"><a href="#类继承" class="headerlink" title="类继承"></a>类继承</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">unction SuperClass()&#123;</span><br><span class="line">    <span class="keyword">this</span>.superValue = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">SuperClass.prototype.getSuperValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>.superValue;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubClass</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.subValue = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">SubClass.prototype = <span class="keyword">new</span> SuperClass()<span class="comment">//继承父类</span></span><br><span class="line">SubClass.prototype.getSubValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>.subValue;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//console.log(SubClass.prototype instanceof SuperClass)//=&gt;true</span></span><br></pre></td></tr></table></figure>
<h1 id="构造函数继承"><a href="#构造函数继承" class="headerlink" title="构造函数继承"></a>构造函数继承</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperClass</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.superValue = value;</span><br><span class="line">&#125;</span><br><span class="line">SuperClass.prototype.getSuperValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>.superValue;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubClass</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    SuperClass.call(<span class="keyword">this</span>, value);<span class="comment">//继承父类</span></span><br><span class="line">    <span class="keyword">this</span>.subValue = value;</span><br><span class="line">&#125;</span><br><span class="line">SubClass.prototype.getSubValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>.subValue;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// var instance = new SubClass(10);</span></span><br><span class="line"><span class="comment">// console.log(instance.superValue);//=&gt;10</span></span><br><span class="line"><span class="comment">// console.log(instance.getSubValue());//=&gt;10</span></span><br><span class="line"><span class="comment">// console.log(instance.getSuperValue());//=&gt;'TypeError'</span></span><br></pre></td></tr></table></figure>
<h1 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperClass</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.superValue = value;</span><br><span class="line">&#125;</span><br><span class="line">SuperClass.prototype.getSuperValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>.superValue;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubClass</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    SuperClass.call(<span class="keyword">this</span>, value);<span class="comment">//构造函数继承父类的 superValue</span></span><br><span class="line">    <span class="keyword">this</span>.subValue = value;</span><br><span class="line">&#125;</span><br><span class="line">SubClass.prototype = <span class="keyword">new</span> SuperClass();<span class="comment">//类继承父类原型 getSuperValue</span></span><br><span class="line">SubClass.prototype.getSubValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>.subValue;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// var instance = new SubClass(10);</span></span><br><span class="line"><span class="comment">// console.log(instance.superValue);//=&gt;10</span></span><br><span class="line"><span class="comment">// console.log(instance.getSubValue());//=&gt;10</span></span><br><span class="line"><span class="comment">// console.log(instance.getSuperValue());//=&gt;10</span></span><br></pre></td></tr></table></figure>
<h1 id="原型继承"><a href="#原型继承" class="headerlink" title="原型继承"></a>原型继承</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inheriteObject</span>(<span class="params">o</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//声明过渡函数对象</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    <span class="comment">//过渡函数对象的原型继承父对象</span></span><br><span class="line">    F.prototype = o;</span><br><span class="line">    <span class="comment">//返回过渡对象的一个实例，这个实例继承了父对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// var superObject = &#123;</span></span><br><span class="line"><span class="comment">//     name: 'books',</span></span><br><span class="line"><span class="comment">//     books:['css','javascript']</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// var newSubObject = inheriteObject(superObject);</span></span><br><span class="line"><span class="comment">// console.log(newSubObject.name);//=&gt;'books'</span></span><br><span class="line"><span class="comment">// newSubObject.books.push('html');</span></span><br><span class="line"><span class="comment">// console.log(newSubObject.books);//=&gt;['css','javascript','html']</span></span><br></pre></td></tr></table></figure>
<h1 id="寄生式继承"><a href="#寄生式继承" class="headerlink" title="寄生式继承"></a>寄生式继承</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> superObject = &#123;</span><br><span class="line">    name: <span class="string">'books'</span>,</span><br><span class="line">    books:[<span class="string">'css'</span>,<span class="string">'javascript'</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">creatBook</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> o = inheriteObject(obj);</span><br><span class="line">    o.getBooks = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(name)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 寄生组合式继承</span></span><br><span class="line"><span class="comment"> * @param subClass 子类</span></span><br><span class="line"><span class="comment"> * @param superClass 父类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inheritePrototype</span>(<span class="params">subClass,superClass</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//复制父类的原型</span></span><br><span class="line">    <span class="keyword">var</span> p = inheriteObject(superClass.prototype);</span><br><span class="line">    <span class="comment">//修正因为重写父类原型导致子类 constructor 属性被修改</span></span><br><span class="line">    p.constructor = subClass;</span><br><span class="line">    <span class="comment">//设置子类的原型</span></span><br><span class="line">    subClass.prototype = p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// //定义父类</span></span><br><span class="line"><span class="comment">// function SuperClass(value)&#123;</span></span><br><span class="line"><span class="comment">//     this.superValue = value;//父类属性</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// //定义父类原型方法</span></span><br><span class="line"><span class="comment">// SuperClass.prototype.getSuperValue = function()&#123;</span></span><br><span class="line"><span class="comment">//     console.log(this.superValue);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// //定义子类</span></span><br><span class="line"><span class="comment">// function SubClass(value)&#123;</span></span><br><span class="line"><span class="comment">//     SuperClass.call(this, value);//构造函数继承</span></span><br><span class="line"><span class="comment">//     this.subValue = value;//子类属性</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// inheritePrototype(SubClass, SuperClass);//寄生式继承父类原型</span></span><br><span class="line"><span class="comment">// //子类增加原型方法</span></span><br><span class="line"><span class="comment">// SubClass.prototype.getSubValue = function()&#123;</span></span><br><span class="line"><span class="comment">//     console.log(this.subValue);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// var instance = new SubClass(10);</span></span><br><span class="line"><span class="comment">// console.log(instance.superValue);//=&gt;10</span></span><br><span class="line"><span class="comment">// console.log(instance.subValue);//=&gt;10</span></span><br><span class="line"><span class="comment">// instance.getSuperValue();//=&gt;10</span></span><br><span class="line"><span class="comment">// instance.getSubValue();//=&gt;10</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>前端</tag>
        <tag>javascript</tag>
        <tag>prototype</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript设计模式</title>
    <url>/posts/c43592f8.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote>
<p>本文参考于<code>《javascript模式》</code>，因此会大量内容会和书中相同，手上有这本书的朋友可以直接看书。因为我的记忆习惯是抄书，所以我会先抄写下来再发到博客上。</p>
</blockquote>
<a id="more"></a>
<h1 id="单体模式"><a href="#单体模式" class="headerlink" title="单体模式"></a>单体模式</h1><p>单体模式思想在于保证一个特定类仅有一个实例，意味着当你第二次使用同一个类创建信对象时，应得到和第一次创建对象完全相同。</p>
<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Universe</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> Universe.instance === <span class="string">'object'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> Universe.instance <span class="comment">//防止被篡改</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.xx = <span class="string">'xx'</span></span><br><span class="line">  Universe.instance = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> uni = <span class="keyword">new</span> Universe()</span><br><span class="line"><span class="keyword">var</span> uni2 = <span class="keyword">new</span> Universe()</span><br><span class="line">uni === uni2 <span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>缺点</strong><br>instance 属性暴露。</p>
</blockquote>
<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>使用闭包</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Universe</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> instance = <span class="keyword">this</span> <span class="comment">//缓存this</span></span><br><span class="line">  <span class="keyword">this</span>.xx = <span class="string">'xx'</span></span><br><span class="line">  Universe = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//重写此构造函数</span></span><br><span class="line">    <span class="keyword">return</span> instance</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> uni = <span class="keyword">new</span> Universe()</span><br><span class="line"><span class="keyword">var</span> uni2 = <span class="keyword">new</span> Universe()</span><br><span class="line">uni === uni2 <span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>缺点</strong><br>因为重写了构造函数，constructor 还是指向了老的构造函数,且实例化后在添加原型属性也是不一样的。如下</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> uni = <span class="keyword">new</span> Universe()</span><br><span class="line">Universe.prototype.a = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> uni2 = <span class="keyword">new</span> Universe()</span><br><span class="line"><span class="built_in">console</span>.log(uni === uni2) <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(uni.a) <span class="comment">//undefinded</span></span><br><span class="line"><span class="built_in">console</span>.log(uni2.a) <span class="comment">//undefinded</span></span><br><span class="line"><span class="built_in">console</span>.log(uni.constructor === Universe) <span class="comment">//false</span></span><br></pre></td></tr></table></figure>
<h2 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h2><p>解决<code>方法二</code>问题。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Universe</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> instance</span><br><span class="line">  Universe = <span class="function"><span class="keyword">function</span> <span class="title">Universe</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> instance</span><br><span class="line">  &#125;</span><br><span class="line">  Universe.prototype = <span class="keyword">this</span> <span class="comment">//保存原型属性</span></span><br><span class="line">  instance = <span class="keyword">new</span> Universe()</span><br><span class="line">  instance.constructor = Universe</span><br><span class="line">  instance.xx = <span class="string">'xx'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="方法四"><a href="#方法四" class="headerlink" title="方法四"></a>方法四</h2><p>自运行函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Universe</span><br><span class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> instance</span><br><span class="line">  Universe = <span class="function"><span class="keyword">function</span> <span class="title">Universe</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (instance) &#123;</span><br><span class="line">      <span class="keyword">return</span> instance</span><br><span class="line">    &#125;</span><br><span class="line">    instance = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">this</span>.xx = <span class="string">'xx'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"><span class="keyword">var</span> uni = <span class="keyword">new</span> Universe()</span><br><span class="line">Universe.prototype.a = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> uni2 = <span class="keyword">new</span> Universe()</span><br><span class="line"><span class="built_in">console</span>.log(uni === uni2) <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(uni.a) <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(uni2.a) <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(uni.constructor === Universe) <span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<hr>
<h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1><p>工厂模式是为了创建对象。</p>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><ul>
<li>公共构造函数 CarMaker</li>
<li>名为 factory 的 CarMaker 静态方法来创建 car 对象</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> corolla = CarMaker.factory(<span class="string">'compact'</span>)</span><br><span class="line"><span class="keyword">var</span> solstice = CarMaker.factory(<span class="string">'convertible'</span>)</span><br><span class="line"><span class="keyword">var</span> cherokee = CarMaker.factory(<span class="string">'suv'</span>)</span><br><span class="line">corolla.drive() <span class="comment">//I have 4 doors</span></span><br><span class="line">solstice.drive() <span class="comment">//I have 2 doors</span></span><br><span class="line">cherokee.drive() <span class="comment">//I have 6 doors</span></span><br></pre></td></tr></table></figure>
<p>实现</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CarMaker</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">CarMaker.prototype.drive = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'I have '</span> + <span class="keyword">this</span>.doors + <span class="string">' doors'</span></span><br><span class="line">&#125;</span><br><span class="line">CarMaker.compact = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.doors = <span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line">CarMaker.convertible = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.doors = <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">CarMaker.suv = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.doors = <span class="number">6</span></span><br><span class="line">&#125;</span><br><span class="line">CarMaker.factory = <span class="function"><span class="keyword">function</span>(<span class="params">type</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> CarMaker[type] !== <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">'Error'</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> CarMaker[type].prototype.drive !== <span class="string">'function'</span>) &#123;</span><br><span class="line">    CarMaker[type].prototype = <span class="keyword">new</span> CarMaker()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> newCar = <span class="keyword">new</span> CarMaker[type]()</span><br><span class="line">  <span class="keyword">return</span> newCar</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> corolla = CarMaker.factory(<span class="string">'compact'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(corolla.drive()) <span class="comment">//I have 4 doors</span></span><br></pre></td></tr></table></figure>
<h2 id="内置工厂对象"><a href="#内置工厂对象" class="headerlink" title="内置工厂对象"></a>内置工厂对象</h2><p>Object() 构造函数即为内置工厂对象。</p>
<hr>
<h1 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h1><p>有一个包含某种数据集合的对象，该数据可能存储在一个复杂数据结构内部，而要提供一个简单方法讷讷感访问到数据结构中没一个元素。</p>
<ul>
<li>next() 下一个</li>
<li>hasNext() 是否有下一个</li>
<li>reWind() 重置指针</li>
<li>current() 返回当前</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> agg = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> index = <span class="number">0</span></span><br><span class="line">  <span class="keyword">var</span> data = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">  <span class="keyword">var</span> length = data.length</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    next: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">//这里是从第一个数据开始输出 本例中为 1</span></span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.hasNext()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> element = data[index]</span><br><span class="line">      index++</span><br><span class="line">      <span class="keyword">return</span> element</span><br><span class="line">    &#125;,</span><br><span class="line">    hasNext: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> index &lt; length</span><br><span class="line">    &#125;,</span><br><span class="line">    reWind: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      index = <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    current: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> data[index]</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"><span class="keyword">while</span> (agg.hasNext()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(agg.next()) <span class="comment">//1,2,3,4,5,6</span></span><br><span class="line">&#125;</span><br><span class="line">agg.reWind() <span class="comment">//此时重置指针到0</span></span><br></pre></td></tr></table></figure>
<hr>
<h1 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h1><p>可以在运行时候添加附加功能到对象中，他的一个方便特征在于其预期行为的可定制和可配置特性。</p>
<p><strong>例子</strong> 假设在开发一个销售商品的 Web 应用，每一笔信销售都是一个人新的 sale 对象。该对象“知道”有关项目的价格，并可以通过 getPrice() 方法返回加个。</p>
<p>根据不同情况，可以用额外的功能装饰此对象。</p>
<p>假设客户在魁北克省，买房需要支付联邦税和魁北克省税，则此时需要调用联邦税装饰者和魁北克省税装饰者。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sale = <span class="keyword">new</span> Sale(<span class="number">100</span>)</span><br><span class="line">sale = sale.decorate(<span class="string">'fedtax'</span>) <span class="comment">//联邦税</span></span><br><span class="line">sale = sale.decorate(<span class="string">'quebec'</span>) <span class="comment">//魁北克省税</span></span><br><span class="line">sale = sale.decorate(<span class="string">'miney'</span>) <span class="comment">//转为美元格式</span></span><br><span class="line">sale.getPrice() <span class="comment">//返回价格</span></span><br></pre></td></tr></table></figure>
<p>并且装饰是可选的，例如不再魁北克省有可能没有省税。</p>
<h2 id="方法一-1"><a href="#方法一-1" class="headerlink" title="方法一"></a>方法一</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sale</span>(<span class="params">price</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.price = price</span><br><span class="line">&#125;</span><br><span class="line">Sale.prototype.getPrice = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.price</span><br><span class="line">&#125;</span><br><span class="line">Sale.decorators = &#123;&#125; <span class="comment">//储存装饰者的对象</span></span><br><span class="line"><span class="comment">//装饰者</span></span><br><span class="line">Sale.decorators.fedtax = &#123;</span><br><span class="line">  getPrice: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> price = <span class="keyword">this</span>.uber.getPrice()</span><br><span class="line">    <span class="keyword">return</span> price * <span class="number">0.8</span> <span class="comment">//对price进行处理</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">Sale.decorators.quebec = &#123;</span><br><span class="line">  getPrice: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> price = <span class="keyword">this</span>.uber.getPrice()</span><br><span class="line">    <span class="keyword">return</span> price * <span class="number">0.7</span> <span class="comment">//对price进行处理</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">Sale.decorators.money = &#123;</span><br><span class="line">  getPrice: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> price = <span class="keyword">this</span>.uber.getPrice()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'$'</span> + price * <span class="number">0.9</span> <span class="comment">//对price进行处理</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*decorate() 方法</span></span><br><span class="line"><span class="comment">调用装饰者方法 sale.=sale.decorate("fedtax");</span></span><br><span class="line"><span class="comment">fedtax字符串对应 Sale.decorators中的对象属性。新装饰对象 newobj 将继承目前我们所拥有的对象，这就是ixiangthis</span></span><br><span class="line"><span class="comment">为了完成继承部分代码，此时需要一个临时构造函数，先设置 newobj 的 uber 属性，以便于自对象可以访问到父对象。之后从装饰者中</span></span><br><span class="line"><span class="comment">将所有的额外属性复制到新装饰的对象 newobj 中，最后返回 newobj。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Sale.prototype.decorate = <span class="function"><span class="keyword">function</span>(<span class="params">decorate</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  <span class="keyword">var</span> overrides = <span class="keyword">this</span>.constructor.decorators[decorate] <span class="comment">//获取装饰者对象</span></span><br><span class="line">  F.prototype = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">var</span> newobj = <span class="keyword">new</span> F()</span><br><span class="line">  newobj.uber = F.prototype</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> overrides) &#123;</span><br><span class="line">    <span class="keyword">if</span> (overrides.hasOwnProperty) &#123;</span><br><span class="line">      <span class="comment">//判断对象是不是自身的</span></span><br><span class="line">      newobj[key] = overrides[key]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newobj</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> sale = <span class="keyword">new</span> Sale(<span class="number">100</span>)</span><br><span class="line">sale = sale.decorate(<span class="string">'fedtax'</span>) <span class="comment">//联邦税</span></span><br><span class="line">sale = sale.decorate(<span class="string">'quebec'</span>) <span class="comment">//魁北克省税</span></span><br><span class="line">sale = sale.decorate(<span class="string">'money'</span>) <span class="comment">//转为美元格式</span></span><br><span class="line"><span class="built_in">console</span>.log(sale.getPrice()) <span class="comment">//$50.4</span></span><br></pre></td></tr></table></figure>
<h2 id="方法二-1"><a href="#方法二-1" class="headerlink" title="方法二"></a>方法二</h2><p>此方法使用列表实现，而且相对来说比较好理解一点。本质就是把装饰者名称保存到一个列表中并且一次调用此列表中的方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sale</span>(<span class="params">price</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.price = price</span><br><span class="line">  <span class="keyword">this</span>.decorateList = []</span><br><span class="line">&#125;</span><br><span class="line">Sale.decorators = &#123;&#125;</span><br><span class="line">Sale.decorators.fedtax = &#123;</span><br><span class="line">  getPrice: <span class="function"><span class="keyword">function</span>(<span class="params">price</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> price = <span class="keyword">this</span>.uber.getPrice()</span><br><span class="line">    <span class="keyword">return</span> price * <span class="number">0.8</span> <span class="comment">//对price进行处理</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">Sale.decorators.quebec = &#123;</span><br><span class="line">  getPrice: <span class="function"><span class="keyword">function</span>(<span class="params">price</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> price = <span class="keyword">this</span>.uber.getPrice()</span><br><span class="line">    <span class="keyword">return</span> price * <span class="number">0.7</span> <span class="comment">//对price进行处理</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">Sale.decorators.money = &#123;</span><br><span class="line">  getPrice: <span class="function"><span class="keyword">function</span>(<span class="params">price</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> price = <span class="keyword">this</span>.uber.getPrice()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'$'</span> + price * <span class="number">0.9</span> <span class="comment">//对price进行处理</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">Sale.prototype.decorate = <span class="function"><span class="keyword">function</span>(<span class="params">decorator</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.decorateList.push(decorator)</span><br><span class="line">&#125;</span><br><span class="line">Sale.prototype.getPrice = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> price = <span class="keyword">this</span>.price</span><br><span class="line">  <span class="keyword">this</span>.decorateList.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    price = Sale.decorators[name].getPrice(price)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> price</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> sale = <span class="keyword">new</span> Sale(<span class="number">100</span>)</span><br><span class="line">sale = sale.decorate(<span class="string">'fedtax'</span>) <span class="comment">//联邦税</span></span><br><span class="line">sale = sale.decorate(<span class="string">'quebec'</span>) <span class="comment">//魁北克省税</span></span><br><span class="line">sale = sale.decorate(<span class="string">'money'</span>) <span class="comment">//转为美元格式</span></span><br><span class="line"><span class="built_in">console</span>.log(sale.getPrice()) <span class="comment">//$50.4</span></span><br></pre></td></tr></table></figure>
<hr>
<h1 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h1><p>策略模式支持在运行时候选择算法。例如用在表单验证问题上，可以创建一个具有 validate() 方法的验证器对象，无论表单具体类型是什么，该方法都会被调用，并且返回结果或者错误信息。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> validator = &#123;</span><br><span class="line">  <span class="comment">// 所有可以的验证规则处理类存放的地方，后面会单独定义</span></span><br><span class="line">  types: &#123;&#125;,</span><br><span class="line">  <span class="comment">// 验证类型所对应的错误消息</span></span><br><span class="line">  messages: [],</span><br><span class="line">  <span class="comment">// 当然需要使用的验证类型</span></span><br><span class="line">  config: &#123;&#125;,</span><br><span class="line">  <span class="comment">// 暴露的公开验证方法</span></span><br><span class="line">  <span class="comment">// 传入的参数是 key =&gt; value对</span></span><br><span class="line">  validate: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i, msg, type, checker, result_ok</span><br><span class="line">    <span class="comment">// 清空所有的错误信息</span></span><br><span class="line">    <span class="keyword">this</span>.messages = []</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> data) &#123;</span><br><span class="line">      <span class="keyword">if</span> (data.hasOwnProperty(i)) &#123;</span><br><span class="line">        type = <span class="keyword">this</span>.config[i] <span class="comment">// 根据key查询是否有存在的验证规则</span></span><br><span class="line">        checker = <span class="keyword">this</span>.types[type] <span class="comment">// 获取验证规则的验证类</span></span><br><span class="line">        <span class="keyword">if</span> (!type) &#123;</span><br><span class="line">          <span class="keyword">continue</span> <span class="comment">// 如果验证规则不存在，则不处理</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!checker) &#123;</span><br><span class="line">          <span class="comment">// 如果验证规则类不存在，抛出异常</span></span><br><span class="line">          <span class="keyword">throw</span> &#123;</span><br><span class="line">            name: <span class="string">'ValidationError'</span>,</span><br><span class="line">            message: <span class="string">'No handler to validate type '</span> + type,</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        result_ok = checker.validate(data[i]) <span class="comment">// 使用查到到的单个验证类进行验证</span></span><br><span class="line">        <span class="keyword">if</span> (!result_ok) &#123;</span><br><span class="line">          msg = <span class="string">'Invalid value for *'</span> + i + <span class="string">'*, '</span> + checker.instructions</span><br><span class="line">          <span class="keyword">this</span>.messages.push(msg)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.hasErrors()</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// helper</span></span><br><span class="line">  hasErrors: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.messages.length !== <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//然后剩下的工作，就是定义types里存放的各种验证类了</span></span><br><span class="line"><span class="comment">// 验证给定的值是否不为空</span></span><br><span class="line">validator.types.isNonEmpty = &#123;</span><br><span class="line">  validate: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value !== <span class="string">''</span></span><br><span class="line">  &#125;,</span><br><span class="line">  instructions: <span class="string">'传入的值不能为空'</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 验证给定的值是否是数字</span></span><br><span class="line">validator.types.isNumber = &#123;</span><br><span class="line">  validate: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !<span class="built_in">isNaN</span>(value)</span><br><span class="line">  &#125;,</span><br><span class="line">  instructions: <span class="string">'传入的值只能是合法的数字，例如：1, 3.14 or 2010'</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 验证给定的值是否只是字母或数字</span></span><br><span class="line">validator.types.isAlphaNum = &#123;</span><br><span class="line">  validate: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !<span class="regexp">/[^a-z0-9]/i</span>.test(value)</span><br><span class="line">  &#125;,</span><br><span class="line">  instructions: <span class="string">'传入的值只能保护字母和数字，不能包含特殊字符'</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用的时候，我们首先要定义需要验证的数据集合，然后还需要定义每种数据需要验证的规则类型，代码如下：</span></span><br><span class="line"><span class="keyword">var</span> data = &#123;</span><br><span class="line">  first_name: <span class="string">'Tom'</span>,</span><br><span class="line">  last_name: <span class="string">'Xu'</span>,</span><br><span class="line">  age: <span class="string">'unknown'</span>,</span><br><span class="line">  username: <span class="string">'TomXu'</span>,</span><br><span class="line">&#125;</span><br><span class="line">validator.config = &#123;</span><br><span class="line">  first_name: <span class="string">'isNonEmpty'</span>,</span><br><span class="line">  age: <span class="string">'isNumber'</span>,</span><br><span class="line">  username: <span class="string">'isAlphaNum'</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最后获取验证结果</span></span><br><span class="line">validator.validate(data)</span><br><span class="line"><span class="keyword">if</span> (validator.hasErrors()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(validator.messages.join(<span class="string">'\n'</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>策略模式定义及例子实现参考与《javascript 模式》及 <span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vVG9tWHUvYXJjaGl2ZS8yMDEyLzAzLzA1LzIzNTg1NTIuaHRtbA==" title="https://www.cnblogs.com/TomXu/archive/2012/03/05/2358552.html">汤姆大叔的博客<i class="fa fa-external-link"></i></span></p>
</blockquote>
<hr>
<h1 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h1><p>外观模式即让多个方法一起被调用</p>
<p>例如。 stopPropagation() 和 preventDefault() 兼容性一起调用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myEvent = &#123;</span><br><span class="line">  stop: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> e.preventDefault() === <span class="string">'function'</span>) &#123;</span><br><span class="line">      e.preventDefault()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> e.stopPropagation() === <span class="string">'function'</span>) &#123;</span><br><span class="line">      e.stopPropagation()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//for IE</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> e.returnValue === <span class="string">'boolean'</span>) &#123;</span><br><span class="line">      e.returnValue = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> e.cancelBubble === <span class="string">'boolean'</span>) &#123;</span><br><span class="line">      e.cancelBubble = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><p>在代理模式中，一个对象充当另外一个对象的接口，和外观模式区别是：外观模式是合并调用多个方法。<br>代理模式是介于对象的客户端和对象本身之间，并且对该对象的访问进行保护。</p>
<h2 id="包裹例子"><a href="#包裹例子" class="headerlink" title="包裹例子"></a>包裹例子</h2><p>现在有个包裹，卖家要把这个包裹寄给 gary，则需要通过快递公司寄过来，此时快递公司就是一个 <code>proxy</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> package = <span class="function"><span class="keyword">function</span>(<span class="params">receiver</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.receiver = receiver</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> seller = <span class="function"><span class="keyword">function</span>(<span class="params">package</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.package = package</span><br><span class="line">  <span class="keyword">this</span>.send = <span class="function"><span class="keyword">function</span>(<span class="params">gift</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> package.receiver + <span class="string">'你的包裹:'</span> + gift</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> express = <span class="function"><span class="keyword">function</span>(<span class="params">package</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.package = package</span><br><span class="line">  <span class="keyword">this</span>.send = <span class="function"><span class="keyword">function</span>(<span class="params">packageName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> seller(package).send(packageName)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line"><span class="keyword">var</span> ems = <span class="keyword">new</span> express(<span class="keyword">new</span> package(<span class="string">'gary'</span>))</span><br><span class="line"><span class="built_in">console</span>.log(ems.send(<span class="string">'键盘'</span>)) <span class="comment">//gary你的包裹:键盘</span></span><br></pre></td></tr></table></figure>
<h2 id="论坛权限管理例子"><a href="#论坛权限管理例子" class="headerlink" title="论坛权限管理例子"></a>论坛权限管理例子</h2><p>本例子参考与 <span class="exturl" data-url="aHR0cHM6Ly93d3cudHVpY29vbC5jb20vYXJ0aWNsZXMvZXlxZVVqbg==" title="https://www.tuicool.com/articles/eyqeUjn">大熊君<i class="fa fa-external-link"></i></span></p>
<ul>
<li>权限列表</li>
<li>发帖 1</li>
<li>帖子审核 2</li>
<li>删帖 3</li>
<li>留言、回复 4</li>
</ul>
<table>
<thead>
<tr>
<th>用户</th>
<th>代码</th>
<th>权限</th>
</tr>
</thead>
<tbody>
<tr>
<td>注册用户</td>
<td>001</td>
<td>1 4</td>
</tr>
<tr>
<td>论坛管理员</td>
<td>002</td>
<td>2 3 4</td>
</tr>
<tr>
<td>系统管理员</td>
<td>003</td>
<td>1 2 3 4</td>
</tr>
<tr>
<td>游客</td>
<td>000</td>
<td>null</td>
</tr>
</tbody>
</table>
<p><strong>用户类</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">name, code</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.code = code</span><br><span class="line">&#125;</span><br><span class="line">User.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">&#125;</span><br><span class="line">User.prototype.getCode = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.code</span><br><span class="line">&#125;</span><br><span class="line">User.prototype.post = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//发帖功能</span></span><br><span class="line">&#125;</span><br><span class="line">User.prototype.remove = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 删帖功能</span></span><br><span class="line">&#125;</span><br><span class="line">User.prototype.check = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//审核</span></span><br><span class="line">&#125;</span><br><span class="line">User.prototype.comment = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//留言回复</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>论坛类</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Forum</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.user = user</span><br><span class="line">&#125;</span><br><span class="line">Forum.prototype.getUser = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.user</span><br><span class="line">&#125;</span><br><span class="line">Forum.prototype.post = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> code = <span class="keyword">this</span>.user.getCode()</span><br><span class="line">  <span class="keyword">if</span> (code == <span class="string">'001'</span> || code == <span class="string">'003'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.user.post()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">Forum.prototype.remove = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> code = <span class="keyword">this</span>.user.getCode()</span><br><span class="line">  <span class="keyword">if</span> (code == <span class="string">'002'</span> || code == <span class="string">'003'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.user.remove()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">Forum.prototype.check = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> code = <span class="keyword">this</span>.user.getCode()</span><br><span class="line">  <span class="keyword">if</span> (code == <span class="string">'002'</span> || code == <span class="string">'003'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.user.check()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">Forum.prototype.comment = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> code = <span class="keyword">this</span>.user.getCode()</span><br><span class="line">  <span class="keyword">if</span> (code == <span class="string">'001'</span> || code == <span class="string">'002'</span> || code == <span class="string">'003'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.user.comment()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>运行</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Forum(<span class="keyword">new</span> User(<span class="string">'administartor'</span>, <span class="string">'003'</span>))</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h1><p>中介者模式可以让多个对象之间松耦合，并降低维护成本</p>
<p>例如：游戏程序，两名玩家分别给与半分钟时间来竞争决出胜负（谁按键的次数多胜出，这里玩家 1 按 1，玩家 2 按 0）</p>
<ul>
<li>计分板（scoreboard)</li>
<li>中介者 （mediator)</li>
</ul>
<p>中介者知道所有其他对象的信息。他与输入设备（此时是键盘）进行通信并处理键盘上的按键时间，之后还将消息通知玩家。玩家玩游戏同时（每一分都更新自己分数）还要通知中介者他所做的事情。中介者将更新后的分数传达给计分板。</p>
<p>除了中介者莫有对象知道其他对象。</p>
<p><strong>图示</strong></p>
<p><img src="https://oj7lzlt0w.bkt.clouddn.com/mediatorpattern.jpg" alt></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Player</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.points = <span class="number">0</span></span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line">Player.prototype.play = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.points += <span class="number">1</span></span><br><span class="line">  mediator.played()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> scoreboard = &#123;</span><br><span class="line">  element: <span class="string">'这里是获取的element用于展示分数'</span>,</span><br><span class="line">  update: <span class="function"><span class="keyword">function</span>(<span class="params">score</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//更新分数</span></span><br><span class="line">    <span class="keyword">var</span> msg</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> score) &#123;</span><br><span class="line">      <span class="keyword">if</span> (score.hasOwnProperty(key)) &#123;</span><br><span class="line">        msg += score[key]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.element.innerText = msg</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> mediator = &#123;</span><br><span class="line">  players: &#123;&#125;, <span class="comment">//玩家对象</span></span><br><span class="line">  setup: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> players = <span class="keyword">this</span>.players</span><br><span class="line">    players.home = <span class="keyword">new</span> Player(<span class="string">'home'</span>)</span><br><span class="line">    players.guest = <span class="keyword">new</span> Player(<span class="string">'guest'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  played: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> players = <span class="keyword">this</span>.players</span><br><span class="line">    <span class="keyword">var</span> score = &#123;</span><br><span class="line">      home: players.home.points,</span><br><span class="line">      guest: players.guest.points,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  keypress: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    e = e || <span class="built_in">window</span>.event</span><br><span class="line">    <span class="keyword">if</span> (e.which === <span class="number">49</span>) &#123;</span><br><span class="line">      <span class="comment">//or keycode   对应按键 1</span></span><br><span class="line">      mediator.players.home.play()</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (e.which === <span class="number">48</span>) &#123;</span><br><span class="line">      <span class="comment">// 对应按键 0</span></span><br><span class="line">      mediator.player.guest.play()</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//运行</span></span><br><span class="line">mediator.setup()</span><br><span class="line"><span class="built_in">window</span>.onkeypress = mediator.keypress</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//设置30秒游戏时间</span></span><br><span class="line">  <span class="built_in">window</span>.onkeypress = <span class="literal">null</span></span><br><span class="line">  alert(<span class="string">'game end'</span>)</span><br><span class="line">&#125;, <span class="number">30000</span>)</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h1><p>观察者模式在 javascript 中使用非常广泛。所有的浏览器时间就是该模式的实现，node.js 中的 events 也是此模式实现。</p>
<p>此模式另一个名称是 <code>订阅/发布模式</code>。</p>
<p>设计这种模式原因是促进形成松散耦合，在这种模式中，并不是一个对象调用另一个对象的方法，而是一个对象订阅另一个对象的特定活动并在状态改编后获得通知。订阅者因此也成为观察者，而被观察的对象成为发布者或者主题。当发生了一个重要事件时候发布者会通知（调用）所有订阅者并且可能经常已事件对象的形式传递消息。</p>
<p>参考：<span class="exturl" data-url="aHR0cHM6Ly9nYXJ5Y2hhbmcuY24vMjAxNi8xMi8xNS9ub2RlanNFdmVudEVtaXR0ZXIv" title="https://garychang.cn/2016/12/15/nodejsEventEmitter/">nodejs 的 EventEmitter<i class="fa fa-external-link"></i></span></p>
<hr>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ol>
<li><p>单体模式</p>
<blockquote>
<p>针对一个类仅创建一个对象。</p>
</blockquote>
</li>
<li><p>工厂模式</p>
<blockquote>
<p>根据字符串制定类型在运行时创建对象的方法。</p>
</blockquote>
</li>
<li><p>迭代器模式</p>
<blockquote>
<p>提供一个 API 来遍历或者操作复杂的自定义数据结构。</p>
</blockquote>
</li>
<li><p>装饰者模式</p>
<blockquote>
<p>通过从预定义装饰者对象中添加功能，从而在运行时侯调整对象</p>
</blockquote>
</li>
<li><p>策略模式</p>
<blockquote>
<p>在悬在最佳策略以处理特定任务的时候仍然保持相同的接口。</p>
</blockquote>
</li>
<li><p>外观模式</p>
<blockquote>
<p>通过把常用方法包装到一个新方法中，从来提供一个更为便利的 API。</p>
</blockquote>
</li>
<li><p>代理模式</p>
<blockquote>
<p>通过包装一个对象从而控制对它的访问，其中主要方法是将方位聚集为租或者仅当真正必要时侯才执行访问，从未避免高昂的操作开销。</p>
</blockquote>
</li>
<li><p>终结者模式</p>
<blockquote>
<p>通过是你的对象之间相互不直接“通话”，而是通过一个中介者对子昂进行通信，从而形成松散耦合。</p>
</blockquote>
</li>
<li><p>观察者模式</p>
<blockquote>
<p>通过创建“可观察”的对象，当发生一个感兴趣的事件时可将改时间通告给所有观察者从而形成松散耦合。</p>
</blockquote>
</li>
</ol>
]]></content>
      <categories>
        <category>前端</category>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>前端</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>用hexo搭建自己的私人博客</title>
    <url>/posts/dd43ce70.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote>
<p>这不是一篇 Hexo 教程，仅是本博的搭建记录。</p>
</blockquote>
<a id="more"></a>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvLw==" title="https://hexo.io/"><code>Hexo</code><i class="fa fa-external-link"></i></span>：快速、简洁且高效的博客框架,官网有<span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3poLWNuLw==" title="https://hexo.io/zh-cn/">中文文档<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lpc3NuYW4vaGV4by10aGVtZS1uZXh0" title="https://github.com/iissnan/hexo-theme-next"><code>NexT</code><i class="fa fa-external-link"></i></span>：Hexo 适用的主题</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9sZWFuY2xvdWQuY24v" title="https://leancloud.cn/"><code>LeanCloud</code><i class="fa fa-external-link"></i></span>：数据库</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29t" title="https://github.com"><code>GitHub</code><i class="fa fa-external-link"></i></span>：博客就发布在 GitPage</li>
</ul>
<h1 id="安装-amp-配置-Hexo"><a href="#安装-amp-配置-Hexo" class="headerlink" title="安装&amp;配置 Hexo"></a>安装&amp;配置 Hexo</h1><h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><p>全局安装 Hexo 官方的脚手架</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install -g hexo-cli</span></span><br></pre></td></tr></table></figure>
<p>然后初始化博客，并安装依赖包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo init &lt;folder&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> &lt;folder&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>&lt;folder&gt;</code> 就是博客的本地文件夹</p>
</blockquote>
<h2 id="配置-Hexo"><a href="#配置-Hexo" class="headerlink" title="配置 Hexo"></a>配置 Hexo</h2><p><code>网站配置</code>： &lt;folder&gt;/<code>_config.yml</code></p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>title</td>
<td>网站标题</td>
</tr>
<tr>
<td>subtitle</td>
<td>网站副标题</td>
</tr>
<tr>
<td>description</td>
<td>网站描述</td>
</tr>
<tr>
<td>author</td>
<td>您的名字</td>
</tr>
<tr>
<td>language</td>
<td>网站使用的语言</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>url</td>
<td>网址</td>
<td></td>
</tr>
<tr>
<td>root</td>
<td>网站根目录</td>
<td></td>
</tr>
<tr>
<td>permalink</td>
<td>文章的链接格式</td>
<td>:year/:month/:day/:title/</td>
</tr>
</tbody>
</table>
<h2 id="添加站内搜索"><a href="#添加站内搜索" class="headerlink" title="添加站内搜索"></a>添加站内搜索</h2><p>添加百度/谷歌/本地 自定义站点内容搜索</p>
<p>安装 <code>hexo-generator-searchdb</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo-generator-searchdb --save</span></span><br></pre></td></tr></table></figure>
<p><code>网站配置</code>： &lt;folder&gt;/<code>_config.yml</code></p>
<p>新增以下内容到任意位置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure>
<blockquote>
<p>更多网站参数参考：<span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3MvY29uZmlndXJhdGlvbi5odG1s" title="https://hexo.io/zh-cn/docs/configuration.html">https://hexo.io/zh-cn/docs/configuration.html<i class="fa fa-external-link"></i></span></p>
</blockquote>
<h1 id="测试-Hexo"><a href="#测试-Hexo" class="headerlink" title="测试 Hexo"></a>测试 Hexo</h1><h2 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo new [layout] &lt;title&gt;</span></span><br></pre></td></tr></table></figure>
<p>运行命令新建一篇文章。</p>
<h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo server</span></span><br><span class="line"><span class="meta">#</span><span class="bash">或</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo s</span></span><br></pre></td></tr></table></figure>
<p>启动服务器。默认情况下，访问网址为：<span class="exturl" data-url="aHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMC/jgII=" title="https://localhost:4000/。">https://localhost:4000/。<i class="fa fa-external-link"></i></span><br>server 后面可以加些参数达到不同效果：</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>-p ，–port</td>
<td>重设端口</td>
</tr>
<tr>
<td>-s ，–static</td>
<td>只使用静态文件</td>
</tr>
<tr>
<td>-l ，–log</td>
<td>启动日记记录，使用覆盖记录格式</td>
</tr>
<tr>
<td>-d ，–debug</td>
<td>开启调试模式</td>
</tr>
</tbody>
</table>
<h2 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo generate</span></span><br><span class="line"><span class="meta">#</span><span class="bash">或</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo g</span></span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>选项</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>-d ，–deploy</td>
<td>文件生成后立即部署网站</td>
</tr>
<tr>
<td>-w ，–watch</td>
<td>监视文件变动</td>
</tr>
</tbody>
</table>
<h2 id="清除缓存"><a href="#清除缓存" class="headerlink" title="清除缓存"></a>清除缓存</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo clean</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>更多命令参考：<span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3MvY29tbWFuZHMuaHRtbA==" title="https://hexo.io/zh-cn/docs/commands.html">https://hexo.io/zh-cn/docs/commands.html<i class="fa fa-external-link"></i></span></p>
</blockquote>
<h1 id="安装-amp-配置-NexT-主题"><a href="#安装-amp-配置-NexT-主题" class="headerlink" title="安装&amp;配置 NexT 主题"></a>安装&amp;配置 NexT 主题</h1><h2 id="安装-NexT-主题"><a href="#安装-NexT-主题" class="headerlink" title="安装 NexT 主题"></a>安装 NexT 主题</h2><p>使用 git 克隆最新版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> &lt;folder&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span></span><br></pre></td></tr></table></figure>
<p>或者直接将 <code>hexo-theme-next</code> 下载下来放到 Hexo 站点目录下的 <code>themes/next</code> 目录中</p>
<h2 id="启用-NexT-主题"><a href="#启用-NexT-主题" class="headerlink" title="启用 NexT 主题"></a>启用 NexT 主题</h2><p><code>网站配置</code>： &lt;folder&gt;/<code>_config.yml</code><br>搜索 <code>theme</code> 关键字，并将其值更改为 <code>next</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure>
<h2 id="验证-NexT-主题"><a href="#验证-NexT-主题" class="headerlink" title="验证 NexT 主题"></a>验证 NexT 主题</h2><blockquote>
<p>最好先使用 <code>hexo clean</code> 清除 Hexo 的缓存。</p>
</blockquote>
<p>运行 <code>hexo s --debug</code> 启动本地站点，并开启调试模式。</p>
<p>启动服务过程中可以观察命令行输出是否有任何异常信息。当命令行输出中提示出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INFO  Hexo is running at https://0.0.0.0:4000/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>
<p>此时即可使用浏览器访问 <code>https://localhost:4000</code> ，检查站点是否正确运行。</p>
<h2 id="主题设定"><a href="#主题设定" class="headerlink" title="主题设定"></a>主题设定</h2><p><code>主题配置</code>： &lt;folder&gt;/theme/next/<code>_config.yml</code></p>
<p>搜索 <code>scheme</code> 关键字，选择使用的主题样式，将你需用启用的 scheme 前面注释 # 去掉并将其他两个 scheme 加上注释即可。</p>
<ul>
<li>Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白</li>
<li>Mist - Muse 的紧凑版本，整洁有序的单栏外观</li>
<li>Pisces - 双栏 Scheme，小家碧玉似的清新</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">scheme: Muse</span></span><br><span class="line"><span class="meta">#</span><span class="bash">scheme: Mist</span></span><br><span class="line">scheme: Pisces</span><br></pre></td></tr></table></figure>
<h2 id="设置-菜单"><a href="#设置-菜单" class="headerlink" title="设置 菜单"></a>设置 菜单</h2><p><code>主题配置</code>： &lt;folder&gt;/theme/next/<code>_config.yml</code></p>
<p>搜索 <code>menu</code> 关键字</p>
<h2 id="设置-头像"><a href="#设置-头像" class="headerlink" title="设置 头像"></a>设置 头像</h2><p><code>主题配置</code>： &lt;folder&gt;/theme/next/<code>_config.yml</code></p>
<p>新增字段 <code>avatar</code>,值设置成头像的链接地址</p>
<h2 id="设置-作者昵称"><a href="#设置-作者昵称" class="headerlink" title="设置 作者昵称"></a>设置 作者昵称</h2><p><code>主题配置</code>： &lt;folder&gt;/theme/next/<code>_config.yml</code></p>
<p>搜索 <code>author</code> 关键字</p>
<h2 id="设置-作者昵称-1"><a href="#设置-作者昵称-1" class="headerlink" title="设置 作者昵称"></a>设置 作者昵称</h2><p><code>主题配置</code>： &lt;folder&gt;/theme/next/<code>_config.yml</code></p>
<p>搜索 <code>description</code> 关键字</p>
<h2 id="设置-首页列表是否显示-阅读更多"><a href="#设置-首页列表是否显示-阅读更多" class="headerlink" title="设置 首页列表是否显示 阅读更多"></a>设置 首页列表是否显示 <code>阅读更多</code></h2><p><code>主题配置</code>： &lt;folder&gt;/theme/next/<code>_config.yml</code></p>
<p>搜索 <code>auto_excerpt</code> 关键字</p>
<p>将 <code>enable</code> 设置为 <code>true</code></p>
<p><code>length</code> 设置为期望截取保留的文章长度</p>
<h2 id="集成第三方服务"><a href="#集成第三方服务" class="headerlink" title="集成第三方服务"></a>集成第三方服务</h2><p><code>主题配置</code>： &lt;folder&gt;/theme/next/<code>_config.yml</code></p>
<h3 id="多说评论"><a href="#多说评论" class="headerlink" title="多说评论"></a>多说评论</h3><p>搜索 <code>duoshuo_shortname</code> 关键字，值使用 <code>多说域名</code></p>
<p><img src="https://theme-next.iissnan.com/uploads/five-minutes-setup/duoshuo-create-site.png" alt="多说：创建站点-多说域名"></p>
<p>搜索 <code>duoshuo_hotartical</code> 关键字，将值设置为 <code>true</code>，并取消注释</p>
<h3 id="畅言评论"><a href="#畅言评论" class="headerlink" title="畅言评论"></a>畅言评论</h3><p>打开评论模板<code>&lt;folder&gt;/themes/next/layout/_partials/comments.swig</code></p>
<p>在 &#123;% <code>endif</code> %&#125; 前面添加畅言评论</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--畅言评论--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">"comments"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--高速版，加载速度快，使用前需测试页面的兼容性--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"SOHUCS"</span> <span class="attr">sid</span>=<span class="string">"&#123;&#123; page.title &#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> appid = <span class="string">'cysMNUGiM'</span>,<span class="comment">//cyssdFaue</span></span></span><br><span class="line"><span class="javascript">      conf = <span class="string">'746691ef70d87f9e0b14acf9e9f473df'</span>;<span class="comment">//18694a97589062f29188dcc5b3c30703</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> doc = <span class="built_in">document</span>,</span></span><br><span class="line"><span class="javascript">      s = doc.createElement(<span class="string">'script'</span>),</span></span><br><span class="line"><span class="javascript">      h = doc.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>] || doc.head || doc.documentElement;</span></span><br><span class="line"><span class="javascript">      s.type = <span class="string">'text/javascript'</span>;</span></span><br><span class="line"><span class="javascript">      s.charset = <span class="string">'utf-8'</span>;</span></span><br><span class="line"><span class="javascript">      s.src =  <span class="string">'https://assets.changyan.sohu.com/upload/changyan.js?conf='</span>+ conf +<span class="string">'&amp;appid='</span> + appid;</span></span><br><span class="line">      h.insertBefore(s,h.firstChild);</span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.SCS_NO_IFRAME = <span class="literal">true</span>;</span></span><br><span class="line">    &#125;)()</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>添加已开启的畅言插件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--畅言插件--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 代码1：放在页面需要展示的位置  --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 如果您配置过sourceid，建议在div标签中配置sourceid、cid(分类id)，没有请忽略  --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--打赏--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"cyReward"</span> <span class="attr">role</span>=<span class="string">"cylabs"</span> <span class="attr">data-use</span>=<span class="string">"reward"</span> <span class="attr">style</span>=<span class="string">"text-align: center;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--评论表情--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"cyEmoji"</span> <span class="attr">role</span>=<span class="string">"cylabs"</span> <span class="attr">data-use</span>=<span class="string">"emoji"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 代码2：用来读取评论框配置，此代码需放置在代码1之后。 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 如果当前页面有评论框，代码2请勿放置在评论框代码之前。 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 如果页面同时使用多个实验室项目，以下代码只需要引入一次，只配置上面的div标签即可 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> <span class="attr">src</span>=<span class="string">"https://changyan.itc.cn/js/lib/jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> <span class="attr">src</span>=<span class="string">"https://changyan.sohu.com/js/changyan.labs.https.js?appid=cyssdFaue"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="百度统计"><a href="#百度统计" class="headerlink" title="百度统计"></a>百度统计</h3><p>搜索新增 <code>baidu_analytics</code> 关键字，值使用 <em>hm.js?</em> 后面那串统计脚本 id</p>
<p><img src="https://theme-next.iissnan.com/uploads/five-minutes-setup/analytics-baidu-id.png" alt="复制 hm.js? 后面那串统计脚本 id"></p>
<h3 id="阅读次数统计（LeanCloud）"><a href="#阅读次数统计（LeanCloud）" class="headerlink" title="阅读次数统计（LeanCloud）"></a>阅读次数统计（LeanCloud）</h3><p>参考：<span class="exturl" data-url="aHR0cHM6Ly9ub3Rlcy53YW5naGFvLndvcmsvMjAxNS0xMC0yMS0lRTQlQjglQkFOZXhUJUU0JUI4JUJCJUU5JUEyJTk4JUU2JUI3JUJCJUU1JThBJUEwJUU2JTk2JTg3JUU3JUFCJUEwJUU5JTk4JTg1JUU4JUFGJUJCJUU5JTg3JThGJUU3JUJCJTlGJUU4JUFFJUExJUU1JThBJTlGJUU4JTgzJUJELmh0bWwjJUU5JTg1JThEJUU3JUJEJUFFTGVhbkNsb3Vk" title="https://notes.wanghao.work/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html#%E9%85%8D%E7%BD%AELeanCloud">配置 LeanCloud<i class="fa fa-external-link"></i></span></p>
<p>更多配置参考：<span class="exturl" data-url="aHR0cHM6Ly90aGVtZS1uZXh0Lmlpc3NuYW4uY29tL2dldHRpbmctc3RhcnRlZC5odG1s" title="https://theme-next.iissnan.com/getting-started.html">https://theme-next.iissnan.com/getting-started.html<i class="fa fa-external-link"></i></span></p>
<h1 id="创建-GitHub"><a href="#创建-GitHub" class="headerlink" title="创建 GitHub"></a>创建 GitHub</h1><p>创建好账号之后，先创建一个仓库 <code>New repository</code></p>
<p><img src="https://7xmlea.com1.z0.glb.clouddn.com/page_jiaochengvfdegfewgtrewgtewgwer.PNG" alt="New repository"></p>
<p>进入 <code>Settings</code> ，找到下方的 <code>GitHub Pages</code> ，点击<code>Choose a theme</code>选择主题（这个无所谓，最后都会被替换），<code>Source</code>指向的就是 GitPage 站点所在的分支。</p>
<p>GitHub 会给分配一个二级域名，GitHub 昵称+github.io</p>
<h1 id="部署网站"><a href="#部署网站" class="headerlink" title="部署网站"></a>部署网站</h1><h2 id="安装-hexo-deployer-git"><a href="#安装-hexo-deployer-git" class="headerlink" title="安装 hexo-deployer-git"></a>安装 <code>hexo-deployer-git</code></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p><code>网站配置</code>： &lt;folder&gt;/<code>_config.yml</code></p>
<p>搜索 <code>deploy</code> 关键字</p>
<ul>
<li>type：git</li>
<li>repo：github 提交地址</li>
<li>branch：提交分支</li>
</ul>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo deploy</span></span><br><span class="line"><span class="meta">#</span><span class="bash">或</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo d</span></span><br></pre></td></tr></table></figure>
<p>部署网站。<br>如果想在部署之前预先生成下静态文件，可以使用：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo deploy -g</span></span><br><span class="line"><span class="meta">#</span><span class="bash">或</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo deploy --generate</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>$ hexo deploy -g</code>与<code>$ hexo generate -d</code>的效果其实是相同的</p>
</blockquote>
<blockquote>
<p><strong>本地站点不要放在 Git 上，否则执行 deploy 的时候会把本地站点提交上去</strong></p>
<p>如果想将本地站点放到 GitHub 实现自动部署可以配合 <span class="exturl" data-url="aHR0cHM6Ly9kYXNoYm9hcmQuZGFvY2xvdWQuaW8v" title="https://dashboard.daocloud.io/"><code>DaoCloud</code><i class="fa fa-external-link"></i></span> 实现。</p>
</blockquote>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>建站</tag>
        <tag>blog</tag>
        <tag>博客</tag>
        <tag>hexo</tag>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>图片压缩上传</title>
    <url>/posts/c1474639.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @Date: 2016/11/17  0017</span></span><br><span class="line"><span class="comment"> * @Time: 10:14</span></span><br><span class="line"><span class="comment"> * @Author: lxbin</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created with JetBrains WebStorm.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * https://leonshi.com/2015/10/31/html5-canvas-image-compress-crop/</span></span><br><span class="line"><span class="comment"> * https://jafeney.com/2016/08/11/20160811-image-upload/</span></span><br><span class="line"><span class="comment"> * https://ilovetile.com/3506</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 读取文件</span></span><br><span class="line"><span class="comment"> * @param file 文件对象</span></span><br><span class="line"><span class="comment"> * @return &#123;Promise&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readFileAsync</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> reader = <span class="keyword">new</span> FileReader()</span><br><span class="line">        reader.onload = <span class="function"><span class="params">e</span> =&gt;</span> resolve(readFile.target.result)</span><br><span class="line">        reader.onerror = <span class="function"><span class="params">e</span> =&gt;</span> reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Could not read file'</span>))</span><br><span class="line">        reader.readAsDataURL(file)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 加载图片</span></span><br><span class="line"><span class="comment"> * @param url 图片地址</span></span><br><span class="line"><span class="comment"> * @return &#123;Promise&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadImageAsync</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> image = <span class="keyword">new</span> Image()</span><br><span class="line">        image.onload = <span class="function"><span class="params">()</span> =&gt;</span> resolve(image)</span><br><span class="line">        image.onerror = <span class="function"><span class="params">()</span> =&gt;</span> reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Could not load image at '</span> + url))</span><br><span class="line">        image.src = url</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * base64的图片dataUri转Blob</span></span><br><span class="line"><span class="comment"> * @param dataURI</span></span><br><span class="line"><span class="comment"> * @return &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dataURItoBlob</span>(<span class="params">dataURI</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// convert base64 to raw binary data held in a string</span></span><br><span class="line">    <span class="comment">// doesn't handle URLEncoded DataURIs - see SO answer #6850276 for code that does this</span></span><br><span class="line">    <span class="keyword">const</span> byteString = atob(dataURI.split(<span class="string">','</span>)[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// separate out the mime component</span></span><br><span class="line">    <span class="keyword">const</span> mimeString = dataURI.split(<span class="string">','</span>)[<span class="number">0</span>].split(<span class="string">':'</span>)[<span class="number">1</span>].split(<span class="string">';'</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">// write the bytes of the string to an ArrayBuffer</span></span><br><span class="line">    <span class="keyword">const</span> ab = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(byteString.length);</span><br><span class="line">    <span class="keyword">const</span> ia = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(ab);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; byteString.length; i++) &#123;</span><br><span class="line">        ia[i] = byteString.charCodeAt(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// write the ArrayBuffer to a blob, and you're done</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Blob([ab], &#123;<span class="attr">type</span>: mimeString&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Old code</span></span><br><span class="line">    <span class="comment">// const bb = new BlobBuilder();</span></span><br><span class="line">    <span class="comment">// bb.append(ab);</span></span><br><span class="line">    <span class="comment">// return bb.getBlob(mimeString);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 图片转Blob</span></span><br><span class="line"><span class="comment"> * @param image 图片对象</span></span><br><span class="line"><span class="comment"> * @param quality 图片质量（0到1之间）</span></span><br><span class="line"><span class="comment"> * @param scale 缩放比例（0到1之间）</span></span><br><span class="line"><span class="comment"> * @return &#123;Promise&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">imageToBlob</span>(<span class="params">image, quality, scale</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">'canvas'</span>)</span><br><span class="line">            canvas.width = image.naturalWidth * scale</span><br><span class="line">            canvas.height = image.naturalHeight * scale</span><br><span class="line">            <span class="keyword">while</span> (canvas.width &gt;= <span class="number">3264</span> || canvas.height &gt;= <span class="number">2448</span>) &#123;<span class="comment">//超过这个值base64无法生成，在IOS上</span></span><br><span class="line">                canvas.width = canvas.naturalWidth * scale</span><br><span class="line">                canvas.height = canvas.naturalHeight * scale</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> ctx = canvas.getContext(<span class="string">'2d'</span>).drawImage(image, <span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height)</span><br><span class="line"></span><br><span class="line">            <span class="comment">//方式一：低版本兼容性差些</span></span><br><span class="line">            <span class="comment">//canvas.toBlob(function (blob) &#123;</span></span><br><span class="line">            <span class="comment">//    console.group('[Leo]file compress to blob')</span></span><br><span class="line">            <span class="comment">//    console.log('文件类型 =&gt; ' + image.type)</span></span><br><span class="line">            <span class="comment">//    console.log('文件大小 =&gt; ' + (image.size / 1024 / 1024).toFixed(2) + 'M')</span></span><br><span class="line">            <span class="comment">//    console.log('blob质量 =&gt; ' + quality)</span></span><br><span class="line">            <span class="comment">//    console.log('blob大小 =&gt; ' + (blob.size / 1024 / 1024).toFixed(2) + 'M')</span></span><br><span class="line">            <span class="comment">//    console.groupEnd()</span></span><br><span class="line">            <span class="comment">//    resolve(blob)</span></span><br><span class="line">            <span class="comment">//&#125;, 'image/jpeg', quality)</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//方式二：</span></span><br><span class="line">            <span class="keyword">const</span> base64 = canvas.toDataURL(<span class="string">'image/jpeg'</span>, quality);</span><br><span class="line">            <span class="keyword">const</span> blob = dataURItoBlob(base64);</span><br><span class="line">            blob.name = blob.filename = image.name</span><br><span class="line">            <span class="built_in">console</span>.group(<span class="string">'[Leo]image compress to blob'</span>)</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'文件类型 =&gt; '</span> + image.type)</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'文件大小 =&gt; '</span> + (image.size / <span class="number">1024</span> / <span class="number">1024</span>).toFixed(<span class="number">2</span>) + <span class="string">'M'</span>)</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'blob质量 =&gt; '</span> + quality)</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'blob大小 =&gt; '</span> + (blob.size / <span class="number">1024</span> / <span class="number">1024</span>).toFixed(<span class="number">2</span>) + <span class="string">'M'</span>)</span><br><span class="line">            <span class="built_in">console</span>.groupEnd()</span><br><span class="line">            resolve(blob);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Image could not convert to blob :"</span> + e))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Ajax上传</span></span><br><span class="line"><span class="comment"> * @param uri 上传的Action地址</span></span><br><span class="line"><span class="comment"> * @param file 文件对象</span></span><br><span class="line"><span class="comment"> * @return &#123;Promise&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uploadFile</span>(<span class="params">uri, file</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">        <span class="keyword">if</span> (xhr.upload) &#123;</span><br><span class="line">            xhr.upload.addEventListener(<span class="string">"progress"</span>, (e) =&gt; &#123;<span class="comment">// 处理上传进度</span></span><br><span class="line">                <span class="keyword">if</span> (e.lengthComputable) &#123;</span><br><span class="line">                    <span class="keyword">let</span> percent = (e.loaded / e.total * <span class="number">100</span>).toFixed(<span class="number">2</span>) + <span class="string">'%'</span></span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">"上传中("</span> + percent + <span class="string">")"</span>);</span><br><span class="line">                    <span class="comment">//TODO：反馈到DOM里显示</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'unable to compute'</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="literal">false</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        xhr.onreadystatechange = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;<span class="comment">// 文件上传成功或是失败</span></span><br><span class="line">            <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (xhr.status === <span class="number">200</span>) &#123;</span><br><span class="line">                    resolve(xhr.responseText)<span class="comment">// 上传成功</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    reject(xhr.responseText)<span class="comment">// 上传出错处理</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        xhr.open(<span class="string">"POST"</span>, uri, <span class="literal">true</span>)<span class="comment">// 开始上传</span></span><br><span class="line">        <span class="keyword">let</span> form = <span class="keyword">new</span> FormData()</span><br><span class="line">        form.append(<span class="string">"filedata"</span>, file, file.name)</span><br><span class="line">        xhr.send(form)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 上传文件</span></span><br><span class="line"><span class="comment"> * @param file 文件对象</span></span><br><span class="line"><span class="comment"> * @param quality 图片质量（0到1之间）</span></span><br><span class="line"><span class="comment"> * @param scale 缩放比例（0到1之间）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fileUpload</span>(<span class="params">file, quality, scale</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> fileUrl = <span class="keyword">await</span> readFileAsync(file)</span><br><span class="line">        <span class="keyword">let</span> image = <span class="keyword">await</span> loadImageAsync(fileUrl)</span><br><span class="line">        image.name = file.name</span><br><span class="line">        <span class="keyword">let</span> blob = <span class="keyword">await</span> imageToBlob(image, quality, scale)</span><br><span class="line">        <span class="keyword">let</span> upload = <span class="keyword">await</span> uploadFile(blob)</span><br><span class="line">        <span class="keyword">return</span> upload</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'file upload failed'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>参考：</strong><br>  <span class="exturl" data-url="aHR0cHM6Ly9sZW9uc2hpLmNvbS8yMDE1LzEwLzMxL2h0bWw1LWNhbnZhcy1pbWFnZS1jb21wcmVzcy1jcm9wLw==" title="https://leonshi.com/2015/10/31/html5-canvas-image-compress-crop/">https://leonshi.com/2015/10/31/html5-canvas-image-compress-crop/<i class="fa fa-external-link"></i></span><br>  <span class="exturl" data-url="aHR0cHM6Ly9qYWZlbmV5LmNvbS8yMDE2LzA4LzExLzIwMTYwODExLWltYWdlLXVwbG9hZC8=" title="https://jafeney.com/2016/08/11/20160811-image-upload/">https://jafeney.com/2016/08/11/20160811-image-upload/<i class="fa fa-external-link"></i></span><br>  <span class="exturl" data-url="aHR0cHM6Ly9pbG92ZXRpbGUuY29tLzM1MDY=" title="https://ilovetile.com/3506">https://ilovetile.com/3506<i class="fa fa-external-link"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>javascript</tag>
        <tag>文件上传</tag>
      </tags>
  </entry>
  <entry>
    <title>vue学习</title>
    <url>/posts/b38a0bed.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="我的-Demo"><a href="#我的-Demo" class="headerlink" title="我的 Demo"></a>我的 Demo</h1><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL01yTGVvL3Z1ZS1pbS1kZW1v" title="https://github.com/MrLeo/vue-im-demo">Vue-IM<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL01yTGVvL3Z1ZTItZGVtbw==" title="https://github.com/MrLeo/vue2-demo">vue2.0 demo<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL01yTGVvL3Z1ZS1kZW1v" title="https://github.com/MrLeo/vue-demo">Vue-视频<i class="fa fa-external-link"></i></span></li>
</ul>
<a id="more"></a>
<h1 id="其他-Demo"><a href="#其他-Demo" class="headerlink" title="其他 Demo"></a>其他 Demo</h1><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3VzZXJ5YW5ndGFvL3Z1ZS13ZWNoYXQ=" title="https://github.com/useryangtao/vue-wechat">vue-wechat<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2tlbmJlcmtlbGV5L3Z1ZS1kZW1v" title="https://github.com/kenberkeley/vue-demo">留言板<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS1oYWNrZXJuZXdz" title="https://github.com/vuejs/vue-hackernews">HackerNews<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS1oYWNrZXJuZXdzLTIuMA==" title="https://github.com/vuejs/vue-hackernews-2.0">HackerNews-2.0<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xlZnRzdGljay92dWUtbWVtb3J5LWdhbWU=" title="https://github.com/leftstick/vue-memory-game">vue-memory-game<i class="fa fa-external-link"></i></span></li>
</ul>
<hr>
<h1 id="Vue-相关资料"><a href="#Vue-相关资料" class="headerlink" title="Vue 相关资料"></a>Vue 相关资料</h1><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9jbi52dWVqcy5vcmcv" title="https://cn.vuejs.org/">Vue 官网<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly92dWVmZS5jbi8=" title="https://vuefe.cn/">Vue 中文翻译<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly92dWUuc2lrZS5pby8=" title="https://vue.sike.io/">Vue 双语网站<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS1jbGk=" title="https://github.com/vuejs/vue-cli">vue-cli 脚手架<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly92dWUtbG9hZGVyLnZ1ZWpzLm9yZy9lbi9pbmRleC5odG1s" title="https://vue-loader.vuejs.org/en/index.html">vue-loader<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS1yb3V0ZXI=" title="https://github.com/vuejs/vue-router">vue-router<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZXg=" title="https://github.com/vuejs/vuex">vuex<i class="fa fa-external-link"></i></span></li>
</ul>
<h1 id="社区"><a href="#社区" class="headerlink" title="社区"></a>社区</h1><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly92dWUtanMuY29tLw==" title="https://vue-js.com/">Vue.js 专业中文社区<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9mb3J1bS52dWVqcy5vcmcv" title="https://forum.vuejs.org/">Vue Forum<i class="fa fa-external-link"></i></span></li>
</ul>
<h1 id="Vue-常用组件推荐"><a href="#Vue-常用组件推荐" class="headerlink" title="Vue 常用组件推荐"></a><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL2F3ZXNvbWUtdnVlI2xpYnJhcmllcy0tcGx1Z2lucw==" title="https://github.com/vuejs/awesome-vue#libraries--plugins">Vue 常用组件推荐<i class="fa fa-external-link"></i></span></h1><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3N1cm1vbi1jaGluYS92dWUtdmlkZW8tcGxheWVy" title="https://github.com/surmon-china/vue-video-player">Vue-Video-Player:Video/Live player for Vue.js(1.x ~ 2.x) <i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS10b3VjaA==" title="https://github.com/vuejs/vue-touch">vue-touch:触屏手势<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hpbG9uZ2p3L3Z1ZS1sYXp5bG9hZA==" title="https://github.com/hilongjw/vue-lazyload">vue-lazyload:延迟加载<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Vnb2lzdC92dWUtdGltZWFnbw==" title="https://github.com/egoist/vue-timeago">vue-timeago:将日期转化为’3 hours ago’形式<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0VsZW1lRkUvdnVlLXN3aXBl" title="https://github.com/ElemeFE/vue-swipe">vue-swipe:幻灯片/轮播图<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3N1cm1vbi1jaGluYS92dWUtYXdlc29tZS1zd2lwZXI=" title="https://github.com/surmon-china/vue-awesome-swiper">Vue-Awesome-Swiper:Swiper(slide) component for Vue.js(1.x ~ 2.x) <i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3dlbmRhb3NhbnNob3UvdnVlLWZ1bGxwYWdl" title="https://github.com/wendaosanshou/vue-fullpage">vue-fullpage:触摸全屏滚动<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0VsZW1lRkUvdnVlLWluZmluaXRlLXNjcm9sbA==" title="https://github.com/ElemeFE/vue-infinite-scroll">vue-infinite-scroll:无限滚动<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21pbnQtdWkvbWludC1sb2FkbW9yZQ==" title="https://github.com/mint-ui/mint-loadmore">mint-loadmore:下拉加载和上拉加载<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0VsZW1lRkUvdnVlLXRvYXN0LW1vYmlsZQ==" title="https://github.com/ElemeFE/vue-toast-mobile">vue-toast-mobile:mobile toast<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21pbnQtdWkvbWludC1pbmRpY2F0b3I=" title="https://github.com/mint-ui/mint-indicator">mint-indicator: 提示用户正在加载，自带 modal<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly92dXhqcy5naXRib29rcy5pby92dXgvY29udGVudC8=" title="https://vuxjs.gitbooks.io/vux/content/">Vux:基于 Vue 和 WeUI 的组件库<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9taW50LXVpLmdpdGh1Yi5pby8jIS96aC1jbg==" title="https://mint-ui.github.io/#!/zh-cn">Mint UI - 饿了么基于 Vue.js 的移动端组件库<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0VsZW1lRkUvZWxlbWVudA==" title="https://github.com/ElemeFE/element">element - 饿了么 Desktop UI elements for Vue.js 2.0<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Nzc29iai9jc3NvYmo=" title="https://github.com/cssobj/cssobj">vue 样式表 css 组件化-cssobj<i class="fa fa-external-link"></i></span></li>
</ul>
<h1 id="教程推荐"><a href="#教程推荐" class="headerlink" title="教程推荐"></a>教程推荐</h1><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20va2VlcGZvb2wvcC81NjE5MDcwLmh0bWw=" title="https://www.cnblogs.com/keepfool/p/5619070.html">Vue.js - 60 分钟快速入门<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JobmRkb3dpbmYvdnVlanMtbGVhcm4=" title="https://github.com/bhnddowinf/vuejs-learn">台湾小凡 vue1.0 视频教程<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JobmRkb3dpbmYvdnVlanMyLWxlYXJu" title="https://github.com/bhnddowinf/vuejs2-learn">vue2.0 官网讲解<i class="fa fa-external-link"></i></span></li>
</ul>
<h1 id="哪些项目公司正在使用-vue"><a href="#哪些项目公司正在使用-vue" class="headerlink" title="哪些项目公司正在使用 vue"></a>哪些项目公司正在使用 vue</h1><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20v" title="https://www.jianshu.com/">简书<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cub3NjaGluYS5uZXQv" title="https://www.oschina.net/">开源中国<i class="fa fa-external-link"></i></span></li>
<li>UC 浏览器<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9uYmEudWMuY24=" title="https://nba.uc.cn">https://nba.uc.cn<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9xaXF1LnVjLmNu" title="https://qiqu.uc.cn">https://qiqu.uc.cn<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly8yMDE0LnVjLmNu" title="https://2014.uc.cn">https://2014.uc.cn<i class="fa fa-external-link"></i></span></li>
</ul>
</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9nb2xkLnhpdHUuaW8v" title="https://gold.xitu.io/">稀土掘金<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0VsZW1lRkUvZWxlbWVudA==" title="https://github.com/ElemeFE/element">饿了么<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9hYm91dC5naXRsYWIuY29tLzIwMTYvMTAvMjAvd2h5LXdlLWNob3NlLXZ1ZS8=" title="https://about.gitlab.com/2016/10/20/why-we-chose-vue/">GitLab<i class="fa fa-external-link"></i></span></li>
<li>B 站<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuaW05LmNvbS9pbmRleC5odG1s" title="https://www.im9.com/index.html">兴趣圈<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9saXZlLmJpbGliaWxpLmNvbS8=" title="https://live.bilibili.com/">直播<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibWFsbC5iaWxpYmlsaS5jb20v" title="https://bmall.bilibili.com/">周边商城<i class="fa fa-external-link"></i></span></li>
</ul>
</li>
<li>滴滴</li>
<li>支付宝</li>
<li>荔枝 FM</li>
<li>途牛</li>
<li>…</li>
</ul>
<blockquote>
<p>国内使用 React 最大的站点是 <span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tLw==" title="https://www.zhihu.com/">知乎<i class="fa fa-external-link"></i></span> 还有 <span class="exturl" data-url="aHR0cHM6Ly93d3cuYWlyYm5iY2hpbmEuY24v" title="https://www.airbnbchina.cn/">Airbnb 爱彼迎<i class="fa fa-external-link"></i></span></p>
</blockquote>
<blockquote>
<p>更多内容:<br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2pzZnJvbnQvc3JjL2Jsb2IvbWFzdGVyL3Z1ZWpzLm1k" title="https://github.com/jsfront/src/blob/master/vuejs.md">https://github.com/jsfront/src/blob/master/vuejs.md<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8yNDU0ODY3Nw==" title="https://zhuanlan.zhihu.com/p/24548677">React 还是 Vue:你该如何选择？<i class="fa fa-external-link"></i></span>→<span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL0B5b3V5dXhpL3ByZXR0eS1nb29kLWNvbXBhcmlzb24tb3ZlcmFsbC1idXQtYS1mZXctcG9pbnRzLWlkLWxpa2UtdG8tZGlzY3Vzcy1lNGY2NDYwZTc1ZDUjLm0wYXcxZWF1YQ==" title="https://medium.com/@youyuxi/pretty-good-comparison-overall-but-a-few-points-id-like-to-discuss-e4f6460e75d5#.m0aw1eaua">尤大评论<i class="fa fa-external-link"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>前端</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue错误搜集</title>
    <url>/posts/9a99cb7c.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>#把业务逻辑拆分到独立的 JS 文件中时，import 语句会出现错误<br>需要在.babelrc 文件中增加如下配置：”passPerPreset”: true。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"passPerPreset"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"presets"</span>: [<span class="string">"es2015"</span>, <span class="string">"stage-2"</span>],</span><br><span class="line">  <span class="string">"plugins"</span>: [<span class="string">"transform-runtime"</span>],</span><br><span class="line">  <span class="string">"comments"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="WARNING-pre-built-javascript-file"><a href="#WARNING-pre-built-javascript-file" class="headerlink" title="WARNING : pre-built javascript file"></a>WARNING : pre-built javascript file</h1><p>此警告说明这个 js 文件是已经经过编译的，如果想忽略掉这个警告信息，可以在<code>webpack.base.conf.js</code>的<code>module</code>中添加<code>noParse</code>忽略掉这个 js 文件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    noParse: [</span><br><span class="line">        /node_modules\/video.js\/dist\/video.js/,<span class="comment">//正则表达式</span></span><br><span class="line">    ],</span><br><span class="line">    loaders: [</span><br><span class="line">    ...</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>前端</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>到底用prop还是事件</title>
    <url>/posts/2e25f007.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>组件之间数据交互，主要有<code>prop</code>和<code>事件</code>两种。</p>
<a id="more"></a>
<ul>
<li><p>prop</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span> <span class="attr">:id</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">        data() &#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line">                id: 1</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        ready() &#123;</span><br><span class="line"><span class="javascript">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.id = <span class="number">2</span>;</span></span><br><span class="line">            &#125;, 1000);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- child组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">        props: &#123;</span><br><span class="line">            id: &#123;</span><br><span class="line"><span class="javascript">                type: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript">                <span class="keyword">default</span>: <span class="number">0</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        data() &#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;&#125;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            handler() &#123; &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        watch: &#123;</span><br><span class="line"><span class="javascript">            <span class="comment">//通过watch监听id的变化来执行methods</span></span></span><br><span class="line">            id() &#123;</span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.handler();</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>事件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span> <span class="attr">:id</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">        data() &#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line">                id: 1</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        ready() &#123;</span><br><span class="line"><span class="javascript">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.$broadcast(<span class="string">'child-set-data'</span>, &#123;</span></span><br><span class="line">                    id: 2</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;, 1000);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- child组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">        props: &#123;</span><br><span class="line">            id: &#123;</span><br><span class="line"><span class="javascript">                type: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript">                <span class="keyword">default</span>: <span class="number">0</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        data() &#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;&#125;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            handler() &#123; &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        events: &#123;</span><br><span class="line"><span class="javascript">            <span class="comment">//通过events来接收父组件派发下来的事件来执行methods</span></span></span><br><span class="line"><span class="javascript">            child-<span class="keyword">set</span>-data(o) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.handler();</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>那如何优雅的选择呢？<br>笔者觉得可以在数据功能上进行区分。<br>比如上面的场景，是由于<code>子组件child在知道id改变后</code>，在它<code>自己的作用域里去执行handler()方法</code>，handler 可能是一个需要 ajax 获取数据并渲染到 child 组件上的函数(ajax 在 child 组件中完成的)，这时候就推荐用<code>watch</code>来监听 id 的改变了。<br>如果 handler 所对应的 ajax 任务是在父组件完成的，父组件需要将拿到的<code>一堆json数据传给child时</code>，这时可以通过<code>事件</code>来传递。</p>
</blockquote>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cudGFsa2luZ2NvZGVyLmNvbS9hcnRpY2xlLzYzMDk3MjYwNjUwNDQ1NTYzNzI=" title="https://www.talkingcoder.com/article/6309726065044556372">Vue+Webpack 使用规范<i class="fa fa-external-link"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>前端</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在 vue 项目里正确地引用 jquery 和 jquery-ui的插件</title>
    <url>/posts/d32ca02.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>使用 vue-cli 构建的 vue 项目，webpack 的配置文件是分散在很多地方的，而我们需要修改的是<code>build/webpack.base.conf.js</code>，修改两处的代码</p>
<a id="more"></a>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在开头引入webpack，后面的plugins那里需要</span></span><br><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="comment">// resolve</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 其他代码...</span></span><br><span class="line">  resolve: &#123;</span><br><span class="line">    extensions: [<span class="string">''</span>, <span class="string">'.js'</span>, <span class="string">'.vue'</span>],</span><br><span class="line">    fallback: [path.join(__dirname, <span class="string">'../node_modules'</span>)],</span><br><span class="line">    alias: &#123;</span><br><span class="line">      src: path.resolve(__dirname, <span class="string">'../src'</span>),</span><br><span class="line">      assets: path.resolve(__dirname, <span class="string">'../src/assets'</span>),</span><br><span class="line">      components: path.resolve(__dirname, <span class="string">'../src/components'</span>),</span><br><span class="line"></span><br><span class="line">      <span class="comment">// webpack 使用 jQuery，如果是自行下载的</span></span><br><span class="line">      <span class="comment">// 'jquery': path.resolve(__dirname, '../src/assets/libs/jquery/jquery.min'),</span></span><br><span class="line">      <span class="comment">// 如果使用NPM安装的jQuery</span></span><br><span class="line">      jquery: <span class="string">'jquery'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 增加一个plugins</span></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.ProvidePlugin(&#123;</span><br><span class="line">      $: <span class="string">'jquery'</span>,</span><br><span class="line">      jQuery: <span class="string">'jquery'</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 其他代码...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样就可以正确的使用 jQuery 了，比如我要引入<code>Bootstrap</code>，我们在 vue 的入口 js 文件<code>src/main.js</code>开头加入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用Bootstrap</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./assets/libs/bootstrap/css/bootstrap.min.css'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./assets/libs/bootstrap/js/bootstrap.min'</span></span><br></pre></td></tr></table></figure>
<p>这样 Bootstrap 就正确的被引用并构建。<br>在比如使用<code>toastr</code>组件，只需要在需要的地方<code>import</code>进来，或者全局引入 css 在需要的地方引用 js，然后直接使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用toastr</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'assets/libs/toastr/toastr.min.css'</span></span><br><span class="line"><span class="keyword">import</span> toastr <span class="keyword">from</span> <span class="string">'assets/libs/toastr/toastr.min'</span></span><br><span class="line"></span><br><span class="line">toastr.success(<span class="string">'Hello'</span>)</span><br></pre></td></tr></table></figure>
<p><strong>参考: </strong></p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjg5Njk4NjEvbWFuYWdpbmctanF1ZXJ5LXBsdWdpbi1kZXBlbmRlbmN5LWluLXdlYnBhY2s=" title="https://stackoverflow.com/questions/28969861/managing-jquery-plugin-dependency-in-webpack">Managing Jquery plugin dependency in webpack<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9mb3J1bS52dWVqcy5vcmcvdG9waWMvNDk3Ni8lRTUlQTYlODIlRTQlQkQlOTUlRTUlOUMlQTgtdnVlLSVFOSVBMSVCOSVFNyU5QiVBRSVFOSU4NyU4QyVFNiVBRCVBMyVFNyVBMSVBRSVFNSU5QyVCMCVFNSVCQyU5NSVFNyU5NCVBOC1qcXVlcnktJUU1JTkyJThDLWpxdWVyeS11aSVFNyU5QSU4NCVFNiU4RiU5MiVFNCVCQiVCNi8y" title="https://forum.vuejs.org/topic/4976/%E5%A6%82%E4%BD%95%E5%9C%A8-vue-%E9%A1%B9%E7%9B%AE%E9%87%8C%E6%AD%A3%E7%A1%AE%E5%9C%B0%E5%BC%95%E7%94%A8-jquery-%E5%92%8C-jquery-ui%E7%9A%84%E6%8F%92%E4%BB%B6/2">如何在 vue 项目里正确地引用 jquery 和 jquery-ui 的插件<i class="fa fa-external-link"></i></span></li>
</ul>
<h1 id="vue-cli-webpack-全局引入-jquery"><a href="#vue-cli-webpack-全局引入-jquery" class="headerlink" title="vue-cli webpack 全局引入 jquery"></a>vue-cli webpack 全局引入 jquery</h1><ol>
<li><p>首先在<code>package.json</code>里加入，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">dependencies:&#123;</span><br><span class="line">    <span class="string">"jquery"</span> : <span class="string">"^2.2.3"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后 nmp install</p>
</li>
<li><p>在<code>webpack.base.conf.js</code>里加入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 module.exports 的最后加入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(<span class="string">'common.js'</span>),</span><br><span class="line">  <span class="keyword">new</span> webpack.ProvidePlugin(&#123;</span><br><span class="line">    jQuery: <span class="string">'jquery'</span>,</span><br><span class="line">    $: <span class="string">'jquery'</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后一定要重新 <strong>run dev</strong></p>
</li>
<li>在 main.js 引入就 ok 了<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import $ from &apos;jquery&apos;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>参考:<span class="exturl" data-url="aHR0cHM6Ly82MThjai5jb20vMjAxNi8wOC8yNC92dWUtY2xpJUU2JTgwJThFJUU0JUI5JTg4JUU1JUJDJTk1JUU1JTg1JUE1anF1ZXJ5Lw==" title="https://618cj.com/2016/08/24/vue-cli%E6%80%8E%E4%B9%88%E5%BC%95%E5%85%A5jquery/">vue-cli 怎么引入 jquery<i class="fa fa-external-link"></i></span></p>
<h1 id="在-vue-文件中引入第三方非-NPM-模块"><a href="#在-vue-文件中引入第三方非-NPM-模块" class="headerlink" title="在.vue 文件中引入第三方非 NPM 模块"></a>在.vue 文件中引入第三方非 NPM 模块</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Showbo = <span class="built_in">require</span>(<span class="string">'exports?Showbo!./path/to/showbo.js'</span>)</span><br></pre></td></tr></table></figure>
<p>参考:<span class="exturl" data-url="aHR0cHM6Ly93ZWJwYWNrLmdpdGh1Yi5pby9kb2NzL3NoaW1taW5nLW1vZHVsZXMuaHRtbCNleHBvcnRpbmc=" title="https://webpack.github.io/docs/shimming-modules.html#exporting">exports-loader<i class="fa fa-external-link"></i></span></p>
<h1 id="vue-cli-引入外部文件"><a href="#vue-cli-引入外部文件" class="headerlink" title="vue-cli 引入外部文件"></a>vue-cli 引入外部文件</h1><p>在<code>webpack.base.conf.js</code>中添加<strong>externals</strong><br><img src="https://segmentfault.com/img/bVvRpA" alt><br>externals 中 swiper 是键，对应的值一定的是插件 swiper.js 所定义的变量 Swiper :<br><img src="https://segmentfault.com/img/bVvRpK" alt><br><img src="https://segmentfault.com/img/bVvRpL" alt><br>之后再在根目录下的 index.html 文件里引入文件：<code>&lt;script src=&quot;static/lib/swiper.js&quot;&gt;&lt;/script&gt;</code><br>这样子就可以在需要用到 swiper.js 的文件里加入这行代码：<code>import Swiper from &#39;swiper&#39;</code>，这样就能正常使用了。<br>参考: <span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL3EvMTAxMDAwMDAwNTE2OTUzMT9fZWE9ODA2MzEy" title="https://segmentfault.com/q/1010000005169531?_ea=806312">https://segmentfault.com/q/1010000005169531?_ea=806312<i class="fa fa-external-link"></i></span></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>前端</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack学习</title>
    <url>/posts/f13afe2d.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAwNTA4OTk5Mw==" title="https://segmentfault.com/a/1190000005089993">Webpack——令人困惑的地方<i class="fa fa-external-link"></i></span></li>
</ul>
<a id="more"></a>
<h1 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"项目名称"</span>, <span class="comment">//项目名称</span></span><br><span class="line">    <span class="string">"version"</span>: <span class="string">"1.0.0"</span>, <span class="comment">//版本</span></span><br><span class="line">    <span class="string">"description"</span>: <span class="string">"vue+webapck"</span>, <span class="comment">//描述</span></span><br><span class="line">    <span class="string">"author"</span>: <span class="string">"Leo"</span>, <span class="comment">//作者</span></span><br><span class="line">    <span class="string">"license"</span>: <span class="string">"MIT"</span>, <span class="comment">//开源协议</span></span><br><span class="line">    <span class="string">"main"</span>: <span class="string">"index.js"</span>, <span class="comment">//主文件</span></span><br><span class="line">    <span class="string">"scripts"</span>: &#123;</span><br><span class="line">        <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>,</span><br><span class="line">        <span class="string">"start"</span>: <span class="string">"webpack-dev-server --inline --hot --port 8090"</span></span><br><span class="line">    &#125;, <span class="comment">//scripts指定了运行脚本命令的npm命令行缩写，比如这是的start指定了运行npm run start时，所要执行的命令。</span></span><br><span class="line">    <span class="string">"dependencies"</span>: &#123; <span class="comment">//项目依赖</span></span><br><span class="line">        <span class="string">"vue"</span>: <span class="string">"^1.0.21"</span>,</span><br><span class="line">        <span class="string">"babel-runtime"</span>: <span class="string">"^6.0.0"</span>,</span><br><span class="line">        <span class="string">"vue-resource"</span>: <span class="string">"^0.6.1"</span>,</span><br><span class="line">        <span class="string">"vue-router"</span>: <span class="string">"^0.7.11"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"devDependencies"</span>: &#123; <span class="comment">//各种各样的loader，用来解析想相应的文件格式。要解析vue并且完成相应的功能，这些基本都是必须的。</span></span><br><span class="line">        <span class="string">"autoprefixer-loader"</span>: <span class="string">"^2.0.0"</span>,</span><br><span class="line">        <span class="string">"babel"</span>: <span class="string">"^6.3.13"</span>,</span><br><span class="line">        <span class="string">"babel-core"</span>: <span class="string">"^6.3.21"</span>,<span class="comment">//ES2015 babel 編譯核心</span></span><br><span class="line">        <span class="string">"babel-loader"</span>: <span class="string">"^6.2.0"</span>,<span class="comment">//編譯匯入 ES2015 類型的檔案</span></span><br><span class="line">        <span class="string">"babel-plugin-transform-runtime"</span>: <span class="string">"^6.3.13"</span>,<span class="comment">//polyfilling</span></span><br><span class="line">        <span class="string">"babel-preset-es2015"</span>: <span class="string">"^6.3.13"</span>,<span class="comment">//es2015 語法</span></span><br><span class="line">        <span class="string">"babel-preset-stage-0"</span>: <span class="string">"*"</span>,<span class="comment">//開啟草稿階段的功能</span></span><br><span class="line">        <span class="string">"babel-runtime"</span>: <span class="string">"^5.8.34"</span>,<span class="comment">//babel 執行環境</span></span><br><span class="line">        <span class="string">"file-loader"</span>: <span class="string">"^0.8.5"</span>,<span class="comment">//編譯匯入檔案類型的資源</span></span><br><span class="line">        <span class="string">"html-loader"</span>: <span class="string">"^0.3.0"</span>,</span><br><span class="line">        <span class="string">"css-loader"</span>: <span class="string">"^0.16.0"</span>,<span class="comment">//編譯匯入 css</span></span><br><span class="line">        <span class="string">"style-loader"</span>: <span class="string">"^0.12.3"</span>,<span class="comment">//把編譯後的 css 整合進 html</span></span><br><span class="line">        <span class="string">"node-sass"</span>: <span class="string">"^3.4.2"</span>,</span><br><span class="line">        <span class="string">"sass-loader"</span>: <span class="string">"^3.2.0"</span>,</span><br><span class="line">        <span class="string">"less"</span>: <span class="string">"^2.7.1"</span>,</span><br><span class="line">        <span class="string">"less-loader"</span>: <span class="string">"^2.2.3"</span>,</span><br><span class="line">        <span class="string">"url-loader"</span>: <span class="string">"^0.5.6"</span>,<span class="comment">//編譯匯入檔案類型的資源，把檔案轉成 base64 等</span></span><br><span class="line">        <span class="string">"vue-style-loader"</span>: <span class="string">"*"</span>,<span class="comment">//編譯 vue 樣式部分</span></span><br><span class="line">        <span class="string">"vue-html-loader"</span>: <span class="string">"^1.2.0"</span>,<span class="comment">//編譯 vue 的 template 部份</span></span><br><span class="line">        <span class="string">"vue-loader"</span>: <span class="string">"^7.2.0"</span>,<span class="comment">//編譯匯入 vue 元件檔案</span></span><br><span class="line">        <span class="string">"vue-hot-reload-api"</span>: <span class="string">"*"</span>,<span class="comment">//Hot reload API for Vue components</span></span><br><span class="line">        <span class="string">"webpack"</span>: <span class="string">"^1.12.0"</span>,<span class="comment">//webapck 核心程式</span></span><br><span class="line">        <span class="string">"webpack-dev-server"</span>: <span class="string">"^1.14.0"</span>,<span class="comment">//開發伺服器</span></span><br><span class="line">        <span class="string">"webpack-merge"</span>: <span class="string">"*"</span><span class="comment">//合併設定檔使用</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"keywords"</span>: [ <span class="comment">//关键字</span></span><br><span class="line">        <span class="string">"vue"</span>,</span><br><span class="line">        <span class="string">"webpack"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="webpack-config-js"><a href="#webpack-config-js" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="comment">// NodeJS中的Path对象，用于处理目录的对象，提高开发效率。</span></span><br><span class="line"><span class="comment">// 模块导入</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 入口文件地址</span></span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: <span class="string">'./src/main.js'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 输出</span></span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.join(__dirname, <span class="string">'./dist'</span>),</span><br><span class="line">    <span class="comment">// 文件地址，使用绝对路径形式</span></span><br><span class="line">    filename: <span class="string">'[name].js'</span>,</span><br><span class="line">    <span class="comment">//[name]这里是webpack提供的根据路口文件自动生成的名字</span></span><br><span class="line">    publicPath: <span class="string">'/dist/'</span>,</span><br><span class="line">    <span class="comment">// 公共文件生成的地址</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 服务器配置相关，自动刷新!</span></span><br><span class="line">  devServer: &#123;</span><br><span class="line">    historyApiFallback: <span class="literal">true</span>,</span><br><span class="line">    hot: <span class="literal">false</span>,</span><br><span class="line">    inline: <span class="literal">true</span>,</span><br><span class="line">    grogress: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 加载器</span></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    <span class="comment">//忽略:不编译的js文件</span></span><br><span class="line">    noParse: [</span><br><span class="line">      /node_modules\/video.js\/dist\/video.js/, <span class="comment">//正则表达式</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// 加载器</span></span><br><span class="line">    loaders: [</span><br><span class="line">      <span class="comment">// 解析.vue文件</span></span><br><span class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.vue$/</span>, <span class="attr">loader</span>: <span class="string">'vue'</span> &#125;,</span><br><span class="line">      <span class="comment">// 转化ES6的语法</span></span><br><span class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.js$/</span>, <span class="attr">loader</span>: <span class="string">'babel'</span>, <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span> &#125;,</span><br><span class="line">      <span class="comment">// 编译css并自动添加css前缀</span></span><br><span class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="attr">loader</span>: <span class="string">'style!css!autoprefixer'</span> &#125;,</span><br><span class="line">      <span class="comment">//.scss 文件想要编译，scss就需要这些东西！来编译处理</span></span><br><span class="line">      <span class="comment">//install css-loader style-loader sass-loader node-sass --save-dev</span></span><br><span class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.scss$/</span>, <span class="attr">loader</span>: <span class="string">'style!css!sass?sourceMap'</span> &#125;,</span><br><span class="line">      <span class="comment">// LESS</span></span><br><span class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.less$/</span>, <span class="attr">loader</span>: <span class="string">'style!css!less'</span> &#125;,</span><br><span class="line">      <span class="comment">// 图片转化，小于8K自动转化为base64的编码</span></span><br><span class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.(png|jpg|gif)$/</span>, <span class="attr">loader</span>: <span class="string">'url-loader?limit=8192'</span> &#125;,</span><br><span class="line">      <span class="comment">//html模板编译？</span></span><br><span class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.(html|tpl)$/</span>, <span class="attr">loader</span>: <span class="string">'html-loader'</span> &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// .vue的配置。需要单独出来配置，其实没什么必要--因为我删了也没保错，不过这里就留这把，因为官网文档里是可以有单独的配置的。</span></span><br><span class="line">  vue: &#123;</span><br><span class="line">    loaders: &#123;</span><br><span class="line">      css: <span class="string">'style!css!autoprefixer'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 转化成es5的语法</span></span><br><span class="line">  babel: &#123;</span><br><span class="line">    presets: [<span class="string">'es2015'</span>],</span><br><span class="line">    plugins: [<span class="string">'transform-runtime'</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    <span class="comment">// require时省略的扩展名，如：require('module') 不需要module.js</span></span><br><span class="line">    extensions: [<span class="string">''</span>, <span class="string">'.js'</span>, <span class="string">'.vue'</span>],</span><br><span class="line">    <span class="comment">// 别名，可以直接使用别名来代表设定的路径以及其他</span></span><br><span class="line">    alias: &#123;</span><br><span class="line">      filter: path.join(__dirname, <span class="string">'./src/filters'</span>),</span><br><span class="line">      components: path.join(__dirname, <span class="string">'./src/components'</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 开启source-map，webpack有多种source-map，在官网文档可以查到</span></span><br><span class="line">  devtool: <span class="string">'eval-source-map'</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>前端</tag>
        <tag>vue</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>使用webpack生成不同发布环境的api地址</title>
    <url>/posts/6cff3863.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote>
<p>webpack 官方提供了一个 definePlugin，专门用来定义一些变量，通常我们把用于类似开发和生产环境的切换上。<br><span class="exturl" data-url="aHR0cHM6Ly93ZWJwYWNrLmdpdGh1Yi5pby9kb2NzL2xpc3Qtb2YtcGx1Z2lucy5odG1sI2RlZmluZXBsdWdpbg==" title="https://webpack.github.io/docs/list-of-plugins.html#defineplugin">https://webpack.github.io/docs/list-of-plugins.html#defineplugin<i class="fa fa-external-link"></i></span></p>
</blockquote>
<a id="more"></a>
<p>Example:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">  PRODUCTION: <span class="built_in">JSON</span>.stringify(<span class="literal">true</span>),</span><br><span class="line">  VERSION: <span class="built_in">JSON</span>.stringify(<span class="string">'5fa3b9'</span>),</span><br><span class="line">  BROWSER_SUPPORTS_HTML5: <span class="literal">true</span>,</span><br><span class="line">  TWO: <span class="string">'1+1'</span>,</span><br><span class="line">  <span class="string">'typeof window'</span>: <span class="built_in">JSON</span>.stringify(<span class="string">'object'</span>),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'Running App version '</span> + VERSION)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!BROWSER_SUPPORTS_HTML5) <span class="built_in">require</span>(<span class="string">'html5shiv'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!PRODUCTION) <span class="built_in">console</span>.log(<span class="string">'Debug info'</span>)</span><br><span class="line"><span class="keyword">if</span> (PRODUCTION) <span class="built_in">console</span>.log(<span class="string">'Production log'</span>)</span><br></pre></td></tr></table></figure>
<p>vue-cli 生成的项目中在<code>build/webpack.dev.conf.js</code>和<code>build/webpack.prod.conf.js</code>文件下的<code>plugins</code>节点<br><img src="image/2016-12-01-09-03-08.jpg" alt></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>前端</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vuex学习</title>
    <url>/posts/e61720a.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAwNTg5MTAyNg==" title="https://segmentfault.com/a/1190000005891026">使用 Vuex + Vue.js 构建单页应用<i class="fa fa-external-link"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAwNTc4MDMyNg==" title="https://segmentfault.com/a/1190000005780326">使用 Vue.js 和 Vuex 实现购物车场景<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3hpYW9sdW9ib2RpbmcvdnVlLWRlbW8tY29sbGVjdGlvbg==" title="https://github.com/xiaoluoboding/vue-demo-collection">vue-demo-collection<i class="fa fa-external-link"></i></span></p>
</li>
</ul>
<h2 id="配置-Vuex"><a href="#配置-Vuex" class="headerlink" title="配置 Vuex"></a>配置 Vuex</h2><p>在<code>src</code>下创建一个文件夹叫做<code>vuex</code>。里面定义三个文件。</p>
<h3 id="mutation-types-js-定义类型的"><a href="#mutation-types-js-定义类型的" class="headerlink" title="mutation-types.js 定义类型的"></a><code>mutation-types.js</code> 定义类型的</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/vuex/mutation-types.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> SET_HEADER_TITLE = <span class="string">'SET_HEADER_TITLE'</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="actions-js-操作，可以分解成多个文件"><a href="#actions-js-操作，可以分解成多个文件" class="headerlink" title="actions.js 操作，可以分解成多个文件"></a><code>actions.js</code> 操作，可以分解成多个文件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/vuex/actions.js</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用统一的函数处理并分发mutations。</span></span><br><span class="line"><span class="comment"> * @param type</span></span><br><span class="line"><span class="comment"> * @returns &#123;function(&#123;dispatch: *&#125;, ...[*]): *&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeAction</span>(<span class="params">type</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">&#123; dispatch &#125;, ...args</span>) =&gt;</span> dispatch(type, ...args)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; SET_HEADER_TITLE &#125; <span class="keyword">from</span> <span class="string">'./mutation-types'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * actions</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> setTitle = makeAction(SET_HEADER_TITLE)</span><br></pre></td></tr></table></figure>
<h3 id="store-js-入口文件，在根组件调用，然后所有子组件可以共享数据。"><a href="#store-js-入口文件，在根组件调用，然后所有子组件可以共享数据。" class="headerlink" title="store.js 入口文件，在根组件调用，然后所有子组件可以共享数据。"></a><code>store.js</code> 入口文件，在根组件调用，然后所有子组件可以共享数据。</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/vuex/store.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="comment">//import createLogger from 'vuex/logger'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"><span class="comment">//Vue.config.debug = true</span></span><br><span class="line"><span class="comment">//const debug = process.env.NODE_ENV !== 'production'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入各个模块的初始状态和 mutations</span></span><br><span class="line"><span class="keyword">import</span> index <span class="keyword">from</span> <span class="string">'./modules/index'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  <span class="comment">// 组合各个模块</span></span><br><span class="line">  modules: &#123;</span><br><span class="line">    index,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//strict: debug,</span></span><br><span class="line">  <span class="comment">//moddlewares: debug ? [createLogger()] : []</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="modules-index-js-只是例子用的，一个-index-的操作，需要定义数据的状态和-mutation。actions-js只是分发操作。"><a href="#modules-index-js-只是例子用的，一个-index-的操作，需要定义数据的状态和-mutation。actions-js只是分发操作。" class="headerlink" title="modules/index.js 只是例子用的，一个 index 的操作，需要定义数据的状态和 mutation。actions.js只是分发操作。"></a><code>modules/index.js</code> 只是例子用的，一个 index 的操作，需要定义数据的状态和 mutation。<code>actions.js</code>只是分发操作。</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/vuex/modules/index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; SET_HEADER_TITLE &#125; <span class="keyword">from</span> <span class="string">'../mutation-types'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  title: <span class="string">'default'</span>,</span><br><span class="line">  info: &#123;</span><br><span class="line">    name: <span class="string">''</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  [SET_HEADER_TITLE](state, newTitle) &#123;</span><br><span class="line">    state.title = newTitle</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  state,</span><br><span class="line">  mutations,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="挂载-store"><a href="#挂载-store" class="headerlink" title="挂载 store"></a>挂载 store</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/App.vue</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./vuex/store'</span></span><br><span class="line"><span class="keyword">import</span> HeaderComponent <span class="keyword">from</span> <span class="string">'./components/header'</span></span><br><span class="line"><span class="keyword">import</span> FooterComponent <span class="keyword">from</span> <span class="string">'./components/footer'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  store,</span><br><span class="line">  components: &#123;</span><br><span class="line">    HeaderComponent,</span><br><span class="line">    FooterComponent,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="获取数据及操作"><a href="#获取数据及操作" class="headerlink" title="获取数据及操作"></a>获取数据及操作</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/components/header.vue</span></span><br><span class="line"><span class="comment">// 从vuex拿数据，然后渲染到页面上</span></span><br><span class="line"><span class="comment">// 如果需要修改可以调用setTitle</span></span><br><span class="line"><span class="keyword">import</span> &#123; setTitle &#125; <span class="keyword">from</span> <span class="string">'../vuex/actions'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  vuex: &#123;</span><br><span class="line">    <span class="comment">//获取vuex状态数据</span></span><br><span class="line">    getters: &#123;</span><br><span class="line">      title: <span class="function"><span class="params">state</span> =&gt;</span> state.title,</span><br><span class="line">      info: <span class="function">(<span class="params">&#123; index &#125;</span>) =&gt;</span> index.info,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//状态变更事件</span></span><br><span class="line">    actions: &#123;</span><br><span class="line">      setTitle,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>前端</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vuex-router-sync</title>
    <url>/posts/8456c250.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote>
<p>问题：vuex-router-sync，干嘛用的？</p>
</blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZXgtcm91dGVyLXN5bmM=" title="https://github.com/vuejs/vuex-router-sync">https://github.com/vuejs/vuex-router-sync<i class="fa fa-external-link"></i></span><br>Effortlessly keep vue-router and vuex store in sync.</p>
<p>在 尤大写的 hacknews-2.0 中<br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS1oYWNrZXJuZXdzLTIuMA==" title="https://github.com/vuejs/vue-hackernews-2.0">https://github.com/vuejs/vue-hackernews-2.0<i class="fa fa-external-link"></i></span></p>
<a id="more"></a>
<blockquote>
<p>怎么 import ?</p>
</blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS1oYWNrZXJuZXdzLTIuMC9ibG9iL21hc3Rlci9zcmMvYXBwLmpz" title="https://github.com/vuejs/vue-hackernews-2.0/blob/master/src/app.js">https://github.com/vuejs/vue-hackernews-2.0/blob/master/src/app.js<i class="fa fa-external-link"></i></span><br>import Vue from ‘vue’<br>import App from ‘./App.vue’<br>import store from ‘./store’<br>import router from ‘./router’<br>import { sync } from ‘vuex-router-sync’<br>import * as filters from ‘./filters’</p>
<blockquote>
<p>(2) 下例 vue 檔案，使用此插件的 demo。</p>
</blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS1oYWNrZXJuZXdzLTIuMC9ibG9iL21hc3Rlci9zcmMvY29tcG9uZW50cy9JdGVtTGlzdC52dWU=" title="https://github.com/vuejs/vue-hackernews-2.0/blob/master/src/components/ItemList.vue">https://github.com/vuejs/vue-hackernews-2.0/blob/master/src/components/ItemList.vue<i class="fa fa-external-link"></i></span><br>48: displayedPage: isInitialRender ? Number(this.$store.state.route.params.page) || 1 : -1,<br>55: return Number(this.$store.state.route.params.page) || 1</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS1oYWNrZXJuZXdzLTIuMC9ibG9iL21hc3Rlci9zcmMvdmlld3MvSXRlbVZpZXcudnVl" title="https://github.com/vuejs/vue-hackernews-2.0/blob/master/src/views/ItemView.vue">https://github.com/vuejs/vue-hackernews-2.0/blob/master/src/views/ItemView.vue<i class="fa fa-external-link"></i></span><br>36: ids: [store.state.route.params.id]</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS1oYWNrZXJuZXdzLTIuMC9ibG9iL21hc3Rlci9zcmMvdmlld3MvVXNlclZpZXcudnVl" title="https://github.com/vuejs/vue-hackernews-2.0/blob/master/src/views/UserView.vue">https://github.com/vuejs/vue-hackernews-2.0/blob/master/src/views/UserView.vue<i class="fa fa-external-link"></i></span><br>24: id: store.state.route.params.id</p>
<blockquote>
<p>vuex-router-sync 语法解释</p>
</blockquote>
<p>How does it work?</p>
<p>It adds a route module into the store, which contains the state representing the current route:<br>小凡：在 store 增加 route 模块，这个 state，含有 目前的 route 对象</p>
<p>store.state.route.path // current path (string)<br>store.state.route.params // current params (object)<br>store.state.route.query // current query (object)<br>When the router navigates to a new route, the store’s state is updated.</p>
<p>store.state.route is immutable,<br>小凡：store.state.route (不可变)</p>
<p>because it is derived state from the URL,<br>小凡：因为 state 它来自 url</p>
<p>which is the source of truth.<br>小凡：来源是真实的</p>
<p>You should not attempt to trigger navigations by mutating the route object.<br>小凡：你不应该企图让 route 对象变化，来触发转址功能</p>
<p>Instead, just call $router.go().<br>取而代之，使用 $router.go() 函数</p>
<p>Note that you can do $router.go({ query: {…}}) to update the query string on the current path.<br>注意：你能使用 $router.go({ query: {…}}) 这个命令，来更新目前 path 的 查询字串</p>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>前端</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-2.0</title>
    <url>/posts/408021bd.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><span class="exturl" data-url="aHR0cHM6Ly9qc2ZpZGRsZS5uZXQvY2hyaXN2ZnJpdHovNHRwem0zZTEv" title="https://jsfiddle.net/chrisvfritz/4tpzm3e1/">JSFiddle Hello World 例子<i class="fa fa-external-link"></i></span></p>
<h1 id="独立构建-vs-运行时构建"><a href="#独立构建-vs-运行时构建" class="headerlink" title="独立构建 vs 运行时构建"></a>独立构建 vs 运行时构建</h1><ul>
<li><strong>独立构建</strong>:包括编译和支持 <code>template</code> 选项。 <strong>它也依赖于浏览器的接口的存在，所以你不能使用它来为服务器端渲染。</strong></li>
<li><strong>运行时构建</strong>:不包括模板编译，不支持 <code>template</code> 选项。运行时构建，可以用 <code>render</code> 选项，但它只在单文件组件中起作用，因为单文件组件的模板是在构建时预编译到 <code>render</code> 函数中，运行时构建只有独立构建大小的 30%，只有 16Kb min+gzip 大小。</li>
</ul>
<a id="more"></a>
<p>默认 NPM 包导出的是 <code>运行时</code> 构建。为了使用独立构建，在 webpack 配置中添加下面的别名：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">  alias: &#123;</span><br><span class="line">    <span class="string">'vue$'</span>: <span class="string">'vue/dist/vue.js'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>不要用 <code>import Vue from &#39;vue/dist/vue.js&#39;</code> - 用一些工具或第三方库引入 Vue ，这可能会导致应用程序在同一时间加载运行时和独立构建并造成错误。</p>
</blockquote>
<h1 id="生命周期钩子"><a href="#生命周期钩子" class="headerlink" title="生命周期钩子"></a>生命周期钩子</h1><p><img src="./_image/f847b38a-63fe-11e6-9c29-38e58d46f036[1].png" alt></p>
<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><ul>
<li>突变方法<ul>
<li>push()</li>
<li>pop()</li>
<li>shift()</li>
<li>unshift()</li>
<li><span class="exturl" data-url="aHR0cHM6Ly92dWVmZS5jbi9ndWlkZS9saXN0Lmh0bWwj5rOo5oSP5LqL6aG5" title="https://vuefe.cn/guide/list.html#注意事项">splice<i class="fa fa-external-link"></i></span>()</li>
<li>sort()</li>
<li>reverse()</li>
</ul>
</li>
<li>重塑数组<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly92dWVmZS5jbi9ndWlkZS9saXN0Lmh0bWwj6YeN5aGR5pWw57uE" title="https://vuefe.cn/guide/list.html#重塑数组">filter<i class="fa fa-external-link"></i></span>()</li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL2pzcmVmL2pzcmVmX2NvbmNhdF9hcnJheS5hc3A=" title="https://www.w3school.com.cn/jsref/jsref_concat_array.asp">concat<i class="fa fa-external-link"></i></span>()</li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL2pzcmVmL2pzcmVmX3NsaWNlX2FycmF5LmFzcA==" title="https://www.w3school.com.cn/jsref/jsref_slice_array.asp">slice<i class="fa fa-external-link"></i></span>()</li>
</ul>
</li>
</ul>
<h1 id="vue-1-0-gt-2-0-改变"><a href="#vue-1-0-gt-2-0-改变" class="headerlink" title="vue 1.0-&gt;2.0 改变"></a>vue 1.0-&gt;2.0 改变</h1><h3 id="v-for-track-by-gt-key"><a href="#v-for-track-by-gt-key" class="headerlink" title="v-for track-by-&gt;:key"></a>v-for <code>track-by</code>-&gt;<span class="exturl" data-url="aHR0cHM6Ly92dWVmZS5jbi9ndWlkZS9saXN0Lmh0bWwja2V5" title="https://vuefe.cn/guide/list.html#key"><code>:key</code><i class="fa fa-external-link"></i></span></h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span> <span class="attr">:key</span>=<span class="string">"item.id"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>建议尽可能用 <code>v-for</code> 时提供一个 <code>key</code>，类似 Vue 1.X 的 <code>track-by=&quot;$index&quot;</code></p>
</blockquote>
<h3 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a><span class="exturl" data-url="aHR0cHM6Ly92dWVmZS5jbi9ndWlkZS9jb21wb25lbnRzLmh0bWwj6Ieq5a6a5LmJ5LqL5Lu2" title="https://vuefe.cn/guide/components.html#自定义事件">自定义事件<i class="fa fa-external-link"></i></span></h3><ul>
<li>使用 <code>$on(eventName)</code> 监听事件</li>
<li>使用 <code>$emit(eventName)</code> 触发事件</li>
</ul>
<h3 id="keep-alive"><a href="#keep-alive" class="headerlink" title="keep-alive"></a><span class="exturl" data-url="aHR0cHM6Ly92dWVmZS5jbi9ndWlkZS9jb21wb25lbnRzLmh0bWwja2VlcC1hbGl2ZQ==" title="https://vuefe.cn/guide/components.html#keep-alive">keep-alive<i class="fa fa-external-link"></i></span></h3><blockquote>
<p>把切换出去的组件保留在内存中，可以保留它的状态或避免重新渲染</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"currentView"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 非活动组件将被缓存！ --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>1.0 写法:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"currentView"</span> <span class="attr">keep-alive</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 非活动组件将被缓存 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a><span class="exturl" data-url="aHR0cHM6Ly92dWVmZS5jbi9ndWlkZS9jb21wb25lbnRzLmh0bWwjQ2hlYXAtU3RhdGljLUNvbXBvbmVudHMtd2l0aC12LW9uY2U=" title="https://vuefe.cn/guide/components.html#Cheap-Static-Components-with-v-once">v-once<i class="fa fa-external-link"></i></span></h3><p>组件中包含大量静态内容时，可以考虑使用 <code>v-once</code> 将渲染结果缓存起来</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'terms-of-service'</span>, &#123;</span><br><span class="line">  template: <span class="string">'\</span></span><br><span class="line"><span class="string">    &lt;div v-once&gt;\</span></span><br><span class="line"><span class="string">      &lt;h1&gt;Terms of Service&lt;/h1&gt;\</span></span><br><span class="line"><span class="string">      ... a lot of static content ...\</span></span><br><span class="line"><span class="string">    &lt;/div&gt;\</span></span><br><span class="line"><span class="string">  '</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="过渡-transition"><a href="#过渡-transition" class="headerlink" title="过渡 transition"></a>过渡 <span class="exturl" data-url="aHR0cHM6Ly92dWVmZS5jbi9ndWlkZS90cmFuc2l0aW9ucy5odG1sI+WNleWFg+e0oC3nu4Tku7bnmoTov4fmuKE=" title="https://vuefe.cn/guide/transitions.html#单元素-组件的过渡">transition<i class="fa fa-external-link"></i></span></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#demo'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    show: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"show = !show"</span>&gt;</span></span><br><span class="line">    Toggle</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">"fade"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"show"</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*v-enter: 定义进入过渡的开始状态。在元素被插入时生效，在下一个帧移除。*/</span></span><br><span class="line"><span class="comment">/*v-enter-active: 定义进入过渡的结束状态。在元素被插入时生效，在 transition/animation 完成之后移除。*/</span></span><br><span class="line"><span class="comment">/*v-leave: 定义离开过渡的开始状态。在离开过渡被触发时生效，在下一个帧移除。*/</span></span><br><span class="line"><span class="comment">/*v-leave-active: 定义离开过渡的结束状态。在离开过渡被触发时生效，在 transition/animation 完成之后移除。*/</span></span><br><span class="line"><span class="selector-class">.fade-enter-active</span>,</span><br><span class="line"><span class="selector-class">.fade-leave-active</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: opacity <span class="number">0.5s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.fade-enter</span>,</span><br><span class="line"><span class="selector-class">.fade-leave-active</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>1.0 写法:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"show"</span> <span class="attr">transition</span>=<span class="string">"expand"</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 必需 */</span></span><br><span class="line"><span class="selector-class">.expand-transition</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.3s</span> ease;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#eee</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* .expand-enter 定义进入的开始状态 */</span></span><br><span class="line"><span class="comment">/* .expand-leave 定义离开的结束状态 */</span></span><br><span class="line"><span class="selector-class">.expand-enter</span>,</span><br><span class="line"><span class="selector-class">.expand-leave</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>自定义过渡类名</strong></p>
<ul>
<li>enter-class</li>
<li>enter-active-class</li>
<li>leave-class</li>
<li>leave-active-class</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"https://unpkg.com/animate.css@3.5.1/animate.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example-3"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"show = !show"</span>&gt;</span></span><br><span class="line">    Toggle render</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition</span></span></span><br><span class="line"><span class="tag">    <span class="attr">name</span>=<span class="string">"custom-classes-transition"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">enter-active-class</span>=<span class="string">"animated tada"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">leave-active-class</span>=<span class="string">"animated bounceOutRight"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"show"</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#example-3'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    show: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a><span class="exturl" data-url="aHR0cHM6Ly92dWVmZS5jbi9ndWlkZS9taWdyYXRpb24uaHRtbCPov4fmu6Tlmag=" title="https://vuefe.cn/guide/migration.html#过滤器">过滤器<i class="fa fa-external-link"></i></span></h3><h5 id="orderBy"><a href="#orderBy" class="headerlink" title="orderBy"></a>orderBy</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"user in orderedUsers"</span>&gt;</span>&#123;&#123; user.name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  orderedUsers: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _.orderBy(<span class="keyword">this</span>.users, <span class="string">'name'</span>)</span><br><span class="line">    <span class="comment">//甚至可以字段排序：</span></span><br><span class="line">    _.orderBy(<span class="keyword">this</span>.users, [<span class="string">'name'</span>, <span class="string">'last_login'</span>], [<span class="string">'asc'</span>, <span class="string">'desc'</span>])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>1.0 写法:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"user in users | orderBy 'name'"</span>&gt;</span>&#123;&#123; user.name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>前端</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-cli 开发多页应用</title>
    <url>/posts/4536d596.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="修改的-webpack-配置文件"><a href="#修改的-webpack-配置文件" class="headerlink" title="修改的 webpack 配置文件"></a>修改的 webpack 配置文件</h1><h2 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h2><h3 id="修改-webpack-base-conf-js"><a href="#修改-webpack-base-conf-js" class="headerlink" title="修改 webpack.base.conf.js"></a>修改 webpack.base.conf.js</h3><p>打开 <code>~\build\webpack.base.conf.js</code> ，找到<code>entry</code>，添加多入口</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">entry: &#123;</span><br><span class="line">    app: <span class="string">'./src/main.js'</span>,</span><br><span class="line">    app2: <span class="string">'./src/main2.js'</span>,</span><br><span class="line">    app3: <span class="string">'./src/main3.js'</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<blockquote>
<p>运行、编译的时候每一个入口都会对应一个<code>Chunk</code></p>
</blockquote>
<a id="more"></a>
<h2 id="run-dev-开发环境"><a href="#run-dev-开发环境" class="headerlink" title="run dev 开发环境"></a>run dev 开发环境</h2><h3 id="修改-webpack-dev-conf-js"><a href="#修改-webpack-dev-conf-js" class="headerlink" title="修改 webpack.dev.conf.js"></a>修改 webpack.dev.conf.js</h3><p>打开 <code>~\build\webpack.dev.conf.js</code> ，在<code>plugins</code>下找到<code>new HtmlWebpackPlugin</code>，在其后面添加对应的多页，并为每个页面添加<code>Chunk</code>配置</p>
<blockquote>
<p><code>chunks: [&#39;app&#39;]</code>中的 app 对应的是<code>webpack.base.conf.js</code>中<code>entry</code>设置的入口文件</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">  <span class="comment">// https://github.com/ampedandwired/html-webpack-plugin</span></span><br><span class="line">  <span class="comment">// 多页:index.html → app.js</span></span><br><span class="line">  <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">    filename: <span class="string">'index.html'</span>, <span class="comment">//生成的html</span></span><br><span class="line">    template: <span class="string">'index.html'</span>, <span class="comment">//来源html</span></span><br><span class="line">    inject: <span class="literal">true</span>, <span class="comment">//是否开启注入</span></span><br><span class="line">    chunks: [<span class="string">'app'</span>], <span class="comment">//需要引入的Chunk，不配置就会引入所有页面的资源</span></span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="comment">// 多页:index2.html → app2.js</span></span><br><span class="line">  <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">    filename: <span class="string">'index2.html'</span>, <span class="comment">//生成的html</span></span><br><span class="line">    template: <span class="string">'index2.html'</span>, <span class="comment">//来源html</span></span><br><span class="line">    inject: <span class="literal">true</span>, <span class="comment">//是否开启注入</span></span><br><span class="line">    chunks: [<span class="string">'app2'</span>], <span class="comment">//需要引入的Chunk，不配置就会引入所有页面的资源</span></span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="comment">// 多页:index3.html → app3.js</span></span><br><span class="line">  <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">    filename: <span class="string">'index3.html'</span>, <span class="comment">//生成的html</span></span><br><span class="line">    template: <span class="string">'index3.html'</span>, <span class="comment">//来源html</span></span><br><span class="line">    inject: <span class="literal">true</span>, <span class="comment">//是否开启注入</span></span><br><span class="line">    chunks: [<span class="string">'app3'</span>], <span class="comment">//需要引入的Chunk，不配置就会引入所有页面的资源</span></span><br><span class="line">  &#125;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h2 id="run-build-编译"><a href="#run-build-编译" class="headerlink" title="run build 编译"></a>run build 编译</h2><h3 id="修改-config-index-js"><a href="#修改-config-index-js" class="headerlink" title="修改 config/index.js"></a>修改 config/index.js</h3><p>打开<code>~\config\index.js</code>，找到<code>build</code>下的<code>index: path.resolve(__dirname, &#39;../dist/index.html&#39;)</code>，在其后添加多页</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">build: &#123;</span><br><span class="line">    index: path.resolve(__dirname, <span class="string">'../dist/index.html'</span>),</span><br><span class="line">    index2: path.resolve(__dirname, <span class="string">'../dist/index2.html'</span>),</span><br><span class="line">    index3: path.resolve(__dirname, <span class="string">'../dist/index3.html'</span>),</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<h3 id="修改-webpack-prod-conf-js"><a href="#修改-webpack-prod-conf-js" class="headerlink" title="修改 webpack.prod.conf.js"></a>修改 webpack.prod.conf.js</h3><p>打开<code>~\build\webpack.prod.conf.js</code>，在<code>plugins</code>下找到<code>new HtmlWebpackPlugin</code>，在其后面添加对应的多页，并为每个页面添加<code>Chunk</code>配置</p>
<blockquote>
<p><code>HtmlWebpackPlugin</code> 中的 <code>filename</code> 引用的是 config/index.js 中对应的 <code>build</code></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">  <span class="comment">// 多页:index.html → app.js</span></span><br><span class="line">  <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">    filename: config.build.index,</span><br><span class="line">    template: <span class="string">'index.html'</span>,</span><br><span class="line">    inject: <span class="literal">true</span>,</span><br><span class="line">    minify: &#123;</span><br><span class="line">      removeComments: <span class="literal">true</span>,</span><br><span class="line">      collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">      removeAttributeQuotes: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">// more options:</span></span><br><span class="line">      <span class="comment">// https://github.com/kangax/html-minifier#options-quick-reference</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// necessary to consistently work with multiple chunks via CommonsChunkPlugin</span></span><br><span class="line">    chunksSortMode: <span class="string">'dependency'</span>,</span><br><span class="line">    chunks: [<span class="string">'manifest'</span>, <span class="string">'vendor'</span>, <span class="string">'app'</span>], <span class="comment">//需要引入的Chunk，不配置就会引入所有页面的资源</span></span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="comment">// 多页:index2.html → app2.js</span></span><br><span class="line">  <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">    filename: config.build.index2,</span><br><span class="line">    template: <span class="string">'index2.html'</span>,</span><br><span class="line">    inject: <span class="literal">true</span>,</span><br><span class="line">    minify: &#123;</span><br><span class="line">      removeComments: <span class="literal">true</span>,</span><br><span class="line">      collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">      removeAttributeQuotes: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    chunksSortMode: <span class="string">'dependency'</span>,</span><br><span class="line">    chunks: [<span class="string">'manifest'</span>, <span class="string">'vendor'</span>, <span class="string">'app2'</span>], <span class="comment">//需要引入的Chunk，不配置就会引入所有页面的资源</span></span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="comment">// 多页:index3.html → app3.js</span></span><br><span class="line">  <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">    filename: config.build.index3,</span><br><span class="line">    template: <span class="string">'index3.html'</span>,</span><br><span class="line">    inject: <span class="literal">true</span>,</span><br><span class="line">    minify: &#123;</span><br><span class="line">      removeComments: <span class="literal">true</span>,</span><br><span class="line">      collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">      removeAttributeQuotes: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    chunksSortMode: <span class="string">'dependency'</span>,</span><br><span class="line">    chunks: [<span class="string">'manifest'</span>, <span class="string">'vendor'</span>, <span class="string">'app3'</span>], <span class="comment">//需要引入的Chunk，不配置就会引入所有页面的资源</span></span><br><span class="line">  &#125;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>参考:</strong><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JobmRkb3dpbmYvdnVlanMyLWxlYXJu" title="https://github.com/bhnddowinf/vuejs2-learn">小凡哥视频 - 讲解 vuejs2 ，使用 vue-cli 怎么搭起 多页应用<i class="fa fa-external-link"></i></span></p>
<p>另一种方式，使用 node 的 globa 模块:<br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2phcnZhbjRkZXYvdnVlLW11bHRpLXBhZ2U=" title="https://github.com/jarvan4dev/vue-multi-page">https://github.com/jarvan4dev/vue-multi-page<i class="fa fa-external-link"></i></span></p>
</blockquote>
<hr>
<blockquote>
<p>如果页面比较多，可以考虑使用循环将 <code>HtmlWebpackPlugin</code> 添加到 <code>plugins</code></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// utils.js</span></span><br><span class="line">exports.getEntry = <span class="function"><span class="keyword">function</span>(<span class="params">globPath, pathDir</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> files = glob.sync(globPath)</span><br><span class="line">  <span class="keyword">var</span> entries = &#123;&#125;,</span><br><span class="line">    entry,</span><br><span class="line">    dirname,</span><br><span class="line">    basename,</span><br><span class="line">    pathname,</span><br><span class="line">    extname</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; files.length; i++) &#123;</span><br><span class="line">    entry = files[i]</span><br><span class="line">    dirname = path.dirname(entry)</span><br><span class="line">    extname = path.extname(entry)</span><br><span class="line">    basename = path.basename(entry, extname)</span><br><span class="line">    pathname = path.join(dirname, basename)</span><br><span class="line">    pathname = pathDir ? pathname.replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'^'</span> + pathDir), <span class="string">''</span>) : pathname</span><br><span class="line">    entries[pathname] = [<span class="string">'./'</span> + entry]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> entries</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.base.conf.js</span></span><br><span class="line"><span class="keyword">var</span> pages = <span class="built_in">Object</span>.keys(utils.getEntry(<span class="string">'../src/views/**/*.html'</span>, <span class="string">'../src/views/'</span>))</span><br><span class="line">pages.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">pathname</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// https://github.com/ampedandwired/html-webpack-plugin</span></span><br><span class="line">  <span class="keyword">var</span> conf = &#123;</span><br><span class="line">    filename: <span class="string">'../views/'</span> + pathname + <span class="string">'.html'</span>, <span class="comment">//生成的html存放路径，相对于path</span></span><br><span class="line">    template: <span class="string">'../src/views/'</span> + pathname + <span class="string">'.html'</span>, <span class="comment">//html模板路径</span></span><br><span class="line">    inject: <span class="literal">false</span>, <span class="comment">//js插入的位置，true/'head'/'body'/false</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 压缩这块，调用了html-minify，会导致压缩时候的很多html语法检查问题，</span></span><br><span class="line"><span class="comment">         * 如在html标签属性上使用&#123;&#123;...&#125;&#125;表达式，所以很多情况下并不需要在此配置压缩项，</span></span><br><span class="line"><span class="comment">         * 另外，UglifyJsPlugin会在压缩代码的时候连同html一起压缩。</span></span><br><span class="line"><span class="comment">         * 为避免压缩html，需要在html-loader上配置'html?-minimize'，见loaders中html-loader的配置。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    <span class="comment">// minify: &#123; //压缩HTML文件</span></span><br><span class="line">    <span class="comment">//     removeComments: true, //移除HTML中的注释</span></span><br><span class="line">    <span class="comment">//     collapseWhitespace: false //删除空白符与换行符</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (pathname <span class="keyword">in</span> config.entry) &#123;</span><br><span class="line">    conf.favicon = <span class="string">'src/images/favicon.ico'</span></span><br><span class="line">    conf.inject = <span class="string">'body'</span></span><br><span class="line">    conf.chunks = [<span class="string">'vendors'</span>, pathname]</span><br><span class="line">    conf.hash = <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  config.plugins.push(<span class="keyword">new</span> HtmlWebpackPlugin(conf))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>同样入口 <code>entry</code> 也可以使用</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.base.conf.js</span></span><br><span class="line">entry: &#123;</span><br><span class="line">    app: utils.getEntry(<span class="string">'../src/scripts/**/*.js'</span>, <span class="string">'../src/scripts/'</span>)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>前端</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-slot</title>
    <url>/posts/5d6f32d5.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="如何理解-Vue-js-的组件中的-slot"><a href="#如何理解-Vue-js-的组件中的-slot" class="headerlink" title="如何理解 Vue.js 的组件中的 slot?"></a><span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzM3NTQ4MjI2" title="https://www.zhihu.com/question/37548226">如何理解 Vue.js 的组件中的 slot?<i class="fa fa-external-link"></i></span></h1><blockquote>
<p>slot 有点类似面向对象思想中的「多态」。</p>
</blockquote>
<a id="more"></a>
<p>举个例子，比如我要实现一个这么 Alert 组件：<br><img src="https://pic3.zhimg.com/55b5f7f0b72d1a88c81affcff9e69246_b.png" alt><br>它会有默认的内容和样式，比如第一行的 Default 我们只需要使用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">alert</span>&gt;</span><span class="tag">&lt;/<span class="name">alert</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>当我们想要有 Success、Warning、Error 等不同样式和不同内容的 alert 时，我们会希望这样使用：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">alert</span> <span class="attr">type</span>=<span class="string">"success"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">strong</span>&gt;</span>Success!<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> Looks good to me!</span><br><span class="line"><span class="tag">&lt;/<span class="name">alert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">alert</span> <span class="attr">type</span>=<span class="string">"warning"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">strong</span>&gt;</span>Warning!<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> Something not good.</span><br><span class="line"><span class="tag">&lt;/<span class="name">alert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">alert</span> <span class="attr">type</span>=<span class="string">"error"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">strong</span>&gt;</span>Error!<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> Oooops...</span><br><span class="line"><span class="tag">&lt;/<span class="name">alert</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>要实现这个功能，我们就会用到 slot。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.Alert__close</span> &#123;</span></span><br><span class="line">    font-weight: bold;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.Alert--Success</span> &#123;</span></span><br><span class="line">    color: green;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.Alert--Warning</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#aa0</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.Alert--Error</span> &#123;</span></span><br><span class="line">    color: red;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"alert-template"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"alertClasses"</span>  <span class="attr">v-show</span>=<span class="string">"show"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>Default!<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> Hello World~<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"Alert__close"</span> @<span class="attr">click</span>=<span class="string">"show = false"</span>&gt;</span>x<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">Vue.component(<span class="string">'alert'</span>, &#123;</span></span><br><span class="line"><span class="javascript">  template: <span class="string">'#alert-template'</span>,</span></span><br><span class="line"><span class="javascript">  props: [<span class="string">'type'</span>],</span></span><br><span class="line">  computed: &#123;</span><br><span class="line"><span class="javascript">    alertClasses: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="string">'Alert--Success'</span>: <span class="keyword">this</span>.type === <span class="string">'success'</span>,</span></span><br><span class="line"><span class="javascript">        <span class="string">'Alert--Warning'</span>: <span class="keyword">this</span>.type === <span class="string">'warning'</span>,</span></span><br><span class="line"><span class="javascript">        <span class="string">'Alert--Error'</span>  : <span class="keyword">this</span>.type === <span class="string">'error'</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="javascript">  data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      show: <span class="literal">true</span></span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'body'</span></span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><slot> 就是外部调用时，标签中的内容。如果外部调用时没有提供内容的话，那么它就会使用自己默认提供的内容，非常方便。</slot></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>前端</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue单页应用本地启动</title>
    <url>/posts/3aacb661.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><p>开发的时候启动 webpack 热替换</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure>
<h1 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h1><p>默认端口号是<code>8080</code><br>如果希望修改端口号，则进入<code>~\config\index.js</code>，修改<code>dev</code>下的<code>port</code>为希望启动的端口号</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例如:  port: 80,</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h1><h2 id="webpack-Express"><a href="#webpack-Express" class="headerlink" title="webpack+Express"></a>webpack+Express</h2><p>进入<code>~\config\index.js</code>，在<code>dev</code>下的<code>proxyTable</code>就是网址映射</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">proxyTable: &#123;</span><br><span class="line">  <span class="string">'/api'</span>: &#123;</span><br><span class="line">    target: <span class="string">'https://localhost:6060'</span>,<span class="comment">//要跨域访问的API域名</span></span><br><span class="line">    rewrite: <span class="function"><span class="keyword">function</span>(<span class="params">req</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//可以用正則方式替代掉，這樣往後 /api/xxx/xxx 之類的網址，就會自動匹配了</span></span><br><span class="line">        req.url = req.url.replace(<span class="regexp">/^\/api/</span>, <span class="string">''</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>這樣當你呼叫 <code>/api</code> 時：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$http.get(<span class="string">'/api'</span>)</span><br></pre></td></tr></table></figure>
<p>就會幫你自動導向 <code>https://localhost:8080/api</code>，是為了當 Server 和 前端 不在同個網域或是 Port 時，可以方便調試，例如我 Server 在 <code>localhost:6060</code>，前端在 <code>localhost:5050</code> ，就可以直接調用 <code>/api</code>，而不用每次都要加上完整網址<br>更多信息可参考:<span class="exturl" data-url="aHR0cHM6Ly93ZWJwYWNrLmdpdGh1Yi5pby9kb2NzL3dlYnBhY2stZGV2LXNlcnZlci5odG1sI3Byb3h5" title="https://webpack.github.io/docs/webpack-dev-server.html#proxy">https://webpack.github.io/docs/webpack-dev-server.html#proxy<i class="fa fa-external-link"></i></span></p>
<h2 id="Fetch-js"><a href="#Fetch-js" class="headerlink" title="Fetch.js"></a>Fetch.js</h2><p>参考地址:<span class="exturl" data-url="aHR0cHM6Ly93d3N1bi5naXRodWIuaW8vcG9zdHMvZmV0Y2gtYXBpLWludHJvLmh0bWw=" title="https://wwsun.github.io/posts/fetch-api-intro.html">https://wwsun.github.io/posts/fetch-api-intro.html<i class="fa fa-external-link"></i></span></p>
<h2 id="ngrok"><a href="#ngrok" class="headerlink" title="ngrok"></a>ngrok</h2>]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>前端</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue单页应用发布到服务器</title>
    <url>/posts/b82b9109.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="发布服务器"><a href="#发布服务器" class="headerlink" title="发布服务器"></a>发布服务器</h1><p>进入项目所在目录运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="修改-build-生成的静态文件路径"><a href="#修改-build-生成的静态文件路径" class="headerlink" title="修改 build 生成的静态文件路径"></a>修改 build 生成的静态文件路径</h1><p>进入<code>~\config\index.js</code><br>在<code>build</code>下的<code>assetsPublicPath</code>默认情况下是<code>&#39;/&#39;</code>，此时打包的 index.html 文件中的资源文件(js、css、img)默认情况都是以<code>/</code>开头的绝对路径，指向 http 服务器的根路径</p>
<blockquote>
<p>如果想修改为相对路径或服务器中静态资源路径有调整，则需要将<code>assetsPublicPath</code>的值修改为<code>&#39;./&#39;</code>或其他服务器路径，这样就是指向 index.html 的相对路径了。</p>
<p>CSS 中的径可以修改 build/utils.js 中的 publicPath：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (options.extract) &#123;</span><br><span class="line">  <span class="keyword">return</span> ExtractTextPlugin.extract(&#123;</span><br><span class="line">    use: loaders,</span><br><span class="line">    publicPath: <span class="string">'../../'</span>, <span class="comment">//注意: 此处根据路径, 自动更改</span></span><br><span class="line">    fallback: <span class="string">'vue-style-loader'</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> [<span class="string">'vue-style-loader'</span>].concat(loaders)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="部署-SPA"><a href="#部署-SPA" class="headerlink" title="部署 SPA"></a>部署 SPA</h1><blockquote>
<p>将打包生成好的项目部署到服务器，但是访问 SPA 项目的前端路由会出现<code>404</code>，这是由于 HTTP 服务器默认情况下访问的是对应目录下的 index.html，此时需要对 HTTP 服务器做下路由映射，将前端路由地址映射到 index.html。</p>
</blockquote>
<p>以下是 SPA 项目常用的几种部署方式:<br><em>例如前端路由地址:<span class="exturl" data-url="aHR0cHM6Ly9sb2NhbGhvc3QvbGl2ZS8yOTIvd29uZGVyZnVs" title="https://localhost/live/292/wonderful">https://localhost/live/292/wonderful<i class="fa fa-external-link"></i></span></em></p>
<h2 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h2><p>如果只使用 Apache 做 HTTP 服务器，可以设置 Apache 的 url 重定向，将所有的请求路由到 index.html</p>
<ol>
<li>打开<code>~\Apache\conf\httpd.conf</code>文件</li>
<li>去除 httpd.conf 文件中<code>LoadModule rewrite_module modules/mod_rewrite.so</code>前面的<code>#</code>号</li>
<li>在 httpd.conf 文件中添加重定向规则</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RewriteEngine on</span><br><span class="line"># 当访问路由地址为 /live 开头的，则将路由重定向到 /index.html</span><br><span class="line">RewriteRule \/live.*$ /index.html</span><br></pre></td></tr></table></figure>
<h2 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h2><p>使用 nginx 做反向代理服务器，配置文件参考：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name localhost:80;</span><br><span class="line">    index  index.html;</span><br><span class="line">    root /wwwroot/;</span><br><span class="line">    location / &#123;</span><br><span class="line">        try_files $uri $uri/ /index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="node-js"><a href="#node-js" class="headerlink" title="node.js"></a>node.js</h2><p>使用 node.js 做反向代理服务器，配置文件参考：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var config = require(&quot;./webpack.config.js&quot;);</span><br><span class="line">var webpack = require(&quot;webpack&quot;)</span><br><span class="line">var webpackDevServer=require(&quot;webpack-dev-server&quot;)</span><br><span class="line"></span><br><span class="line">config.entry.unshift(&quot;webpack-dev-server/client?https://localhost:80&quot;, &quot;webpack/hot/dev-server&quot;);</span><br><span class="line">var compiler = webpack(config);</span><br><span class="line"></span><br><span class="line">var server = new webpackDevServer(compiler, &#123;</span><br><span class="line">  contentBase: &quot;build&quot;,</span><br><span class="line">  hot: true,</span><br><span class="line">  inline: true,</span><br><span class="line">  historyApiFallback: true,</span><br><span class="line">  proxy: &#123;</span><br><span class="line">        &apos;/*&apos;: &#123;</span><br><span class="line">            target: &apos;loaclhost:8080/&apos;,</span><br><span class="line">            secure: false</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(80);</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9mb3J1bS52dWVqcy5vcmcvdG9waWMvMjE1L3Z1ZS1yb3V0ZXLlrZDpobXpnaLliLfmlrA0MDQ=" title="https://forum.vuejs.org/topic/215/vue-router子页面刷新404">Vue-router 子页面刷新 404<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuamI1MS5uZXQvYXJ0aWNsZS8yNDQzNS5odG0=" title="https://www.jb51.net/article/24435.htm">Apache Rewrite url 重定向功能的简单配置<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL3EvMTAxMDAwMDAwNjc1NzI5Mg==" title="https://segmentfault.com/q/1010000006757292">webpack 构建的项目的部署问题<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8zMjI1OTk1MmE1YTg=" title="https://www.jianshu.com/p/32259952a5a8">vue 实现 spa 实例讲解：前后分离<i class="fa fa-external-link"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>前端</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue1+webpack实践</title>
    <url>/posts/f2388ed2.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL01lQ0tvZG8vdnVlLXR1dG9yaWFs" title="https://github.com/MeCKodo/vue-tutorial">vue-tutorial<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cudGFsa2luZ2NvZGVyLmNvbS9hcnRpY2xlLzYzMTA3NTYzNDYwOTQ0ODgzOTE=" title="https://www.talkingcoder.com/article/6310756346094488391">Vue+Webpack 开发可复用的单页面富应用教程<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cudGFsa2luZ2NvZGVyLmNvbS9hcnRpY2xlLzYzMDk3MjYwNjUwNDQ1NTYzNzI=" title="https://www.talkingcoder.com/article/6309726065044556372">Vue+Webpack 使用规范<i class="fa fa-external-link"></i></span></li>
</ul>
<p><span class="exturl" data-url="aHR0cHM6Ly9jbi52dWVqcy5vcmcvZ3VpZGUvY29tcGFyaXNvbi5odG1s" title="https://cn.vuejs.org/guide/comparison.html">对比其他框架<i class="fa fa-external-link"></i></span></p>
<a id="more"></a>
<p>推荐代码使用 CommonJS 或 ES6 模块，然后使用 <span class="exturl" data-url="aHR0cHM6Ly93ZWJwYWNrLmdpdGh1Yi5pby8=" title="https://webpack.github.io/">Webpack<i class="fa fa-external-link"></i></span> 或 <span class="exturl" data-url="aHR0cHM6Ly9icm93c2VyaWZ5Lm9yZy8=" title="https://browserify.org/">Browserify<i class="fa fa-external-link"></i></span> 打包。</p>
<p>你可以使用 Webpack + <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS1sb2FkZXI=" title="https://github.com/vuejs/vue-loader">vue-loader<i class="fa fa-external-link"></i></span> 或 Browserify + <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZWlmeQ==" title="https://github.com/vuejs/vueify">vueify<i class="fa fa-external-link"></i></span> 构建这些单文件 Vue 组件。</p>
<blockquote>
<p>可以在 <span class="exturl" data-url="aHR0cHM6Ly93d3cud2VicGFja2Jpbi5jb20vdnVl" title="https://www.webpackbin.com/vue">Webpackbin.com<i class="fa fa-external-link"></i></span> 上在线尝试！<br><strong>chrome 开发工具 : <span class="exturl" data-url="aHR0cHM6Ly9jaHJvbWUuZ29vZ2xlLmNvbS93ZWJzdG9yZS9kZXRhaWwvdnVlanMtZGV2dG9vbHMvbmhkb2dqbWVqaWdsaXBjY3Bubm5hbmhibGVkYWpicGQ=" title="https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd">vue-developertools<i class="fa fa-external-link"></i></span></strong></p>
</blockquote>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol>
<li>我们将会使用 webpack 去为我们的模块打包，预处理，热加载。如果你对 webpack 不熟悉，它就是可以帮助我们把多个 js 文件打包为 1 个入口文件，并且可以达到按需加载。这就意味着，我们不用去担心由于太多的组件，导致了过多的 HTTP 请求，这是非常有益于产品体验的。但，我们并不只是为了这个而使用 webpack，我们需要用 webpack 去编译.vue 文件，如果没有使用一个 loader 去转换我们.vue 文件里的 style，js，html，那么浏览器就无法识别。</li>
<li>模块热加载是 webpack 的一个非常碉堡的特性，将会为我们的单页应用带来极大的便利。<br>通常来说，当我们修改了代码刷新页面，那应用里的所有状态就都没有了。这对于开发一个单页应用来说是非常痛苦的，因为需要重新在跑一遍流程。如果有模块热加载，当你修改了代码，你的代码会直接修改，页面并不会刷新，所以状态也会被保留。</li>
<li>Vue 也为我们提供了 CSS 预处理，所以我们可以选择在.vue 文件里写 LESS 或者 SASS 去代替原生 CSS。</li>
<li>我们过去通常需要使用 npm 下载一堆的依赖，但是现在我们可以选择 Vue-cli。这是一个 vue 生态系统中一个伟大创举。这意味着我们不需要手动构建我们的项目，而它就可以很快地为我们生成。</li>
</ol>
<blockquote>
<p>使用脚手架工具 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS1jbGk=" title="https://github.com/vuejs/vue-cli">vue-cli<i class="fa fa-external-link"></i></span> 可以快速地构建项目：单文件 Vue 组件，热加载，保存时检查代码，单元测试等。</p>
</blockquote>
<ul>
<li><p>安装 vue-cli (确保你有 node 和 npm)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install -g vue-cli</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用脚手架初始创建项目</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ vue init &lt;template-name&gt; &lt;project-name&gt;</span><br></pre></td></tr></table></figure>
<p>Example:<em>创建一个 webpack 项目</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ vue init webpack my-project</span><br></pre></td></tr></table></figure>
</li>
<li><p>项目模版下载好了之后需要安装项目用到的依赖包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd my-project</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure>
</li>
<li><p>这时可以将项目运行起来看看效果了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm run dev</span><br></pre></td></tr></table></figure>
<p>这一行命令代表着它会去找到<code>package.json</code>的<code>scripts</code>对象，执行<code>node bulid/dev-server.js</code>。在这文件里，配置了 Webpack，会让它去编译项目文件，并且运行服务器，我们在<code>localhost:8080</code>即可查看我们的应用。</p>
<p><img src="https://cdn.scotch.io/9/vFba0QgQRReyNZPgFpKU_vue-time-1.png" alt></p>
</li>
</ul>
<h3 id="vue-cli-构建的目录结构"><a href="#vue-cli-构建的目录结构" class="headerlink" title="vue-cli 构建的目录结构"></a>vue-cli 构建的目录结构</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── build/                      # webpack config files</span><br><span class="line">│   └── ...</span><br><span class="line">├── config/</span><br><span class="line">│   ├── index.js                # main project config</span><br><span class="line">│   └── ...</span><br><span class="line">├── src/</span><br><span class="line">│   ├── main.js                 # app entry file</span><br><span class="line">│   ├── App.vue                 # main app component</span><br><span class="line">│   ├── components/             # ui components</span><br><span class="line">│   │   └── ...</span><br><span class="line">│   └── assets/                 # module assets (processed by webpack)</span><br><span class="line">│       └── ...</span><br><span class="line">├── static/                     # pure static assets (directly copied)</span><br><span class="line">├── test/</span><br><span class="line">│   └── unit/                   # unit tests</span><br><span class="line">│   │   ├── specs/              # test spec files</span><br><span class="line">│   │   ├── index.js            # test build entry file</span><br><span class="line">│   │   └── karma.conf.js       # test runner config file</span><br><span class="line">│   └── e2e/                    # e2e tests</span><br><span class="line">│   │   ├── specs/              # test spec files</span><br><span class="line">│   │   ├── custom-assertions/  # custom assertions for e2e tests</span><br><span class="line">│   │   ├── runner.js           # test runner script</span><br><span class="line">│   │   └── nightwatch.conf.js  # test runner config file</span><br><span class="line">├── .babelrc                    # babel config</span><br><span class="line">├── .editorconfig.js            # editor config</span><br><span class="line">├── .eslintrc.js                # eslint config</span><br><span class="line">├── index.html                  # index.html template</span><br><span class="line">└── package.json                # build scripts and dependencies</span><br></pre></td></tr></table></figure>
<p>更多内容参照<span class="exturl" data-url="aHR0cHM6Ly92dWVqcy10ZW1wbGF0ZXMuZ2l0aHViLmlvL3dlYnBhY2s=" title="https://vuejs-templates.github.io/webpack">https://vuejs-templates.github.io/webpack<i class="fa fa-external-link"></i></span></p>
<h2 id="Vue-指令"><a href="#Vue-指令" class="headerlink" title="Vue 指令"></a>Vue 指令</h2><p>常用指令:</p>
<ul>
<li>v-if</li>
<li>v-show</li>
<li>v-else</li>
<li>v-for</li>
<li>v-bind</li>
<li>v-on</li>
<li>v-model<br>更多指令请移步<span class="exturl" data-url="aHR0cHM6Ly9jbi52dWVqcy5vcmcvYXBpLyN1NjMwN191NEVFNA==" title="https://cn.vuejs.org/api/#u6307_u4EE4">Vue 指令<i class="fa fa-external-link"></i></span></li>
</ul>
<h2 id="初始化（main-js"><a href="#初始化（main-js" class="headerlink" title="初始化（main.js)"></a>初始化（main.js)</h2><p>对于单页应用，推荐使用<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS1yb3V0ZXI=" title="https://github.com/vuejs/vue-router">官方库 vue-router<i class="fa fa-external-link"></i></span>。详细请查看它的<span class="exturl" data-url="aHR0cHM6Ly92dWVqcy5naXRodWIuaW8vdnVlLXJvdXRlci8=" title="https://vuejs.github.io/vue-router/">文档<i class="fa fa-external-link"></i></span>。</p>
<h3 id="添加-route-配置"><a href="#添加-route-配置" class="headerlink" title="添加 route 配置"></a>添加 route 配置</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="keyword">import</span> VueResource <span class="keyword">from</span> <span class="string">'vue-resource'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Hello <span class="keyword">from</span> <span class="string">'./components/Hello.vue'</span></span><br><span class="line"><span class="keyword">import</span> Page <span class="keyword">from</span> <span class="string">'./components/Page.vue'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//注册两个插件</span></span><br><span class="line">Vue.use(VueResource)</span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由map</span></span><br><span class="line">router.map(&#123;</span><br><span class="line">  <span class="string">'/hello'</span>: &#123;</span><br><span class="line">    component: Hello,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">'/page'</span>: &#123;</span><br><span class="line">    component: Page,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.redirect(&#123;</span><br><span class="line">  <span class="string">'*'</span>: <span class="string">'/hello'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.start(App, <span class="string">'#app'</span>) <span class="comment">//设置启动页面</span></span><br></pre></td></tr></table></figure>
<p>index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">app</span>&gt;</span><span class="tag">&lt;/<span class="name">app</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="应用-route"><a href="#应用-route" class="headerlink" title="应用 route"></a>应用 route</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用指令 v-link 进行导航。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-link</span>=<span class="string">"&#123;path: '/home'&#125;"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-link</span>=<span class="string">"&#123;path: '/page'&#125;"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 路由外链 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="创建＆应用组件"><a href="#创建＆应用组件" class="headerlink" title="创建＆应用组件"></a>创建＆应用组件</h2><p><img src="https://cn.vuejs.org/images/vue-component.png" alt><br>如果你喜欢预处理器，甚至可以这么做：<br><img src="https://cn.vuejs.org/images/vue-component-with-preprocessors.png" alt></p>
<p>定义 View:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">vue-component</span>&gt;</span><span class="tag">&lt;/<span class="name">vue-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>定义 Model 和 ViewModel:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vueComponent = <span class="built_in">require</span>(<span class="string">'../components/vue-component'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    vueComponent,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="数据请求-vue-resource"><a href="#数据请求-vue-resource" class="headerlink" title="数据请求:vue-resource"></a>数据请求:<span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20va2VlcGZvb2wvcC81NjU3MDY1Lmh0bWw=" title="https://www.cnblogs.com/keepfool/p/5657065.html">vue-resource<i class="fa fa-external-link"></i></span></h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在main.js中注册vue-resource</span></span><br><span class="line"><span class="keyword">import</span> VueResource <span class="keyword">from</span> <span class="string">'vue-resource'</span></span><br><span class="line">Vue.use(VueResource)</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基于全局Vue对象使用http</span></span><br><span class="line">Vue.http.get(<span class="string">'//webapi.busi.inke.com/web/live_hotlist_pc'</span>, &#123;&#125;).then(</span><br><span class="line">  response =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'[Leo]Vue-resource:success=&gt;'</span>, response)</span><br><span class="line">  &#125;,</span><br><span class="line">  response =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'[Leo]Vue-resource:error=&gt;'</span>, response)</span><br><span class="line">  &#125;,</span><br><span class="line">)</span><br><span class="line"><span class="comment">// 在一个Vue实例内使用$http</span></span><br><span class="line"><span class="keyword">this</span>.$http.get(<span class="string">'//webapi.busi.inke.com/web/live_hotlist_pc'</span>, &#123;&#125;).then(</span><br><span class="line">  response =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'[Leo]Vue-resource:success=&gt;'</span>, response)</span><br><span class="line">  &#125;,</span><br><span class="line">  response =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'[Leo]Vue-resource:error=&gt;'</span>, response)</span><br><span class="line">  &#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>前端</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>npm</title>
    <url>/posts/a1345b2b.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="临时指定淘宝-npm-源"><a href="#临时指定淘宝-npm-源" class="headerlink" title="临时指定淘宝 npm 源"></a>临时指定淘宝 npm 源</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm i node-sass@3.8.0 --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="更新-NPM-包"><a href="#更新-NPM-包" class="headerlink" title="更新 NPM 包"></a>更新 NPM 包</h1><p>npm-check 是用来检查 npm 依赖包是否有更新，错误以及不在使用的，我们也可以使用 npm-check 进行包的更新。<br>安装<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2R5bGFuZy9ucG0tY2hlY2s=" title="https://github.com/dylang/npm-check">npm-check<i class="fa fa-external-link"></i></span>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g npm-check</span><br></pre></td></tr></table></figure>
<p>检查 npm 包的状态:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm-check -u -g</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2019/06/29/5d172325a9a7c13034.png" alt><br>通过上下键可以移动光标，使用空格键可以选择需要处理的包，回车直接进行处理。<br>选择 <span class="exturl" data-url="bWFpbHRvOm5wbUAzLjEwLjI=" title="mailto:npm@3.10.2">npm@3.10.2<i class="fa fa-external-link"></i></span> 包升级到 3.10.3：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">? Choose which packages to update. npm@3.10.3</span><br><span class="line"></span><br><span class="line">$ npm install --global npm@3.10.3 --color=always</span><br><span class="line">/usr/local/bin/npm -&gt; /usr/local/lib/node_modules/npm/bin/npm-cli.js</span><br><span class="line">/usr/local/lib</span><br><span class="line">└─┬ npm@3.10.3</span><br><span class="line">  ├── aproba@1.0.4</span><br><span class="line">  ├── has-unicode@2.0.1</span><br><span class="line">  └── read-package-tree@5.1.5</span><br><span class="line"></span><br><span class="line">[npm-check] Update complete!</span><br><span class="line">[npm-check] npm@3.10.3</span><br><span class="line">[npm-check] You should re-run your tests to make sure everything works with the updates.</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>npm</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>前端</tag>
        <tag>javascript</tag>
        <tag>node</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>动态计算rem</title>
    <url>/posts/6ef89214.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="使用-Flexible-实现手淘-H5-页面的终端适配"><a href="#使用-Flexible-实现手淘-H5-页面的终端适配" class="headerlink" title="使用 Flexible 实现手淘 H5 页面的终端适配"></a><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNjcGx1cy5jb20vbW9iaWxlL2xpYi1mbGV4aWJsZS1mb3ItaHRtbDUtbGF5b3V0Lmh0bWw=" title="https://www.w3cplus.com/mobile/lib-flexible-for-html5-layout.html">使用 Flexible 实现手淘 H5 页面的终端适配<i class="fa fa-external-link"></i></span></h1><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FtZmUvbGliLWZsZXhpYmxl" title="https://github.com/amfe/lib-flexible">https://github.com/amfe/lib-flexible<i class="fa fa-external-link"></i></span></p>
<a id="more"></a>
<h1 id="适配"><a href="#适配" class="headerlink" title="适配"></a>适配</h1><h2 id="手淘"><a href="#手淘" class="headerlink" title="手淘"></a>手淘</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">! <span class="function"><span class="keyword">function</span> (<span class="params">e, t</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> n = t.documentElement,</span><br><span class="line">    d = e.devicePixelRatio || <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> e = n.clientWidth / <span class="number">3.75</span>;</span><br><span class="line">    n.style.fontSize = e + <span class="string">"px"</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="function"><span class="keyword">function</span> <span class="title">e</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      t.body ? t.body.style.fontSize = <span class="string">"16px"</span> : t.addEventListener(<span class="string">"DOMContentLoaded"</span>, e)</span><br><span class="line">    &#125;(), i(), e.addEventListener(<span class="string">"resize"</span>, i), e.addEventListener(<span class="string">"pageshow"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">      e.persisted &amp;&amp; i()</span><br><span class="line">    &#125;), <span class="number">2</span> &lt;= d) &#123;</span><br><span class="line">    <span class="keyword">var</span> o = t.createElement(<span class="string">"body"</span>),</span><br><span class="line">      a = t.createElement(<span class="string">"div"</span>);</span><br><span class="line">    a.style.border = <span class="string">".5px solid transparent"</span>, o.appendChild(a), n.appendChild(o), <span class="number">1</span> === a.offsetHeight &amp;&amp; n.classList.add(<span class="string">"hairlines"</span>), n.removeChild(o)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;(<span class="built_in">window</span>, <span class="built_in">document</span>)</span><br></pre></td></tr></table></figure>
<h2 id="网易"><a href="#网易" class="headerlink" title="网易"></a>网易</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">13.33333vw</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> screen and (max-width: <span class="number">320px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>:<span class="number">42.667px</span>;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">13.33333vw</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">321px</span>) and (max-width:<span class="number">360px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>:<span class="number">48px</span>;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">13.33333vw</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">361px</span>) and (max-width:<span class="number">375px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>:<span class="number">50px</span>;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">13.33333vw</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">376px</span>) and (max-width:<span class="number">393px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>:<span class="number">52.4px</span>;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">13.33333vw</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">394px</span>) and (max-width:<span class="number">412px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>:<span class="number">54.93px</span>;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">13.33333vw</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">413px</span>) and (max-width:<span class="number">414px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>:<span class="number">55.2px</span>;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">13.33333vw</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">415px</span>) and (max-width:<span class="number">480px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>:<span class="number">64px</span>;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">13.33333vw</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">481px</span>) and (max-width:<span class="number">540px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>:<span class="number">72px</span>;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">13.33333vw</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">541px</span>) and (max-width:<span class="number">640px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>:<span class="number">85.33px</span>;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">13.33333vw</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">641px</span>) and (max-width:<span class="number">720px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>:<span class="number">96px</span>;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">13.33333vw</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">721px</span>) and (max-width:<span class="number">768px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>:<span class="number">102.4px</span>;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">13.33333vw</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">769px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>:<span class="number">102.4px</span>;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">13.33333vw</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="动态计算-rem-基准大小"><a href="#动态计算-rem-基准大小" class="headerlink" title="动态计算 rem 基准大小"></a>动态计算 rem 基准大小</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 动态计算 rem 基准大小</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">!(<span class="function"><span class="keyword">function</span>(<span class="params">doc, win</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> docEle = doc.documentElement,</span><br><span class="line">    evt = <span class="string">'onorientationchange'</span> <span class="keyword">in</span> <span class="built_in">window</span> ? <span class="string">'orientationchange'</span> : <span class="string">'resize'</span>,</span><br><span class="line">    fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> width = docEle.clientWidth</span><br><span class="line">      width &amp;&amp; (docEle.style.fontSize = <span class="number">20</span> * (width / <span class="number">320</span>) + <span class="string">'px'</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  win.addEventListener(evt, fn, <span class="literal">false</span>)</span><br><span class="line">  doc.addEventListener(<span class="string">'DOMContentLoaded'</span>, fn, <span class="literal">false</span>)</span><br><span class="line">&#125;)(<span class="built_in">document</span>, <span class="built_in">window</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>任意浏览器的默认字体高都是16px</code>。所有未经调整的浏览器都符合: 1em=16px。那么 12px=0.75em,10px=0.625em。为了简化 font-size 的换算，需要在 css 中的 body 选择器中声明 Font-size=62.5%，这就使 em 值变为 16px*62.5%=10px, 这样 12px=1.2em, 10px=1em, 也就是说只需要将你的原来的 px 数值除以 10，然后换上 em 作为单位就行了。</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">62.5%</span>; <span class="comment">/*10 ÷ 16 × 100% = 62.5%*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.4rem</span>; <span class="comment">/*1.4 × 10px = 14px */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2.4rem</span>; <span class="comment">/*2.4 × 10px = 24px*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.4rem</span>;</span><br><span class="line">&#125; <span class="comment">/*IE8及之前版本的IE浏览器使用14像素*/</span></span><br></pre></td></tr></table></figure>
<h1 id="下面列出几种常见设计稿相应的-font-size-值："><a href="#下面列出几种常见设计稿相应的-font-size-值：" class="headerlink" title="下面列出几种常见设计稿相应的 font-size 值："></a>下面列出几种常见设计稿相应的 font-size 值：</h1><blockquote>
<p>deviceWidth = 320，font-size = 320 / 6.4 = 50px<br>deviceWidth = 375，font-size = 375 / 6.4 = 58.59375px<br>deviceWidth = 414，font-size = 414 / 6.4 = 64.6875px<br>deviceWidth = 500，font-size = 500 / 6.4 = 78.125px</p>
</blockquote>
<p><strong>也可使用 JS 计算</strong>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.addEventListener(</span><br><span class="line">    <span class="string">'DOMContentLoaded'</span>,</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> html = <span class="built_in">document</span>.documentElement</span><br><span class="line">      <span class="keyword">var</span> windowWidth = html.clientWidth</span><br><span class="line">      html.style.fontSize = windowWidth / <span class="number">6.4</span> + <span class="string">'px'</span></span><br><span class="line">      <span class="comment">// 等价于html.style.fontSize = windowWidth / 640 * 100 + 'px';</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="literal">false</span>,</span><br><span class="line">  )</span><br><span class="line">&#125;)()</span><br><span class="line"><span class="comment">// 这个6.4就是根据设计稿的横向宽度来确定的，假如你的设计稿是750</span></span><br><span class="line"><span class="comment">// 那么 html.style.fontSize = windowWidth / 7.5 + 'px';</span></span><br></pre></td></tr></table></figure>
<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1YW5nMTAwcWkvYXJ0aWNsZS9kZXRhaWxzLzQ5ODg2NzEz" title="https://blog.csdn.net/huang100qi/article/details/49886713">webapp font-size 解决问题的方案 <i class="fa fa-external-link"></i></span></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>前端</tag>
        <tag>javascript</tag>
        <tag>rem</tag>
      </tags>
  </entry>
  <entry>
    <title>html 代码片段札记</title>
    <url>/posts/e67af75c.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><ol>
<li><p>自定义苹果图标<br> 在网站文件根目录放一个 <code>apple-touch-icon.png</code> 文件，苹果设备保存网站为书签或桌面快捷方式时，就会使用这个文件作为图标，文件尺寸建议为：180px × 180px。</p>
</li>
<li><p>定义浏览器点击行为</p>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"tel:020-10086"</span>&gt;</span>打电话给:020-10086<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"sms:10086"</span>&gt;</span>发短信给: 10086<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"mailto:me@22278.club"</span>&gt;</span>发送邮件: me@22278.club<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>定义上传文件类型和格式</p>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">file</span> <span class="attr">accept</span>=<span class="string">"image/*"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p> 上面的文件上传框中，<code>accept</code> 可以限制上传文件的类型，参数为 <code>image/*</code> 是所有图片类型，点击会弹出图库，也可以指定图片格式，参数设置成 <code>image/png</code> 则可以限制图片类型为png；参数如果为 <code>video/*</code> 则是选择视频的意思；<code>accept</code> 还可以设置多个文件格式，语法为 <code>accept=&quot;image/gif, image/jpeg&quot;</code></p>
</li>
<li><p>使用box-shadow改变(挡住)表单自动填充后的黄色</p>
 <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:-webkit-autofill</span>, <span class="selector-tag">textarea</span><span class="selector-pseudo">:-webkit-autofill</span>, <span class="selector-tag">select</span><span class="selector-pseudo">:-webkit-autofill</span>&#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>:inset <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1000px</span> <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>用CSS实现省略号文字截断</p>
 <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">white-space</span>: <span class="selector-tag">nowrap</span>;</span><br><span class="line"><span class="selector-tag">text-overflow</span>: <span class="selector-tag">ellipsis</span>;</span><br><span class="line"><span class="selector-tag">overflow</span>: <span class="selector-tag">hidden</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用border绘制小三角</p>
<blockquote>
<p>原理是：上下和左右的边框对接其实是个斜角，利用这个特性，使其中一边的边框透明，另外一边写成想要的颜色并隐藏对边，就可以变成小箭头形状。</p>
</blockquote>
 <figure class="highlight css"><table><tr><td class="code"><pre><span class="line">border-width: 10px 10px 10px 0; //左箭头</span><br><span class="line"><span class="selector-tag">border-color</span>: <span class="selector-tag">transparent</span> <span class="selector-id">#fff</span>;</span><br><span class="line"><span class="selector-tag">border-style</span>: <span class="selector-tag">solid</span>;</span><br><span class="line"><span class="selector-tag">width</span>: 0;</span><br></pre></td></tr></table></figure>
<p> <strong>Tootip写法:</strong></p>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>嗨！点击菜单就可以关注兮兮公众号了哟~<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
 <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*--css--*/</span></span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">380px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#efefef</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">80px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: -<span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-color</span>: transparent <span class="number">#efefef</span>;</span><br><span class="line">    <span class="attribute">border-style</span>: solid;</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">15px</span> <span class="number">15px</span> <span class="number">15px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>前端</category>
        <category>html</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>html</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>html-template</title>
    <url>/posts/adaf6fe5.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 优先使用 IE 最新版本和 Chrome --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge,chrome=1"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 页面描述 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"不超过150个字符"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 页面关键词 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 网页作者 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">content</span>=<span class="string">"name, email@gmail.com"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 搜索引擎抓取 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"robots"</span> <span class="attr">content</span>=<span class="string">"index,follow"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 为移动设备添加 viewport --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, maximum-scale=3, minimum-scale=1, user-scalable=no"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- `width=device-width` 会导致 iPhone 5 添加到主屏后以 WebApp 全屏模式打开页面时出现黑边 https://bigc.at/ios-webapp-viewport-meta.orz --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- iOS 设备 begin --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-title"</span> <span class="attr">content</span>=<span class="string">"标题"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 添加到主屏后的标题（iOS 6 新增） --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-capable"</span> <span class="attr">content</span>=<span class="string">"yes"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 是否启用 WebApp 全屏模式，删除苹果默认的工具栏和菜单栏 --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-itunes-app"</span> <span class="attr">content</span>=<span class="string">"app-id=myAppStoreID, affiliate-data=myAffiliateData, app-argument=myURL"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 添加智能 App 广告条 Smart App Banner（iOS 6+ Safari） --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-status-bar-style"</span> <span class="attr">content</span>=<span class="string">"black"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置苹果工具栏颜色 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> <span class="attr">content</span>=<span class="string">"telphone=no, email=no"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 忽略页面中的数字识别为电话，忽略email识别 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 启用360浏览器的极速模式(webkit) --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"renderer"</span> <span class="attr">content</span>=<span class="string">"webkit"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 避免IE使用兼容模式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 不让百度转码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Cache-Control"</span> <span class="attr">content</span>=<span class="string">"no-siteapp"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"HandheldFriendly"</span> <span class="attr">content</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 微软的老式浏览器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"MobileOptimized"</span> <span class="attr">content</span>=<span class="string">"320"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- uc强制竖屏 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"screen-orientation"</span> <span class="attr">content</span>=<span class="string">"portrait"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- QQ强制竖屏 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"x5-orientation"</span> <span class="attr">content</span>=<span class="string">"portrait"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- UC强制全屏 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"full-screen"</span> <span class="attr">content</span>=<span class="string">"yes"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- QQ强制全屏 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"x5-fullscreen"</span> <span class="attr">content</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- UC应用模式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"browsermode"</span> <span class="attr">content</span>=<span class="string">"application"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- QQ应用模式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"x5-page-mode"</span> <span class="attr">content</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- windows phone 点击无高光 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"msapplication-tap-highlight"</span> <span class="attr">content</span>=<span class="string">"no"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--自定义favicon--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"icon"</span> <span class="attr">type</span>=<span class="string">"image/jpg"</span> <span class="attr">href</span>=<span class="string">"/static/img/icon.jpg"</span> <span class="attr">size</span>=<span class="string">"16*16"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"shortcut icon"</span> <span class="attr">href</span>=<span class="string">"/favicon.ico"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>自定义苹果图标<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>在网站文件根目录放一个 apple-touch-icon.png 文件，苹果设备保存网站为书签或桌面快捷方式时，就会使用这个文件作为图标，文件尺寸建议为：180px × 180px。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
        <category>html</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>html</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>清除浮动</title>
    <url>/posts/2f610a6e.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*清除浮动 clear &amp; clearfix*/</span></span><br><span class="line"><span class="selector-class">.clear</span> &#123; <span class="attribute">display</span>:block <span class="meta">!important</span>; <span class="attribute">clear</span>:both <span class="meta">!important</span>; <span class="attribute">float</span>:none <span class="meta">!important</span>; <span class="attribute">margin</span>:<span class="number">0</span> <span class="meta">!important</span>; <span class="attribute">padding</span>:<span class="number">0</span> <span class="meta">!important</span>; <span class="attribute">height</span>:<span class="number">0</span>; <span class="attribute">line-height</span>:<span class="number">0</span>; <span class="attribute">font-size</span>:<span class="number">0</span>; <span class="attribute">overflow</span>:hidden;&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span> &#123; <span class="attribute">zoom</span>:<span class="number">1</span>; &#125;</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123; <span class="attribute">content</span>:<span class="string">""</span>; <span class="attribute">display</span>:block; <span class="attribute">clear</span>:both; <span class="attribute">height</span>:<span class="number">0</span>; &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>css</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>css</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>flex - 弹性盒子布局</title>
    <url>/posts/babeca14.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vYmxvZy1sZW8vcC80NjM0NjMxLmh0bWw=" title="https://www.cnblogs.com/blog-leo/p/4634631.html">https://www.cnblogs.com/blog-leo/p/4634631.html<i class="fa fa-external-link"></i></span></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.flex-cont</span>&#123;</span><br><span class="line">  <span class="comment">/*定义为flexbox的“父元素”*/</span></span><br><span class="line">  <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-flex;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="comment">/*子元素沿主轴对齐方式居中*/</span></span><br><span class="line">  <span class="attribute">-webkit-box-pack</span>: center;</span><br><span class="line">  <span class="attribute">-webkit-justify-content</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="comment">/*子元素沿侧轴对齐方式垂直居中*/</span></span><br><span class="line">  <span class="attribute">-webkit-box-align</span>: center;</span><br><span class="line">  <span class="attribute">-webkit-align-items</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="comment">/*指定主轴的伸缩流方向是纵向的*/</span></span><br><span class="line">  <span class="attribute">-webkit-box-orient</span>:vertical;</span><br><span class="line">  <span class="attribute">-webkit-box-direction</span>: normal;</span><br><span class="line">  <span class="attribute">-webkit-flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.flex-item</span>&#123;</span><br><span class="line">  <span class="comment">/*不要给flexbox里的子元素设置“margin:auto”的属性，在部分安卓机下，它会导致该元素的宽度撑开到100%占位*/</span></span><br><span class="line">  <span class="comment">/*在旧版的规范中，使用比例伸缩布局时，子元素的内容长短不同会导致无法“等分”，这个时候，我们需要给子元素设置一个“width:0%”来解决问题*/</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0%</span>;</span><br><span class="line">  <span class="comment">/*给“子元素”赋予自由伸缩的能力*/</span></span><br><span class="line">  <span class="attribute">-webkit-box-flex</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">-webkit-flex</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">flex</span>:<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里假设flex容器为 .box ，子元素为 .item 。</p>
</blockquote>
<ol>
<li><p>定义容器为flex布局</p>
 <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: -webkit-flex; <span class="comment">/*webkit*/</span></span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*行内flex*/</span></span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: -webkit-inline-flex; <span class="comment">/*webkit*/</span></span><br><span class="line">    <span class="attribute">display</span>:inline-flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>容器样式</p>
 <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">flex-direction</span>: row | row-reverse | column | column-reverse;</span><br><span class="line">    <span class="comment">/*主轴方向：左到右（默认） | 右到左 | 上到下 | 下到上*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="attribute">flex-wrap</span>: nowrap | wrap | wrap-reverse;</span><br><span class="line">    <span class="comment">/*换行：不换行（默认） | 换行 | 换行并第一行在下方*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="attribute">flex-flow</span>: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</span><br><span class="line">    <span class="comment">/*主轴方向和换行简写*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="attribute">justify-content</span>: flex-start | flex-end | center | space-between | space-around;</span><br><span class="line">    <span class="comment">/*主轴对齐方式：左对齐（默认） | 右对齐 | 居中对齐 | 两端对齐 | 平均分布*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="attribute">align-items</span>: flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">    <span class="comment">/*交叉轴对齐方式：顶部对齐（默认） | 底部对齐 | 居中对齐 | 上下对齐并铺满 | 文本基线对齐*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="attribute">align-content</span>: flex-start | flex-end | center | space-between | space-around | stretch;</span><br><span class="line">    <span class="comment">/*多主轴对齐：顶部对齐（默认） | 底部对齐 | 居中对齐 | 上下对齐并铺满 | 上下平均分布*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>子元素样式</p>
 <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">    <span class="attribute">order</span>: &lt;integer&gt;;</span><br><span class="line">    <span class="comment">/*排序：数值越小，越排前，默认为0*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="attribute">flex-grow</span>: &lt;number&gt;; <span class="comment">/* default 0 */</span></span><br><span class="line">    <span class="comment">/*放大：默认0（即如果有剩余空间也不放大，值为1则放大，2是1的双倍大小，以此类推）*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="attribute">flex-shrink</span>: &lt;number&gt;; <span class="comment">/* default 1 */</span></span><br><span class="line">    <span class="comment">/*缩小：默认1（如果空间不足则会缩小，值为0不缩小）*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="attribute">flex-basis</span>: &lt;length&gt; | auto; <span class="comment">/* default auto */</span></span><br><span class="line">    <span class="comment">/*固定大小：默认为0，可以设置px值，也可以设置百分比大小*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="attribute">flex</span>: none | [ &lt;<span class="string">'flex-grow'</span>&gt; &lt;<span class="string">'flex-shrink'</span>&gt;? || &lt;<span class="string">'flex-basis'</span>&gt; ]</span><br><span class="line">    <span class="comment">/*flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto，*/</span></span><br><span class="line">    </span><br><span class="line">    align-self: auto | flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">    <span class="comment">/*单独对齐方式：自动（默认） | 顶部对齐 | 底部对齐 | 居中对齐 | 上下对齐并铺满 | 文本基线对齐*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>前端</category>
        <category>css</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>css</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>前端调试解决方案</title>
    <url>/posts/2a82af42.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>[TOC]</p>
<h1 id="真机联调"><a href="#真机联调" class="headerlink" title="真机联调"></a>真机联调</h1><h2 id="vConsole"><a href="#vConsole" class="headerlink" title="vConsole"></a><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1dlY2hhdEZFL3ZDb25zb2xlL2Jsb2IvZGV2L1JFQURNRV9DTi5tZA==" title="https://github.com/WechatFE/vConsole/blob/dev/README_CN.md">vConsole<i class="fa fa-external-link"></i></span></h2><blockquote>
<p><code>腾讯</code>出品的一个轻量、可拓展、针对手机网页的前端开发者调试面板。<br><strong>与 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1dlY2hhdEZFL3ZDb25zb2xlL2Jsb2IvZGV2L1JFQURNRV9DTi5tZA==" title="https://github.com/WechatFE/vConsole/blob/dev/README_CN.md">vConsole<i class="fa fa-external-link"></i></span> 类似的还有 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpcmlsaXJpL2VydWRh" title="https://github.com/liriliri/eruda">Eruda<i class="fa fa-external-link"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9qc2NvbnNvbGUuY29tLw==" title="https://jsconsole.com/">JSConsole<i class="fa fa-external-link"></i></span></strong></p>
</blockquote>
<ul>
<li>查看 console 日志</li>
<li>查看网络请求</li>
<li>手动执行 JS 命令行</li>
<li>自定义插件</li>
</ul>
<a id="more"></a>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//建议通过url参数来控制是否加载调试器，例↓</span></span><br><span class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> src = <span class="string">'//liriliri.github.io/eruda/eruda.min.js'</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="regexp">/eruda=true/</span>.test(<span class="built_in">window</span>.location) &amp;&amp; localStorage.getItem(<span class="string">'active-eruda'</span>) != <span class="string">'true'</span>) <span class="keyword">return</span></span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">'&lt;scr'</span> + <span class="string">'ipt src="'</span> + src + <span class="string">'"&gt;&lt;/scr'</span> + <span class="string">'ipt&gt;'</span>)</span><br><span class="line">  <span class="built_in">document</span>.write(<span class="string">'&lt;scr'</span> + <span class="string">'ipt&gt;eruda.init();&lt;/scr'</span> + <span class="string">'ipt&gt;'</span>)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>
<h2 id="spy-debugger"><a href="#spy-debugger" class="headerlink" title="spy-debugger"></a><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3d1Y2hhbmdtaW5nL3NweS1kZWJ1Z2dlcg==" title="https://github.com/wuchangming/spy-debugger">spy-debugger<i class="fa fa-external-link"></i></span></h2><blockquote>
<p>一站式页面调试、抓包工具。远程调试任何手机浏览器页面，任何手机移动端 webview（如：微信，HybirdApp 等）HTTP/HTTPS<br><strong>与<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3d1Y2hhbmdtaW5nL3NweS1kZWJ1Z2dlcg==" title="https://github.com/wuchangming/spy-debugger">spy-debugger<i class="fa fa-external-link"></i></span>类似的还有<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2F2d28vd2hpc3RsZQ==" title="https://github.com/avwo/whistle">whistle<i class="fa fa-external-link"></i></span></strong></p>
</blockquote>
<ol>
<li>页面调试＋抓包。</li>
<li>支持 HTTPS。</li>
<li>spy-debugger 内部集成了 weinre、node-mitmproxy、AnyProxy。</li>
<li>自动忽略原生 App 发起的 https 请求，只拦截 webview 发起的 https 请求。对使用了 SSL pinning 技术的原生 App 不造成任何影响。</li>
<li>可以配合其它代理工具一起使用(默认使用 AnyProxy) (设置外部代理)</li>
</ol>
<p><strong>spy-debugger 截图</strong><br><img src="https://raw.githubusercontent.com/wuchangming/spy-debugger/master/demo/img/demo.png" alt="使用spy-debugger调试样式"><br><img src="https://raw.githubusercontent.com/wuchangming/spy-debugger/master/demo/img/AnyProxy.png" alt="使用spy-debugger抓包"><br><strong>whistle 截图</strong><br><img src="https://raw.githubusercontent.com/avwo/whistleui/master/assets/functions.png" alt="whistle基本功能"><br><img src="https://raw.githubusercontent.com/avwo/whistleui/master/img/network.gif" alt="whistle抓包"><br><img src="https://raw.githubusercontent.com/avwo/whistleui/master/img/rules.gif" alt="whistle rules"><br><img src="https://raw.githubusercontent.com/avwo/whistleui/master/img/values.gif" alt="whistle values"></p>
<h1 id="多设备自适应开发与调试"><a href="#多设备自适应开发与调试" class="headerlink" title="多设备自适应开发与调试"></a>多设备自适应开发与调试</h1><h2 id="Browsersync"><a href="#Browsersync" class="headerlink" title="Browsersync"></a><span class="exturl" data-url="aHR0cHM6Ly93d3cuYnJvd3NlcnN5bmMuY24v" title="https://www.browsersync.cn/">Browsersync<i class="fa fa-external-link"></i></span></h2><blockquote>
<p><strong>多设备同步操作。</strong><br>Browsersync 能让浏览器实时、快速响应您的文件更改（html、js、css、sass、less 等）并自动刷新页面。更重要的是 <code>Browsersync可以同时在PC、平板、手机等设备下进项调试</code>。您可以想象一下：“假设您的桌子上有 pc、ipad、iphone、android 等设备，同时打开了您需要调试的页面，当您使用 browsersync 后，您的任何一次代码保存，以上的设备都会同时显示您的改动”。无论您是前端还是后端工程师，使用它将提高您 30%的工作效率。</p>
</blockquote>
<h2 id="Blisk-浏览器"><a href="#Blisk-浏览器" class="headerlink" title="Blisk 浏览器"></a><span class="exturl" data-url="aHR0cHM6Ly9ibGlzay5pby8=" title="https://blisk.io/">Blisk 浏览器<i class="fa fa-external-link"></i></span></h2><ul>
<li>完全模拟手机和平板电脑的内部</li>
<li>网址和桌面和移动的滚动是同步的</li>
<li>文件更改会自动刷新页面</li>
<li>可通过 DevTools 调试桌面和移动效果</li>
<li>Blisk 适用于任何 IDE、语言和框架<br><img src="https://img.cmhello.com/2016/06/blisk.jpg" alt></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>前端</tag>
        <tag>调试</tag>
      </tags>
  </entry>
  <entry>
    <title>WebStorm ES6 语法支持设置</title>
    <url>/posts/931279e8.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>在 webstorm 写下了这段代码，体验一下 ES6 语法的便利，但是一大堆报错<br><img src="https://i.loli.net/2019/06/29/5d172336126a428437.png" alt></p>
<a id="more"></a>
<h2 id="语法支持设置"><a href="#语法支持设置" class="headerlink" title="语法支持设置"></a>语法支持设置</h2><blockquote>
<p>Preferences &gt; Languages &amp; Frameworks &gt; JavaScript</p>
</blockquote>
<p>这里只要配置 ECMAScript 版本即可</p>
<p><img src="https://i.loli.net/2019/06/29/5d17235239ba830464.png" alt="Preferences &gt; Languages &amp; Frameworks &gt; JavaScript"></p>
<h2 id="自动转码为-ES5"><a href="#自动转码为-ES5" class="headerlink" title="自动转码为 ES5"></a>自动转码为 ES5</h2><blockquote>
<p>file watcher + <span class="exturl" data-url="aHR0cHM6Ly9iYWJlbGpzLmlvLw==" title="https://babeljs.io/">babel<i class="fa fa-external-link"></i></span>（ES6 转码器）</p>
</blockquote>
<ol>
<li><code>npm install -g babel-cli</code> / <code>npm install --save-dev babel-cli</code></li>
<li>Preferences &gt; Tools &gt; File watchers</li>
<li><p>点击“+”按钮<br><img src="https://i.loli.net/2019/06/29/5d1723672d2d917430.png" alt></p>
<blockquote>
<p><strong>File Type</strong>：配置该监听器监听的文件类型，可以在 Preferences &gt; Editor &gt; File types 中配置<br><strong>Scope</strong>：配置该监听器的监听范围，可自定义新的范围，也可以使用 Preferences &gt; Appearance &amp; Behavior &gt; Scopes<br><strong>Program</strong>：babel 的安装位置<br><code>C:\Users\lxbin\node_modules\.bin\babel.cmd</code><br><strong>Arguments</strong>：命令执行参数，参见 Babel CLI<br><code>$FilePathRelativeToProjectRoot$ --out-dir dist --source-maps --presets es2015</code><br><strong>Working directory</strong>：babel 命令执行的位置，默认为文件所在目录<br><code>dist\$FileDirRelativeToProjectRoot$\$FileNameWithoutExtension$.js:dist\$FileDirRelativeToProjectRoot$\$FileNameWithoutExtension$.js.map</code></p>
</blockquote>
</li>
<li><p>最后在项目目录下面添加一个<code>.babelrc</code>文件</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [<span class="string">"es2015"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>工具</tag>
        <tag>webstorm</tag>
      </tags>
  </entry>
  <entry>
    <title>WebStorm模板</title>
    <url>/posts/9a3b4cca.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="文件模版变量"><a href="#文件模版变量" class="headerlink" title="文件模版变量"></a>文件模版变量</h1><ul>
<li><code>${PACKAGE_NAME}</code> name of the package in which the new file is created</li>
<li><code>${USER}</code> current user system login name</li>
<li><code>${DATE}</code> current system date</li>
<li><code>${TIME}</code> current system time</li>
<li><code>${YEAR}</code> current year</li>
<li><code>${MONTH}</code> current month</li>
<li><code>${MONTH_NAME_SHORT}</code> first 3 letters of the current month name. Example: Jan, Feb, etc.</li>
<li><code>${MONTH_NAME_FULL}</code> full name of the current month. Example: January, February, etc.</li>
<li><code>${DAY}</code> current day of the month</li>
<li><code>${HOUR}</code> current hour</li>
<li><code>${MINUTE}</code> current minute</li>
<li><code>${PROJECT_NAME}</code> the name of the current project</li>
</ul>
<a id="more"></a>
<h1 id="文件模版"><a href="#文件模版" class="headerlink" title="文件模版"></a>文件模版</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">* @Date: $&#123;DATE&#125;  $&#123;TIME&#125;</span></span><br><span class="line"><span class="comment">* @Author: $&#123;USER&#125;</span></span><br><span class="line"><span class="comment">* https://xuebin.me/</span></span><br><span class="line"><span class="comment">* Created with JetBrains WebStorm.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">lang</span>=<span class="string">"pug"</span>&gt;</span></span><br><span class="line">    .page-group</span><br><span class="line">        .page.page-current</span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    import &#123;mapState, mapGetters, mapMutations, mapActions&#125; from 'vuex'</span><br><span class="line">    import * as types from '../store/mutation-types'</span><br><span class="line">    export default&#123;</span><br><span class="line">        name: '',</span><br><span class="line">        components: &#123;&#125;,</span><br><span class="line">        data:()=&gt;(&#123;&#125;),</span><br><span class="line">        created()&#123;&#125;,</span><br><span class="line">        mounted()&#123;&#125;,</span><br><span class="line">        watch: &#123;&#125;,</span><br><span class="line">        computed: &#123;</span><br><span class="line">            ...mapState(&#123;&#125;),</span><br><span class="line">            ...mapGetters(&#123;&#125;),</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            ...mapActions([]),</span><br><span class="line">            ...mapMutations(&#123;&#125;),</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">"scss"</span> <span class="attr">rel</span>=<span class="string">"stylesheet/scss"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>工具</tag>
        <tag>webstorm</tag>
      </tags>
  </entry>
  <entry>
    <title>WebStorm快捷键</title>
    <url>/posts/4219ed39.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="Windows-快捷键"><a href="#Windows-快捷键" class="headerlink" title="Windows 快捷键"></a>Windows 快捷键</h1><ul>
<li>双击<code>Shift</code>全局搜索</li>
<li><code>ctrl + alt + T</code> 围绕包裹代码(包括 zencoding 的 Wrap with Abbreviation)</li>
<li><code>ctrl + [/]</code> 匹配 {}[]</li>
<li><code>ctrl + shift + ]/[</code> 选中块代码</li>
<li><code>ctrl + q</code> JSDoc 文档预览</li>
<li><code>ctrl + shift + i</code> 显示当前 CSS 选择器或者 JS 函数的详细信息</li>
<li><code>Shift+F6</code> 重构-重命名</li>
<li><code>Alt+~</code>vcs 操作<ul>
<li><code>Alt+~ 7</code>关闭重启前的本地历史纪录</li>
</ul>
</li>
<li><code>Ctrl+F</code>文件内查找<ul>
<li><code>Ctrl+K</code>查找下一个</li>
<li><code>Ctrl+Shift+K</code> 查找上一个</li>
</ul>
</li>
<li><code>Ctrl+B或Ctrl+鼠标左键单击</code> 快速打开光标处的类或方法</li>
<li><code>Ctrl+Alt+Shift+N</code>通过字符快速查找位置</li>
<li><code>Ctrl+Shift+R</code>工程内查找文件名</li>
<li><code>Ctrl+E</code>最近打开的文件</li>
<li><code>ctrl+shift+F12</code> 最大区域显示代码（会隐藏其他的功能界面模块）</li>
<li><code>ctrl+alt+L</code> 格式化代码</li>
<li><code>control + shift + j</code> 合并行</li>
</ul>
<a id="more"></a>
<h2 id="界面操作"><a href="#界面操作" class="headerlink" title="界面操作"></a>界面操作</h2><ul>
<li><code>Ctrl+F4</code>关闭当前代码选项卡</li>
<li><code>Alt+←/→</code>切换代码选项卡</li>
<li><code>Alt+[0~9]</code>快速拆合功能界面模块</li>
<li><code>Alt+Shift+F</code>将当前文件加入收藏夹</li>
<li><code>Ctrl+F12</code>显示当前文件的结构</li>
</ul>
<h2 id="代码编辑"><a href="#代码编辑" class="headerlink" title="代码编辑"></a>代码编辑</h2><ul>
<li><code>Alt+Shift+↑</code>选中单词/选中当前块</li>
<li><code>Alt+Insert</code>新建一个文件或其他</li>
<li><code>Ctrl+Alt+L</code>/<code>Ctrl+Shift+F</code>格式化代码</li>
<li><code>Shift+Enter</code>重新开始一行（无论光标在哪个位置）</li>
</ul>
<h2 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h2><ul>
<li><code>Esc</code>进入代码编辑区域</li>
<li><code>Alt+F1</code>查找代码在其他界面模块的位置，颇为有用</li>
<li><code>Ctrl+G</code>查找引用</li>
<li><code>Ctrl+L</code>撞到指定行</li>
<li><code>Ctrl+]/[</code>光标到代码块的前面或后面</li>
<li><code>Ctrl+Shift+up/down</code>上一个/下一个方法</li>
</ul>
<h2 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h2><ul>
<li><code>Ctrl+Alt+S</code>打开配置窗口</li>
<li><code>Ctrl+Shift+A</code>快速查找并使用编辑器所有功能</li>
</ul>
<h1 id="Mac-快捷键"><a href="#Mac-快捷键" class="headerlink" title="Mac 快捷键"></a>Mac 快捷键</h1><ul>
<li><code>⌘</code> Command</li>
<li><code>⌃</code> Control</li>
<li><code>⌥</code> alt</li>
<li><code>⇧</code> Shift</li>
<li><code>⇪</code> Caps Lock</li>
<li><code>fn</code> 功能键就是 fn</li>
</ul>
<h2 id="全局的"><a href="#全局的" class="headerlink" title="全局的"></a>全局的</h2><ul>
<li><strong><code>双击shift</code> 弹出小浮窗搜索所有</strong></li>
<li><strong><code>Command+shift+A</code> 整个工程的查找操作</strong></li>
<li><code>Command+</code>`,<code>Command+shift+</code>` 切换项目</li>
<li><code>Command+1,Command+2…</code> 打开各种工具窗口</li>
<li><code>alt+shift+F</code> 把文件添加到收藏夹</li>
<li><code>alt+shift+I</code> 打开项目描述</li>
<li><code>alt+~</code> 快速切换当前计划</li>
<li><code>Command+,</code> 设置编辑器</li>
<li><code>Control+Tab</code> 选项卡和工具窗口之间进行切换</li>
<li><code>alert+回车</code> 显示 npm 版本升级列表</li>
</ul>
<h2 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h2><ul>
<li><code>Command+alt+T</code> 用 (if..else, try..catch, for, etc.)包住</li>
<li><code>Command+/</code> 注释/取消注释的行注释</li>
<li><code>Command+alt+/</code> 注释/取消注释与块注释</li>
<li><code>alt+↑</code> 向上选取代码块</li>
<li><code>alt+↓</code> 向下选取代码块</li>
<li><code>Command+alt+L</code> 格式化代码</li>
<li><code>tab,shift+tab</code> 调整缩进</li>
<li><code>Control+alt+I</code> 快速调整缩进</li>
<li><code>Command+C</code> 复制</li>
<li><code>Command+X</code> 剪切</li>
<li><code>Command+V</code> 粘贴</li>
<li><code>Command+shift+V</code> 从剪贴板里选择粘贴</li>
<li><code>Command+D</code> 复制代码副本</li>
<li><code>Command+delete</code> 删除当前行</li>
<li><code>Control+Shift+J</code> 清除缩进变成单行</li>
<li><code>shift+回车</code> 快速换行</li>
<li><code>Command+回车</code> 换行光标还在原先位置</li>
<li><code>Command+shift+U</code> 大小写转换</li>
<li><code>Command+shift+[,Command+shift+]</code> 文件选项卡快速切换</li>
<li><code>Command+加号,Command+减号</code> 收缩代码块</li>
<li><code>Command+shift+加号，Command+shift+减号</code> 收缩整个文档的代码块</li>
<li><code>Command+W</code> 关闭当前文件选项卡</li>
<li><code>alt+单击</code> 光标在多处定位</li>
<li><code>Control+shift+J</code> 把下面行的缩进收上来</li>
<li><code>shift + F6</code> 高级修改，可快速修改光标所在的标签、变量、函数等</li>
<li><code>alt+/</code> 代码补全</li>
</ul>
<h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><ul>
<li><code>Control+alt+R</code> 运行项目</li>
<li><code>Command+Control+R</code> 运行 Debug</li>
<li><code>Command+F8</code> 添加断点</li>
<li><code>Command+shift+F8</code> 打开断点列表</li>
</ul>
<h2 id="导航-1"><a href="#导航-1" class="headerlink" title="导航"></a>导航</h2><ul>
<li><code>Command+O</code> 跳转到某个类</li>
<li><code>Command+shift+O</code> 跳转到某个文件</li>
<li><code>Command+alt+O</code> 跳转到某个符号</li>
<li><code>Control+←,Control+→</code> 转到上/下一个编辑器选项卡</li>
<li><code>F12</code> 打开之前打开的工具窗口（TODO、终端等）</li>
<li><code>Command+L</code> 跳转行</li>
<li><code>Command+E</code> 弹出最近文件</li>
<li><code>Command+alt+←,Command+alt+→</code> 向前向后导航到代码块交接处（一般是空行处）</li>
<li><code>Command+shift+delete</code> 导航到上一个编辑位置的位置</li>
<li><code>Command+B</code> 跳转到变量声明处</li>
<li><code>Control+J</code> 获取变量相关信息（类型、注释等，注释是拿上一行的注释）</li>
<li><code>Command+Y</code> 小浮窗显示变量声明时的行</li>
<li><code>Command+[,Command+]</code> 光标现在的位置和之前的位置切换</li>
<li><code>Command+F12</code> 文件结构弹出式菜单</li>
<li><code>alt+H</code> 类的层次结构</li>
<li><code>F2,shift+F2</code> 切换到上\下一个突出错误的位置</li>
<li><code>Command+↑</code> 跳转到导航栏</li>
<li><code>F3</code> 添加书签</li>
<li><code>alt+F3</code> 添加带助记的书签</li>
<li><code>alt+1,alt+2…</code> 切换到相应助记的书签位置</li>
<li><code>Command+F3</code> 打开书签列表</li>
</ul>
<h2 id="VCS-本地历史记录"><a href="#VCS-本地历史记录" class="headerlink" title="VCS/本地历史记录"></a>VCS/本地历史记录</h2><ul>
<li><code>control+V</code> 打开 VST 小浮窗</li>
<li><code>Command+K</code> 提交项目</li>
<li><code>Command+T</code> 更新项目</li>
<li><code>alt+shift+C</code> 打开最近修改列表</li>
</ul>
<h2 id="搜索和替换"><a href="#搜索和替换" class="headerlink" title="搜索和替换"></a>搜索和替换</h2><ul>
<li><code>Command+F</code> 搜索</li>
<li><code>Command+R</code> 替换</li>
<li><code>Command+G</code> 查找下一个</li>
<li><code>Command+shift+G</code> 查找下一个</li>
<li><code>Command+shift+F</code> 按路径搜索</li>
<li><code>Command+shift+R</code> 按路径替换</li>
</ul>
<h2 id="选中文字的搜索"><a href="#选中文字的搜索" class="headerlink" title="选中文字的搜索"></a>选中文字的搜索</h2><ul>
<li><code>Command+F7</code> 向声明的地方搜索并选中</li>
<li><code>Command+shift+F7</code> 打开搜索框进行搜索</li>
<li><code>Command+alt+F7</code> 打开小浮窗显示搜索列表</li>
</ul>
<h2 id="对项目文件的操作（重构）"><a href="#对项目文件的操作（重构）" class="headerlink" title="对项目文件的操作（重构）"></a>对项目文件的操作（重构）</h2><ul>
<li><code>F5</code> 复制文件到某个目录</li>
<li><code>F6</code> 移动文件到某个目录</li>
<li><code>Command+delete</code> 安全删除</li>
<li><code>shift+F6</code> 重命名</li>
</ul>
<h1 id="Emmet"><a href="#Emmet" class="headerlink" title="Emmet"></a>Emmet</h1><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLndwamFtLmNvbS9zZXJpZXMvZnJvbnRlbmQtZGV2ZWxvcC10b29sLWVtbWV0Lw==" title="https://blog.wpjam.com/series/frontend-develop-tool-emmet/">前端开发神器 Emmet<i class="fa fa-external-link"></i></span></p>
<ul>
<li><code>w</code> -webkit-</li>
<li><code>m</code> -moz-</li>
<li><code>s</code> -ms-</li>
<li><code>o</code> -o-</li>
<li><code>lorem</code> 一段随机看不懂的文字，作为测试数据填充用的</li>
</ul>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>工具</tag>
        <tag>webstorm</tag>
      </tags>
  </entry>
  <entry>
    <title>Git</title>
    <url>/posts/69c3279c.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h1><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93aW5kb3dzLmdpdGh1Yi5jb20v" title="https://windows.github.com/">GitHub for windows<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuc291cmNldHJlZWFwcC5jb20v" title="https://www.sourcetreeapp.com/">SourceTree <i class="fa fa-external-link"></i></span></li>
</ul>
<hr>
<h1 id="Git-操作"><a href="#Git-操作" class="headerlink" title="Git 操作"></a>Git 操作</h1><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vc2ltYWRpL3AvNTA3MjQ4MC5odG1s" title="https://www.cnblogs.com/simadi/p/5072480.html">用 SourceTree 轻巧 Git 项目图解<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cubGlhb3h1ZWZlbmcuY29tL3dpa2kvMDAxMzczOTUxNjMwNTkyOTYwNmRkMTgzNjEyNDg1NzhjNjdiODA2N2M4YzAxN2IwMDA=" title="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000">Git 教程 - 廖雪峰的官方网站<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9iYWNrbG9ndG9vbC5jb20vZ2l0LWd1aWRlL2NuLw==" title="https://backlogtool.com/git-guide/cn/">猴子都能懂的 GIT 入门<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9ib29rL3poL3YxLyVFOCVCNSVCNyVFNiVBRCVBNQ==" title="https://git-scm.com/book/zh/v1/%E8%B5%B7%E6%AD%A5">Git 起步<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuaW1vb2MuY29tL2xlYXJuLzM5MA==" title="https://www.imooc.com/learn/390">版本控制入门 – 搬进 Github<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmpvYmJvbGUuY29tLzUwNjAzLw==" title="https://blog.jobbole.com/50603/">写给 Git 初学者的 7 个建议<i class="fa fa-external-link"></i></span></li>
</ul>
<blockquote>
<p>_<span class="exturl" data-url="aHR0cHM6Ly93d3cudG91dGlhby5jb20vaTYzNTM0NzIxNDQyMzk3NTU3NzcvP3R0X2Zyb209d2VpeGluJmFtcDt1dG1fY2FtcGFpZ249Y2xpZW50X3NoYXJlJmFtcDthcHA9bmV3c19hcnRpY2xlJmFtcDt1dG1fc291cmNlPXdlaXhpbiZhbXA7aWlkPTYxNzc0MjQwNzgmYW1wO3V0bV9tZWRpdW09dG91dGlhb19pb3MmYW1wO3d4c2hhcmVfY291bnQ9MQ==" title="https://www.toutiao.com/i6353472144239755777/?tt_from=weixin&amp;utm_campaign=client_share&amp;app=news_article&amp;utm_source=weixin&amp;iid=6177424078&amp;utm_medium=toutiao_ios&amp;wxshare_count=1">程序员提交代码的 emoji 指南<i class="fa fa-external-link"></i></span>_</p>
</blockquote>
<hr>
<h1 id="Git-工作流"><a href="#Git-工作流" class="headerlink" title="Git 工作流"></a>Git 工作流</h1><p><img src="https://nvie.com/img/git-model@2x.png" alt></p>
<ul>
<li><strong><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAwMjkxODEyMyNhcnRpY2xlSGVhZGVyMTM=" title="https://segmentfault.com/a/1190000002918123#articleHeader13">feature<i class="fa fa-external-link"></i></span></strong><code>功能分支</code>（多个、玫红）。主要是自己玩了，差不多的时候要合并回 develop 去。从不与 master 交互。</li>
<li><strong>develop</strong><code>开发主分支</code>（1 个、黄色）。主要是和 feature 以及 release 交互。</li>
<li><strong><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAwMjkxODEyMyNhcnRpY2xlSGVhZGVyMTQ=" title="https://segmentfault.com/a/1190000002918123#articleHeader14">release<i class="fa fa-external-link"></i></span></strong><code>发布分支</code>（同一时间 1 个、绿色）。总是基于 develop，最后又合并回 develop。当然对应的 tag 跑到 master 这边去了。生命周期很短，只是为了发布</li>
<li><strong><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAwMjkxODEyMyNhcnRpY2xlSGVhZGVyMTU=" title="https://segmentfault.com/a/1190000002918123#articleHeader15">hotfix<i class="fa fa-external-link"></i></span></strong><code>线上维护分支</code>（同一时间 1 个、红色）。总是基于 master，并最后合并到 master 和 develop。生命周期较短，用了修复 bug 或小粒度修改发布。</li>
<li><strong><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAwMjkxODEyMyNhcnRpY2xlSGVhZGVyMTI=" title="https://segmentfault.com/a/1190000002918123#articleHeader12">master<i class="fa fa-external-link"></i></span></strong><code>正式发布历史分支</code>（1 个蓝色）。没有什么东西，仅是一些关联的 tag，因从不在 master 上开发。</li>
</ul>
<hr>
<h1 id="Git-常用命令速查表"><a href="#Git-常用命令速查表" class="headerlink" title="Git 常用命令速查表"></a>Git 常用命令速查表</h1><p><img src="https://image.xuebin.me/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5%E8%A1%A8.jpeg" alt="Git常用命令速查表"></p>
<hr>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考:"></a>参考:</h1><ul>
<li>Git 分支管理策略<sup id="fnref:1"><a href="#fn:1" rel="footnote">&lt;span class=”hint–top hint–error hint–medium hint–rounded hint–bounce” aria-label=”<span class="exturl" data-url="aHR0cHM6Ly93d3cucnVhbnlpZmVuZy5jb20vYmxvZy8yMDEyLzA3L2dpdC5odG1s" title="https://www.ruanyifeng.com/blog/2012/07/git.html">https://www.ruanyifeng.com/blog/2012/07/git.html<i class="fa fa-external-link"></i></span> “Git 分支管理策略”<br>“&gt;[1]</a></sup></li>
<li>企业级开发：Gitflow Workflow 工作流<sup id="fnref:2"><a href="#fn:2" rel="footnote">&lt;span class=”hint–top hint–error hint–medium hint–rounded hint–bounce” aria-label=”<span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8xMDRmYThiMTVkMWU=" title="https://www.jianshu.com/p/104fa8b15d1e">https://www.jianshu.com/p/104fa8b15d1e<i class="fa fa-external-link"></i></span> “企业级开发：Gitflow Workflow 工作流”<br>“&gt;[2]</a></sup></li>
<li>Git 工作流指南：Gitflow 工作流<sup id="fnref:3"><a href="#fn:3" rel="footnote">&lt;span class=”hint–top hint–error hint–medium hint–rounded hint–bounce” aria-label=”<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmpvYmJvbGUuY29tLzc2ODY3" title="https://blog.jobbole.com/76867">https://blog.jobbole.com/76867<i class="fa fa-external-link"></i></span> “Git 工作流指南：Gitflow 工作流”<br>“&gt;[3]</a></sup></li>
<li>深入理解学习 Git 工作流（git-workflow-tutorial）<sup id="fnref:4"><a href="#fn:4" rel="footnote">&lt;span class=”hint–top hint–error hint–medium hint–rounded hint–bounce” aria-label=”<span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAwMjkxODEyMw==" title="https://segmentfault.com/a/1190000002918123">https://segmentfault.com/a/1190000002918123<i class="fa fa-external-link"></i></span> “深入理解学习 Git 工作流（git-workflow-tutorial）”<br>“&gt;[4]</a></sup></li>
</ul>
<hr>
<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><span class="exturl" data-url="aHR0cHM6Ly93d3cucnVhbnlpZmVuZy5jb20vYmxvZy8yMDEyLzA3L2dpdC5odG1s" title="https://www.ruanyifeng.com/blog/2012/07/git.html">https://www.ruanyifeng.com/blog/2012/07/git.html<i class="fa fa-external-link"></i></span> &quot;Git 分支管理策略&quot;<a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8xMDRmYThiMTVkMWU=" title="https://www.jianshu.com/p/104fa8b15d1e">https://www.jianshu.com/p/104fa8b15d1e<i class="fa fa-external-link"></i></span> &quot;企业级开发：Gitflow Workflow 工作流&quot;<a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmpvYmJvbGUuY29tLzc2ODY3" title="https://blog.jobbole.com/76867">https://blog.jobbole.com/76867<i class="fa fa-external-link"></i></span> &quot;Git 工作流指南：Gitflow 工作流&quot;<a href="#fnref:3" rev="footnote"> ↩</a></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAwMjkxODEyMw==" title="https://segmentfault.com/a/1190000002918123">https://segmentfault.com/a/1190000002918123<i class="fa fa-external-link"></i></span> &quot;深入理解学习 Git 工作流（git-workflow-tutorial）&quot;<a href="#fnref:4" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>工具</tag>
        <tag>源代码管理</tag>
        <tag>团队协作</tag>
      </tags>
  </entry>
  <entry>
    <title>我的 Caddy 配置</title>
    <url>/posts/115698af.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="Caddy-服务器"><a href="#Caddy-服务器" class="headerlink" title="Caddy 服务器"></a>Caddy 服务器</h1><blockquote>
<p>这是一个 Web Server 的时代，<span class="exturl" data-url="aHR0cHM6Ly9odHRwZC5hcGFjaGUub3JnLw==" title="https://httpd.apache.org/">apache<i class="fa fa-external-link"></i></span>与<span class="exturl" data-url="aHR0cHM6Ly9uZ2lueC5vcmcv" title="https://nginx.org/">nginx<i class="fa fa-external-link"></i></span>共舞，在追求极致性能的路上，没有最高，只有更高。但这又是一个追求个性化的时代，有些 Web Server 并没有去挤“Performance 提升”这一独木桥，而是有着自己的定位，Caddy 就是这样一个开源 Web Server。</p>
</blockquote>
<blockquote>
<p>Caddy 的作者 Matt Holt 在<span class="exturl" data-url="aHR0cHM6Ly9jYWRkeXNlcnZlci5jb20v" title="https://caddyserver.com/">caddy 官网<i class="fa fa-external-link"></i></span>以及 FAQ 中对 caddy 的目标阐释如下： 其他 Web Server 为 Web 而设计，Caddy 为 human 设计。功能定位上，与经常充当最前端反向代理的 nginx 不同，caddy 致力于成为一个易用的静态 文件 Web Server。可以看出 Caddy 主打易用性，使用配置简单。并且得益于 Go 的跨平台特性，caddy 很容易的支持了三大主流平台:Windows、 Linux、Mac。在 Caddy 开发者文档中，我们可以看到 caddy 还可以在 Android(linux arm)上运行。caddy 目前版本为 0.7.1，还不稳定，且后续版本可能变化较大，甚至与前期版本不兼容，因此作者目前不推荐 caddy 在生产环境被 重度使用。</p>
</blockquote>
<blockquote>
<p>Caddy 是一个支持 HTTP/2 的跨平台 Web 服务器，使用和配置都非常简单。Caddy 支持 HTTP/2, IPv6, Markdown, WebSockets, FastCGI, 模板等等。</p>
</blockquote>
<ul>
<li>iplaysoft 介绍的<span class="exturl" data-url="aHR0cHM6Ly93d3cuaXBsYXlzb2Z0LmNvbS9jYWRkeS5odG1s" title="https://www.iplaysoft.com/caddy.html">《轻松把文件夹变成网站！使用 Caddy 服务器软件自己搭建网页形式的文件共享》<i class="fa fa-external-link"></i></span></li>
<li>小众软件<span class="exturl" data-url="aHR0cHM6Ly93d3cuYXBwaW5uLmNvbS9jYWRkeS1zZXJ2ZXIv" title="https://www.appinn.com/caddy-server/">《Caddy – 最简单的支持 HTTP/2 的网页服务器》<i class="fa fa-external-link"></i></span></li>
</ul>
<h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><ul>
<li><p>Directlink to download:<br><span class="exturl" data-url="aHR0cHM6Ly9jYWRkeXNlcnZlci5jb20vZG93bmxvYWQvZGFyd2luL2FtZDY0P3BsdWdpbnM9ZG5zLGhvb2sucGx1Z2lubG9hZGVyLGhvb2suc2VydmljZSxodHRwLmF1dGh6LGh0dHAuYXdzbGFtYmRhLGh0dHAuY2dpLGh0dHAuY29ycyxodHRwLmRhdGFkb2csaHR0cC5leHBpcmVzLGh0dHAuZmlsZW1hbmFnZXIsaHR0cC5maWx0ZXIsaHR0cC5naXQsaHR0cC5odWdvLGh0dHAuaXBmaWx0ZXIsaHR0cC5qd3QsaHR0cC5sb2dpbixodHRwLm1haWxvdXQsaHR0cC5taW5pZnksaHR0cC5wcm9tZXRoZXVzLGh0dHAucHJveHlwcm90b2NvbCxodHRwLnJhdGVsaW1pdCxodHRwLnJlYWxpcCxodHRwLnVwbG9hZCxuZXQsdGxzLmRucy5jbG91ZGZsYXJlLHRscy5kbnMuZGlnaXRhbG9jZWFuLHRscy5kbnMuZG5zaW1wbGUsdGxzLmRucy5kbnNwb2QsdGxzLmRucy5keW4sdGxzLmRucy5leG9zY2FsZSx0bHMuZG5zLmdhbmRpLHRscy5kbnMuZ29vZ2xlY2xvdWQsdGxzLmRucy5saW5vZGUsdGxzLmRucy5uYW1lY2hlYXAsdGxzLmRucy5vdmgsdGxzLmRucy5yYWNrc3BhY2UsdGxzLmRucy5yZmMyMTM2LHRscy5kbnMucm91dGU1Myx0bHMuZG5zLnZ1bHRy" title="https://caddyserver.com/download/darwin/amd64?plugins=dns,hook.pluginloader,hook.service,http.authz,http.awslambda,http.cgi,http.cors,http.datadog,http.expires,http.filemanager,http.filter,http.git,http.hugo,http.ipfilter,http.jwt,http.login,http.mailout,http.minify,http.prometheus,http.proxyprotocol,http.ratelimit,http.realip,http.upload,net,tls.dns.cloudflare,tls.dns.digitalocean,tls.dns.dnsimple,tls.dns.dnspod,tls.dns.dyn,tls.dns.exoscale,tls.dns.gandi,tls.dns.googlecloud,tls.dns.linode,tls.dns.namecheap,tls.dns.ovh,tls.dns.rackspace,tls.dns.rfc2136,tls.dns.route53,tls.dns.vultr">https://caddyserver.com/download/darwin/amd64?plugins=dns,hook.pluginloader,hook.service,http.authz,http.awslambda,http.cgi,http.cors,http.datadog,http.expires,http.filemanager,http.filter,http.git,http.hugo,http.ipfilter,http.jwt,http.login,http.mailout,http.minify,http.prometheus,http.proxyprotocol,http.ratelimit,http.realip,http.upload,net,tls.dns.cloudflare,tls.dns.digitalocean,tls.dns.dnsimple,tls.dns.dnspod,tls.dns.dyn,tls.dns.exoscale,tls.dns.gandi,tls.dns.googlecloud,tls.dns.linode,tls.dns.namecheap,tls.dns.ovh,tls.dns.rackspace,tls.dns.rfc2136,tls.dns.route53,tls.dns.vultr<i class="fa fa-external-link"></i></span></p>
</li>
<li><p>One-step installer script (bash):</p>
<p>curl<span class="exturl" data-url="aHR0cHM6Ly9nZXRjYWRkeS5jb20=" title="https://getcaddy.com">https://getcaddy.com<i class="fa fa-external-link"></i></span> | bash -sdns,hook.pluginloader,hook.service,http.authz,http.awslambda,http.cgi,http.cors,http.datadog,http.expires,http.filemanager,http.filter,http.git,http.hugo,http.ipfilter,http.jwt,http.login,http.mailout,http.minify,http.prometheus,http.proxyprotocol,http.ratelimit,http.realip,http.upload,net,tls.dns.cloudflare,tls.dns.digitalocean,tls.dns.dnsimple,tls.dns.dnspod,tls.dns.dyn,tls.dns.exoscale,tls.dns.gandi,tls.dns.googlecloud,tls.dns.linode,tls.dns.namecheap,tls.dns.ovh,tls.dns.rackspace,tls.dns.rfc2136,tls.dns.route53,tls.dns.vultr</p>
</li>
</ul>
<h1 id="我的一些配置信息"><a href="#我的一些配置信息" class="headerlink" title="我的一些配置信息"></a>我的一些配置信息</h1><p><span class="exturl" data-url="aHR0cHM6Ly9jYWRkeXNlcnZlci5jb20vZG9jcy9jYWRkeWZpbGU=" title="https://caddyserver.com/docs/caddyfile">《Caddyfile 配置官网说明》<i class="fa fa-external-link"></i></span></p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">#=&gt; Caddyfile配置 https://caddyserver.com/docs/caddyfile</span><br><span class="line">##########################</span><br><span class="line">#          多站点         #</span><br><span class="line">##########################</span><br><span class="line">#=&gt; Vue2.<span class="number">0</span>站点 → port:<span class="number">2000</span></span><br><span class="line"><span class="function">localhost:2000,</span></span><br><span class="line"><span class="function"><span class="title">https</span>://<span class="title">vue</span>-2-<span class="title">demo.com</span> &#123;</span></span><br><span class="line"><span class="function">    # 站点物理路径</span></span><br><span class="line"><span class="function">    <span class="title">root</span> ../../../<span class="title">Users</span>/<span class="title">lxbin</span>/<span class="title">Documents</span>/<span class="title">WWW</span>/<span class="title">vue</span>-2.0-<span class="title">demo</span>/<span class="title">dist</span></span></span><br><span class="line"><span class="function">    # <span class="title">log</span>日志输出路径</span></span><br><span class="line"><span class="function">    #<span class="title">log</span> ../<span class="title">log</span>/<span class="title">localhost</span>-2000.<span class="title">log</span></span></span><br><span class="line"><span class="function">    # 开启<span class="title">gzip</span></span></span><br><span class="line"><span class="function">    #<span class="title">gzip</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">#=&gt; 9<span class="title">X_WAP</span>站点 → <span class="title">port</span>:8000</span></span><br><span class="line"><span class="function"><span class="title">localhost</span>:8000,</span></span><br><span class="line"><span class="function"><span class="title">https</span>://<span class="title">m2.test.jiuxiulvxing.com</span> &#123;</span></span><br><span class="line"><span class="function">    # 站点物理路径</span></span><br><span class="line"><span class="function">    <span class="title">root</span> ../../../<span class="title">Users</span>/<span class="title">lxbin</span>/<span class="title">Documents</span>/<span class="title">WWW</span>/9<span class="title">X_WAP</span>/</span></span><br><span class="line"><span class="function">    # <span class="title">log</span>日志输出路径</span></span><br><span class="line"><span class="function">    <span class="title">log</span> ../<span class="title">log</span>/<span class="title">localhost</span>-8000.<span class="title">log</span></span></span><br><span class="line"><span class="function">    # 开启<span class="title">gzip</span></span></span><br><span class="line"><span class="function">    #<span class="title">gzip</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">##########################</span></span><br><span class="line"><span class="function">#         反向代理        #</span></span><br><span class="line"><span class="function">##########################</span></span><br><span class="line"><span class="function">#=&gt; 反向代理 → <span class="title">port</span>:80</span></span><br><span class="line"><span class="function">#<span class="title">https</span>://<span class="title">leo.xuebin.leo</span> &#123;</span></span><br><span class="line"><span class="function">#    <span class="title">proxy</span> / <span class="title">localhost</span>:80</span></span><br><span class="line"><span class="function">#    <span class="title">log</span> ../<span class="title">log</span>/<span class="title">proxy</span>-<span class="title">port</span>-80.<span class="title">log</span></span></span><br><span class="line"><span class="function">#&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">#=&gt; 反向代理 → <span class="title">port</span>:8080</span></span><br><span class="line"><span class="function">#<span class="title">https</span>://<span class="title">leo.xuebin.leo</span> &#123;</span></span><br><span class="line"><span class="function">#    <span class="title">proxy</span> / <span class="title">localhost</span>:8080</span></span><br><span class="line"><span class="function">#    <span class="title">log</span> ../<span class="title">log</span>/<span class="title">proxy</span>-<span class="title">port</span>-8080.<span class="title">log</span></span></span><br><span class="line"><span class="function">#&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">#<span class="title">https</span>://<span class="title">leo.xuebin.leo</span> &#123;</span></span><br><span class="line"><span class="function">#    <span class="title">proxy</span> / <span class="title">localhost</span>:8000</span></span><br><span class="line"><span class="function">#    <span class="title">log</span> ../<span class="title">log</span>/<span class="title">proxy</span>-<span class="title">port</span>-8000.<span class="title">log</span></span></span><br><span class="line"><span class="function">#&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">##########################</span></span><br><span class="line"><span class="function">#        文件服务器       #</span></span><br><span class="line"><span class="function">##########################</span></span><br><span class="line"><span class="function">#=&gt; 文件服务器,指定文件服务器地址</span></span><br><span class="line"><span class="function">192.168.100.126:1000</span></span><br><span class="line"><span class="function"><span class="title">filemanager</span> / &#123;</span></span><br><span class="line"><span class="function">    # 文件目录地址</span></span><br><span class="line"><span class="function">    <span class="title">show</span>        ../../../<span class="title">Users</span>/<span class="title">lxbin</span>/<span class="title">Documents</span>/<span class="title">WWW</span>/</span></span><br><span class="line"><span class="function">    # 是否可以新建</span></span><br><span class="line"><span class="function">    <span class="title">allow_new</span>   <span class="title">true</span></span></span><br><span class="line"><span class="function">    # 是否可以修改</span></span><br><span class="line"><span class="function">    <span class="title">allow_edit</span>  <span class="title">true</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">##########################</span></span><br><span class="line"><span class="function">#        异常处理         #</span></span><br><span class="line"><span class="function">##########################</span></span><br><span class="line"><span class="function"><span class="title">errors</span> &#123;</span></span><br><span class="line"><span class="function">    <span class="title">log</span> ../<span class="title">log</span>/<span class="title">error.log</span></span></span><br><span class="line"><span class="function">    404 404.<span class="title">html</span> # <span class="title">Not</span> <span class="title">Found</span></span></span><br><span class="line"><span class="function">    500 500.<span class="title">html</span> # <span class="title">Internal</span> <span class="title">Server</span> <span class="title">Error</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>服务器</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx配置杂记</title>
    <url>/posts/b4465dee.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><span class="exturl" data-url="aHR0cHM6Ly93ZW5qcy5tZS9wL25vdGUtb2YtbmdpbngtY29uZmlndXJl" title="https://wenjs.me/p/note-of-nginx-configure">Nginx 配置杂记<i class="fa fa-external-link"></i></span></p>
<a id="more"></a>
<h1 id="我的nginx-conf"><a href="#我的nginx-conf" class="headerlink" title="我的nginx.conf"></a>我的<code>nginx.conf</code></h1><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">user root owner;</span><br><span class="line">#user  nobody;</span><br><span class="line">worker_processes  <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"># pid        /logs/nginx/nginx.pid;</span><br><span class="line"></span><br><span class="line"># events-模块（工作模式&amp;连接上限）: https://www.zybuluo.com/phper/note/<span class="number">89391</span>#events-<span class="variable">%E6%</span>A8<span class="variable">%A1%</span>E5<span class="variable">%9D%</span><span class="number">97</span></span><br><span class="line">events &#123;</span><br><span class="line">    use kqueue; #mac平台</span><br><span class="line">    worker_connections  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># # 这个将为打开文件指定缓存，默认是没有启用的，max指定缓存数量，建议和打开文件数一致，inactive是指经过多长时间文件没被请求后删除缓存。</span><br><span class="line"># open_file_cache max=<span class="number">65535</span> inactive=<span class="number">60</span>s;</span><br><span class="line"># # 检查缓存有效信息的频率。</span><br><span class="line"># open_file_cache_valid <span class="number">80</span>s;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    underscores_in_headers on; # 开启变量下划线支持</span><br><span class="line"></span><br><span class="line">    client_max_body_size <span class="number">24</span>M;</span><br><span class="line">    client_body_buffer_size <span class="number">256</span>k;</span><br><span class="line"></span><br><span class="line">    # 日志格式设置: https://juejin.im/post/<span class="number">59</span>f94f626fb9a045023af34c</span><br><span class="line">    # $remote_addr             客户端地址                                    <span class="number">211</span>.<span class="number">28</span>.<span class="number">65</span>.<span class="number">253</span></span><br><span class="line">    # $remote_user             客户端用户名称                                --</span><br><span class="line">    # $time_local              访问时间和时区                                <span class="number">18</span>/Jul/<span class="number">2012</span>:<span class="number">17</span>:<span class="number">00</span>:<span class="number">01</span> +<span class="number">0800</span></span><br><span class="line">    # $request                 请求的URI和HTTP协议                           "GET /article-<span class="number">10000</span>.html HTTP/<span class="number">1</span>.<span class="number">1</span>"</span><br><span class="line">    # $http_host               请求地址，即浏览器中你输入的地址（IP或域名）       www.wang.com <span class="number">192</span>.<span class="number">168</span>.<span class="number">100</span>.<span class="number">100</span></span><br><span class="line">    # $status                  HTTP请求状态                                  <span class="number">200</span></span><br><span class="line">    # $upstream_status         upstream状态                                 <span class="number">200</span></span><br><span class="line">    # $body_bytes_sent         发送给客户端文件内容大小                        <span class="number">1547</span></span><br><span class="line">    # $http_referer            url跳转来源                                   https://www.baidu.com/</span><br><span class="line">    # $http_user_agent         用户终端浏览器等信息                           "Mozilla/<span class="number">4</span>.<span class="number">0</span> (compatible; MSIE <span class="number">8</span>.<span class="number">0</span>; Windows NT <span class="number">5</span>.<span class="number">1</span>; Trident/<span class="number">4</span>.<span class="number">0</span>; SV1; GTB7.<span class="number">0</span>; .NET4.<span class="number">0</span>C;</span><br><span class="line">    # $ssl_protocol            SSL协议版本                                   TLSv1</span><br><span class="line">    # $ssl_cipher              交换数据中的算法                               RC4-SHA</span><br><span class="line">    # $upstream_addr           后台upstream的地址，即真正提供服务的主机地址      <span class="number">10</span>.<span class="number">10</span>.<span class="number">10</span>.<span class="number">100</span>:<span class="number">80</span></span><br><span class="line">    # $request_time            整个请求的总时间                               <span class="number">0</span>.<span class="number">205</span></span><br><span class="line">    # $upstream_response_time  请求过程中，upstream响应时间                    <span class="number">0</span>.<span class="number">002</span></span><br><span class="line">    log_format  main  'remote_addr:                     $remote_addr\n'</span><br><span class="line">                        'remote_user:                   $remote_user\n'</span><br><span class="line">                        'time_local:                    $time_local\n'</span><br><span class="line">                        'request:                       $request\n'</span><br><span class="line">                        'status:                        $status\n'</span><br><span class="line">                        'body_bytes_sent:               $body_bytes_sent\n'</span><br><span class="line">                        'http_referer:                  $http_referer\n'</span><br><span class="line">                        'http_user_agent:               $http_user_agent\n'</span><br><span class="line">                        'http_x_forwarded_for:          $http_x_forwarded_for\n'</span><br><span class="line">                        'request_body:                  $request_body\n'</span><br><span class="line">                        '------------------------------------------------------------------------';</span><br><span class="line"></span><br><span class="line">    log_format  porxy  'http_x_forwarded_for:           $http_x_forwarded_for\n'</span><br><span class="line">                        'remote_user:                   $remote_user\n'</span><br><span class="line">                        'time_local:                    $time_local\n'</span><br><span class="line">                        'http_host:                     $http_host\n'</span><br><span class="line">                        'request:                       $request\n'</span><br><span class="line">                        'status:                        $status\n'</span><br><span class="line">                        'body_bytes_sent:               $body_bytes_sent\n'</span><br><span class="line">                        'http_referer:                  $http_referer\n'</span><br><span class="line">                        'http_user_agent:               $http_user_agent\n'</span><br><span class="line">                        'proxy_protocol_addr:           $proxy_protocol_addr\n'</span><br><span class="line">                        'request_body:                  $request_body\n'</span><br><span class="line">                        'porxy_url:                     $porxy_url\n'</span><br><span class="line">                        '------------------------------------------------------------------------';</span><br><span class="line"></span><br><span class="line">    log_format log404 '$status [$time_local] $remote_addr $host$request_uri $sent_http_location';</span><br><span class="line"></span><br><span class="line">    access_log  /logs/nginx/access.log  main;</span><br><span class="line">    # error_log  /logs/nginx/error.log;</span><br><span class="line">    # error_log  /logs/nginx/error.log  notice;</span><br><span class="line">    error_log  /logs/nginx/error.log  info;</span><br><span class="line"></span><br><span class="line">    access_log      on;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    # tcp_nopush     on;</span><br><span class="line">    # fastcgi_intercept_errors on;</span><br><span class="line"></span><br><span class="line">    # keepalive_timeout  <span class="number">0</span>;</span><br><span class="line">    keepalive_timeout  <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">    # # gzip压缩功能设置</span><br><span class="line">    # gzip on;</span><br><span class="line"></span><br><span class="line">    proxy_redirect off; # 关闭后端返回的header修改 </span><br><span class="line">    proxy_set_header Host $host; # 修改发送到后端的header的host </span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr; # 设置真实ip </span><br><span class="line">    proxy_set_header X-Forwarded-<span class="keyword">For</span> $proxy_add_x_forwarded_for;</span><br><span class="line">    proxy_connect_timeout <span class="number">60</span>; # 代理服务器和后端真实服务器握手连接超时时间</span><br><span class="line">    proxy_read_timeout <span class="number">600</span>; # 后端服务器回传数据给Nginx的时间，需要在设置的时间范围内发送完所有数据，否则Nginx将断开连接</span><br><span class="line">    proxy_send_timeout <span class="number">600</span>; # 代理服务器和后端服务器连接成功后，等待后端服务器响应时间</span><br><span class="line"></span><br><span class="line">    # # 负载均衡: https://www.zybuluo.com/phper/note/<span class="number">90310</span>#<span class="number">3</span><span class="variable">%E8%</span>B4<span class="variable">%9F%</span>E8<span class="variable">%BD%</span>BD<span class="variable">%E5%</span><span class="number">9</span>D<span class="variable">%87%</span>E8<span class="variable">%A1%</span>A1</span><br><span class="line">    # # 设定负载均衡后台服务器列表 </span><br><span class="line">    # upstream  backend  &#123; </span><br><span class="line">    #     #ip_hash; # 记录并访问上一次访问过的服务器</span><br><span class="line">    #     server   <span class="number">192</span>.<span class="number">168</span>.<span class="number">0</span>.<span class="number">100</span>:<span class="number">8080</span> weight=<span class="number">10</span> max_fails=<span class="number">2</span> fail_timeout=<span class="number">30</span>s;</span><br><span class="line">    #     server   <span class="number">192</span>.<span class="number">168</span>.<span class="number">0</span>.<span class="number">101</span>:<span class="number">8080</span> weight=<span class="number">10</span> max_fails=<span class="number">2</span> fail_timeout=<span class="number">30</span>s;</span><br><span class="line">    # &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       <span class="number">1024</span>;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line">        charset utf-<span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">        access_log  /logs/nginx/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        # location匹配: https://segmentfault.com/a/<span class="number">1190000013267839</span></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #error_page  <span class="number">404</span>              /<span class="number">404</span>.html;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page /<span class="number">50</span>x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span> <span class="number">404</span> <span class="number">403</span> /<span class="number">50</span>x.html;</span><br><span class="line">        location = /<span class="number">50</span>x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # # proxy the PHP scripts to Apache listening on <span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">80</span></span><br><span class="line">        # location ~ \.php$ &#123;</span><br><span class="line">        #     proxy_pass   http://<span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        #     ### 下面都是次要关注项</span><br><span class="line">        #     proxy_set_header Host $host; # 修改发送到后端的header的host </span><br><span class="line">        #     proxy_set_header X-Real-IP $remote_addr; # 设置真实ip </span><br><span class="line">        #     proxy_set_header X-Forwarded-<span class="keyword">For</span> $proxy_add_x_forwarded_for; # 经过的IP列表</span><br><span class="line">        #     proxy_method POST;</span><br><span class="line">        #     # 指定不转发的头部字段</span><br><span class="line">        #     proxy_hide_header Cache-Control;</span><br><span class="line">        #     proxy_hide_header Other-Header;</span><br><span class="line">        #     # 指定转发的头部字段</span><br><span class="line">        #     proxy_pass_header Server-IP;</span><br><span class="line">        #     proxy_pass_header Server-Name;</span><br><span class="line">        #     # 是否转发包体</span><br><span class="line">        #     proxy_pass_request_body on | off;</span><br><span class="line">        #     # 是否转发头部</span><br><span class="line">        #     proxy_pass_request_headers on | off;</span><br><span class="line">        #     # 显形/隐形 URI，上游发生重定向时，Nginx 是否同步更改 uri</span><br><span class="line">        #     proxy_redirect on | off;</span><br><span class="line">        # &#125;</span><br><span class="line">        </span><br><span class="line">        # pass the PHP scripts to FastCGI server listening on <span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">9000</span></span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    root           html;</span><br><span class="line">        #    fastcgi_pass   <span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">9000</span>;</span><br><span class="line">        #    fastcgi_index  index.php;</span><br><span class="line">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">        #    include        fastcgi_params;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # deny access to .htaccess files, <span class="keyword">if</span> Apache's document root</span><br><span class="line">        # concurs with nginx's one</span><br><span class="line">        #</span><br><span class="line">        #location ~ /\.ht &#123;</span><br><span class="line">        #    deny  all;</span><br><span class="line">        #&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       <span class="number">8000</span>;</span><br><span class="line">    #    listen       somename:<span class="number">8080</span>;</span><br><span class="line">    #    server_name  somename  alias  another.alias;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # HTTPS server</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       <span class="number">443</span> ssl;</span><br><span class="line">    #    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #    ssl_certificate      cert.pem;</span><br><span class="line">    #    ssl_certificate_key  cert.key;</span><br><span class="line"></span><br><span class="line">    #    ssl_session_cache    shared:SSL:<span class="number">1</span>m;</span><br><span class="line">    #    ssl_session_timeout  <span class="number">5</span>m;</span><br><span class="line"></span><br><span class="line">    #    ssl_ciphers  HIGH:<span class="variable">!aNULL:!</span>MD5;</span><br><span class="line">    #    ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    include servers/*;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="servers-zhaopin-conf"><a href="#servers-zhaopin-conf" class="headerlink" title="servers/zhaopin.conf"></a>servers/zhaopin.conf</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Location 配置demo</span></span><br><span class="line"><span class="comment"># https://segmentfault.com/a/1190000009651161</span></span><br><span class="line"><span class="comment"># 负载均衡: https://www.zybuluo.com/phper/note/90310#3%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># upstream  backend  &#123; </span></span><br><span class="line"><span class="comment">#     #ip_hash; # 记录并访问上一次访问过的服务器</span></span><br><span class="line"><span class="comment">#     server   192.168.0.100:8080 weight=10 max_fails=2 fail_timeout=30s;</span></span><br><span class="line"><span class="comment">#     server   192.168.0.101:8080 weight=10 max_fails=2 fail_timeout=30s;</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line"></span><br><span class="line">    server_name *.zhaopin.com;</span><br><span class="line">    resolver 127.0.0.1 ipv6=off;</span><br><span class="line"></span><br><span class="line">    access_log  /logs/nginx/<span class="variable">$http_host</span>.access.log  porxy;</span><br><span class="line">    error_log  /logs/nginx/zhaopin.error.log;</span><br><span class="line"></span><br><span class="line">    location ~ /bolemanage/(.*) &#123;</span><br><span class="line">        proxy_pass http://192.168.214.110:8089/bolemanage/<span class="variable">$1</span>?<span class="variable">$args</span>;</span><br><span class="line">        <span class="comment"># proxy_pass http://bole-api-dev.zhaopin.com/bolemanage/$1?$args;</span></span><br><span class="line"></span><br><span class="line">        proxy_set_header Host  bole-api-dev.zhaopin.com;</span><br><span class="line">        proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        resolver 127.0.0.1 ipv6=off;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$http_host</span> ~* ^(.*-<span class="built_in">local</span>)(\.zhaopin\.com)$) &#123;</span><br><span class="line">            <span class="built_in">set</span> <span class="variable">$porxy_url</span> <span class="variable">$1</span><span class="variable">$2</span>:8000;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># proxy_pass http://$porxy_url; </span></span><br><span class="line">        proxy_pass http://127.0.0.1:8000;</span><br><span class="line"></span><br><span class="line">        access_log  /logs/nginx/<span class="variable">$porxy_url</span>.access.log  porxy;</span><br><span class="line">        error_log  /logs/nginx/zhaopin-porxy_url.error.log;</span><br><span class="line"></span><br><span class="line">        proxy_set_header Host <span class="variable">$http_host</span>:8000;</span><br><span class="line">        proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page  404 403       https://github.com/404;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># server &#123;</span></span><br><span class="line"><span class="comment">#     listen 80;</span></span><br><span class="line"><span class="comment">#     server_name rd5-dev.zhaopin.com;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#     location /api/rd/rd55/head &#123;</span></span><br><span class="line"><span class="comment">#         proxy_pass http://rd5-pre.zhaopin.com;</span></span><br><span class="line"><span class="comment">#     &#125;</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># server &#123;</span></span><br><span class="line"><span class="comment">#     listen 80;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#     # 泛域名解析</span></span><br><span class="line"><span class="comment">#     server_name *.zhaopin.com;</span></span><br><span class="line"><span class="comment">#     resolver 127.0.0.1 ipv6=off;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#     # 最末级域名作为localhost端口号</span></span><br><span class="line"><span class="comment">#     if ($host ~* ^([^\.]+)\.([^\.]+\.[^\.]+)$) &#123;</span></span><br><span class="line"><span class="comment">#     set $subdomain $1;</span></span><br><span class="line"><span class="comment">#     set $domain $2;</span></span><br><span class="line"><span class="comment">#     set $porxy_url 127.0.0.1:$1;</span></span><br><span class="line"><span class="comment">#     &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#     access_log  /logs/nginx/$subdomain.zhaopin.access.log  porxy;</span></span><br><span class="line"><span class="comment">#     error_log  /logs/nginx/zhaopin.error.log;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#     location / &#123;</span></span><br><span class="line"><span class="comment">#     proxy_pass http://$porxy_url;</span></span><br><span class="line"><span class="comment">#     &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#     error_page  404 403       https://github.com/404;</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>服务器</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache</title>
    <url>/posts/d5e309c2.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><ol>
<li>登录<span class="exturl" data-url="aHR0cHM6Ly9odHRwZC5hcGFjaGUub3JnL2Rvd25sb2FkLmNnaQ==" title="https://httpd.apache.org/download.cgi">https://httpd.apache.org/download.cgi<i class="fa fa-external-link"></i></span> 这个地址<br><img src="https://hiphotos.baidu.com/exp/pic/item/734f12f3d7ca7bcbd94cbcbebd096b63f624a829.jpg" alt></li>
<li>进入如下界面后，选择第一项<code>ApacheHaus</code>，这是个第三方下载平台，在它的网站下载独立的 Apache 会是一个压缩包，第二项也是独立的 Apache 下载地址，另外三个是集成开发环境。<br><img src="https://hiphotos.baidu.com/exp/pic/item/8cf0d51349540923ed2106ef9158d109b2de4993.jpg" alt></li>
<li>在下载界面中，会发现 VC9 和 VC11 字样，通过阅读相关内容得知:<ul>
<li>VC9 是指用 VS2008 编译的</li>
<li>VC11 是指用 VS2012 编译的，<strong>VC11 无法在 windows xp 和 server 2003 中使用</strong><br><img src="https://hiphotos.baidu.com/exp/pic/item/c9d4cf43ad4bd1130b07d6a359afa40f4afb051d.jpg" alt></li>
</ul>
</li>
</ol>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><ul>
<li>进入解压后的 Apache 目录，找到 <code>~\Apache\conf\httpd.conf</code> 文件并用编辑器打开</li>
<li><p>找到 <code>Define SRVROOT</code> ，将后面的地址改成本地 Apache 安装存放的地址，例如:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Define SRVROOT &quot;c:/PortableSoft/Apache&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>找到 <code>Listene 80</code> ，若 80 端口被占用（可在 cmd 下用命令 <code>netstat -a</code> 查看），则将 80 端口改为别的</p>
</li>
<li>找到 <code>DocumentRoot</code>，将后面的地址修改为需要的 wwwroot</li>
<li>找到 <code>DirectoryIndex</code>，将后面的文件修改为需要的默认启动页面</li>
</ul>
<h1 id="安装主服务"><a href="#安装主服务" class="headerlink" title="安装主服务"></a>安装主服务</h1><ul>
<li><p>管理员打开 CMD 窗口，输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;c:\PortableSoft\Apache\bin\httpd.exe&quot; -k install -n apache</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>带有引号的</strong>。<br>该命令的意思是，安装 apache 服务，并将该服务名称命名为 apache(也可以改成别的)</p>
</blockquote>
</li>
<li>Win+R 运行输入 <code>services.msc</code>，找到刚刚安装的 apache 服务，右键属性中将<code>启动类型</code>设置为<code>手动</code></li>
<li>进入 Apache 安装目录，找到<code>c:\PortableSoft\Apache\bin\ApacheMonitor.exe</code>，运行后在系统右下角状态栏中打开窗口界面点击<code>Start</code>启动服务</li>
</ul>
<h1 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h1><ol>
<li>停止 Apache 服务</li>
<li>管理员打开 CMD 窗口，输入:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sc delete apache</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xhbnRpYW56aGFuZ2UvYXJ0aWNsZS9kZXRhaWxzLzg1OTQyMTU=" title="https://blog.csdn.net/lantianzhange/article/details/8594215">Apache 修改端口 默认路径配置修改方法<i class="fa fa-external-link"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>服务器</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>console</title>
    <url>/posts/3603cfb6.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vV2F5b3UvcC9jaHJvbWUtY29uc29sZS10aXBzLWFuZC10cmlja3MuaHRtbA==" title="https://www.cnblogs.com/Wayou/p/chrome-console-tips-and-tricks.html">https://www.cnblogs.com/Wayou/p/chrome-console-tips-and-tricks.html<i class="fa fa-external-link"></i></span></p>
<h1 id="显示信息的命令"><a href="#显示信息的命令" class="headerlink" title="显示信息的命令"></a>显示信息的命令</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>常用console命令<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">        console.log('hello');</span><br><span class="line">       console.info('信息');</span><br><span class="line">       console.error('错误');</span><br><span class="line">       console.warn('警告');</span><br><span class="line">   <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>最常用的就是console.log了。</p>
<h1 id="占位符"><a href="#占位符" class="headerlink" title="占位符"></a>占位符</h1><p>console上述的集中度支持printf的占位符格式，支持的占位符有：字符（%s）、整数（%d或%i）、浮点数（%f）和对象（%o）。<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">        console.log("%d年%d月%d日",2011,3,26);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="https://cloud.githubusercontent.com/assets/7871813/17443543/c10e7578-5b6d-11e6-9fe6-b9574597515a.png" alt></p>
<h1 id="信息分组"><a href="#信息分组" class="headerlink" title="信息分组"></a>信息分组</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>常用console命令<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      console.group("第一组信息");</span><br><span class="line">    　　　　console.log("第一组第一条:我的博客(https://www.ido321.com)");</span><br><span class="line">    　　　　console.log("第一组第二条:CSDN(https://blog.csdn.net/u011043843)");</span><br><span class="line">    　　console.groupEnd();</span><br><span class="line"></span><br><span class="line">　　    console.group("第二组信息");</span><br><span class="line">    　　　　console.log("第二组第一条:程序爱好者QQ群： 259280570");</span><br><span class="line">    　　　　console.log("第二组第二条:欢迎你加入");</span><br><span class="line">　　    console.groupEnd();</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://cloud.githubusercontent.com/assets/7871813/17443563/d824b86c-5b6d-11e6-83fa-e623693d3118.png" alt></p>
<h1 id="查看对象的信息"><a href="#查看对象的信息" class="headerlink" title="查看对象的信息"></a>查看对象的信息</h1><p>console.dir()可以显示一个对象所有的属性和方法。<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">        var info = &#123;</span><br><span class="line">            blog:"https://www.ido321.com",</span><br><span class="line">            QQGroup:259280570,</span><br><span class="line">            message:"程序爱好者欢迎你的加入"</span><br><span class="line">        &#125;;</span><br><span class="line">        console.dir(info);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="https://cloud.githubusercontent.com/assets/7871813/17443571/e6d04f34-5b6d-11e6-9ed0-6b64afd5587a.png" alt></p>
<h1 id="显示某个节点的内容"><a href="#显示某个节点的内容" class="headerlink" title="显示某个节点的内容"></a>显示某个节点的内容</h1><p>console.dirxml()用来显示网页的某个节点（node）所包含的html/xml代码。<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>常用console命令<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>我的博客：www.ido321.com<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>程序爱好者:259280570,欢迎你的加入<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">        var info = document.getElementById('info');</span><br><span class="line">        console.dirxml(info);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h1 id="判断变量是否是真"><a href="#判断变量是否是真" class="headerlink" title="判断变量是否是真"></a>判断变量是否是真</h1><p>console.assert()用来判断一个表达式或变量是否为真。如果结果为否，则在控制台输出一条相应信息，并且抛出一个异常。<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">    　　var result = 1;</span><br><span class="line">    　　console.assert( result );</span><br><span class="line">    　　var year = 2014;</span><br><span class="line">    　　console.assert(year == 2018 );</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>1是非0值，是真；而第二个判断是假，在控制台显示错误信息<br><img src="https://cloud.githubusercontent.com/assets/7871813/17443601/0c202f34-5b6e-11e6-9b50-ce0cbc843ea5.png" alt></p>
<h1 id="追踪函数的调用轨迹"><a href="#追踪函数的调用轨迹" class="headerlink" title="追踪函数的调用轨迹"></a>追踪函数的调用轨迹</h1><p>console.trace()用来追踪函数的调用轨迹。<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">    /*函数是如何被调用的，在其中加入console.trace()方法就可以了*/</span><br><span class="line">　　function add(a,b)&#123;</span><br><span class="line">        console.trace();</span><br><span class="line">　　　　return a+b;</span><br><span class="line">　　&#125;</span><br><span class="line">　　var x = add3(1,1);</span><br><span class="line">　　function add3(a,b)&#123;return add2(a,b);&#125;</span><br><span class="line">　　function add2(a,b)&#123;return add1(a,b);&#125;</span><br><span class="line">  　function add1(a,b)&#123;return add(a,b);&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="https://cloud.githubusercontent.com/assets/7871813/17443612/1b91bf50-5b6e-11e6-8bb8-2441435521bf.png" alt></p>
<h1 id="计时功能"><a href="#计时功能" class="headerlink" title="计时功能"></a>计时功能</h1><p>console.time()和console.timeEnd()，用来显示代码的运行时间。<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">　　console.time("控制台计时器一");</span><br><span class="line">　　for(var i=0;i&lt;1000;i++)&#123;</span><br><span class="line">　　　　for(var j=0;j&lt;1000;j++)&#123;&#125;</span><br><span class="line">　　&#125;</span><br><span class="line">　　console.timeEnd("控制台计时器一");</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>运行时间是38.84ms<br><img src="https://cloud.githubusercontent.com/assets/7871813/17443620/28b45d3c-5b6e-11e6-9cf4-f4fc7c6b84bf.png" alt></p>
<h1 id="console-profile-的性能分析"><a href="#console-profile-的性能分析" class="headerlink" title="console.profile()的性能分析"></a>console.profile()的性能分析</h1><p>性能分析（Profiler）就是分析程序各个部分的运行时间，找出瓶颈所在，使用的方法是console.profile()。<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">    function All() &#123;</span><br><span class="line">        alert(11);</span><br><span class="line">        for (var i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">            funcA(1000);</span><br><span class="line">        &#125;</span><br><span class="line">        funcB(10000);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function funcA(count) &#123;</span><br><span class="line">        for (var i = 0; i &lt; count; i++) &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function funcB(count) &#123;</span><br><span class="line">        for (var i = 0; i &lt; count; i++) &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    console.profile('性能分析器');</span><br><span class="line">    All();</span><br><span class="line">    console.profileEnd();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="https://cloud.githubusercontent.com/assets/7871813/17443637/438c79b4-5b6e-11e6-896a-5d9a0c5da63d.png" alt></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>前端</tag>
        <tag>javascript</tag>
        <tag>调试</tag>
      </tags>
  </entry>
  <entry>
    <title>css 代码片段</title>
    <url>/posts/809788d9.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="以下是常用的代码收集，没有任何技术含量，只是填坑的积累。转载请注明出处，谢谢。"><a href="#以下是常用的代码收集，没有任何技术含量，只是填坑的积累。转载请注明出处，谢谢。" class="headerlink" title="以下是常用的代码收集，没有任何技术含量，只是填坑的积累。转载请注明出处，谢谢。"></a>以下是常用的代码收集，没有任何技术含量，只是填坑的积累。转载请注明出处，谢谢。</h3><h4 id="1-css-2-x"><a href="#1-css-2-x" class="headerlink" title="1. css 2.x"></a>1. css 2.x</h4><ul>
<li><p>文字换行</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*强制不换行*/</span></span><br><span class="line"><span class="selector-tag">white-space</span><span class="selector-pseudo">:nowrap</span>;</span><br><span class="line"><span class="comment">/*自动换行*/</span></span><br><span class="line"><span class="selector-tag">word-wrap</span>: <span class="selector-tag">break-word</span>;</span><br><span class="line"><span class="selector-tag">word-break</span>: <span class="selector-tag">normal</span>;</span><br><span class="line"><span class="comment">/*强制英文单词断行*/</span></span><br><span class="line"><span class="selector-tag">word-break</span><span class="selector-pseudo">:break-all</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>两端对齐</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">text-align</span><span class="selector-pseudo">:justify</span>;<span class="selector-tag">text-justify</span><span class="selector-pseudo">:inter-ideogra</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbmlhby9hcmNoaXZlLzIwMTIvMDkvMDcvMjY3NDUxMS5odG1s" title="https://www.cnblogs.com/niao/archive/2012/09/07/2674511.html">去掉Webkit(chrome)浏览器中input(文本框)或textarea的黄色焦点框<i class="fa fa-external-link"></i></span></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span>,<span class="selector-tag">button</span>,<span class="selector-tag">select</span>,<span class="selector-tag">textarea</span>&#123; <span class="attribute">outline</span>:none;&#125;</span><br><span class="line"><span class="selector-tag">textarea</span>&#123; <span class="attribute">font-size</span>:<span class="number">13px</span>; <span class="attribute">resize</span>:none;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cudHVpY29vbC5jb20vYXJ0aWNsZXMvRVo3Nzdu" title="https://www.tuicool.com/articles/EZ777n">去掉chrome记住密码后自动填充表单的黄色背景<i class="fa fa-external-link"></i></span></p>
</li>
<li><p>ie6: position:fixed</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.fixed-top</span> <span class="comment">/* position fixed Top */</span>&#123;<span class="attribute">position</span>:fixed;<span class="attribute">bottom</span>:auto;<span class="attribute">top</span>:<span class="number">0</span>; &#125;</span><br><span class="line">* <span class="selector-tag">html</span> <span class="selector-class">.fixed-top</span> <span class="comment">/* IE6 position fixed Top */</span>&#123;<span class="attribute">position</span>:absolute;<span class="attribute">bottom</span>:auto;<span class="attribute">top</span>:<span class="built_in">expression</span>(eval(document.documentElement.scrollTop));&#125;</span><br><span class="line">*<span class="selector-tag">html</span>&#123;<span class="attribute">background-image</span>:<span class="built_in">url</span>(about:blank);<span class="attribute">background-attachment</span>:fixed;&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>clearfix</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>&#123;<span class="attribute">visibility</span>:hidden;<span class="attribute">display</span>:block;<span class="attribute">font-size</span>:<span class="number">0</span>;<span class="attribute">content</span>:<span class="string">" "</span>;<span class="attribute">clear</span>:both;<span class="attribute">height</span>:<span class="number">0</span>;&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span>&#123;<span class="attribute">display</span>:inline-block;&#125;</span><br><span class="line"><span class="selector-tag">html</span><span class="selector-attr">[xmlns]</span> <span class="selector-class">.clearfix</span>&#123;<span class="attribute">display</span>:block;&#125;</span><br><span class="line">* <span class="selector-tag">html</span> <span class="selector-class">.clearfix</span>&#123;<span class="attribute">height</span>:<span class="number">1%</span>;&#125;</span><br><span class="line"></span><br><span class="line">.clearfix&#123;*zoom: 1;&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>&#123;<span class="attribute">clear</span>:both;<span class="attribute">display</span>:table;<span class="attribute">content</span>:<span class="string">""</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clearfix</span>&#123;<span class="attribute">overflow</span>:hidden;<span class="attribute">_zoom</span>:<span class="number">1</span>;&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vYmxvZy1sZW8vcC8zOTU5MjE3Lmh0bWw=" title="https://www.cnblogs.com/blog-leo/p/3959217.html">https://www.cnblogs.com/blog-leo/p/3959217.html<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly93d3cuZGFxaWFuZHVhbi5jb20vMzYwNi5odG1s" title="https://www.daqianduan.com/3606.html">https://www.daqianduan.com/3606.html<i class="fa fa-external-link"></i></span></p>
</blockquote>
<ul>
<li>seperate-table</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.tab</span>&#123;<span class="attribute">border-collapse</span>:separate;<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#e0e0e0</span>;&#125;</span><br><span class="line"><span class="selector-class">.tab</span> <span class="selector-tag">th</span>,<span class="selector-class">.tab</span> <span class="selector-tag">td</span>&#123;<span class="attribute">padding</span>:<span class="number">3px</span>;<span class="attribute">font-size</span>:<span class="number">12px</span>;<span class="attribute">background</span>:<span class="number">#f5f9fb</span>;<span class="attribute">border</span>:<span class="number">1px</span> solid;<span class="attribute">border-color</span>:<span class="number">#fff</span> <span class="number">#deedf6</span> <span class="number">#deedf6</span> <span class="number">#fff</span>;&#125;</span><br><span class="line"><span class="selector-class">.tab</span> <span class="selector-tag">th</span>&#123;<span class="attribute">background</span>:<span class="number">#edf4f0</span>;&#125;</span><br><span class="line"><span class="selector-class">.tab</span> <span class="selector-tag">tr</span><span class="selector-class">.even</span> <span class="selector-tag">td</span>&#123;<span class="attribute">background</span>:<span class="number">#fff</span>;&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"tab"</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">cellpadding</span>=<span class="string">"0"</span> <span class="attr">cellspacing</span>=<span class="string">"0"</span> <span class="attr">border</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>111<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>222<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>111<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>222<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>min-height: 最小高度兼容代码</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.minheight500</span>&#123;<span class="attribute">min-height</span>:<span class="number">500px</span>;<span class="attribute">height</span>:auto <span class="meta">!important</span>;<span class="attribute">height</span>:<span class="number">500px</span>;<span class="attribute">overflow</span>:visible;&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>鼠标不允许点击</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">cursor</span><span class="selector-pseudo">:not-allowed</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>mac font: osx平台字体优化</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">font-family:"Hiragino Sans GB","Hiragino Sans GB W3",'微软雅黑';</span><br></pre></td></tr></table></figure>
<ul>
<li>文字过多后显示省略号</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.ellipsis</span>,<span class="selector-class">.ell</span>&#123;<span class="attribute">white-space</span>:nowrap;<span class="attribute">overflow</span>:hidden;<span class="attribute">text-overflow</span>:ellipsis&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-css-3"><a href="#2-css-3" class="headerlink" title="2. css 3"></a>2. css 3</h4><ul>
<li>投影</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.b</span>&#123;<span class="attribute">box-shadow</span>:inset <span class="number">1px</span> -<span class="number">1px</span> <span class="number">0</span> <span class="number">#f1f1f1</span>;<span class="attribute">text-shadow</span>:<span class="number">1px</span> <span class="number">1px</span> <span class="number">0px</span> <span class="number">#630</span>;&#125;</span><br><span class="line">filter:progid:DXImageTransform.Microsoft.gradient(enabled='true',startColorstr='#99000000',endColorstr='#99000000');background:rgba(0,0,0,.6);</span><br><span class="line"></span><br><span class="line">background:rgba(0,0,0,0.5);filter:progid:DXImageTransform.Microsoft.gradient(GradientType=0,startColorstr='#50000000',endColorstr='#50000000')\9;</span><br></pre></td></tr></table></figure>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cucWlhbmR1YW4ubmV0L3NlYXJjaC1ib3gtc3R5bGUtY3VzdG9tLXdlYmtpdC5odG1s" title="https://www.qianduan.net/search-box-style-custom-webkit.html">search占位<i class="fa fa-external-link"></i></span></li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">::-webkit-input-placeholder</span> &#123;&#125;</span><br><span class="line"><span class="selector-pseudo">::-moz-input-placeholder</span> &#123;&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:focus</span><span class="selector-pseudo">::-webkit-input-placeholder</span> &#123; <span class="attribute">color</span>: transparent; &#125;</span><br><span class="line"><span class="selector-tag">-webkit-appearance</span><span class="selector-pseudo">:none</span>;  <span class="selector-tag">google</span>边框去除</span><br><span class="line">input[type="search"]&#123;-webkit-appearance:textfield;&#125; // 去除chrome默认样式</span><br><span class="line">https://i.wanz.im/2011/02/04/remove_border_from_input_type_search/</span><br><span class="line">https://blog.csdn.net/do_it__/article/details/6789699</span><br><span class="line"><span class="selector-tag">line-height</span>: <span class="selector-tag">normal</span>; <span class="comment">/* for non-ie */</span></span><br><span class="line"><span class="selector-tag">line-height</span>: 22<span class="selector-tag">px</span>\9; <span class="comment">/* for ie */</span></span><br></pre></td></tr></table></figure>
<ul>
<li>title 换行</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&amp;#13;</span><br></pre></td></tr></table></figure>
<ul>
<li>关闭 x 符号</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&amp;#215;</span><br></pre></td></tr></table></figure>
<ul>
<li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY29sb3J6aWxsYS5jb20vZ3JhZGllbnQtZWRpdG9yLw==" title="https://www.colorzilla.com/gradient-editor/">全部浏览器的兼容代码生成<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAwMDM2MjYyMQ==" title="https://segmentfault.com/a/1190000000362621">CSS 实现 textArea 的 placeholder 换行<i class="fa fa-external-link"></i></span></p>
</li>
<li><p>阻止默认事件</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">pointer-events</span><span class="selector-pseudo">:none</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>变灰 gray</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span>&#123;</span><br><span class="line">    <span class="attribute">filter</span>: <span class="built_in">grayscale</span>(100%);</span><br><span class="line">    <span class="attribute">-webkit-filter</span>: <span class="built_in">grayscale</span>(100%);</span><br><span class="line">    <span class="attribute">-moz-filter</span>: <span class="built_in">grayscale</span>(100%);</span><br><span class="line">    <span class="attribute">-ms-filter</span>: <span class="built_in">grayscale</span>(100%);</span><br><span class="line">    <span class="attribute">-o-filter</span>: <span class="built_in">grayscale</span>(100%);</span><br><span class="line">    <span class="attribute">filter</span>: <span class="built_in">url</span>(<span class="string">"data:image/svg+xml;utf8,&lt;svg xmlns=\'https://www.w3.org/2000/svg\'&gt;&lt;filter id=\'grayscale\'&gt;&lt;feColorMatrix type=\'matrix\' values=\'0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\'/&gt;&lt;/filter&gt;&lt;/svg&gt;#grayscale"</span>);</span><br><span class="line">    <span class="attribute">filter</span>:progid:DXImageTransform.Microsoft.<span class="built_in">BasicImage</span>(grayscale=1);</span><br><span class="line">    <span class="attribute">-webkit-filter</span>: <span class="built_in">grayscale</span>(1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>firefox 阻止选中</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">-moz-user-focus</span><span class="selector-pseudo">:ignore</span>;<span class="selector-tag">-moz-user-input</span><span class="selector-pseudo">:disabled</span>;<span class="selector-tag">-moz-user-select</span><span class="selector-pseudo">:none</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>箭头</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">display</span><span class="selector-pseudo">:block</span>;<span class="selector-tag">border</span><span class="selector-pseudo">:solid</span> <span class="selector-tag">transparent</span>;<span class="selector-tag">line-height</span>: 0;<span class="selector-tag">width</span><span class="selector-pseudo">:0</span>; <span class="selector-tag">height</span><span class="selector-pseudo">:0</span>;<span class="selector-tag">border-top</span><span class="selector-pseudo">:solid</span> <span class="selector-id">#0288ce</span>;<span class="selector-tag">border-width</span><span class="selector-pseudo">:8px</span> 6<span class="selector-tag">px</span> 0 6<span class="selector-tag">px</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">border-style</span><span class="selector-pseudo">:solid</span>; <span class="selector-tag">border-width</span><span class="selector-pseudo">:7px</span>; <span class="selector-tag">border-color</span><span class="selector-pseudo">:transparent</span> <span class="selector-tag">transparent</span> <span class="selector-tag">transparent</span> <span class="selector-id">#ff7020</span>;</span><br><span class="line"><span class="selector-tag">position</span><span class="selector-pseudo">:absolute</span>;<span class="selector-tag">top</span>: 0;<span class="selector-tag">left</span>: 0;<span class="selector-tag">border-width</span><span class="selector-pseudo">:20px</span>;<span class="selector-tag">border-style</span><span class="selector-pseudo">:solid</span>;<span class="selector-tag">border-color</span>:<span class="selector-id">#d1ddde</span> <span class="selector-tag">transparent</span> <span class="selector-tag">transparent</span> <span class="selector-id">#d1ddde</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>ie6 bug测试，把border-style设为dashed.</p>
</blockquote>
<ul>
<li>取消textarea右下角可拖动手柄</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">resize</span><span class="selector-pseudo">:none</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>取消chrome form表单的聚焦边框</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span>,<span class="selector-tag">button</span>,<span class="selector-tag">select</span>,<span class="selector-tag">textarea</span>&#123;<span class="attribute">outline</span>:none&#125;</span><br><span class="line"><span class="selector-tag">textarea</span>&#123;<span class="attribute">resize</span>:none&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>取消a链接的黄色边框</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span>&#123;<span class="attribute">-webkit-tap-highlight-color</span>:<span class="built_in">rgba</span>(0,0,0,0);&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>webkit 水平居中</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">display</span><span class="selector-pseudo">:-webkit-box</span>;<span class="selector-tag">-webkit-box-pack</span><span class="selector-pseudo">:center</span>; <span class="selector-tag">-webkit-box-align</span>: <span class="selector-tag">center</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>取消chrome 搜索x提示</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=search]</span><span class="selector-pseudo">::-webkit-search-decoration</span>,</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=search]</span><span class="selector-pseudo">::-webkit-search-cancel-button</span>,</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=search]</span><span class="selector-pseudo">::-webkit-search-results-button</span>,</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=search]</span><span class="selector-pseudo">::-webkit-search-results-decoration</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjMzODEwMi9vdmVycmlkZS1icm93c2VyLWZvcm0tZmlsbGluZy1hbmQtaW5wdXQtaGlnaGxpZ2h0aW5nLXdpdGgtaHRtbC1jc3M=" title="https://stackoverflow.com/questions/2338102/override-browser-form-filling-and-input-highlighting-with-html-css">chrome取消默认黄色背景<i class="fa fa-external-link"></i></span></li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:-webkit-autofill</span> &#123;<span class="attribute">-webkit-box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0px</span> <span class="number">1000px</span> white inset;&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:-webkit-autofill</span>,</span><br><span class="line"><span class="selector-tag">textarea</span><span class="selector-pseudo">:-webkit-autofill</span>,</span><br><span class="line"><span class="selector-tag">select</span><span class="selector-pseudo">:-webkit-autofill</span> &#123;</span><br><span class="line">    <span class="attribute">-webkit-box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1000px</span> white inset;</span><br><span class="line">&#125;</span><br><span class="line">autocomplete="off"</span><br></pre></td></tr></table></figure>
<ul>
<li>手机版本网页a标记虚线框问题</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:focus</span> &#123;<span class="attribute">outline</span>:none;<span class="attribute">-moz-outline</span>:none;&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>焦点去除背景</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">-webkit-tap-highlight-color</span><span class="selector-pseudo">:rgba(255</span>, 255, 255, 0);</span><br><span class="line">-webkit-tap-highlight-color:transparent;  // i.e. Nexus5/Chrome and Kindle Fire HD 7''</span><br></pre></td></tr></table></figure>
<ul>
<li>placeholder占位符颜色自定义</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:-moz-placeholder</span> &#123;<span class="attribute">color</span>: <span class="number">#369</span>;&#125;</span><br><span class="line"><span class="selector-pseudo">::-webkit-input-placeholder</span> &#123;<span class="attribute">color</span>:<span class="number">#369</span>;&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9oaS5iYXJyZXRsZWUuY29tLzIwMTQvMDMvMzEvdGFwLWhpZ2hsaWdodC1pbi13ZWJ2aWV3Lw==" title="https://hi.barretlee.com/2014/03/31/tap-highlight-in-webview/">IOS 禁用高亮<i class="fa fa-external-link"></i></span></li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">-webkit-tap-highlight-color</span><span class="selector-pseudo">:rgba(255</span>,0,0,0<span class="selector-class">.5</span>);<span class="selector-tag">-webkit-tap-highlight-color</span><span class="selector-pseudo">:transparent</span>; <span class="comment">/* For some Androids */</span></span><br></pre></td></tr></table></figure>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cucWlhbmR1YW4ubmV0L2ludHJvZHVjZS11c2VyLXNlbGVjdC8=" title="https://www.qianduan.net/introduce-user-select/">用户不能选择元素中的任何内容<i class="fa fa-external-link"></i></span></li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">user-select</span><span class="selector-pseudo">:none</span></span><br></pre></td></tr></table></figure>
<ul>
<li>移动端H5点击阴影</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>,<span class="selector-tag">a</span>,<span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">-webkit-tap-highlight-color</span>: transparent;</span><br><span class="line">    <span class="attribute">-webkit-touch-callout</span>: none;</span><br><span class="line">    <span class="attribute">-webkit-user-select</span>: none;</span><br><span class="line">    <span class="attribute">user-select</span>:none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>IOS iframe 滚动 <span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vZmxhc2gzZC9hcmNoaXZlLzIwMTMvMDkvMjgvMzM0Mzg3Ny5odG1s" title="https://www.cnblogs.com/flash3d/archive/2013/09/28/3343877.html">滚动回弹特效<i class="fa fa-external-link"></i></span></li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">-webkit-overflow-scrolling</span><span class="selector-pseudo">:touch</span>;<span class="selector-tag">overflow-y</span><span class="selector-pseudo">:scroll</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cucWlhbmR1YW4ubmV0L2ludHJvZHVjZS11c2VyLXNlbGVjdC8=" title="https://www.qianduan.net/introduce-user-select/">禁止选中文本<i class="fa fa-external-link"></i></span></li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">-moz-user-select</span><span class="selector-pseudo">:none</span>;</span><br><span class="line"><span class="selector-tag">-webkit-user-select</span><span class="selector-pseudo">:none</span>;</span><br><span class="line"><span class="selector-tag">-ms-user-select</span><span class="selector-pseudo">:none</span>;</span><br><span class="line"><span class="selector-tag">user-select</span><span class="selector-pseudo">:none</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuemhhbmd4aW54dS5jb20vd29yZHByZXNzLzIwMTMvMTEvJUU1JUIwJThGdGlwLSVFNCVCRCVCRiVFNyU5NCVBOGNzcyVFNSVCMCU4NiVFNSU5QiVCRSVFNyU4OSU4NyVFOCVCRCVBQyVFNiU4RCVBMiVFNiU4OCU5MCVFNiVBOCVBMSVFNyVCMyU4QSVFNiVBRiU5QiVFNyU4RSVCQiVFNyU5MiU4MyVFNiU5NSU4OCVFNiU5RSU5Qy8=" title="https://www.zhangxinxu.com/wordpress/2013/11/%E5%B0%8Ftip-%E4%BD%BF%E7%94%A8css%E5%B0%86%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E6%88%90%E6%A8%A1%E7%B3%8A%E6%AF%9B%E7%8E%BB%E7%92%83%E6%95%88%E6%9E%9C/">模糊(毛玻璃)效果1<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9tYW8ubGkvY3NzMy1ibHVyLWZpbHRlci1wcmF0aWNlLw==" title="https://mao.li/css3-blur-filter-pratice/">模糊(毛玻璃)效果2<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9jb2RlcGVuLmlvL2FyaW9uYS9wZW4vZ2VGSUs=" title="https://codepen.io/ariona/pen/geFIK">模糊(毛玻璃)逼真效果<i class="fa fa-external-link"></i></span></li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.blur</span> &#123;    </span><br><span class="line">    <span class="attribute">-webkit-filter</span>: <span class="built_in">blur</span>(10px); <span class="comment">/* Chrome, Opera */</span></span><br><span class="line">       <span class="attribute">-moz-filter</span>: <span class="built_in">blur</span>(10px);</span><br><span class="line">        <span class="attribute">-ms-filter</span>: <span class="built_in">blur</span>(10px);    </span><br><span class="line">            <span class="attribute">filter</span>: <span class="built_in">blur</span>(10px);    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"mm1.jpg"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"mm1.jpg"</span> <span class="attr">class</span>=<span class="string">"blur"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>显示旋转加载图片，<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NoYWxlY2FvL2NoYWxlL2Jsb2IvbWFzdGVyL2lzY3JvbGwuanM=" title="https://github.com/chalecao/chale/blob/master/iscroll.js">下拉加载数据<i class="fa fa-external-link"></i></span></li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#pullDown</span> <span class="selector-class">.pullDownIcon</span>&#123;<span class="attribute">display</span>:inline-block;<span class="attribute">vertical-align</span>:middle;<span class="attribute">width</span>:<span class="number">40px</span>;<span class="attribute">height</span>:<span class="number">40px</span>;<span class="attribute">background</span>:<span class="built_in">url</span>(https://github.com/chalecao/chale/blob/master/pull-icon%402x.png) <span class="number">0</span> <span class="number">0</span> no-repeat;<span class="attribute">-webkit-background-size</span>:<span class="number">40px</span> <span class="number">80px</span>;<span class="attribute">background-size</span>:<span class="number">40px</span> <span class="number">80px</span>;<span class="attribute">-webkit-transition-property</span>:-webkit-transform;<span class="attribute">-webkit-transition-duration</span>:<span class="number">250ms</span>&#125;</span><br><span class="line"><span class="selector-id">#pullDown</span> <span class="selector-class">.pullDownIcon</span>&#123;<span class="attribute">-webkit-transform</span>:<span class="built_in">rotate</span>(0deg) <span class="built_in">translateZ</span>(0)&#125;</span><br><span class="line"><span class="selector-id">#pullDown</span> <span class="selector-class">.pullDownLabel</span>&#123;<span class="attribute">display</span>:inline-block;<span class="attribute">vertical-align</span>:middle;<span class="attribute">margin-left</span>:<span class="number">5px</span>;&#125;</span><br><span class="line"><span class="selector-id">#pullDown</span><span class="selector-class">.flip</span> <span class="selector-class">.pullDownIcon</span>&#123;<span class="attribute">-webkit-transform</span>:<span class="built_in">rotate</span>(-180deg) <span class="built_in">translateZ</span>(0)&#125;</span><br><span class="line"><span class="selector-id">#pullDown</span><span class="selector-class">.loading</span> <span class="selector-class">.pullDownIcon</span>&#123;<span class="attribute">background-position</span>:<span class="number">0</span> <span class="number">100%</span>;<span class="attribute">-webkit-transform</span>:<span class="built_in">rotate</span>(0deg) <span class="built_in">translateZ</span>(0);<span class="attribute">-webkit-transition-duration</span>:<span class="number">0ms</span>;<span class="attribute">-webkit-animation-name</span>:loading;<span class="attribute">-webkit-animation-duration</span>:<span class="number">2s</span>;<span class="attribute">-webkit-animation-iteration-count</span>:infinite;<span class="attribute">-webkit-animation-timing-function</span>:linear&#125;</span><br><span class="line">@-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> loading&#123;</span><br><span class="line">    <span class="selector-tag">from</span>&#123;<span class="attribute">-webkit-transform</span>:<span class="built_in">rotate</span>(0deg) <span class="built_in">translateZ</span>(0)&#125;</span><br><span class="line">    <span class="selector-tag">to</span>&#123;<span class="attribute">-webkit-transform</span>:<span class="built_in">rotate</span>(360deg) <span class="built_in">translateZ</span>(0)&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"pullDown"</span> <span class="attr">class</span>=<span class="string">"none loading"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"pullDownIcon"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"pullDownLabel"</span>&gt;</span>正在载入中...<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vYmxvZy1sZW8vcC80Mzc3MzYyLmh0bWw=" title="https://www.cnblogs.com/blog-leo/p/4377362.html">居中<i class="fa fa-external-link"></i></span></li>
</ul>
<ul>
<li>css media ：通过媒体查询为不同的设备和大小配置不同的样式。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* media */</span></span><br><span class="line"><span class="comment">/* 横屏 */</span></span><br><span class="line">@<span class="keyword">media</span> screen and (orientation:landscape)&#123;</span><br><span class="line">      </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 竖屏 */</span></span><br><span class="line">@<span class="keyword">media</span> screen and (orientation:portrait)&#123;</span><br><span class="line">      </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 窗口宽度&lt;960,设计宽度=768 */</span></span><br><span class="line">@<span class="keyword">media</span> screen and (max-width:<span class="number">959px</span>)&#123;</span><br><span class="line">      </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 窗口宽度&lt;768,设计宽度=640 */</span></span><br><span class="line">@<span class="keyword">media</span> screen and (max-width:<span class="number">767px</span>)&#123;</span><br><span class="line">      </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 窗口宽度&lt;640,设计宽度=480 */</span></span><br><span class="line">@<span class="keyword">media</span> screen and (max-width:<span class="number">639px</span>)&#123;</span><br><span class="line">      </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 窗口宽度&lt;480,设计宽度=320 */</span></span><br><span class="line">@<span class="keyword">media</span> screen and (max-width:<span class="number">479px</span>)&#123;</span><br><span class="line">      </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* windows UI 贴靠 */</span></span><br><span class="line">@<span class="keyword">media</span> screen and (-ms-view-state:snapped)&#123;</span><br><span class="line">      </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 打印 */</span></span><br><span class="line">@<span class="keyword">media</span> print&#123;</span><br><span class="line">      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9pc3V4LnRlbmNlbnQuY29tL2ZsZXhib3guaHRtbA==" title="https://isux.tencent.com/flexbox.html">flexbox<i class="fa fa-external-link"></i></span></li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.flex-cont</span>&#123;</span><br><span class="line">  <span class="comment">/*定义为flexbox的“父元素”*/</span></span><br><span class="line">  <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-flex;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="comment">/*子元素沿主轴对齐方式居中*/</span></span><br><span class="line">  <span class="attribute">-webkit-box-pack</span>: center;</span><br><span class="line">  <span class="attribute">-webkit-justify-content</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="comment">/*子元素沿侧轴对齐方式垂直居中*/</span></span><br><span class="line">  <span class="attribute">-webkit-box-align</span>: center;</span><br><span class="line">  <span class="attribute">-webkit-align-items</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="comment">/*指定主轴的伸缩流方向是纵向的*/</span></span><br><span class="line">  <span class="attribute">-webkit-box-orient</span>:vertical;</span><br><span class="line">  <span class="attribute">-webkit-box-direction</span>: normal;</span><br><span class="line">  <span class="attribute">-webkit-flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.flex-item</span>&#123;</span><br><span class="line">  <span class="comment">/*不要给flexbox里的子元素设置“margin:auto”的属性，在部分安卓机下，它会导致该元素的宽度撑开到100%占位*/</span></span><br><span class="line">  <span class="comment">/*在旧版的规范中，使用比例伸缩布局时，子元素的内容长短不同会导致无法“等分”，这个时候，我们需要给子元素设置一个“width:0%”来解决问题*/</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0%</span>;</span><br><span class="line">  <span class="comment">/*给“子元素”赋予自由伸缩的能力*/</span></span><br><span class="line">  <span class="attribute">-webkit-box-flex</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">-webkit-flex</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">flex</span>:<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*使用无衬线字体*/</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">"Helvetica Neue"</span>, Helvetica, STHeiTi, sans-serif; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*禁止长按链接与图片弹出菜单*/</span></span><br><span class="line"><span class="selector-tag">a</span>, <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">-webkit-touch-callout</span>: none; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*禁止选中文本*/</span></span><br><span class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">-webkit-user-select</span>: none; </span><br><span class="line">    <span class="attribute">user-select</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 如何禁止选中文字 */</span></span><br><span class="line"><span class="selector-class">.noselect</span> &#123;</span><br><span class="line">    <span class="attribute">-webkit-touch-callout</span>: none; <span class="comment">/* iOS Safari */</span></span><br><span class="line">    <span class="attribute">-webkit-user-select</span>: none; <span class="comment">/* Chrome/Safari/Opera */</span></span><br><span class="line">    <span class="attribute">-khtml-user-select</span>: none; <span class="comment">/* Konqueror */</span></span><br><span class="line">    <span class="attribute">-moz-user-select</span>: none; <span class="comment">/* Firefox */</span></span><br><span class="line">    <span class="attribute">-ms-user-select</span>: none; <span class="comment">/* Internet Explorer/Edge */</span></span><br><span class="line">    <span class="attribute">user-select</span>: none; <span class="comment">/* Non-prefixed version, currently not supported by any browser */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*去掉webkit默认的表单样式*/</span></span><br><span class="line"><span class="selector-tag">button</span>,<span class="selector-tag">input</span>,<span class="selector-tag">optgroup</span>,<span class="selector-tag">select</span>,<span class="selector-tag">textarea</span> &#123;</span><br><span class="line">    <span class="attribute">-webkit-appearance</span>:none; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*去掉a、input和button点击时的蓝色外边框和灰色半透明背景*/</span></span><br><span class="line"><span class="selector-tag">a</span>,<span class="selector-tag">button</span>,<span class="selector-tag">input</span>,<span class="selector-tag">optgroup</span>,<span class="selector-tag">select</span>,<span class="selector-tag">textarea</span> &#123;</span><br><span class="line">    <span class="attribute">-webkit-tap-highlight-color</span>:<span class="built_in">rgba</span>(0,0,0,0); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*修改webkit中input的planceholder样式*/</span></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">::-webkit-input-placeholder</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>:<span class="number">#ccc</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*修改webkit中focus状态下input的planceholder样式*/</span></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:focus</span><span class="selector-pseudo">::-webkit-input-placeholder</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>:<span class="number">#f00</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*禁止IOS调整字体大小*/</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">-webkit-text-size-adjust</span>: <span class="number">100%</span><span class="meta">!important</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*隐藏Android的语音输入按钮*/</span></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">::-webkit-input-speech-button</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>css</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>css</tag>
        <tag>前端</tag>
        <tag>代码</tag>
      </tags>
  </entry>
  <entry>
    <title>版本规范</title>
    <url>/posts/11f3f1e2.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>版本号由 x.y.z 三位组成，符合 <span class="exturl" data-url="aHR0cHM6Ly9zZW12ZXIub3JnL2xhbmcvemgtQ04v" title="语义化版本号">语义化版本号<i class="fa fa-external-link"></i></span> 规范：</p>
<ul>
<li>主版本号：当做了不兼容的 API 修改</li>
<li>次版本号：当做了向下兼容的功能性新增</li>
<li>修订号：当做了向下兼容的问题修正</li>
</ul>
<a id="more"></a>
<p>先行版本号及版本编译信息可以加到“主版本号.次版本号.修订号”的后面，作为延伸。</p>
]]></content>
      <categories>
        <category>规范</category>
      </categories>
      <tags>
        <tag>规范</tag>
        <tag>开发</tag>
        <tag>版本号</tag>
      </tags>
  </entry>
  <entry>
    <title>C#开发规范</title>
    <url>/posts/2c2d4cf1.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ul>
<li>类头 注释</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/*****************************************************************</span><br><span class="line">* ADD:-----------------------------------------------------------</span><br><span class="line">* VER:1.0</span><br><span class="line">* DTE:2015-4-21 10:39:36</span><br><span class="line">* ATU:作者</span><br><span class="line">* DES:说明</span><br><span class="line">* MOD:-----------------------------------------------------------</span><br><span class="line">* VER:1.1</span><br><span class="line">* DTE:2015-4-21 10:39:36</span><br><span class="line">* ATU:作者</span><br><span class="line">* DES:说明</span><br><span class="line">*****************************************************************/</span><br></pre></td></tr></table></figure>
<ul>
<li>方法 注释</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//#region 获取xxx分页数据</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 获取xxx分页数据</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="page"&gt;</span>页码<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>返回分页列表<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetPageList</span>(<span class="params"><span class="keyword">int</span> page</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//TODO：未完成</span></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="comment">//#region 代码块 - 逻辑操作</span></span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">//#endregion</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//#endregion</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Enumerate / Model 注释</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> BooleanStates&#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> output true value only</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        True,</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> output false value only</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        False,</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> output true and false value both</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        TrueFalse</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="MVC-C-框架规范"><a href="#MVC-C-框架规范" class="headerlink" title="MVC - C#框架规范"></a>MVC - C#框架规范</h2><p>-<br>-<br>-</p>
]]></content>
      <categories>
        <category>规范</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>规范</tag>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript规范</title>
    <url>/posts/29f0c2d2.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="javascript-注释"><a href="#javascript-注释" class="headerlink" title="javascript 注释"></a>javascript 注释</h2><blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9hc2suZGNsb3VkLm5ldC5jbi9hcnRpY2xlLzEyOQ==" title="https://ask.dcloud.net.cn/article/129">HBuilder 官方文档<i class="fa fa-external-link"></i></span></p>
</blockquote>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文档注释写在这里</span></span><br><span class="line"><span class="comment"> * @alias aliasName (使用@alias可以给一个变量或者函数指定一个别名，代码提示时会提示该别名)</span></span><br><span class="line"><span class="comment"> * @description 描述内容 (使用@description可以在代码提示时显示被描述变量或者函数的描述信息。)</span></span><br><span class="line"><span class="comment"> * @example 示例内容 (使用@example可以提示代码示例。)</span></span><br><span class="line"><span class="comment"> * @extends &#123;Type&#125; (使用@extends用于标识继承于某个类型。)</span></span><br><span class="line"><span class="comment"> * @param &#123;Type[,Type,...]&#125; ParameterName=[Value1|Value2[|Value3|...]] 参数描述 (使用@param可以描述一个函数的参数以及参数类型，HBuilder扩展了参数值域的写法（目前只支持字符串值域）)</span></span><br><span class="line"><span class="comment"> * @property &#123;Type[,Type,...]&#125; propertyName 属性描述 (使用@property可以描述一个对象的属性)</span></span><br><span class="line"><span class="comment"> * @constructor (使用@constructor可以标识一个函数是构造函数)</span></span><br><span class="line"><span class="comment"> * @type &#123;Type[,Type,...]&#125; (使用@type可以定义某个变量的类型)</span></span><br><span class="line"><span class="comment"> * @return &#123;Type[,Type,...]&#125; (使用@return可以描述一个对象的属性)</span></span><br><span class="line"><span class="comment"> * @throw &#123;TypeError&#125; 参数类型不匹配 (异常信息)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> item === <span class="string">'number'</span>) &#123;</span><br><span class="line">    arr.push(item)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>规范</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>前端</tag>
        <tag>javascript</tag>
        <tag>规范</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS文件结构规范</title>
    <url>/posts/38f6e70f.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="Sass-文件夹结构说明"><a href="#Sass-文件夹结构说明" class="headerlink" title="Sass 文件夹结构说明"></a>Sass 文件夹结构说明</h1><p>参考：<span class="exturl" data-url="aHR0cHM6Ly9zYXNzLWd1aWRlbGluLmVzL3poLyNzZWN0aW9uLTUz" title="https://sass-guidelin.es/zh/#section-53">https://sass-guidelin.es/zh/#section-53<i class="fa fa-external-link"></i></span></p>
<p><a href="sass.zip">下载 Sass 文件结构示例</a></p>
<h3 id="Base-文件夹"><a href="#Base-文件夹" class="headerlink" title="Base 文件夹"></a>Base 文件夹</h3><blockquote>
<p><code>base/</code>文件夹存放项目中的模板文件。在这里，可以找到重置文件、排版规范文件或者一个样式表——定义一些 HTML 元素公认的标准样式（我喜欢命名为_base.scss）。</p>
</blockquote>
<ul>
<li><strong>_base.scss</strong>:公认的标准样式</li>
<li><strong>_reset.scss</strong>:浏览器重置样式</li>
<li><strong>_animations.scss</strong>:动画</li>
<li>。。。</li>
</ul>
<h3 id="Layout-Partials-文件夹"><a href="#Layout-Partials-文件夹" class="headerlink" title="Layout / Partials 文件夹"></a>Layout / Partials 文件夹</h3><blockquote>
<p><code>layout/</code>(partials/) 文件夹存放构建网站或者应用程序使用到的布局部分。该文件夹存放网站主体（头部、尾部、导航栏、侧边栏…）的样式表、栅格系统甚至是所有表单的 CSS 样式。</p>
</blockquote>
<h3 id="Components-Modules-文件夹"><a href="#Components-Modules-文件夹" class="headerlink" title="Components / Modules 文件夹"></a>Components / Modules 文件夹</h3><blockquote>
<p>对于小型组件来说，有一个 <code>components/</code> 文件夹来存放。相对于 <code>layout/</code> 的宏观（定义全局线框结构），<code>components/</code> 更专注于局部组件。该文件夹包含各类具体模块，基本上是所有的独立模块，比如一个滑块、一个加载块、一个部件……由于整个网站或应用程序主要由微型模块构成，<code>components/</code> 中往往有大量文件。</p>
</blockquote>
<h3 id="Pages-文件夹"><a href="#Pages-文件夹" class="headerlink" title="Pages 文件夹"></a>Pages 文件夹</h3><blockquote>
<p>如果页面有特定的样式，最好将该样式文件放进 <code>pages/</code> 文件夹并用页面名字。例如，主页通常具有独特的样式，因此可以在 <code>pages/</code> 下包含一个 <code>_home.scss</code> 以实现需求。<br>取决于各自的开发流程，这些文件可以使用你自己的前缀命名，避免在最终样式表中与他人的样式表发生合并。一切完全取决于你。</p>
</blockquote>
<h3 id="Themes-文件夹"><a href="#Themes-文件夹" class="headerlink" title="Themes 文件夹"></a>Themes 文件夹</h3><blockquote>
<p>在大型网站和应用程序中，往往有多种主题。虽有多种方式管理这些主题，但是我个人更喜欢把它们存放在 <code>themes/</code> 文件夹中。</p>
</blockquote>
<h3 id="Utils-Helpers-Utilities-文件夹"><a href="#Utils-Helpers-Utilities-文件夹" class="headerlink" title="Utils / Helpers / Utilities 文件夹"></a>Utils / Helpers / Utilities 文件夹</h3><blockquote>
<p>utils/ 文件夹包含了整个项目中使用到的 Sass 辅助工具，这里存放着每一个全局变量、函数、混合宏和占位符。<br>该文件夹的经验法则是，编译后这里不应该输出任何 CSS，单纯的只是一些 Sass 辅助工具。<br>当项目体量庞大工具复杂时，通过主题而不是类型分类整理可能更有帮助，比如排版（_typography.scss）、主题（_theming.scss）等。每一个文件都包含所有的相关信息：变量、函数、混合宏和占位符。这样做可以让维护更加单，特别针对于文件较长的情况。</p>
</blockquote>
<h3 id="Vendors-文件夹"><a href="#Vendors-文件夹" class="headerlink" title="Vendors 文件夹"></a>Vendors 文件夹</h3><blockquote>
<p>最后但并非最终的是，大多数的项目都有一个 vendors/ 文件夹，用来存放所有外部库和框架（Normalize, Bootstrap, jQueryUI, FancyCarouselSliderjQueryPowered……）的 CSS 文件。将这些文件放在同一个文件中是一个很好的说明方式:”嘿，这些不是我的代码，无关我的责任。”<br>如果你重写了任何库或框架的部分，建议设置第 8 个文件夹 vendors-extensions/ 来存放，并使用相同的名字命名。<br>例如，vendors-extensions/_boostrap.scss 文件存放所有重写 Bootstrap 默认 CSS 之后的 CSS 规则。这是为了避免在原库或者框架文件中进行二次编辑——显然不是好方法。</p>
</blockquote>
<h3 id="入口文件"><a href="#入口文件" class="headerlink" title="入口文件"></a>入口文件</h3><blockquote>
<p>主文件（通常写作 main.scss）应该是整个代码库中唯一开头不用下划线命名的 Sass 文件。除 @import 和注释外，该文件不应该包含任何其他代码。</p>
</blockquote>
<hr>
<h1 id="文件引入方式："><a href="#文件引入方式：" class="headerlink" title="文件引入方式："></a>文件引入方式：</h1><p>为了保持可读性，主文件应遵守如下两种准则一种</p>
<h4 id="方式一："><a href="#方式一：" class="headerlink" title="方式一："></a>方式一：</h4><ul>
<li>每个 @import 引用一个文件；</li>
<li>每个 @import 单独一行；</li>
<li>从相同文件夹中引入的文件之间不用空行；</li>
<li>从不同文件夹中引入的文件之间用空行分隔；</li>
<li>忽略文件扩展名和下划线前缀。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">'utils/variables'</span>;</span><br><span class="line">@<span class="keyword">import</span> <span class="string">'utils/functions'</span>;</span><br><span class="line">@<span class="keyword">import</span> <span class="string">'utils/mixins'</span>;</span><br><span class="line">@<span class="keyword">import</span> <span class="string">'utils/placeholders'</span>;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">import</span> <span class="string">'vendors/bootstrap'</span>;</span><br><span class="line">@<span class="keyword">import</span> <span class="string">'vendors/jquery-ui'</span>;</span><br><span class="line">@<span class="keyword">import</span> <span class="string">'vendors-extensions/bootstrap'</span>;</span><br><span class="line">@<span class="keyword">import</span> <span class="string">'vendors-extensions/jquery-ui'</span>;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">import</span> <span class="string">'base/reset'</span>;</span><br><span class="line">@<span class="keyword">import</span> <span class="string">'base/typography'</span>;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">import</span> <span class="string">'layout/navigation'</span>;</span><br><span class="line">@<span class="keyword">import</span> <span class="string">'layout/grid'</span>;</span><br><span class="line">@<span class="keyword">import</span> <span class="string">'layout/header'</span>;</span><br><span class="line">@<span class="keyword">import</span> <span class="string">'layout/footer'</span>;</span><br><span class="line">@<span class="keyword">import</span> <span class="string">'layout/sidebar'</span>;</span><br><span class="line">@<span class="keyword">import</span> <span class="string">'layout/forms'</span>;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">import</span> <span class="string">'components/buttons'</span>;</span><br><span class="line">@<span class="keyword">import</span> <span class="string">'components/carousel'</span>;</span><br><span class="line">@<span class="keyword">import</span> <span class="string">'components/cover'</span>;</span><br><span class="line">@<span class="keyword">import</span> <span class="string">'components/dropdown'</span>;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">import</span> <span class="string">'pages/home'</span>;</span><br><span class="line">@<span class="keyword">import</span> <span class="string">'pages/contact'</span>;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">import</span> <span class="string">'themes/theme'</span>;</span><br><span class="line">@<span class="keyword">import</span> <span class="string">'themes/admin'</span>;</span><br></pre></td></tr></table></figure>
<h4 id="方式二："><a href="#方式二：" class="headerlink" title="方式二："></a>方式二：</h4><ul>
<li>每个文件夹只使用一个@import</li>
<li>每个@import 之后都断行</li>
<li>每个文件占一行</li>
<li>新的文件跟在最后的文件夹后面</li>
<li>文件扩展名都可以省略</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">'utils/variables'</span>, <span class="string">'utils/functions'</span>, <span class="string">'utils/mixins'</span>, <span class="string">'utils/placeholders'</span>;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">import</span> <span class="string">'vendors/bootstrap'</span>, <span class="string">'vendors/jquery-ui'</span>, <span class="string">'vendors-extensions/bootstrap'</span>, <span class="string">'vendors-extensions/jquery-ui'</span>;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">import</span> <span class="string">'base/reset'</span>, <span class="string">'base/typography'</span>;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">import</span> <span class="string">'layout/navigation'</span>, <span class="string">'layout/grid'</span>, <span class="string">'layout/header'</span>, <span class="string">'layout/footer'</span>, <span class="string">'layout/sidebar'</span>, <span class="string">'layout/forms'</span>;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">import</span> <span class="string">'components/buttons'</span>, <span class="string">'components/carousel'</span>, <span class="string">'components/cover'</span>, <span class="string">'components/dropdown'</span>;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">import</span> <span class="string">'pages/home'</span>, <span class="string">'pages/demo'</span>;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">import</span> <span class="string">'themes/theme'</span>, <span class="string">'themes/admin'</span>;</span><br></pre></td></tr></table></figure>
<hr>
<p>另一个有意思的方面，由业内已流行的 <span class="exturl" data-url="aHR0cHM6Ly9jc3N3aXphcmRyeS5jb20v" title="https://csswizardry.com/">Harry Roberts<i class="fa fa-external-link"></i></span>, <span class="exturl" data-url="aHR0cHM6Ly9kYXZlcnVwZXJ0LmNvbS8=" title="https://daverupert.com/">Dave Rupert<i class="fa fa-external-link"></i></span> 和 <span class="exturl" data-url="aHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS8=" title="https://css-tricks.com/">Chris Coyier<i class="fa fa-external-link"></i></span> 引起的，那就是将所有的 CSS 声明、Hack 行为和我们不支持的行为放入一个 <em>shame file</em>。该文件命名为 <code>_shame.scss</code>，在所有文件之后被引用，放在所有样式表的最后。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Nav specificity fix.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Someone used an ID in the header code (`#header a &#123;&#125;`) which trumps the</span></span><br><span class="line"><span class="comment"> * nav selectors (`.site-nav a &#123;&#125;`). Use !important to override it until I</span></span><br><span class="line"><span class="comment"> * have time to refactor the header stuff.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="selector-class">.site-nav</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#bada55</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>规范</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>css</tag>
        <tag>前端</tag>
        <tag>规范</tag>
        <tag>结构</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS选择器嵌套规范</title>
    <url>/posts/76be9b12.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><strong>应该尽可能避免选择器嵌套。</strong></p>
<h2 id="例外"><a href="#例外" class="headerlink" title="例外"></a>例外</h2><p>在最外层选择器中嵌套伪类和伪元素是被允许，也是受推荐的。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.foo</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line"></span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &amp;::before &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">'pseudo-element'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用选择器嵌套选择伪类和伪元素不仅仅有道理的（因为它的处理功能与选择器紧密相关），而且有助于保持总体的一致性。<br>当然，如果使用类似 .is-active 类名来控制当前选择器状态，也可以这样使用选择器嵌套。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.foo</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  &amp;<span class="selector-class">.is-active</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这并不是最重要的，当一个元素的样式在另一个容器中有其他指定的样式时，可以使用嵌套选择器让他们保持在同一个地方。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.foo</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.no-opacity</span> &amp; &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>规范</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>css</tag>
        <tag>前端</tag>
        <tag>规范</tag>
        <tag>选择器</tag>
      </tags>
  </entry>
  <entry>
    <title>css-声明顺序规范</title>
    <url>/posts/bf45c948.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>CSS 声明顺序以类型（position, display, colors, font, miscellaneous…）顺序排列，依赖盒模型定义顺序：由外而内。</p>
<ol>
<li>位置属性(position, top, right, z-index, display, float 等)</li>
<li>大小(width, height, padding, margin)</li>
<li>文字系列(font, line-height, letter-spacing, color- text-align 等)</li>
<li>背景(background, border 等)</li>
<li>其他(animation, transition 等)</li>
</ol>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.foo</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.5em</span>;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">background</span>: black;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://images.shejidaren.com/wp-content/uploads/2013/09/css-written-order.png" alt="css-written-order"></p>
]]></content>
      <categories>
        <category>规范</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>css</tag>
        <tag>前端</tag>
        <tag>规范</tag>
        <tag>开发</tag>
        <tag>顺序</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS MAP 规范</title>
    <url>/posts/b331d9b7.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="Maps"><a href="#Maps" class="headerlink" title="Maps"></a>Maps</h1><p>从 Sass3.3 开始，样式表作者可以使用 map 这种数据结构—— Sass 团队使 map 可以映射关联数组、哈希表甚至是 Javascript 对象。map 是一种映射任何类型键值对（可以是任何类型，包括内嵌 maps，不过不推荐这种内嵌方式）的数据结构。</p>
<p>map 的使用应该遵循下述规范：</p>
<ul>
<li>冒号(<code>:</code>)之后添加空格；</li>
<li>左开括号(<code>(</code>)要和冒号(<code>:</code>)写在同一行；</li>
<li>如果键是字符串（99% 都是字符串），则<strong>使用引号包裹起来</strong>。</li>
<li>每一个键值对单独一行；</li>
<li>每一个键值对以逗号(<code>,</code>)结尾；</li>
<li>为最后一个键值对添加<strong>尾部逗号</strong> (<code>,</code>)，方便添加新键值对、删除和重排已有键值对；</li>
<li>单独一行书写右闭括号 (<code>)</code>)；</li>
<li>右闭括号 (<code>)</code>)和分号(<code>;</code>)之间不使用空格和换行。</li>
</ul>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Yep</span></span><br><span class="line"><span class="variable">$breakpoints</span>: (</span><br><span class="line">  <span class="string">'small'</span>: <span class="number">767px</span>,</span><br><span class="line">  <span class="string">'medium'</span>: <span class="number">992px</span>,</span><br><span class="line">  <span class="string">'large'</span>: <span class="number">1200px</span>,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Nope</span></span><br><span class="line"><span class="variable">$breakpoints</span>: (</span><br><span class="line">  small: <span class="number">767px</span>,</span><br><span class="line">  medium: <span class="number">992px</span>,</span><br><span class="line">  large: <span class="number">1200px</span>,</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h1 id="调试-SASS-MAP"><a href="#调试-SASS-MAP" class="headerlink" title="调试 SASS MAP"></a>调试 SASS MAP</h1><p>如果你感到困惑并想了解 Sass 的 map 到底有怎样的魔力，请不要担心，Sass 中始终存在一个自动保存运行过程的机制。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> debug-map(<span class="variable">$map</span>) &#123;</span><br><span class="line">  @at-root &#123;</span><br><span class="line">    @<span class="keyword">debug</span>-map &#123;</span><br><span class="line">      __tostring__: inspect(<span class="variable">$map</span>);</span><br><span class="line">      __length__: length(<span class="variable">$map</span>);</span><br><span class="line">      __depth__: if(function-exists(<span class="string">'map-depth'</span>), map-depth(<span class="variable">$map</span>), null);</span><br><span class="line">      __keys__: map-keys(<span class="variable">$map</span>);</span><br><span class="line">      __properties__ &#123;</span><br><span class="line">        @<span class="keyword">each</span> <span class="variable">$key</span>, <span class="variable">$value</span> in <span class="variable">$map</span> &#123;</span><br><span class="line">          #&#123;'(' + type-of($value) + ') ' + $key&#125;: inspect($value);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果你想深入了解 map 的实现机制，可以添加下述函数。该混合宏可以自动显示 map 的运行机制。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// Compute the maximum depth of a map</span></span><br><span class="line"><span class="comment">/// @param &#123;Map&#125; $map</span></span><br><span class="line"><span class="comment">/// @return &#123;Number&#125; max depth of `$map`</span></span><br><span class="line">@function map-depth(<span class="variable">$map</span>) &#123;</span><br><span class="line">  <span class="variable">$level</span>: <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  @<span class="keyword">each</span> <span class="variable">$key</span>, <span class="variable">$value</span> in <span class="variable">$map</span> &#123;</span><br><span class="line">    @<span class="keyword">if</span> type-of(<span class="variable">$value</span>) == <span class="string">'map'</span> &#123;</span><br><span class="line">      <span class="variable">$level</span>: max(map-depth(<span class="variable">$value</span>) + <span class="number">1</span>, <span class="variable">$level</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @return <span class="variable">$level</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>规范</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>css</tag>
        <tag>前端</tag>
        <tag>规范</tag>
        <tag>开发</tag>
        <tag>map</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS列表规范</title>
    <url>/posts/500cb280.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>列表需要遵守以下规范：</p>
<ul>
<li>除非列表太长不能写在 80 字符宽度的单行中，否则应该始终单行显示；</li>
<li>除非适用于 CSS，否则应该始终使用逗号作为分隔符；</li>
<li>要么使用内联形式，要么使用多行形式；</li>
<li>始终使用括号包裹；</li>
<li>始终不要添加尾部的逗号。</li>
</ul>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Yep</span></span><br><span class="line"><span class="variable">$font-stack</span>: (<span class="string">'Helvetica'</span>, <span class="string">'Arial'</span>, sans-serif);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Yep</span></span><br><span class="line"><span class="variable">$font-stack</span>: (<span class="string">'Helvetica'</span>, <span class="string">'Arial'</span>, sans-serif);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Nope</span></span><br><span class="line"><span class="variable">$font-stack</span>: <span class="string">'Helvetica'</span> <span class="string">'Arial'</span> sans-serif;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Nope</span></span><br><span class="line"><span class="variable">$font-stack</span>: <span class="string">'Helvetica'</span>, <span class="string">'Arial'</span>, sans-serif;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Nope</span></span><br><span class="line"><span class="variable">$font-stack</span>: (<span class="string">'Helvetica'</span>, <span class="string">'Arial'</span>, sans-serif);</span><br></pre></td></tr></table></figure>
<p>当需要给列表添加一个新列表项时，请遵守其提供的 API，不要试图手动给列表添加列表项。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$shadows</span>: (<span class="number">0</span> <span class="number">42px</span> <span class="number">13.37px</span> hotpink);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Yep</span></span><br><span class="line"><span class="variable">$shadows</span>: append(<span class="variable">$shadows</span>, <span class="variable">$shadow</span>, comma);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Nope</span></span><br><span class="line"><span class="variable">$shadows</span>: <span class="variable">$shadows</span>, <span class="variable">$shadow</span>;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>规范</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>css</tag>
        <tag>前端</tag>
        <tag>规范</tag>
        <tag>开发</tag>
        <tag>列表</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS颜色规范</title>
    <url>/posts/20e869c6.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h1><blockquote>
<p>当涉及到操纵色彩时，Sass 通过提供少数的 <span class="exturl" data-url="aHR0cHM6Ly9zYXNzLWxhbmcuY29tL2RvY3VtZW50YXRpb24vU2Fzcy9TY3JpcHQvRnVuY3Rpb25zLmh0bWw=" title="https://sass-lang.com/documentation/Sass/Script/Functions.html">函数功能<i class="fa fa-external-link"></i></span>，最终成为了极具价值的助手。</p>
</blockquote>
<h2 id="颜色格式"><a href="#颜色格式" class="headerlink" title="颜色格式"></a>颜色格式</h2><p>为了尽可能简单地使用颜色，我建议颜色格式要按照以下顺序排列：</p>
<ol>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cudzMub3JnL1RSL2NzczMtY29sb3IvI3N2Zy1jb2xvcg==" title="https://www.w3.org/TR/css3-color/#svg-color">CSS 颜色关键字<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSFNMX2FuZF9IU1Y=" title="https://en.wikipedia.org/wiki/HSL_and_HSV">HSL 值<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvUkdCX2NvbG9yX21vZGVs" title="https://en.wikipedia.org/wiki/RGB_color_model">RGB 值<i class="fa fa-external-link"></i></span></li>
<li>十六进制。小写并尽可能简写</li>
</ol>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Yep</span></span><br><span class="line"><span class="selector-class">.foo</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Nope</span></span><br><span class="line"><span class="selector-class">.foo</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ff0000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Yep</span></span><br><span class="line"><span class="selector-class">.foo</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ebc</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Nope</span></span><br><span class="line"><span class="selector-class">.foo</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#eebbcc</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 HSL 值或者 RGB 值，通常在逗号 (,)后面追加一个空格，而不在前后括号 ((, )) 和值之间添加空格。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Yep</span></span><br><span class="line"><span class="selector-class">.foo</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span><br><span class="line">  <span class="attribute">background</span>: hsl(<span class="number">300</span>, <span class="number">100%</span>, <span class="number">100%</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Nope</span></span><br><span class="line"><span class="selector-class">.foo</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span><br><span class="line">  <span class="attribute">background</span>: hsl(<span class="number">300</span>, <span class="number">100%</span>, <span class="number">100%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="颜色和变量"><a href="#颜色和变量" class="headerlink" title="颜色和变量"></a>颜色和变量</h2><p>当一个颜色被多次调用时，最好用一个有意义的变量名来保存它。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sass-pink</span>: <span class="number">#c69</span>;</span><br><span class="line"><span class="attribute">color</span>: <span class="variable">$sass-pink</span>;</span><br></pre></td></tr></table></figure>
<p>不过，如果你是在一个主题中使用，我不建议固定的使用这个变量。相反，可以使用另一个标识方式的变量来保存它。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$main-theme-color</span>: <span class="variable">$sass-pink</span>;</span><br></pre></td></tr></table></figure>
<h2 id="变亮和变暗颜色"><a href="#变亮和变暗颜色" class="headerlink" title="变亮和变暗颜色"></a>变亮和变暗颜色</h2><p><code>lighten</code> 和 <code>darken</code> 函数都是通过增加或者减小 HSL 中颜色的亮度来实现调节的。基本上，它们就是 <span class="exturl" data-url="aHR0cHM6Ly9zYXNzLWxhbmcuY29tL2RvY3VtZW50YXRpb24vU2Fzcy9TY3JpcHQvRnVuY3Rpb25zLmh0bWwjYWRqdXN0X2NvbG9yLWluc3RhbmNlX21ldGhvZA==" title="https://sass-lang.com/documentation/Sass/Script/Functions.html#adjust_color-instance_method"><code>adjust-color</code><i class="fa fa-external-link"></i></span> 函数添加了 <code>$lightness</code> 参数的别名。<br>另一方面，通过混合 <code>白色</code> 或 <code>黑色</code> 实现变量或变暗的 <span class="exturl" data-url="aHR0cHM6Ly9zYXNzLWxhbmcuY29tL2RvY3VtZW50YXRpb24vU2Fzcy9TY3JpcHQvRnVuY3Rpb25zLmh0bWwjbWl4LWluc3RhbmNlX21ldGhvZA==" title="https://sass-lang.com/documentation/Sass/Script/Functions.html#mix-instance_method"><code>mix</code><i class="fa fa-external-link"></i></span> 函数，是一个不错的方法。</p>
<blockquote>
<p>使用 <code>mix</code> 的好处是，当你降低颜色的比例时，它会渐进的接近黑色（或者白色），而 <code>darken</code> 和 <code>lighten</code> 立即变换颜色到黑色或白色。具体差异可以查看 <span class="exturl" data-url="aHR0cHM6Ly9jb2RlcGVuLmlvL0thdGllSzIvcGVuL3Rlamh6Lw==" title="https://codepen.io/KatieK2/pen/tejhz/"><code>KatieK</code><i class="fa fa-external-link"></i></span>。</p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// Slightly lighten a color</span></span><br><span class="line"><span class="comment">/// @access public</span></span><br><span class="line"><span class="comment">/// @param &#123;Color&#125; $color - color to tint</span></span><br><span class="line"><span class="comment">/// @param &#123;Number&#125; $percentage - percentage of `$color` in returned color</span></span><br><span class="line"><span class="comment">/// @return &#123;Color&#125;</span></span><br><span class="line">@function tint(<span class="variable">$color</span>, <span class="variable">$percentage</span>) &#123;</span><br><span class="line">  @return mix(white, <span class="variable">$color</span>, <span class="variable">$percentage</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Slightly darken a color</span></span><br><span class="line"><span class="comment">/// @access public</span></span><br><span class="line"><span class="comment">/// @param &#123;Color&#125; $color - color to shade</span></span><br><span class="line"><span class="comment">/// @param &#123;Number&#125; $percentage - percentage of `$color` in returned color</span></span><br><span class="line"><span class="comment">/// @return &#123;Color&#125;</span></span><br><span class="line">@function shade(<span class="variable">$color</span>, <span class="variable">$percentage</span>) &#123;</span><br><span class="line">  @return mix(black, <span class="variable">$color</span>, <span class="variable">$percentage</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>规范</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>css</tag>
        <tag>前端</tag>
        <tag>规范</tag>
        <tag>开发</tag>
        <tag>颜色</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS数字规范</title>
    <url>/posts/17bad6b6.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><ol>
<li><p>当数字小于 1 时，省略小数的 0</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Yep</span></span><br><span class="line"><span class="selector-class">.foo</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">2em</span>;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Nope</span></span><br><span class="line"><span class="selector-class">.foo</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">2em</span>;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>当定义长度时，0 后面不需要加单位</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Yep</span></span><br><span class="line"><span class="variable">$length</span>: <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Nope</span></span><br><span class="line"><span class="variable">$length</span>: <span class="number">0em</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>给数字添加单位，可以让该数值乘以 <code>1</code> 个单位，也可以加上一个 <code>0unit</code></p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$value</span>: <span class="number">42</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Yep</span></span><br><span class="line"><span class="variable">$length</span>: <span class="variable">$value</span> * <span class="number">1px</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Nope</span></span><br><span class="line"><span class="variable">$length</span>: <span class="variable">$value</span> + px;</span><br></pre></td></tr></table></figure>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$value</span>: <span class="number">42</span> + <span class="number">0px</span>;</span><br><span class="line"><span class="comment">// -&gt; 42px</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$value</span>: <span class="number">1in</span> + <span class="number">0px</span>;</span><br><span class="line"><span class="comment">// -&gt; 1in</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$value</span>: <span class="number">0px</span> + <span class="number">1in</span>;</span><br><span class="line"><span class="comment">// -&gt; 96px</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>删除一个值的单位，可以除以<em>相同类型</em>的 <code>1</code> 单位。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$length</span>: <span class="number">42px</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Yep</span></span><br><span class="line"><span class="variable">$value</span>: <span class="variable">$length</span> / <span class="number">1px</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Nope</span></span><br><span class="line"><span class="variable">$value</span>: str-slice(<span class="variable">$length</span> + unquote(<span class="string">''</span>), <span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h1><p><strong>最高级运算应该始终被包裹在括号中。</strong>这么做不仅是为了提高可读性，也是为了防止一些 Sass 强制要求对括号内内容计算的极端情况。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Yep</span></span><br><span class="line"><span class="selector-class">.foo</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: (<span class="number">100%</span> / <span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Nope</span></span><br><span class="line"><span class="selector-class">.foo</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span> / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="幻数（MAGIC-NUMBERS）"><a href="#幻数（MAGIC-NUMBERS）" class="headerlink" title="幻数（MAGIC NUMBERS）"></a>幻数（MAGIC NUMBERS）</h1><p>“幻数”，是<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTWFnaWNfbnVtYmVyXyhwcm9ncmFtbWluZykjVW5uYW1lZF9udW1lcmljYWxfY29uc3RhbnRzJnF1b3Q7Jmd0O+WPpOiAgeeahOWtpuagoee8lueoi+e7meacquWRveWQjeaVsOWAvOW4uOaVsOeahOWRveWQjeOAguWfuuacrOS4iu+8jOWug+S7rOWPquaYr+iDveW3peS9nOKEouS9huayoeacieS7u+S9lemAu+i+keaAnee7tOeahOmaj+acuuaVsOOAgg==" title="https://en.wikipedia.org/wiki/Magic_number_(programming)#Unnamed_numerical_constants&quot;&gt;古老的学校编程给未命名数值常数的命名。基本上，它们只是能工作™但没有任何逻辑思维的随机数。">https://en.wikipedia.org/wiki/Magic_number_(programming)#Unnamed_numerical_constants&quot;&gt;古老的学校编程给未命名数值常数的命名。基本上，它们只是能工作™但没有任何逻辑思维的随机数。<i class="fa fa-external-link"></i></span></p>
<p>相信不用多说你也会理解，幻数是一场瘟疫，应不惜一切代价以避免。当你对数值的解析方式无法找到一个合理解释时，你可以对此提交一个内容宽泛的评论，包括你是怎样遇见这个问题以及你认为它应该怎样工作。承认自己不清楚一些机制的解析方式，远比让以后的开发者从零开始弄清它们更有帮助。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1\. Magic number. This value is the lowest I could find to align the top of</span></span><br><span class="line"><span class="comment"> * `.foo` with its parent. Ideally, we should fix it properly.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="selector-class">.foo</span> &#123;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0.327em</span>; <span class="comment">/* 1 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>规范</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>css</tag>
        <tag>前端</tag>
        <tag>规范</tag>
        <tag>开发</tag>
        <tag>数字</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS字符串规范</title>
    <url>/posts/c8935431.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>字符串、URL 应该始终被<strong>单引号(‘)</strong>所包裹，<em>initial</em> 或 <em>sans-serif</em> 的专用名词无须引用起来</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Yep</span></span><br><span class="line"><span class="variable">$direction</span>: <span class="string">'left'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Nope</span></span><br><span class="line"><span class="variable">$direction</span>: left;</span><br></pre></td></tr></table></figure>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Yep</span></span><br><span class="line"><span class="selector-class">.foo</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: url(<span class="string">'/images/kittens.jpg'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Nope</span></span><br><span class="line"><span class="selector-class">.foo</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: url(/images/kittens.jpg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Yep</span></span><br><span class="line"><span class="variable">$font-type</span>: sans-serif;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Nope</span></span><br><span class="line"><span class="variable">$font-type</span>: <span class="string">'sans-serif'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Okay I guess</span></span><br><span class="line"><span class="variable">$font-type</span>: unquote(<span class="string">'sans-serif'</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Okay</span></span><br><span class="line">@<span class="keyword">warn</span> <span class="string">'You can\'t do that.'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Okay</span></span><br><span class="line">@<span class="keyword">warn</span> <span class="string">"You can't do that."</span>;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>规范</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>css</tag>
        <tag>前端</tag>
        <tag>规范</tag>
        <tag>开发</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>css规范札记</title>
    <url>/posts/67ebcaa3.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="web-前端规范-CSS"><a href="#web-前端规范-CSS" class="headerlink" title="web 前端规范-CSS"></a>web 前端规范-CSS</h1><blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cua2FuY2xvdWQuY24va2FuY2xvdWQvc2Fzcy1ndWlkZWxpbi80ODA5Ng==" title="https://www.kancloud.cn/kancloud/sass-guidelin/48096">参考 Sass Guidelines（中文版）<i class="fa fa-external-link"></i></span></p>
</blockquote>
<h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p>为了避免潜在的字符编码问题，强力建议在入口文件中通过 <code>@charset</code> 指令使用 <strong>UTF-8</strong> 编码格式。请确保该指令是文件的第一条语句，并排除其他字符编码声明。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">charset</span> <span class="string">'utf-8'</span>;</span><br></pre></td></tr></table></figure>
<h2 id="CSS-的权重"><a href="#CSS-的权重" class="headerlink" title="CSS 的权重"></a>CSS 的权重</h2><ol>
<li>通配选择符的权值 0,0,0,0</li>
<li>标签的权值为 0,0,0,1</li>
<li>类的权值为 0,0,1,0</li>
<li>属性选择的权值为 0,0,1,0</li>
<li>伪类选择的权值为 0,0,1,0</li>
<li>伪对象选择的权值为 0,0,0,1</li>
<li>ID 的权值为 0,1,0,0</li>
<li>important 的权值为最高 1,0,0,0</li>
</ol>
<blockquote>
<p>比较同一级别的个数，数量多的优先级高，如果相同即比较下一级别的个数。<br><strong>important &gt; 内联 &gt; ID &gt; 类 &gt; 标签 | 伪类 | 属性选择 &gt; 伪对象 &gt; 通配符 &gt; 继承</strong></p>
</blockquote>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuemhhbmd4aW54dS5jb20vc3R1ZHkvMjAxMjA4LzI1Ni1jbGFzcy1maXJlLWFuLWlkLmh0bWw=" title="https://www.zhangxinxu.com/study/201208/256-class-fire-an-id.html">256 个 class 类名选择器干掉一个 id 选择器实例<i class="fa fa-external-link"></i></span> ~所有的类名(classes)都是以<strong>8 字节字符串</strong>存储的，8 字节所能 hold 的最大值就是 255，超过势必会越过其边缘~</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9DU1MvV3JpdGluZ19FZmZpY2llbnRfQ1NTP3JlZGlyZWN0bG9jYWxlPWVuLVVTJmFtcDtyZWRpcmVjdHNsdWc9V3JpdGluZ19FZmZpY2llbnRfQ1NT" title="https://developer.mozilla.org/en-US/docs/CSS/Writing_Efficient_CSS?redirectlocale=en-US&amp;redirectslug=Writing_Efficient_CSS">CSS 选择器的 <strong>效率</strong> 从高到低<i class="fa fa-external-link"></i></span>：<ol>
<li>id 选择器（#myid）</li>
<li>类选择器（.myclassname）</li>
<li>标签选择器（div,h1,p）</li>
<li>相邻选择器（h1+p）</li>
<li>子选择器（ul &lt; li）</li>
<li>后代选择器（li a）</li>
<li>通配符选择器（*）</li>
<li>属性选择器（a[rel=”external”]）</li>
<li>伪类选择器（a:hover,li:nth-child）</li>
</ol>
</li>
</ul>
<h2 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h2><p>就变量、函数和混合宏的命名而言，我们坚持一些很 <em>CSS-y</em> 的风格：<strong>小写连字符分隔</strong>，有意义的命名。<code>组件</code>命名参考<span class="exturl" data-url="aHR0cHM6Ly93d3cudzNjcGx1cy5jb20vY3NzL2JlbS1kZWZpbml0aW9ucy5odG1s" title="https://www.w3cplus.com/css/bem-definitions.html">BEM 原则<i class="fa fa-external-link"></i></span></p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$vertical-rhythm-baseline</span>: <span class="number">1.5rem</span>;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">mixin</span> size(<span class="variable">$width</span>, <span class="variable">$height</span>: <span class="variable">$width</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@function opposite-direction(<span class="variable">$direction</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>常量</code>建议使用全大写方式书写</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Yep</span></span><br><span class="line"><span class="variable">$CSS_POSITIONS</span>: (top, right, bottom, left, center);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Nope</span></span><br><span class="line"><span class="variable">$css-positions</span>: (top, right, bottom, left, center);</span><br></pre></td></tr></table></figure>
<p><code>组件</code>命名应该遵循<span class="exturl" data-url="aHR0cHM6Ly93d3cudzNjcGx1cy5jb20vY3NzL2JlbS1kZWZpbml0aW9ucy5odG1s" title="https://www.w3cplus.com/css/bem-definitions.html"><code>BEM原则</code><i class="fa fa-external-link"></i></span>：<code>块（Block）</code>、<code>元素（Element）</code>、<code>修饰符（Modifier）</code></p>
<p><img src="https://cdn.w3cplus.com/cdn/farfuture/SjMOzHw07la3xkBreWf6gZtxX_2u-jE7FkAAvU-7CVw/mtime:1421035089/sites/default/files/styles/print_image/public/blogs/2013/Definitions-BEM-7.jpg" alt="示例图片1"></p>
<p><img src="https://images2015.cnblogs.com/blog/642545/201607/642545-20160713170532404-1397761839.png" alt="示例图片2"></p>
<p><strong>块</strong> 是一个独立的实体，既可以是简单的也可以是复合的（包含其他块）。块使用顶级类名<em>(多个单词的长名称使用<code>一个连字符(-)</code>连接)</em></p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">//组件块</span></span><br><span class="line"><span class="selector-class">.menu-tabs</span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p><strong>元素</strong> 是块的一部分，具有某种功能。元素是依赖上下文的：它们只有处于他们应该属于的块的上下文中时才是有意义的。使用<code>两个下划线(__)</code>来分隔块名和元素名</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">//构成 .menu-tabs 的一个子元素</span></span><br><span class="line"><span class="selector-class">.menu-tabs__tab1</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>修饰符</strong> 作为一个块或是一个元素的一种属性，代表这个块或这个元素在外观或是行为上的改变。使用<code>两个连字符(--)</code>来分隔块名（或元素名）和修饰符名</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">//.menu-tabs__tab1 的某个不同状态或版本</span></span><br><span class="line"><span class="selector-class">.menu-tabs__tab1--active</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="CSS-属性"><a href="#CSS-属性" class="headerlink" title="CSS 属性"></a>CSS 属性</h2><ol>
<li>使用(2/4)空格代表缩进，而不是使用 tab 键</li>
<li>理想上，每行保持为 80 个字符宽度</li>
<li>正确书写多行 CSS 规则</li>
<li>有意义的使用空格、换行</li>
<li>相关联的选择器写在同一行；不相关联选择器分行书写</li>
<li>最后一个选择器和左开大括号({)中间书写一个空格</li>
<li>每个声明单独一行</li>
<li>冒号(:)后添加空格</li>
<li>所有声明的尾部都添加一个分号 (;)</li>
<li>右闭大括号(})单独一行</li>
<li>右闭大括号(})后添加空行</li>
</ol>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Yep</span></span><br><span class="line"><span class="selector-class">.foo</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">1em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Nope</span></span><br><span class="line"><span class="selector-class">.foo</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">1em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Yep</span></span><br><span class="line"><span class="selector-class">.foo</span>,</span><br><span class="line"><span class="selector-class">.foo-bar</span>,</span><br><span class="line"><span class="selector-class">.baz</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Nope</span></span><br><span class="line"><span class="selector-class">.foo</span>,</span><br><span class="line"><span class="selector-class">.foo-bar</span>,</span><br><span class="line"><span class="selector-class">.baz</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>添加与 CSS 相关的规范时，我们需要注意：</p>
<ul>
<li>本地变量在其他任何变量之前声明，并和其他声明用空行分隔开；</li>
<li>不需 @content 的混合宏在放在其他声明之前；</li>
<li>嵌套选择器在新行声明；</li>
<li>需要 @content 的混合宏在嵌套选择器后声明；</li>
<li>右闭大括号(})上一行无需空行；</li>
</ul>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.foo</span>,</span><br><span class="line"><span class="selector-class">.foo-bar</span>,</span><br><span class="line"><span class="selector-class">.baz</span> &#123;</span><br><span class="line">  <span class="variable">$length</span>: <span class="number">42em</span>;</span><br><span class="line"></span><br><span class="line">  @<span class="keyword">include</span> ellipsis;</span><br><span class="line">  @<span class="keyword">include</span> size(<span class="variable">$length</span>);</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line"></span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @<span class="keyword">include</span> respond-to(<span class="string">'small'</span>) &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: visible;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>在代码完成之时立即注释</p>
<ul>
<li>一个文件的结构或者作用；</li>
<li>规则集的目标；</li>
<li>使用幻数背后的目的；</li>
<li>CSS 声明的原因；</li>
<li>CSS 声明的顺序；</li>
<li>方法执行背后的逻辑思维。</li>
</ul>
<h5 id="CSS-文件开头或核心块，使用多行注释："><a href="#CSS-文件开头或核心块，使用多行注释：" class="headerlink" title="CSS 文件开头或核心块，使用多行注释："></a>CSS 文件开头或核心块，使用多行注释：</h5><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Helper class to truncate and add ellipsis to a string too long for it to fit</span></span><br><span class="line"><span class="comment"> * on a single line.</span></span><br><span class="line"><span class="comment"> * 1\. Prevent content from wrapping, forcing it on a single line.</span></span><br><span class="line"><span class="comment"> * 2\. Add ellipsis at the end of the line.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="selector-class">.ellipsis</span> &#123;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap; <span class="comment">/* 1 */</span></span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis; <span class="comment">/* 2 */</span></span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="当注释-Sass-的一个特定部分时，使用单行注释："><a href="#当注释-Sass-的一个特定部分时，使用单行注释：" class="headerlink" title="当注释 Sass 的一个特定部分时，使用单行注释："></a>当注释 Sass 的一个特定部分时，使用单行注释：</h5><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Add current module to the list of imported modules.</span></span><br><span class="line"><span class="comment">// `!global` flag is required so it actually updates the global variable.</span></span><br><span class="line"><span class="variable">$imported-modules</span>: append(<span class="variable">$imported-modules</span>, <span class="variable">$module</span>) !global;</span><br></pre></td></tr></table></figure>
<h5 id="每一个旨在代码库中复用的变量、函数、混合宏和占位符，都应该使用-SassDoc-记录下来作为全部-API-的一部分。"><a href="#每一个旨在代码库中复用的变量、函数、混合宏和占位符，都应该使用-SassDoc-记录下来作为全部-API-的一部分。" class="headerlink" title="每一个旨在代码库中复用的变量、函数、混合宏和占位符，都应该使用 SassDoc 记录下来作为全部 API 的一部分。"></a>每一个旨在代码库中复用的变量、函数、混合宏和占位符，都应该使用 <span class="exturl" data-url="aHR0cHM6Ly9zYXNzZG9jLmNvbS8=" title="https://sassdoc.com/">SassDoc<i class="fa fa-external-link"></i></span> 记录下来作为全部 API 的一部分。</h5><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// Vertical rhythm baseline used all over the code base.</span></span><br><span class="line"><span class="comment">/// @type Length</span></span><br><span class="line"><span class="variable">$vertical-rhythm-baseline</span>: <span class="number">1.5rem</span>;</span><br></pre></td></tr></table></figure>
<p>SassDoc 需要三个反斜杠(<code>/</code>)，主要有两个作用：</p>
<ul>
<li>作为公有或私有 API 的一部分，在所有的地方使用一个注释系统强制标准化注释。</li>
<li>通过使用任意的 SassDoc 终端(CLI tool, Grunt, Gulp, Broccoli, Node…)，能够生成 API 文档的 HTML 版本。</li>
</ul>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// Mixin helping defining both `width` and `height` simultaneously.</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// @author Hugo Giraudel</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// @access public</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// @param &#123;Length&#125; $width - Element’s `width`</span></span><br><span class="line"><span class="comment">/// @param &#123;Length&#125; $height ($width) - Element’s `height`</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// @example scss - Usage</span></span><br><span class="line"><span class="comment">///   .foo &#123;</span></span><br><span class="line"><span class="comment">///     @include size(10em);</span></span><br><span class="line"><span class="comment">///   &#125;</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">///   .bar &#123;</span></span><br><span class="line"><span class="comment">///     @include size(100%, 10em);</span></span><br><span class="line"><span class="comment">///   &#125;</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// @example css - CSS output</span></span><br><span class="line"><span class="comment">///   .foo &#123;</span></span><br><span class="line"><span class="comment">///     width: 10em;</span></span><br><span class="line"><span class="comment">///     height: 10em;</span></span><br><span class="line"><span class="comment">///   &#125;</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">///   .bar &#123;</span></span><br><span class="line"><span class="comment">///     width: 100%;</span></span><br><span class="line"><span class="comment">///     height: 10em;</span></span><br><span class="line"><span class="comment">///   &#125;</span></span><br><span class="line">@<span class="keyword">mixin</span> size(<span class="variable">$width</span>, <span class="variable">$height</span>: <span class="variable">$width</span>) &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">$width</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="variable">$height</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h2><p><strong>媒体查询紧贴选择器</strong></p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.foo</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line"></span><br><span class="line">  @<span class="keyword">include</span> respond-to(<span class="string">'medium'</span>) &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>生成结果：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.foo</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> (min-width: <span class="number">800px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.foo</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>规范</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>css</tag>
        <tag>前端</tag>
        <tag>规范</tag>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS命名规范</title>
    <url>/posts/f8657958.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="web-前端命名规范"><a href="#web-前端命名规范" class="headerlink" title="web 前端命名规范"></a>web 前端命名规范</h1><p><img src="https://p3.pstatp.com/large/ba2000945a2fea407c2" alt></p>
<blockquote>
<p>web 语义化：</p>
<ol>
<li><strong>标签语义化</strong>，如在合适的地方用合适的语义化标签，如头部可用<code>&lt;header&gt;</code>、尾部可用<code>&lt;footer&gt;</code>；</li>
<li><strong>命名语义化</strong>，包括 html 的 id 和 class 的命名，javascript 相关命名；如#header{}、.footer{}、等。</li>
</ol>
</blockquote>
<p><em>下面是常见的命名参考规范：</em></p>
<h2 id="主体"><a href="#主体" class="headerlink" title="主体"></a>主体</h2><ul>
<li>头部：<code>header</code></li>
<li>内容：<code>content/container</code></li>
<li>尾部：<code>footer</code></li>
<li>导航：<code>nav</code></li>
<li>侧栏：<code>sidebar</code></li>
<li>栏目：<code>column</code></li>
<li>整体布局：<code>wrapper</code></li>
<li>左右中：<code>left / right / center</code></li>
<li>登录条：<code>loginbar</code></li>
<li>标志：<code>logo</code></li>
<li>广告：<code>banner</code></li>
<li>页面主体：<code>main</code></li>
<li>热点：<code>hot</code></li>
<li>新闻：<code>news</code></li>
<li>下载：<code>download</code></li>
<li>子导航：<code>subnav</code></li>
<li>菜单：<code>menu</code></li>
<li>子菜单：<code>submenu</code></li>
<li>搜索：<code>search</code></li>
<li>友情链接：<code>friendlink</code></li>
<li>页脚：<code>footer</code></li>
<li>版权：<code>copyright</code></li>
<li>滚动：<code>scroll</code></li>
<li>标签页：<code>tab</code></li>
<li>文章列表：<code>list</code></li>
<li>提示信息：<code>msg</code></li>
<li>小技巧：<code>tips</code></li>
<li>栏目标题：<code>title</code></li>
<li>加入：<code>join</code></li>
<li>指南：<code>guild</code></li>
<li>服务：<code>service</code></li>
<li>注册：<code>regsiter</code></li>
<li>状态：<code>status</code></li>
<li>投票：<code>vote</code></li>
<li>合作伙伴：<code>partner</code></li>
</ul>
<h2 id="css-注释的写法"><a href="#css-注释的写法" class="headerlink" title="css 注释的写法"></a>css 注释的写法</h2><p>如内容区，Html 注释的写法 ：<code>&lt;!--header头部-- &gt;</code><br><img src="https://p1.pstatp.com/large/bdc00029cab87400452" alt></p>
<h2 id="id-的命名规范"><a href="#id-的命名规范" class="headerlink" title="id 的命名规范"></a>id 的命名规范</h2><ol>
<li>页面结构<ul>
<li>容器: <code>container</code></li>
<li>页头：<code>header</code></li>
<li>内容：<code>content/container</code></li>
<li>页面主体：<code>main</code></li>
<li>页尾：<code>footer</code></li>
<li>导航：<code>nav</code></li>
<li>侧栏：<code>sidebar</code></li>
<li>栏目：<code>column</code></li>
<li>页面外围控制整体布局宽度：<code>wrapper</code></li>
<li>左右中：<code>left right center</code></li>
</ul>
</li>
<li>导航<ul>
<li>导航：<code>nav</code></li>
<li>主导航：<code>mainnav</code></li>
<li>子导航：<code>subnav</code></li>
<li>顶导航：<code>topnav</code></li>
<li>边导航：<code>sidebar</code></li>
<li>左导航：<code>leftsidebar</code></li>
<li>右导航：<code>rightsidebar</code></li>
<li>菜单：<code>menu</code></li>
<li>子菜单：<code>submenu</code></li>
<li>标题：<code>title</code></li>
<li>摘要：<code>summary</code></li>
</ul>
</li>
<li>功能<ul>
<li>标志：<code>logo</code></li>
<li>广告：<code>banner</code></li>
<li>登陆：<code>login</code></li>
<li>登录条：<code>loginbar</code></li>
<li>注册：<code>regsiter</code></li>
<li>搜索：<code>search</code></li>
<li>功能区：<code>shop</code></li>
<li>标题：<code>title</code></li>
<li>加入：<code>joinus</code></li>
<li>状态：<code>status</code></li>
<li>按钮：<code>btn</code></li>
<li>滚动：<code>scroll</code></li>
<li>标签页：<code>tab</code></li>
<li>文章列表：<code>list</code></li>
<li>提示信息：<code>msg</code></li>
<li>当前的：<code>current</code></li>
<li>小技巧：<code>tips</code></li>
<li>图标：<code>icon</code></li>
<li>注释：<code>note</code></li>
<li>指南：<code>guild</code></li>
<li>服务：<code>service</code></li>
<li>热点：<code>hot</code></li>
<li>新闻：<code>news</code></li>
<li>下载：<code>download</code></li>
<li>投票：<code>vote</code></li>
<li>合作伙伴：<code>partner</code></li>
<li>友情链接：<code>link</code></li>
<li>版权：<code>copyright</code></li>
</ul>
</li>
<li>class 的命名:<ul>
<li>颜色：使用颜色的名称或者 16 进制代码，如：<blockquote>
<p>.red { color: red; }<br>.f60 { color: #f60; }<br>.ff8600 { color: #ff8600; }</p>
</blockquote>
</li>
<li>字体大小，直接使用“font+字体大小”作为名称，如：<blockquote>
<p>.font12px { font-size: 12px; }<br>.font9pt {font-size: 9pt; }</p>
</blockquote>
</li>
<li>对齐样式，使用对齐目标的英文名称，如：<blockquote>
<p>.left { float:left; }<br>.bottom { float:bottom; }</p>
</blockquote>
</li>
<li>标题栏样式，使用“类别+功能”的方式命名，如：<blockquote>
<p>.barnews { }<br>.barproduct { }</p>
</blockquote>
</li>
</ul>
</li>
</ol>
<h2 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h2><ol>
<li>一律小写；</li>
<li>尽量用英文；</li>
<li>尽量不加中杠和下划线；</li>
<li>尽量不缩写，除非一看就明白的单词，如：wrapper 可以写成 wrap。</li>
<li>css 文件命名规范：<ul>
<li>主要的 <code>master.css</code></li>
<li>模块 <code>module.css</code></li>
<li>基本共用 <code>base.css</code></li>
<li>布局，版面 <code>layout.css</code></li>
<li>主题 <code>themes.css</code></li>
<li>专栏 <code>columns.css</code></li>
<li>文字 <code>font.css</code></li>
<li>表单 <code>forms.css</code></li>
<li>补丁 <code>mend.css</code></li>
<li>打印 <code>print.css</code></li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>规范</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>css</tag>
        <tag>前端</tag>
        <tag>规范</tag>
        <tag>开发</tag>
        <tag>命名</tag>
      </tags>
  </entry>
  <entry>
    <title>接口规范</title>
    <url>/posts/243f5a8a.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote>
<ul>
<li>所有的返回数据都要配合全局状态码；</li>
<li>接口参数 requestData 中的 <em>XXX</em> 需要根据实际业务需求进行替换，其他参数为固定接口参数；</li>
<li>接口返回值 returnData 中的 <em>KEY</em> 需要根据实际业务需求进行替换，格式要保持统一，其他返回参数为固定接口参数。</li>
</ul>
</blockquote>
<a id="more"></a>
<p>[TOC]</p>
<h2 id="STATUS-CODE-状态码"><a href="#STATUS-CODE-状态码" class="headerlink" title="STATUS_CODE 状态码"></a><code>STATUS_CODE</code> 状态码</h2><table>
<thead>
<tr>
<th style="text-align:center">状态码</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1xx</td>
<td style="text-align:left">元数据</td>
</tr>
<tr>
<td style="text-align:center">2xx</td>
<td style="text-align:left">正确的响应</td>
</tr>
<tr>
<td style="text-align:center">3xx</td>
<td style="text-align:left">重定向</td>
</tr>
<tr>
<td style="text-align:center">4xx</td>
<td style="text-align:left">客户端错误</td>
</tr>
<tr>
<td style="text-align:center">5xx</td>
<td style="text-align:left">服务端错误</td>
</tr>
</tbody>
</table>
<h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><h3 id="单条数据"><a href="#单条数据" class="headerlink" title="单条数据"></a>单条数据</h3><h4 id="XXX-接口"><a href="#XXX-接口" class="headerlink" title="XXX 接口"></a>XXX 接口</h4><blockquote>
<p>接口用途:获取 XXX 单条信息</p>
</blockquote>
<p><code>URL</code> : /app/interface/getItem</p>
<p><code>Method</code> : POST or GET</p>
<p><code>requestData</code>：</p>
<table>
<thead>
<tr>
<th>参数名</th>
<th>必选</th>
<th>类型及范围</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><em>XXX</em></td>
<td>√</td>
<td>string</td>
<td>如用户 ID[^示例]</td>
</tr>
</tbody>
</table>
<p><em>接口参数示例</em></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"MEMBER_ID"</span>: <span class="string">"123"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>returnData</code> :</p>
<table>
<thead>
<tr>
<th>返回键</th>
<th>类型</th>
<th>返回值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>STATUS_CODE</td>
<td>int</td>
<td>状态码</td>
<td>参考上方的全局状态码</td>
</tr>
<tr>
<td>MSG</td>
<td>string</td>
<td>返回状态信息</td>
<td>如操作成功，可以为空</td>
</tr>
<tr>
<td>KEY1</td>
<td>int</td>
<td>响应字段值 1[^示例]</td>
<td></td>
</tr>
<tr>
<td>KEY2</td>
<td>string</td>
<td>响应字段值 2[^示例]</td>
<td></td>
</tr>
<tr>
<td>KEY3</td>
<td>object</td>
<td>响应字段值 3[^示例]</td>
<td>可以依然包含对象</td>
</tr>
<tr>
<td>- KEY3_KEY1</td>
<td>string</td>
<td>- 响应字段值 3-1[^示例]</td>
<td></td>
</tr>
<tr>
<td>- KEY3_KEY2</td>
<td>string</td>
<td>- 响应字段值 3-2[^示例]</td>
</tr>
</tbody>
</table>
<p><em>（接口返回数据示例，可以直接将测试工具<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="https://www.getpostman.com “接口测试工具：POSTMAN”
">[1]</span></a></sup>中的数据粘贴过来）</em></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">//测试地址 =&gt; https://123.57.89.97:8080/t2o/app/forum/listForumByActivity?ACTIVITY_ID=1f423553e3534b20b01523a08460a981&amp;MEMBER_ID=58b6195bfe804fbb94dadac5f500124b&amp;TYPE=2&amp;showCount=10&amp;currentPage=1</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  "STATUS_CODE": 0, //=&gt;状态码，必需</span><br><span class="line">  "MSG": "success", //=&gt;返回信息，必需</span><br><span class="line">  // 以下字段需要根据实际业务需求替换</span><br><span class="line">  "KEY1": "响应字段值1",</span><br><span class="line">  "KEY2": "响应字段值2",</span><br><span class="line">  "KEY3": &#123;</span><br><span class="line">    "KEY3_KEY1": "响应字段值3-1",</span><br><span class="line">    "KEY3_KEY2": "响应字段值3-2"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="列表数据"><a href="#列表数据" class="headerlink" title="列表数据"></a>列表数据</h3><h4 id="XXX-接口-1"><a href="#XXX-接口-1" class="headerlink" title="XXX 接口"></a>XXX 接口</h4><blockquote>
<p>接口用途:获取 XXX 列表数据</p>
</blockquote>
<p><code>URL</code> : /app/interface/getList</p>
<p><code>Method</code> : POST / GET</p>
<p><code>requestData</code>：</p>
<table>
<thead>
<tr>
<th>参数名</th>
<th>必选</th>
<th>类型及范围</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><em>XXX</em></td>
<td>√</td>
<td>string</td>
<td>如用户 ID[^示例]</td>
</tr>
<tr>
<td>PAGE_INDEX</td>
<td></td>
<td>int</td>
<td>页码，不传默认获取第一页</td>
</tr>
<tr>
<td>SHOW_COUNT</td>
<td></td>
<td>int</td>
<td>每页显示条数，不传默认每页 10 条</td>
</tr>
</tbody>
</table>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"MEMBER_ID"</span>: <span class="string">"123"</span>,</span><br><span class="line">  <span class="attr">"PAGE_INDEX"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"SHOW_COUNT"</span>: <span class="number">10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>returnData</code> :</p>
<table>
<thead>
<tr>
<th>返回键</th>
<th>类型</th>
<th>返回值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>STATUS_CODE</td>
<td>int</td>
<td>状态码</td>
<td>参考上方的全局状态码</td>
</tr>
<tr>
<td>MSG</td>
<td>string</td>
<td>返回状态信息</td>
<td>如操作成功，可以为空</td>
</tr>
<tr>
<td>CURRENT_PAGE</td>
<td>int</td>
<td>当前页码</td>
<td></td>
</tr>
<tr>
<td>PAGE_COUNT</td>
<td>int</td>
<td>总页数</td>
<td></td>
</tr>
<tr>
<td><em>KEY1</em></td>
<td>int</td>
<td>响应字段值 1[^示例]</td>
<td></td>
</tr>
<tr>
<td><em>KEY2</em></td>
<td>string</td>
<td>相应字段值 2[^示例]</td>
<td></td>
</tr>
<tr>
<td>LIST</td>
<td>Array[Object]</td>
<td>对象列表</td>
<td>LIST 为空时显示 <em>“LIST”:[]</em></td>
</tr>
<tr>
<td>- <em>KEY</em></td>
<td>string</td>
<td>- 对象列表字段值[^示例]</td>
</tr>
</tbody>
</table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试地址 =&gt; https://123.57.89.97:8080/t2o/app/forum/listForumByActivity?ACTIVITY_ID=1f423553e3534b20b01523a08460a981&amp;MEMBER_ID=58b6195bfe804fbb94dadac5f500124b&amp;TYPE=2&amp;showCount=10&amp;currentPage=1</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"STATUS_CODE"</span>: <span class="number">0</span>, <span class="comment">//=&gt;状态码，必需</span></span><br><span class="line">  <span class="string">"MSG"</span>: <span class="string">"success"</span>, <span class="comment">//=&gt;返回信息，必需</span></span><br><span class="line">  <span class="string">"CURRENT_PAGE"</span>: <span class="number">1</span>, <span class="comment">//=&gt;当前页码</span></span><br><span class="line">  <span class="string">"PAGE_COUNT"</span>: <span class="number">10</span>, <span class="comment">//=&gt;总页数</span></span><br><span class="line">  <span class="string">"KEY1"</span>: <span class="number">123</span>,</span><br><span class="line">  <span class="string">"KEY2"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="string">"LIST"</span>: [ <span class="comment">//=&gt; 列表数组</span></span><br><span class="line">    &#123;<span class="string">"KEY"</span>: <span class="string">"对象列表字段值"</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"KEY"</span>: <span class="string">"对象列表字段值"</span>&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h3 id="增-删-改"><a href="#增-删-改" class="headerlink" title="增/删/改"></a>增/删/改</h3><h4 id="XXX-接口-2"><a href="#XXX-接口-2" class="headerlink" title="XXX 接口"></a>XXX 接口</h4><blockquote>
<p>接口用途:……</p>
</blockquote>
<p><code>URL</code> : /app/interface/add</p>
<p><code>Method</code> : POST</p>
<p><code>requestData</code>：</p>
<table>
<thead>
<tr>
<th>参数名</th>
<th>必选</th>
<th>类型及范围</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><em>XXX</em></td>
<td>√</td>
<td>string</td>
<td>如用户 ID[^示例]</td>
</tr>
<tr>
<td><em>XXX</em></td>
<td></td>
<td>string</td>
<td>如昵称[^示例]</td>
</tr>
</tbody>
</table>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"MEMBER_ID"</span>: <span class="string">"123"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>returnData</code> :</p>
<table>
<thead>
<tr>
<th>返回键</th>
<th>类型</th>
<th>返回值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>STATUS_CODE</td>
<td>int</td>
<td>状态码</td>
<td>参考上方的全局状态码</td>
</tr>
<tr>
<td>MSG</td>
<td>string</td>
<td>返回状态信息</td>
<td>如操作成功，可以为空</td>
</tr>
<tr>
<td>ID</td>
<td>int</td>
<td>增、删、改数据的 ID 或者标志</td>
</tr>
</tbody>
</table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试地址 =&gt; https://123.57.89.97:8080/t2o/app/forum/listForumByActivity?ACTIVITY_ID=1f423553e3534b20b01523a08460a981&amp;MEMBER_ID=58b6195bfe804fbb94dadac5f500124b&amp;TYPE=2&amp;showCount=10&amp;currentPage=1</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"STATUS_CODE"</span>: <span class="number">0</span>, <span class="comment">//=&gt;状态码，必需</span></span><br><span class="line">  <span class="string">"MSG"</span>: <span class="string">"success"</span>, <span class="comment">//=&gt;返回信息，必需</span></span><br><span class="line">  <span class="string">"ID"</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h2><h3 id="Base64-上传图片"><a href="#Base64-上传图片" class="headerlink" title="Base64 上传图片"></a>Base64 上传图片</h3><h4 id="XXX-接口-3"><a href="#XXX-接口-3" class="headerlink" title="XXX 接口"></a>XXX 接口</h4><blockquote>
<p>接口用途:……</p>
</blockquote>
<p><code>URL</code> : /app/interface/uploadBase64</p>
<p><code>Method</code> : POST</p>
<p><code>requestData</code>：</p>
<table>
<thead>
<tr>
<th>参数名</th>
<th>必选</th>
<th>类型及范围</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><em>XXX</em></td>
<td></td>
<td>string</td>
<td>如用户 ID[^示例]</td>
</tr>
<tr>
<td>FILE</td>
<td>√</td>
<td>string</td>
<td>图片文件的 Base64 字符串</td>
</tr>
</tbody>
</table>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"MEMBER_ID"</span>: <span class="string">"123"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>returnData</code> :</p>
<table>
<thead>
<tr>
<th>返回键</th>
<th>类型</th>
<th>返回值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>STATUS_CODE</td>
<td>int</td>
<td>状态码</td>
<td>参考上方的全局状态码</td>
</tr>
<tr>
<td>MSG</td>
<td>string</td>
<td>返回状态信息</td>
<td>如操作成功，可以为空</td>
</tr>
<tr>
<td>FILE_PATH</td>
<td>int</td>
<td>文件上传后的服务器路径</td>
</tr>
</tbody>
</table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试地址 =&gt; https://123.57.89.97:8080/t2o/app/forum/listForumByActivity?ACTIVITY_ID=1f423553e3534b20b01523a08460a981&amp;MEMBER_ID=58b6195bfe804fbb94dadac5f500124b&amp;TYPE=2&amp;showCount=10&amp;currentPage=1</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"STATUS_CODE"</span>: <span class="number">0</span>, <span class="comment">//=&gt;状态码，必需</span></span><br><span class="line">  <span class="string">"MSG"</span>: <span class="string">"success"</span>, <span class="comment">//=&gt;返回信息，必需</span></span><br><span class="line">  <span class="string">"FILE_PATH"</span>: <span class="string">"xxx/xxx.png"</span> <span class="comment">//=&gt;保存的文件路径</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="文件流上传"><a href="#文件流上传" class="headerlink" title="文件流上传"></a>文件流上传</h3><h4 id="XXX-接口-4"><a href="#XXX-接口-4" class="headerlink" title="XXX 接口"></a>XXX 接口</h4><blockquote>
<p>接口用途:……</p>
</blockquote>
<p><code>URL</code> : /app/interface/uploadFile</p>
<p><code>Method</code> : POST</p>
<p><code>requestData</code>：</p>
<table>
<thead>
<tr>
<th>参数名</th>
<th>必选</th>
<th>类型及范围</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><em>XXX</em></td>
<td></td>
<td>string</td>
<td>如用户 ID[^示例]</td>
</tr>
<tr>
<td>FILE</td>
<td>√</td>
<td>file</td>
<td>文件对象</td>
</tr>
</tbody>
</table>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"MEMBER_ID"</span>: <span class="string">"123"</span>,</span><br><span class="line">  <span class="attr">"FILE"</span>: <span class="string">"..."</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>returnData</code> :</p>
<table>
<thead>
<tr>
<th>返回键</th>
<th>类型</th>
<th>返回值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>STATUS_CODE</td>
<td>int</td>
<td>状态码</td>
<td>参考上方的全局状态码</td>
</tr>
<tr>
<td>MSG</td>
<td>string</td>
<td>返回状态信息</td>
<td>如操作成功，可以为空</td>
</tr>
<tr>
<td>FILE_PATH</td>
<td>int</td>
<td>文件上传后的服务器路径</td>
</tr>
</tbody>
</table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试地址 =&gt; https://123.57.89.97:8080/t2o/app/forum/listForumByActivity?ACTIVITY_ID=1f423553e3534b20b01523a08460a981&amp;MEMBER_ID=58b6195bfe804fbb94dadac5f500124b&amp;TYPE=2&amp;showCount=10&amp;currentPage=1</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"STATUS_CODE"</span>: <span class="number">0</span>, <span class="comment">//=&gt;状态码，必需</span></span><br><span class="line">  <span class="string">"MSG"</span>: <span class="string">"success"</span>, <span class="comment">//=&gt;返回信息，必需</span></span><br><span class="line">  <span class="string">"FILE_PATH"</span>: <span class="string">"xxx/xxx.png"</span> <span class="comment">//=&gt;保存的文件路径</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>[^示例]: <span class="exturl" data-url="aHR0cHM6Ly90b3V0aWFvLmNvbS9hNjMyNDA0NDc1NzMyOTA1MTkwNi8=" title="https://toutiao.com/a6324044757329051906/">https://toutiao.com/a6324044757329051906/<i class="fa fa-external-link"></i></span> “接口示例”</p>
<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><span class="exturl" data-url="aHR0cHM6Ly93d3cuZ2V0cG9zdG1hbi5jb20=" title="https://www.getpostman.com">https://www.getpostman.com<i class="fa fa-external-link"></i></span> “接口测试工具：POSTMAN”<a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><span class="exturl" data-url="aHR0cHM6Ly9qc29uZWRpdG9yb25saW5lLm9yZy9pbmRleC5odG1sP3JlZmVycmVyPWNocm9tZV9hcHA=" title="https://jsoneditoronline.org/index.html?referrer=chrome_app">https://jsoneditoronline.org/index.html?referrer=chrome_app<i class="fa fa-external-link"></i></span> “JSON 格式化工具”<a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>规范</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>规范</tag>
        <tag>开发</tag>
        <tag>接口</tag>
      </tags>
  </entry>
  <entry>
    <title>命名规范</title>
    <url>/posts/60cf182d.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote>
<p>对象名、方法名语义化，英语不行用拼音</p>
</blockquote>
<a id="more"></a>
<ul>
<li>文件名</li>
</ul>
<table>
<thead>
<tr>
<th>内容</th>
<th>文件命名</th>
<th>例子</th>
</tr>
</thead>
<tbody>
<tr>
<td>List Page</td>
<td><code>fileName</code> + <code>s</code></td>
<td>users.html</td>
</tr>
<tr>
<td>Detail Page</td>
<td><code>fileName</code> + <code>Info</code></td>
<td>userInfo.html</td>
</tr>
<tr>
<td>Data / Update Page</td>
<td><code>fileName</code> + <code>Act</code></td>
<td>userAct.html</td>
</tr>
<tr>
<td>Update Page</td>
<td><code>fileName</code> + <code>Edit</code></td>
<td>userEdit.html</td>
</tr>
<tr>
<td>Insert Page</td>
<td><code>fileName</code> + <code>Add</code></td>
<td>userAdd.html</td>
</tr>
<tr>
<td>Delete Page</td>
<td><code>fileName</code> + <code>Delete</code></td>
<td>userDelete.html</td>
</tr>
<tr>
<td>Order Page</td>
<td><code>fileName</code> + <code>Order</code></td>
<td>userOrder.html</td>
</tr>
<tr>
<td>Data Validate Page</td>
<td><code>fileName</code> + <code>Checker</code></td>
<td>userChecker.html</td>
</tr>
</tbody>
</table>
<ul>
<li>类名</li>
</ul>
<table>
<thead>
<tr>
<th>内容</th>
<th>类(文件)名</th>
<th>例子</th>
</tr>
</thead>
<tbody>
<tr>
<td>Interface</td>
<td><code>I</code> + <code>ClassName</code></td>
<td>IParamLanguage</td>
</tr>
<tr>
<td>Model</td>
<td><code>ClassName</code> + <code>Model</code></td>
<td>UserModel</td>
</tr>
<tr>
<td>DAL</td>
<td><code>ClassName</code> + <code>DAL</code></td>
<td>……</td>
</tr>
<tr>
<td>BLL</td>
<td><code>ClassName</code> + <code>BLL</code></td>
<td>……</td>
</tr>
</tbody>
</table>
<ul>
<li>方法名</li>
</ul>
<table>
<thead>
<tr>
<th>方法命名</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>GetPagerList</td>
<td>获取分页数据</td>
</tr>
<tr>
<td>GetDictionary</td>
<td>获取数据字典的数据</td>
</tr>
<tr>
<td>GetList</td>
<td>获取所有列表数据</td>
</tr>
<tr>
<td>GetSingleList</td>
<td>……</td>
</tr>
<tr>
<td>GetSingle</td>
<td>获取单条对象数据</td>
</tr>
<tr>
<td>GetFirstOrDefault</td>
<td>……</td>
</tr>
<tr>
<td>Get「内容」</td>
<td>获取指定内容的数据</td>
</tr>
<tr>
<td>Insert「内容」</td>
<td>增加</td>
</tr>
<tr>
<td>Update「内容」</td>
<td>修改</td>
</tr>
<tr>
<td>Delete「内容」</td>
<td>删除</td>
</tr>
<tr>
<td>Order</td>
<td>数据重新排序</td>
</tr>
<tr>
<td>IsExist</td>
<td>检查数据是否存在</td>
</tr>
</tbody>
</table>
<ul>
<li>控件 ID/NAME</li>
</ul>
<table>
<thead>
<tr>
<th>元素</th>
<th>前缀</th>
<th>例子</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>input(text)</code> / <code>textarea</code> / <code>textbox</code></td>
<td>tb</td>
<td>tbUserName</td>
</tr>
<tr>
<td><code>input(checkbox)</code></td>
<td>cb</td>
<td>cbIsRead</td>
</tr>
<tr>
<td><code>input(radio)</code></td>
<td>rd</td>
<td>rdSex</td>
</tr>
<tr>
<td><code>label</code></td>
<td>lb</td>
<td>lbIsRead</td>
</tr>
<tr>
<td><code>hidden</code></td>
<td>hd</td>
<td>hdUserId</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>规范</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>规范</tag>
        <tag>开发</tag>
        <tag>命名</tag>
      </tags>
  </entry>
  <entry>
    <title>科学上网</title>
    <url>/posts/812d49a5.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><span class="exturl" data-url="aHR0cHM6Ly9ncmVhdGFnZW50LWlmYW5xaWFuZy5naXRodWIuaW8vZ3JlYXRhZ2VudDItZ2EvaWZhbnFpYW5nLmh0bQ==" title="https://greatagent-ifanqiang.github.io/greatagent2-ga/ifanqiang.htm">爱翻墙<i class="fa fa-external-link"></i></span> 是一个网址导航网站，收录了中国大陆不能正常访问的网址。</p>
<h1 id="为什么要科学上网"><a href="#为什么要科学上网" class="headerlink" title="为什么要科学上网"></a>为什么要科学上网</h1><p>在天朝的 IT 从业者，没有人不知道 GFW 的存在。GFW 的利与弊在这不再深究。以下列出的我科学上网的理由：</p>
<ol>
<li>搜索，百度的竞价排名搜出来的东西更 google 不在同一档次，想要更高的搜索质量。</li>
<li>软件/库更新老旧，大部分优质的（开源）软件/库都是国外的人开发的。当获取某一个库的时候，不翻墙，更新很慢，甚至无法更新。</li>
<li>锻炼英语能力，通过阅读一些原始的文档（至少有工作驱使）来练练英语水平。</li>
<li>世界那么大，我想去看看。我可以看看外面的资讯，避免一面之辞。</li>
<li>获取灵感，知乎与 Quora，segmentfault 与 stackoverflow…这些是多么的相似。</li>
</ol>
<h1 id="现在比较流行的科学上网方式"><a href="#现在比较流行的科学上网方式" class="headerlink" title="现在比较流行的科学上网方式"></a>现在比较流行的科学上网方式</h1><ol>
<li><code>Hosts</code>最成功、最有效，也是最为跨平台的方法。它简单高效，并且随时可修改，通过绕过 DNS 直接访问 IP 的方式，可以让翻墙变得十分容易，不会像客户端软件那样需要不停地切换国内国外网络，大大简化了操作步骤。 <span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLWNuL0hvc3RzJUU2JTk2JTg3JUU0JUJCJUI2" title="https://zh.wikipedia.org/zh-cn/Hosts%E6%96%87%E4%BB%B6">维基百科<i class="fa fa-external-link"></i></span></li>
<li><code>VPN</code>虚拟专用网络。</li>
<li><code>GAE</code>（GoAgent）一个基于 Google Appengine 的代理工具，代理 IP。</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9zaGFkb3dzb2Nrcy5vcmc=" title="https://shadowsocks.org"><code>Shadowsocks</code><i class="fa fa-external-link"></i></span>一个轻量级 socks 加密代理，全主流平台支持。</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1hYLW5ldC9YWC1OZXQ=" title="https://github.com/XX-net/XX-Net"><code>XX-Net</code><i class="fa fa-external-link"></i></span>免费开源的翻墙工具安装简单、速度快、智能路由。<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1hYLW5ldC9YWC1OZXQvd2lraS8lRTQlQjglQUQlRTYlOTYlODclRTYlOTYlODclRTYlQTElQTM=" title="https://github.com/XX-net/XX-Net/wiki/%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3">中文教程<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9nZXRsYW50ZXJuLm9yZy8=" title="https://getlantern.org/"><code>Lantern</code><i class="fa fa-external-link"></i></span>和“XX-Net”类似。</li>
<li><code>V2Ray</code>V2Ray 是一个于 Shadowsocks 之后非常好用的代理软件，但是由于 V2Ray 的配置略复杂，GUI 客户端不完善，所以 V2Ray 并没有像 Shadowsocks 在科学上网人群之中那么流行。<span class="exturl" data-url="aHR0cHM6Ly93d3cudjJyYXkuY29tLw==" title="https://www.v2ray.com/">官网<i class="fa fa-external-link"></i></span></li>
</ol>
<a id="more"></a>
<h1 id="Hosts"><a href="#Hosts" class="headerlink" title="Hosts"></a>Hosts</h1><blockquote>
<p>Hosts 不是长久有效的，如发现访问不了则需更新最新的 Hosts。<br>Hosts 更新后打开浏览器访问<span class="exturl" data-url="aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9uY3I=" title="https://www.google.com/ncr">https://www.google.com/ncr<i class="fa fa-external-link"></i></span>,刚替换完有可能还是无法访问，此时需要清除缓存多刷新几次。</p>
</blockquote>
<h2 id="怎样修改-Hosts"><a href="#怎样修改-Hosts" class="headerlink" title="怎样修改 Hosts"></a>怎样修改 Hosts</h2><ul>
<li><p><strong>Windows</strong> : 打开资源管理器定位到 C:\windows\system32\drivers\etc\ 找到 hosts 文件，获得读写权限，用记事本打开并修改。</p>
</li>
<li><p><strong>Mac OS X</strong> : 右键点击 Dock 上的 Finder，选择［前往文件夹］，输入/etc 回车，找到 hosts 文件，拖到桌面，在桌面修改完成，删掉/etc 里面的 hosts（需要密码鉴定），然后把桌面的 hosts 拖回去（需要鉴定）。</p>
</li>
<li><p><strong>Linux</strong> : 定位到/etc，取得 hosts 读写权限，然后修改保存。</p>
</li>
</ul>
<h2 id="hosts-获取地址"><a href="#hosts-获取地址" class="headerlink" title="hosts 获取地址"></a>hosts 获取地址</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZWhvc3RzL2hvc3Rz" title="https://github.com/googlehosts/hosts">GoogleHost<i class="fa fa-external-link"></i></span></li>
</ul>
<h2 id="hosts-切换工具-SwitchHosts"><a href="#hosts-切换工具-SwitchHosts" class="headerlink" title="hosts 切换工具 SwitchHosts"></a>hosts 切换工具 <span class="exturl" data-url="aHR0cHM6Ly9vbGRqLmdpdGh1Yi5pby9Td2l0Y2hIb3N0cy8=" title="https://oldj.github.io/SwitchHosts/"><code>SwitchHosts</code><i class="fa fa-external-link"></i></span></h2><h2 id="hosts-自动更新程序"><a href="#hosts-自动更新程序" class="headerlink" title="hosts 自动更新程序"></a><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xhZGRlcjE5ODQvdXBkYXRlSG9zdHM=" title="https://github.com/ladder1984/updateHosts">hosts 自动更新程序<i class="fa fa-external-link"></i></span></h2><blockquote>
<p>每次手动替换失效 hosts 比较麻烦，也可以使用下面的自动更新脚本进行修改，但是 hosts 文件一定要有读写权限</p>
</blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL01yTGVvL2hpZ2hzaGVuZy9yYXcvbWFzdGVyL3VwZGF0ZUhvc3RzLnppcA==" title="https://github.com/MrLeo/highsheng/raw/master/updateHosts.zip">Update Hosts 下载<i class="fa fa-external-link"></i></span> : <em>使用的 hosts 源是<code>racaljk.hosts</code>可替换，替换方法请移步<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xhZGRlcjE5ODQvdXBkYXRlSG9zdHM=" title="https://github.com/ladder1984/updateHosts">官网<i class="fa fa-external-link"></i></span></em></p>
<ul>
<li><p>使用的时候只需要 <strong>双击</strong> <code>start.vbs</code> 文件即可完成自动更新。</p>
</li>
<li><p>如果想让 hosts 始终保持最新，可以 <strong>双击</strong> <code>addToStartup.js</code> 将此脚本加入到启动项，开机状态下每隔 1 小时会自动获取一次</p>
<p><img src="/images/gfw/2016-06-27 14-03-26.jpg" alt></p>
</li>
</ul>
<h1 id="Shadowsocks"><a href="#Shadowsocks" class="headerlink" title="Shadowsocks"></a>Shadowsocks</h1><h2 id="Shadowsocks-是什么"><a href="#Shadowsocks-是什么" class="headerlink" title="Shadowsocks 是什么"></a>Shadowsocks 是什么</h2><p>Shadowsocks 是一种安全的 socks5 代理，可以保护你的上网流量。基于多种加密方式，推荐使用 aes-256-cfb 加密。安装和使用需要本地端和服务端。本地客户端已经包含了多种版本，包括 iOS，Android，Windows，MAC，甚至是路由器 (基于 OpenWRT)，所以使用方便，各取所需。远程服务端则一般安装在基于 Linux 的各种发行版操作系统，比如 Debian， CentOS， Fedora， Redhat， Ubuntu， openSUSE 等。</p>
<h2 id="自建SS服务器"><a href="#自建SS服务器" class="headerlink" title="自建SS服务器"></a>自建SS服务器</h2><blockquote>
<p>可以参考这篇文章：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuZnJlZWx1ZmZ5LmNvbS9iYW5kd2Fnb25ob3N0LXNzLw==" title="https://www.freeluffy.com/bandwagonhost-ss/">搬瓦工搭建SS服务器完整图文教程<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL0B0eXJyMzExODYwNjUvdnVsdHIlRTglODclQUElRTUlQkIlQkFzcyVFNiU5QyU4RCVFNSU4QSVBMSVFNSU5OSVBOCVFNiU5NSU5OSVFNyVBOCU4Qi03NDI2YjExNzM2MQ==" title="https://medium.com/@tyrr31186065/vultr%E8%87%AA%E5%BB%BAss%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B-7426b117361">vultr自建ss服务器<i class="fa fa-external-link"></i></span></li>
</ul>
</blockquote>
<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><h3 id="Shadowsocks-1"><a href="#Shadowsocks-1" class="headerlink" title="Shadowsocks"></a><span class="exturl" data-url="aHR0cHM6Ly9zaGFkb3dzb2Nrcy5vcmcvZW4vZG93bmxvYWQvY2xpZW50cy5odG1s" title="https://shadowsocks.org/en/download/clients.html">Shadowsocks<i class="fa fa-external-link"></i></span></h3><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NoYWRvd3NvY2tzL3NoYWRvd3NvY2tzLXdpbmRvd3MvcmVsZWFzZXMvbGF0ZXN0" title="https://github.com/shadowsocks/shadowsocks-windows/releases/latest">windows<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NoYWRvd3NvY2tzL1NoYWRvd3NvY2tzWC1ORy9yZWxlYXNlcy9sYXRlc3Q=" title="https://github.com/shadowsocks/ShadowsocksX-NG/releases/latest">Mac<i class="fa fa-external-link"></i></span></li>
</ul>
<h3 id="shadowsocksR"><a href="#shadowsocksR" class="headerlink" title="shadowsocksR"></a>shadowsocksR</h3><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NoYWRvd3NvY2tzcnIvc2hhZG93c29ja3NyLWNzaGFycC9yZWxlYXNlcw==" title="https://github.com/shadowsocksrr/shadowsocksr-csharp/releases">windows<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Fpbnl1aGFuZy9TaGFkb3dzb2Nrc1gtTkctUi9yZWxlYXNlcw==" title="https://github.com/qinyuhang/ShadowsocksX-NG-R/releases">Mac<i class="fa fa-external-link"></i></span></li>
</ul>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><blockquote>
<p>可以参考这篇文章：</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9zc3IudG9vbHMvODI=" title="https://ssr.tools/82">SSR Windows客户端下载、安装及使用教程（ShadowSocksR最新版电脑客户端）<i class="fa fa-external-link"></i></span> </li>
<li><span class="exturl" data-url="aHR0cHM6Ly9zc3IudG9vbHMvMTY0" title="https://ssr.tools/164">SSR MAC客户端ShadowsocksX-NG-R下载、安装及使用教程<i class="fa fa-external-link"></i></span></li>
</ul>
</blockquote>
<ol>
<li><p>解压到任意目录，运行其中的 Shadowsocks.exe</p>
<p><img src="/images/gfw/2017-01-03-12-27-25.jpg" alt="解压到任意目录，运行其中的SHADOWSOCKS.EXE"></p>
</li>
<li><p>首次运行，会弹出编辑服务器窗口，按图示填写您的 Shadowsocks 服务器地址、端口、密码和加密方式</p>
<p><img src="/images/gfw/2017-01-03-12-27-48.jpg" alt="首次运行，会弹出编辑服务器窗口，按图示填写您的SHADOWSOCKS服务器地址，端口，密码和加密方式，点确定"></p>
<p>点确定后，会如下提示</p>
<p><img src="/images/gfw/2017-01-03-12-28-12.jpg" alt="系统托盘气泡提示"></p>
</li>
<li><p>按提示右键程序图标，弹出菜单，勾选“启用系统代理”</p>
<p><img src="/images/gfw/2017-01-03-12-28-33.jpg" alt="勾选“启用系统代理”"></p>
</li>
</ol>
<h1 id="V2Ray"><a href="#V2Ray" class="headerlink" title="V2Ray"></a><span class="exturl" data-url="aHR0cHM6Ly93d3cudjJyYXkuY29tLw==" title="https://www.v2ray.com/">V2Ray<i class="fa fa-external-link"></i></span></h1><blockquote>
<p>可以参考这篇文章：</p>
<ul>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tLzIzM2JveS92MnJheS93aWtpL1YyUmF55LiA6ZSu5a6J6KOF6ISa5pys" title="https://github.com/233boy/v2ray/wiki/V2Ray一键安装脚本">V2Ray一键安装脚本<i class="fa fa-external-link"></i></span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tLzIzM2JveS92MnJheS93aWtpL1YyUmF55pCt5bu66K+m57uG5Zu+5paH5pWZ56iL" title="https://github.com/233boy/v2ray/wiki/V2Ray搭建详细图文教程">V2Ray搭建详细图文教程<i class="fa fa-external-link"></i></span></p>
</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tLzIzM2JveS92MnJheS93aWtpL1YyUmF5JUU2JTkwJUFEJUU1JUJCJUJBJUU4JUFGJUE2JUU3JUJCJTg2JUU1JTlCJUJFJUU2JTk2JTg3JUU2JTk1JTk5JUU3JUE4JThCI3YycmF5LSVFNSVBRSU4OSVFOCVBMyU4NSVFNSVBRSU4QyVFNiU4OCU5MA==" title="https://github.com/233boy/v2ray/wiki/V2Ray%E6%90%AD%E5%BB%BA%E8%AF%A6%E7%BB%86%E5%9B%BE%E6%96%87%E6%95%99%E7%A8%8B#v2ray-%E5%AE%89%E8%A3%85%E5%AE%8C%E6%88%90">Shadowsocks 配置<i class="fa fa-external-link"></i></span></li>
</ul>
</blockquote>
<h1 id="Surge-Clash"><a href="#Surge-Clash" class="headerlink" title="Surge / Clash"></a><span class="exturl" data-url="aHR0cHM6Ly9uc3N1cmdlLmNvbS8=" title="https://nssurge.com/">Surge<i class="fa fa-external-link"></i></span> / <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0RyZWFtYWNyby9jbGFzaA==" title="https://github.com/Dreamacro/clash">Clash<i class="fa fa-external-link"></i></span></h1><p>SS &amp; V2ray 免费客户端</p>
<ul>
<li>Win 版本 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0ZuZHJvaWQvY2xhc2hfZm9yX3dpbmRvd3NfcGtn" title="https://github.com/Fndroid/clash_for_windows_pkg">clash_for_windows_pkg<i class="fa fa-external-link"></i></span> </li>
<li>Mac 版本 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lpY2hlbmdjaGVuL2NsYXNoWA==" title="https://github.com/yichengchen/clashX">clashX<i class="fa fa-external-link"></i></span></li>
</ul>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0hhY2tsMHVzL1NTLVJ1bGUtU25pcHBldA==" title="https://github.com/Hackl0us/SS-Rule-Snippet"><strong>SS-Rule-Snippet</strong><i class="fa fa-external-link"></i></span>: 适用于 <span class="exturl" data-url="aHR0cHM6Ly9uc3N1cmdlLmNvbS8=" title="https://nssurge.com/">Surge<i class="fa fa-external-link"></i></span> / <span class="exturl" data-url="aHR0cHM6Ly9pdHVuZXMuYXBwbGUuY29tL2hrL2FwcC9xdWFudHVtdWx0L2lkMTI1MjAxNTQzOA==" title="https://itunes.apple.com/hk/app/quantumult/id1252015438">Quantumult<i class="fa fa-external-link"></i></span> / <span class="exturl" data-url="aHR0cHM6Ly9pdHVuZXMuYXBwbGUuY29tL3VzL2FwcC9zaGFkb3dyb2NrZXQvaWQ5MzI3NDcxMTg=" title="https://itunes.apple.com/us/app/shadowrocket/id932747118">Shadowrocket<i class="fa fa-external-link"></i></span> / <span class="exturl" data-url="aHR0cHM6Ly9tYW51YWwuZ2V0c3VyZmJvYXJkLmNvbS8=" title="https://manual.getsurfboard.com/">Surfboard<i class="fa fa-external-link"></i></span> / <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lpY2hlbmdjaGVuL2NsYXNoWA==" title="https://github.com/yichengchen/clashX">clashX<i class="fa fa-external-link"></i></span> 的规则或实用规则片段</p>
</blockquote>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>GFW</tag>
        <tag>翻墙</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/posts/4a17b156.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>Welcome to <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvLw==" title="https://hexo.io/">Hexo<i class="fa fa-external-link"></i></span>! This is your very first post. Check <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv" title="https://hexo.io/docs/">documentation<i class="fa fa-external-link"></i></span> for more info. If you get any problems when using Hexo, you can find the answer in <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=" title="https://hexo.io/docs/troubleshooting.html">troubleshooting<i class="fa fa-external-link"></i></span> or you can ask me on <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==" title="https://github.com/hexojs/hexo/issues">GitHub<i class="fa fa-external-link"></i></span>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s" title="https://hexo.io/docs/writing.html">Writing<i class="fa fa-external-link"></i></span></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=" title="https://hexo.io/docs/server.html">Server<i class="fa fa-external-link"></i></span></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s" title="https://hexo.io/docs/generating.html">Generating<i class="fa fa-external-link"></i></span></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZGVwbG95bWVudC5odG1s" title="https://hexo.io/docs/deployment.html">Deployment<i class="fa fa-external-link"></i></span></p>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>建站</tag>
        <tag>blog</tag>
        <tag>博客</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>JSON Helper</title>
    <url>/posts/ce9b377c.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><a id="more"></a>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Web;</span><br><span class="line"><span class="keyword">using</span> System.ServiceModel.Web;<span class="comment"><span class="doctag">///</span>记得引用这个命名空间</span></span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization.Json;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Sigil.Common</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> JSON操作类</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">JsonHelper</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 把对象序列化 JSON 字符串 </span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name="T"&gt;</span>对象类型<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="obj"&gt;</span>对象实体<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>JSON字符串<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> GetJson&lt;T&gt;(T obj)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//记住 添加引用 System.ServiceModel.Web </span></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 如果不添加上面的引用,System.Runtime.Serialization.Json; Json是出不来的哦</span></span><br><span class="line"><span class="comment">             * */</span></span><br><span class="line">            DataContractJsonSerializer json = <span class="keyword">new</span> DataContractJsonSerializer(<span class="keyword">typeof</span>(T));</span><br><span class="line">            <span class="keyword">using</span> (MemoryStream ms = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">            &#123;</span><br><span class="line">                json.WriteObject(ms, obj);</span><br><span class="line">                <span class="keyword">string</span> szJson = Encoding.UTF8.GetString(ms.ToArray());</span><br><span class="line">                <span class="keyword">return</span> szJson;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> Json反序列化,用于接收客户端Json后生成对应的对象</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name="T"&gt;</span>对象类型<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="jsonString"&gt;</span>JSON字符串<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>对象实体<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> T ParseFormJson&lt;T&gt;(<span class="keyword">string</span> jsonString)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> ms = <span class="keyword">new</span> MemoryStream(Encoding.UTF8.GetBytes(jsonString)))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> (T)<span class="keyword">new</span> DataContractJsonSerializer(<span class="keyword">typeof</span>(T)).ReadObject(ms);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> JSON序列化</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> JsonSerializer&lt;T&gt;(T t)</span><br><span class="line">        &#123;</span><br><span class="line">            DataContractJsonSerializer ser = <span class="keyword">new</span> DataContractJsonSerializer(<span class="keyword">typeof</span>(T));</span><br><span class="line">            MemoryStream ms = <span class="keyword">new</span> MemoryStream();</span><br><span class="line">            ser.WriteObject(ms, t);</span><br><span class="line">            <span class="keyword">string</span> jsonString = Encoding.UTF8.GetString(ms.ToArray());</span><br><span class="line">            ms.Close();</span><br><span class="line">            <span class="keyword">return</span> jsonString;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> JSON反序列化</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> T JsonDeserialize&lt;T&gt;(<span class="keyword">string</span> jsonString)</span><br><span class="line">        &#123;</span><br><span class="line">            DataContractJsonSerializer ser = <span class="keyword">new</span> DataContractJsonSerializer(<span class="keyword">typeof</span>(T));</span><br><span class="line">            MemoryStream ms = <span class="keyword">new</span> MemoryStream(Encoding.UTF8.GetBytes(jsonString));</span><br><span class="line">            T obj = (T)ser.ReadObject(ms);</span><br><span class="line">            <span class="keyword">return</span> obj;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>代码片段</category>
        <category>c#</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>c#</tag>
        <tag>代码片段</tag>
        <tag>json</tag>
      </tags>
  </entry>
  <entry>
    <title>C# 导出 Excel</title>
    <url>/posts/aa2690c9.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><a id="more"></a>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 导出Excel</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ExportExcel</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">region</span> 添加引用</span></span><br><span class="line">    Microsoft.Office.Interop.Excel.Application app = <span class="keyword">new</span> Microsoft.Office.Interop.Excel.Application();<span class="comment">//需要添加 Microsoft.Office.Interop.Excel引用</span></span><br><span class="line">    <span class="keyword">if</span> (app == <span class="literal">null</span>) <span class="keyword">return</span>;<span class="comment">//app == null ，则代表服务器上“服务器上缺少Excel组件，需要安装Office软件”</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">region</span> 设置app属性</span></span><br><span class="line">    app.Visible = <span class="literal">false</span>;</span><br><span class="line">    app.UserControl = <span class="literal">true</span>;</span><br><span class="line">    Microsoft.Office.Interop.Excel.Workbooks workbooks = app.Workbooks;</span><br><span class="line">    Microsoft.Office.Interop.Excel._Workbook workbook = workbooks.Add(Server.MapPath(<span class="string">"~/Template/Template.xls"</span>)); <span class="comment">//加载模板</span></span><br><span class="line">    Microsoft.Office.Interop.Excel.Sheets sheets = workbook.Sheets;</span><br><span class="line">    Microsoft.Office.Interop.Excel._Worksheet worksheet = <span class="literal">null</span>;</span><br><span class="line">    Microsoft.Office.Interop.Excel.Range range = <span class="literal">null</span>;</span><br><span class="line">    </span><br><span class="line">    worksheet = (Microsoft.Office.Interop.Excel._Worksheet)sheets.get_Item(<span class="number">1</span>);<span class="comment">//获取第一个Sheet页</span></span><br><span class="line">    <span class="keyword">if</span> (worksheet == <span class="literal">null</span>)</span><br><span class="line">        worksheet = (Microsoft.Office.Interop.Excel._Worksheet)workbook.Worksheets.Add(System.Type.Missing, System.Type.Missing, System.Type.Missing, System.Type.Missing);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">region</span> 根据获得的数据，进行数据的插入（到Excel模板中）</span></span><br><span class="line">    <span class="keyword">var</span> _row = <span class="number">15</span>;<span class="comment">//从第15行开始导入列表</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//合并A14到K14</span></span><br><span class="line">    range = worksheet.get_Range(<span class="string">"A"</span> + (_row - <span class="number">1</span>), <span class="string">"K"</span> + (_row - <span class="number">1</span>));</span><br><span class="line">    range.Merge(range.MergeCells);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取得数据集，并导入Excel</span></span><br><span class="line">    DataTable table = <span class="keyword">new</span> DataTable();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = _row; i &lt; table.Rows.Count + _row; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        worksheet.Cells[_row, <span class="number">1</span>] = <span class="string">"第_row行 第一列"</span>;</span><br><span class="line">        worksheet.Cells[_row, <span class="number">2</span>] = <span class="string">"第_row行 第二列"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//插入行</span></span><br><span class="line">    range = (Microsoft.Office.Interop.Excel.Range)worksheet.Rows[_row, Missing.Value];</span><br><span class="line">    range.Insert(Microsoft.Office.Interop.Excel.XlInsertShiftDirection.xlShiftDown, Missing.Value);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">region</span> 对已导出好的Excel报表进行保存到服务器，以便进行下载</span></span><br><span class="line">    <span class="keyword">if</span> (!Directory.Exists(Server.MapPath(<span class="string">"~/Excel/"</span>))) Directory.CreateDirectory(Server.MapPath(<span class="string">"~/Excel/"</span>));</span><br><span class="line">    <span class="keyword">string</span> savaPath = <span class="string">"~/Excel/"</span> + DateTime.Now.ToString(<span class="string">"yyyyMMddHHmmss"</span>) + <span class="string">".xls"</span>;</span><br><span class="line">    workbook.SaveAs(Server.MapPath(savaPath), Missing.Value, Missing.Value, Missing.Value, Missing.Value, Missing.Value, Microsoft.Office.Interop.Excel.XlSaveAsAccessMode.xlNoChange, Missing.Value, Missing.Value, Missing.Value, Missing.Value, Missing.Value);<span class="comment">//Missing 在System.Reflection命名空间下。</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">region</span> 释放资源</span></span><br><span class="line">    <span class="comment">// 关闭电子表格，释放资源</span></span><br><span class="line">    workbook.Close(<span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">    app.Workbooks.Close();</span><br><span class="line">    workbook = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 退出 Excel，释放资源</span></span><br><span class="line">    app.Quit();</span><br><span class="line">    app = <span class="literal">null</span>;</span><br><span class="line">    GC.Collect();</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">region</span> 下载Excel</span></span><br><span class="line">    Response.ContentType = <span class="string">"application/x-zip-compressed"</span>;</span><br><span class="line">    Response.AddHeader(<span class="string">"Content-Disposition"</span>, <span class="string">"attachment;filename="</span> + DateTime.Now.ToString(<span class="string">"yyyyMMddHHmmss"</span>) + <span class="string">".xls"</span>);</span><br><span class="line">    Response.TransmitFile(savaPath);</span><br><span class="line">    Response.Flush();</span><br><span class="line">    Response.Close();</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 用于excel表格中列号字母转成列索引，从1对应A开始</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="column"&gt;</span>列号<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>列索引<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">ColumnToIndex</span>(<span class="params"><span class="keyword">string</span> column</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!Regex.IsMatch(column.ToUpper(), <span class="string">@"[A-Z]+"</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"Invalid parameter"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span>[] chars = column.ToUpper().ToCharArray();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chars.Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        index += ((<span class="keyword">int</span>)chars[i] - (<span class="keyword">int</span>)<span class="string">'A'</span> + <span class="number">1</span>) * (<span class="keyword">int</span>)Math.Pow(<span class="number">26</span>, chars.Length - i - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 用于将excel表格中列索引转成列号字母，从A对应1开始</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="index"&gt;</span>列索引<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>列号<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">string</span> <span class="title">IndexToColumn</span>(<span class="params"><span class="keyword">int</span> index</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"Invalid parameter"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    index--;</span><br><span class="line">    <span class="keyword">string</span> column = <span class="keyword">string</span>.Empty;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (column.Length &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            index--;</span><br><span class="line">        &#125;</span><br><span class="line">        column = ((<span class="keyword">char</span>)(index % <span class="number">26</span> + (<span class="keyword">int</span>)<span class="string">'A'</span>)).ToString() + column;</span><br><span class="line">        index = (<span class="keyword">int</span>)((index - index % <span class="number">26</span>) / <span class="number">26</span>);</span><br><span class="line">    &#125; <span class="keyword">while</span> (index &gt; <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> column;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><span class="exturl" data-url="aHR0cDovL3d3dy5jbmJsb2dzLmNvbS9oZXJiZXJ0L2FyY2hpdmUvMjAxMC8wNi8zMC8xNzY4MjcxLmh0bWw=" title="http://www.cnblogs.com/herbert/archive/2010/06/30/1768271.html">http://www.cnblogs.com/herbert/archive/2010/06/30/1768271.html<i class="fa fa-external-link"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>代码片段</category>
        <category>c#</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>c#</tag>
        <tag>代码片段</tag>
        <tag>excel</tag>
      </tags>
  </entry>
  <entry>
    <title>csharp过滤HTML标签</title>
    <url>/posts/827e8832.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><a id="more"></a>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span>   <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span>   去除HTML标记</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span>   <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span>   <span class="doctag">&lt;param   name=”NoHTML”&gt;</span>包括HTML的源码   <span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span>   <span class="doctag">&lt;returns&gt;</span>已经去除后的文字<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">NoHTML</span>(<span class="params"><span class="keyword">string</span> Htmlstring</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//删除脚本</span></span><br><span class="line">    Htmlstring = Regex.Replace(Htmlstring, <span class="string">@"&lt;script[^&gt;]*?&gt;.*?&lt;/script&gt;"</span>, <span class="string">""</span>,</span><br><span class="line">    RegexOptions.IgnoreCase);</span><br><span class="line">    <span class="comment">//删除HTML </span></span><br><span class="line">    Htmlstring = Regex.Replace(Htmlstring, <span class="string">@"&lt;(.[^&gt;]*)&gt;"</span>, <span class="string">""</span>,</span><br><span class="line">    RegexOptions.IgnoreCase);</span><br><span class="line">    Htmlstring = Regex.Replace(Htmlstring, <span class="string">@"([\r\n])[\s]+"</span>, <span class="string">""</span>,</span><br><span class="line">    RegexOptions.IgnoreCase);</span><br><span class="line">    Htmlstring = Regex.Replace(Htmlstring, <span class="string">@"–&gt;"</span>, <span class="string">""</span>, RegexOptions.IgnoreCase);</span><br><span class="line">    Htmlstring = Regex.Replace(Htmlstring, <span class="string">@"&lt;!–.*"</span>, <span class="string">""</span>, RegexOptions.IgnoreCase);</span><br><span class="line">    Htmlstring = Regex.Replace(Htmlstring, <span class="string">@"&amp;(quot|#34);"</span>, <span class="string">"\""</span>,</span><br><span class="line">    RegexOptions.IgnoreCase);</span><br><span class="line">    Htmlstring = Regex.Replace(Htmlstring, <span class="string">@"&amp;(amp|#38);"</span>, <span class="string">"&amp;"</span>,</span><br><span class="line">    RegexOptions.IgnoreCase);</span><br><span class="line">    Htmlstring = Regex.Replace(Htmlstring, <span class="string">@"&amp;(lt|#60);"</span>, <span class="string">"&lt;"</span>,</span><br><span class="line">    RegexOptions.IgnoreCase);</span><br><span class="line">    Htmlstring = Regex.Replace(Htmlstring, <span class="string">@"&amp;(gt|#62);"</span>, <span class="string">"&gt;"</span>,</span><br><span class="line">    RegexOptions.IgnoreCase);</span><br><span class="line">    Htmlstring = Regex.Replace(Htmlstring, <span class="string">@"&amp;(nbsp|#160);"</span>, <span class="string">"   "</span>,</span><br><span class="line">    RegexOptions.IgnoreCase);</span><br><span class="line">    Htmlstring = Regex.Replace(Htmlstring, <span class="string">@"&amp;(iexcl|#161);"</span>, <span class="string">"\xa1"</span>, RegexOptions.IgnoreCase);</span><br><span class="line">    Htmlstring = Regex.Replace(Htmlstring, <span class="string">@"&amp;(cent|#162);"</span>, <span class="string">"\xa2"</span>, RegexOptions.IgnoreCase);</span><br><span class="line">    Htmlstring = Regex.Replace(Htmlstring, <span class="string">@"&amp;(pound|#163);"</span>, <span class="string">"\xa3"</span>, RegexOptions.IgnoreCase);</span><br><span class="line">    Htmlstring = Regex.Replace(Htmlstring, <span class="string">@"&amp;(copy|#169);"</span>, <span class="string">"\xa9"</span>, RegexOptions.IgnoreCase);</span><br><span class="line">    Htmlstring = Regex.Replace(Htmlstring, <span class="string">@"&amp;#(\d+);"</span>, <span class="string">""</span>, RegexOptions.IgnoreCase);</span><br><span class="line">    Htmlstring.Replace(<span class="string">"&lt;"</span>, <span class="string">""</span>);</span><br><span class="line">    Htmlstring.Replace(<span class="string">"&gt;"</span>, <span class="string">""</span>);</span><br><span class="line">    Htmlstring.Replace(<span class="string">"\r\n"</span>, <span class="string">""</span>);</span><br><span class="line">    Htmlstring = HttpContext.Current.Server.HtmlEncode(Htmlstring).Trim();</span><br><span class="line">    <span class="keyword">return</span> Htmlstring;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">写一个静态方法移除HTML标签</span><br><span class="line"><span class="meta">#<span class="meta-keyword">region</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span>   <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span>   移除HTML标签</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span>   <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span>   <span class="doctag">&lt;param   name="HTMLStr"&gt;</span>HTMLStr<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">ParseTags</span>(<span class="params"><span class="keyword">string</span> HTMLStr</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> System.Text.RegularExpressions.Regex.Replace(HTMLStr, <span class="string">"&lt;[^&gt;]*&gt;"</span>, <span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endregion</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">region</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span>   <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span>   取出文本中的图片地址</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span>   <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span>   <span class="doctag">&lt;param   name="HTMLStr"&gt;</span>HTMLStr<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">GetImgUrl</span>(<span class="params"><span class="keyword">string</span> HTMLStr</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">string</span> str = <span class="keyword">string</span>.Empty;</span><br><span class="line">  <span class="keyword">string</span> sPattern = <span class="string">@"^&lt;img\s+[^&gt;]*&gt;"</span>;</span><br><span class="line">  Regex r = <span class="keyword">new</span> Regex(<span class="string">@"&lt;img\s+[^&gt;]*\s*src\s*=\s*([']?)(?&lt;url&gt;\S+)'?[^&gt;]*&gt;"</span>,</span><br><span class="line">    RegexOptions.Compiled);</span><br><span class="line">  Match m = r.Match(HTMLStr.ToLower());</span><br><span class="line">  <span class="keyword">if</span> (m.Success)</span><br><span class="line">    str = m.Result(<span class="string">"$&#123;url&#125;"</span>);</span><br><span class="line">  <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endregion</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span>   <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span>   提取HTML代码中文字的C#函数</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span>   <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span>   <span class="doctag">&lt;param   name="strHtml"&gt;</span>包括HTML的源码   <span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span>   <span class="doctag">&lt;returns&gt;</span>已经去除后的文字<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Text.RegularExpressions;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StripHTMLTest</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    <span class="keyword">string</span> s = StripHTML(</span><br><span class="line">      <span class="string">"&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;中国石龙信息平台&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;faddfs龙信息平台&lt;/BODY&gt;&lt;/HTML&gt;"</span>);</span><br><span class="line">    Console.WriteLine(s);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">StripHTML</span>(<span class="params"><span class="keyword">string</span> strHtml</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">    <span class="keyword">string</span>[]aryReg =</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">@"&lt;script[^&gt;]*?&gt;.*?&lt;/script&gt;"</span>,</span><br><span class="line"></span><br><span class="line">      <span class="string">@"&lt;(\/\s*)?!?((\w+:)?\w+)(\w+(\s*=?\s*(([""'])(\\["</span></span><br><span class="line">        <span class="string">"'tbnr]|[^\7])*?\7|\w+)|.&#123;0&#125;)|\s)*?(\/\s*)?&gt;"</span>, <span class="string">@"([\r\n])[\s]+"</span>, @</span><br><span class="line">        <span class="string">"&amp;(quot|#34);"</span>, <span class="string">@"&amp;(amp|#38);"</span>, <span class="string">@"&amp;(lt|#60);"</span>, <span class="string">@"&amp;(gt|#62);"</span>, @</span><br><span class="line">        <span class="string">"&amp;(nbsp|#160);"</span>, <span class="string">@"&amp;(iexcl|#161);"</span>, <span class="string">@"&amp;(cent|#162);"</span>, <span class="string">@"&amp;(pound|#163);"</span>,</span><br><span class="line">        <span class="string">@"&amp;(copy|#169);"</span>, <span class="string">@"&amp;#(\d+);"</span>, <span class="string">@"--&gt;"</span>, <span class="string">@"&lt;!--.*\n"</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">string</span>[]aryRep =</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">""</span>, <span class="string">""</span>, <span class="string">""</span>, <span class="string">"\""</span>, <span class="string">"&amp;"</span>, <span class="string">"&lt;"</span>, <span class="string">"&gt;"</span>, <span class="string">"   "</span>, <span class="string">"\xa1"</span>,  <span class="comment">//chr(161),</span></span><br><span class="line">      <span class="string">"\xa2"</span>,  <span class="comment">//chr(162),</span></span><br><span class="line">      <span class="string">"\xa3"</span>,  <span class="comment">//chr(163),</span></span><br><span class="line">      <span class="string">"\xa9"</span>,  <span class="comment">//chr(169),</span></span><br><span class="line">      <span class="string">""</span>, <span class="string">"\r\n"</span>, <span class="string">""</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">string</span> newReg = aryReg[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">string</span> strOutput = strHtml;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; aryReg.Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">      Regex regex = <span class="keyword">new</span> Regex(aryReg[i], RegexOptions.IgnoreCase);</span><br><span class="line">      strOutput = regex.Replace(strOutput, aryRep[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    strOutput.Replace(<span class="string">"&lt;"</span>, <span class="string">""</span>);</span><br><span class="line">    strOutput.Replace(<span class="string">"&gt;"</span>, <span class="string">""</span>);</span><br><span class="line">    strOutput.Replace(<span class="string">"\r\n"</span>, <span class="string">""</span>);</span><br><span class="line">    <span class="keyword">return</span> strOutput;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>代码片段</category>
        <category>c#</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>c#</tag>
        <tag>html</tag>
        <tag>代码片段</tag>
      </tags>
  </entry>
  <entry>
    <title>自动备份（支持MySQL，MSSQL，文本文件） - LT.DataBackup</title>
    <url>/posts/70bcbd9f.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>在 Window 系统下使用的数据库份工具，轻量级，简单易用。使用工厂模式开发，可以扩展支持其它类型数据的备份操作，目前支持：</p>
<ul>
<li>支持数据库：MSSQL、MySQL</li>
<li>支持本地文件（完整复制或差异化备份）</li>
<li>支持备份后的文件压缩，节省硬盘空间</li>
<li>支持备份后的文件二次上传至 FTP 或其它共享目录</li>
</ul>
<a id="more"></a>
<h1 id="使用介绍"><a href="#使用介绍" class="headerlink" title="使用介绍"></a>使用介绍</h1><ol>
<li><p>下载安装包，解压后，对<code>LT.DataBackup.exe.config</code>配置内容，说明如下:</p>
<p>备份组件配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ReadAddIns</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">支持三种方式备份文件</span></span><br><span class="line"><span class="comment">公共属性：</span></span><br><span class="line"><span class="comment">type： MSSQL \ MySQL \ Copy (三种处理方式)</span></span><br><span class="line"><span class="comment">timer： 备份时间，格式为HH:mm。支持多个，如 09:00,12:00,18:00,--:-- 表示任何时间，00:00表示在启动时运行一次</span></span><br><span class="line"><span class="comment">compress： 是否压缩，ture表示使用zip压缩</span></span><br><span class="line"><span class="comment">to： 备份后的文件保存在哪里(不带后缀名)，支持日期转换，如 MSSQL\name_(yyyy-MM-dd,HHmm)</span></span><br><span class="line"><span class="comment">send： 备份完毕后，使用哪种方式把文件发送走(为空时表示不使用发送，仅本地保存)</span></span><br><span class="line"><span class="comment">enable： 是否启用</span></span><br><span class="line"><span class="comment">MSSQL：从MSSQL数据库备份出bak文件</span></span><br><span class="line"><span class="comment">username：</span></span><br><span class="line"><span class="comment">password：</span></span><br><span class="line"><span class="comment">server： MSSQL服务器地址</span></span><br><span class="line"><span class="comment">database： 需要备份的数据库库名</span></span><br><span class="line"><span class="comment">MySQL：从MySQL数据库备份出sql文件（含有结构和数据）</span></span><br><span class="line"><span class="comment">username：</span></span><br><span class="line"><span class="comment">password：</span></span><br><span class="line"><span class="comment">server： MySql服务器地址</span></span><br><span class="line"><span class="comment">database： 需要备份的数据库库名</span></span><br><span class="line"><span class="comment">Copy：从一个文件夹复制到另外一个文件夹</span></span><br><span class="line"><span class="comment">from： 复制源文件</span></span><br><span class="line"><span class="comment">subfolder： 是否包括子文件夹</span></span><br><span class="line"><span class="comment">difference：是否只复制有差异的文件(差分模式)</span></span><br><span class="line"><span class="comment">direct: 是否直接压缩(启用压缩的前提下)，如果启用则不能使用差分模式</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">"mssql_basedata"</span> <span class="attr">type</span>=<span class="string">"MSSQL"</span> <span class="attr">timer</span>=<span class="string">"09:00,12:00,18:00,20:51"</span> <span class="attr">username</span>=<span class="string">"sa"</span> <span class="attr">password</span>=<span class="string">"123456"</span> <span class="attr">server</span>=<span class="string">"192.168.1.251"</span> <span class="attr">database</span>=<span class="string">"bpo_base_data"</span> <span class="attr">to</span>=<span class="string">"MSSQL\basedata_(yyyy-MM-dd,HHmm)"</span> <span class="attr">compress</span>=<span class="string">"true"</span> <span class="attr">send</span>=<span class="string">"ftp1"</span> <span class="attr">enable</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">"mysql_lt_ps"</span> <span class="attr">type</span>=<span class="string">"MySQL"</span> <span class="attr">timer</span>=<span class="string">"09:00,12:00,18:00,20:55"</span> <span class="attr">username</span>=<span class="string">"root"</span> <span class="attr">password</span>=<span class="string">"123456"</span> <span class="attr">server</span>=<span class="string">"192.168.56.101"</span> <span class="attr">database</span>=<span class="string">"lt_ps"</span> <span class="attr">to</span>=<span class="string">"MySQL\lt_ps_(yyyy-MM-dd,HHmm)"</span> <span class="attr">compress</span>=<span class="string">"true"</span> <span class="attr">send</span>=<span class="string">"ftp1"</span> <span class="attr">enable</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">"copyVSS-dev"</span> <span class="attr">type</span>=<span class="string">"Copy"</span> <span class="attr">timer</span>=<span class="string">"23:00,20:55"</span> <span class="attr">from</span>=<span class="string">"D:\test"</span> <span class="attr">to</span>=<span class="string">"VSS\test_(yyyy-MM-dd,HHmm)"</span> <span class="attr">subfolder</span>=<span class="string">"true"</span> <span class="attr">difference</span>=<span class="string">"true"</span> <span class="attr">direct</span>=<span class="string">"true"</span> <span class="attr">compress</span>=<span class="string">"true"</span> <span class="attr">send</span>=<span class="string">"ftp1"</span> <span class="attr">enable</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ReadAddIns</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>发送组件配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">SendAddIns</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">支持两种方式备份到别的地方</span></span><br><span class="line"><span class="comment">公共属性：</span></span><br><span class="line"><span class="comment">type： MSSQL \ MySQL \ Copy (三种处理方式)</span></span><br><span class="line"><span class="comment">enable： 是否启用</span></span><br><span class="line"><span class="comment">Share：通过共享目录把文件复制过去</span></span><br><span class="line"><span class="comment">username： 共享登录用户名</span></span><br><span class="line"><span class="comment">password： 共享登录的密码</span></span><br><span class="line"><span class="comment">remotepath：共享储存的目录</span></span><br><span class="line"><span class="comment">FTP：通过FTP把备份后的文件发送出去</span></span><br><span class="line"><span class="comment">username： FTP连接的用户名</span></span><br><span class="line"><span class="comment">password： FTP连接的密码</span></span><br><span class="line"><span class="comment">remotepath：上传到FTP的目录</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">"share1"</span> <span class="attr">type</span>=<span class="string">"Share"</span> <span class="attr">username</span>=<span class="string">"administrator"</span> <span class="attr">password</span>=<span class="string">"123456"</span> <span class="attr">server</span>=<span class="string">"192.168.1.249"</span> <span class="attr">remotepath</span>=<span class="string">"\d$\sharebackup"</span> <span class="attr">enable</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">"ftp1"</span> <span class="attr">type</span>=<span class="string">"FTP"</span> <span class="attr">username</span>=<span class="string">"upload"</span> <span class="attr">password</span>=<span class="string">"123456"</span> <span class="attr">server</span>=<span class="string">"192.168.1.249"</span> <span class="attr">remotepath</span>=<span class="string">"ftpbackup"</span> <span class="attr">enable</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">SendAddIns</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>其它配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">appSettings</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--备份到本地的根目录--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">"BackupRootPath"</span> <span class="attr">value</span>=<span class="string">"D:\lt.databackup\data\"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--本地备份最大的储存天数(超过天数则自动删除)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">"BackupMaxDays"</span> <span class="attr">value</span>=<span class="string">"30"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appSettings</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>确认配置无误后，点击<code>Install.bat</code>进行安装</p>
<p><img src="https://image.xuebin.me/006tNc79ly1ftph3704yej305z05aq2q.jpg" alt="img"></p>
<p>安装后，程序作为系统服务进驻到系统中。</p>
</li>
<li><p>检查文件是否正常输出</p>
</li>
</ol>
<ul>
<li><p>检查文件是否正常输出。</p>
</li>
<li><p>检查 EXE 同目录的 Log 文件夹下是否含有日志，并检查是否正常即可。</p>
<p>备份后的效果：</p>
</li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td><img src="https://image.xuebin.me/006tNc79ly1ftph333v5qj306902wglg.jpg" alt="img"></td>
<td><img src="https://image.xuebin.me/006tNc79ly1ftph2v479zj305l04rmwy.jpg" alt="img"></td>
</tr>
</tbody>
</table>
<h1 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h1><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9pbWFnZS54dWViaW4ubWUvTFQuRGF0YUJhY2t1cC9MVC5EYXRhQmFja3VwLUVYRS5yYXI=" title="https://image.xuebin.me/LT.DataBackup/LT.DataBackup-EXE.rar">exe 运行程序 (Release)<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9pbWFnZS54dWViaW4ubWUvTFQuRGF0YUJhY2t1cC9MVC5EYXRhQmFja3VwLVNvdXJjZUNvZGUucmFy" title="https://image.xuebin.me/LT.DataBackup/LT.DataBackup-SourceCode.rar">开发代码源程序<i class="fa fa-external-link"></i></span></li>
</ul>
<blockquote>
<p><span class="label danger">原文</span>：<span class="exturl" data-url="aHR0cDovL3d3dy5sYW54ZS5uZXQvc29mdC9MVC5EYXRhQmFja3VwL2RlZmF1bHQuYXNweA==" title="http://www.lanxe.net/soft/LT.DataBackup/default.aspx">http://www.lanxe.net/soft/LT.DataBackup/default.aspx<i class="fa fa-external-link"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>db</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>db</tag>
        <tag>mysql</tag>
        <tag>备份</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB Master&Slave</title>
    <url>/posts/533e8110.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="主从同步"><a href="#主从同步" class="headerlink" title="主从同步"></a>主从同步</h1><span class="label primary">主服务器</span>192.168.1.5 /Win2003<br><span class="label primary">从服务器</span>192.168.1.25 /WinXP<br><br><a id="more"></a>
<ol>
<li><p>建立数据库目录</p>
<p>主服务器：D:\Database\MongoDB\db_master</p>
<p>从服务器：D:\Database\MongoDB\db_slave</p>
</li>
<li><p>分别启动主从服务器</p>
<ol>
<li><p>启动主服务器：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mongod -dbpath D:\Database\MongoDB\db_master -port 1000 -master</span><br></pre></td></tr></table></figure>
<blockquote>
<p>指定数据存放路径：D:\Database\MongoDB\db_master</p>
<p>指定端口为 ：1000</p>
</blockquote>
</li>
<li><p>启动从服务器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongod –dbpath D:\Database\MongoDB\db_slave –<span class="built_in">source</span> 192.168.1.5:1000 –port 1001 –slave –slavedelay 10</span><br></pre></td></tr></table></figure>
<blockquote>
<p>指定数据存放路径：D:\Database\MongoDB\db_slave</p>
<p>主数据库地址为：192.168.1.5:1000 </p>
<p>每隔10秒同步一次 </p>
</blockquote>
</li>
</ol>
</li>
<li><p>登陆slave从数据库服务器，在slave上添加主机信息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mongo 192.168.1.25：1001</span><br></pre></td></tr></table></figure>
</li>
<li><p>加入主机:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">db.sources.insert( &#123; host:<span class="number">192.168</span><span class="number">.1</span><span class="number">.5</span> &#125; );</span><br></pre></td></tr></table></figure>
</li>
<li><p>在slave从数据库服务器上查看是否和主机连接配置正确</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">db.printSlaveReplicationInfo();</span><br></pre></td></tr></table></figure>
<p>如果成功将会出现以下信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source: 192.168.1.5:1000</span><br><span class="line">syncedTo: Fri Mar 26 2010 12:55:19 GMT+0800</span><br><span class="line">= -10secs ago (0hrs)</span><br><span class="line">\&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试主从</p>
</li>
<li><p>在主服务器新建数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mongo -port 1000</span><br><span class="line">show dbs</span><br><span class="line">use testdb</span><br><span class="line">db.blog.save(&#123;title:&quot;new article&quot;&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>在从服务器上查看同步数据</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mongo -port 1001</span><br><span class="line">show dbs</span><br><span class="line">use testdb</span><br><span class="line">db.blog.find()</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="备份与恢复"><a href="#备份与恢复" class="headerlink" title="备份与恢复"></a>备份与恢复</h1><ol>
<li><p>备份数据库：</p>
<p>语法：<code>mongodump -h IP:端口 -d 数据库 -o 文件存在路径</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mongodump -h 127.0.0.1:10000 -d testdb -o D:\Database\Mongo\backup</span><br></pre></td></tr></table></figure>
<p><code>-h</code>：MongDB所在服务器地址，例如：127.0.0.1，当然也可以指定端口号：127.0.0.1:1000</p>
<p><code>-d</code>：需要备份的数据库实例，例如：testdb</p>
<p><code>-o</code>：备份的数据存放位置，例如：D:\Database\Mongo\backup，当然该目录需要提前建立，在备份完成后，系统自动在dump目录下建立一个test目录，这个目录里面存放该数据库实例的备份数据。</p>
</li>
</ol>
<p>   出现以下提示说明备份成功 </p>
   <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">connected to: 127.0.0.1 DATABASE: testdb to /data/dump/testdb</span><br><span class="line">testdb.blog to /data/dump/testdb/blog.bson</span><br><span class="line">1 objects</span><br><span class="line">testdb.system.indexes to /data/dump/testdb/system.indexes.bson</span><br><span class="line">1 objects</span><br></pre></td></tr></table></figure>
<p>   <img src="https://images0.cnblogs.com/blog/371766/201304/21215921-900c517e1f804053963aff637d7b9d9b.png" alt="img"></p>
<ol start="2">
<li><p>恢复数据库：</p>
<p>语法：mongorestore -h IP -d 目标库 -drop -directoryperdb 源文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongorestore -h 127.0.0.1 -d testdb -directoryperdb D:\Database\Mongo\backup\testdb</span><br></pre></td></tr></table></figure>
<p><code>-h</code>：MongoDB所在服务器地址</p>
<p><code>-d</code>：需要恢复的数据库实例，例如：testdb，当然这个名称也可以和备份时候的不一样，比如test2</p>
<p><code>-directoryperdb</code>：备份数据所在位置，例如：c:\data\dump\test，这里为什么要多加一个test，而不是备份时候的dump，读者自己查看提示吧！</p>
<p><code>-drop</code>：恢复的时候，先删除当前数据，然后恢复备份的数据。就是说，恢复后，备份后添加修改的数据都会被删除，慎用哦！</p>
<p><img src="https://images0.cnblogs.com/blog/371766/201304/21215921-6d6a820a7d214b1f8da9d60d2212b6e7.png" alt="img"></p>
<p>3、另外mongodb还提供了mongoexport 和 mongoimport 这两个命令来导出或导入数据，导出的数据是json格式的。也可以实现备份和恢复的功能。例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongoexport -d mixi_top_city_prod -c building_45 -q <span class="string">'&#123; "uid" : "10832545" &#125;'</span> &gt; mongo_10832545.bson</span><br><span class="line">mongoimport -d mixi_top_city -c building_45 --file mongo_10832545.bson</span><br></pre></td></tr></table></figure>
<p><code>-d</code> 数据库</p>
<p><code>-c</code> 集合</p>
<p><code>-f</code> 字段</p>
<p><code>-type</code> 数据文件类型（不知道使用BSON是否可以加快速度）</p>
<p><code>-file</code> 导入文件</p>
</li>
</ol>
]]></content>
      <categories>
        <category>db</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>db</tag>
        <tag>mongodb</tag>
        <tag>同步</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL Master&Slave</title>
    <url>/posts/9bbb994f.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h1><ul>
<li><p><span class="label primary">主机</span>：</p>
<p>Master 操作系统：Windows 2003 x64</p>
<p>IP 地址：192.168.1.5</p>
<p>数据库版本：mysql-essential-5.1.61 x64</p>
</li>
<li><p><span class="label default">从机</span>：</p>
<p>Slave 操作系统：Windows XP x32</p>
<p>IP 地址：192.168.1.25</p>
<p>数据库版本：mysql-essential-5.1.61 x32</p>
</li>
</ul>
<a id="more"></a>
<h1 id="MySQL-单向同步复制"><a href="#MySQL-单向同步复制" class="headerlink" title="MySQL 单向同步复制"></a>MySQL 单向同步复制</h1><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>注意：由于 MySQL 不同版本之间的(二进制日志)binlog 格式可能会不一样，因此最好的搭配组合是 Master 的 MySQL 版本和 Slave 的版本相同或者更低，Master 的版本肯定不能高于 Slave 版本。</p>
<p>分别登陆 Master 和 Slave 的 MySQL 创建数据库：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">create database repl;</span><br></pre></td></tr></table></figure>
<h2 id="设置主服务器"><a href="#设置主服务器" class="headerlink" title="设置主服务器"></a>设置主服务器</h2><ul>
<li><p>修改数据库的配置文件(Linux 默认名为 my.cnf; windows 默认名为 my.ini)，在[mysqld]下面增加以下几行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">log-bin=log #设置需要记录log</span><br><span class="line"></span><br><span class="line">server-id=1 #标识为主服务器数据库编号</span><br><span class="line">binlog-do-db=root #需要同步的数据库，如果没有本行，即表示同步所有的数据库</span><br><span class="line"></span><br><span class="line">binlog-ignore-db=mysql //被忽略的数据库</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 Master 机上为 Slave 机添加一个同步帐号</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grant replication slave on *.* to 'root'@'192.1681.25' identified by '123456';</span><br></pre></td></tr></table></figure>
<p>重新启动 Master 机的 MySQL 服务。</p>
</li>
<li><p>在 Master 机上进入 MySQL 查看日志情况：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt;show master status;</span><br></pre></td></tr></table></figure>
<p>显示信息如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+-----------------+------------+-------------------+-----------------------+</span><br><span class="line">| File | Position | Binlog_Do_DB | Binlog_Ignore_DB |</span><br><span class="line">+-----------------+------------+-------------------+-----------------------+</span><br><span class="line">| log.000003 | 106 | repl | mysql |</span><br><span class="line">+-----------------+------------+-------------------+-----------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="设置从服务器"><a href="#设置从服务器" class="headerlink" title="设置从服务器"></a>设置从服务器</h1><ul>
<li><p>同样在 my.ini 文件中[mysqld] 字段下添加如下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server-id=2 #从服务器标识ID，不能和主服务器重复</span><br><span class="line">master-host=192.168.1.5 #主服务器地址/主服务器名</span><br><span class="line">master-user=root #同步主服务器账户名</span><br><span class="line">master-password=123456 #同步主服务器帐户密码</span><br><span class="line">master-port=3306 #主服务器的 TCP/IP 端口号，默认是3306</span><br><span class="line">master-connect-retry=10 #设置在和主服务器连接丢失的时候,重度的时间间隔.</span><br><span class="line">replicate-do-db=repl #同步的数据库，不写本行表示同步所有数据库</span><br></pre></td></tr></table></figure>
<p>然后重启 slave 机的 mysql 。</p>
</li>
<li><p>接下来在 Slave 上检验一下是否能正确连接到 Master 上，并且具备相应的权限。</p>
<p>在从服务器连接到主服务器 MySQL，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">root$</span><span class="bash">mysql -hroot -urep -p123456</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt;SHOW GRANTS;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------------------------------------------------------------------------------+</span><br><span class="line">|Grants for root@192.168.1.25 |</span><br><span class="line">+------------------------------------------------------------------------------+</span><br><span class="line">| GRANT Select, FILE, REPLICATION SLAVE ON *.* TO &apos;root&apos;@&apos;192.168.1.25&apos; IDENTIFIED     BY PASSWORD &apos;*9FF2C222F44C7BBA5CC7E3BE8573AA4E1776278C&apos; |</span><br><span class="line">+------------------------------------------------------------------------------+</span><br></pre></td></tr></table></figure>
</li>
<li><p>现在，可以启动 Slave 了。启动成功后，登录 Slave，查看一下同步状态：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt;start slave;</span><br><span class="line">mysql&gt;show slave status\G;</span><br></pre></td></tr></table></figure>
<p>如果 Slave_IO_Running、Slave_SQL_Running 状态为 Yes 则表明设置成功。</p>
<p><img src="https://image.xuebin.me/006tNc79ly1ftphe0lcmoj306900v08p.jpg" alt="img"></p>
<p>查看当前 mysql 查询进程,显示完整的 SQL 命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt;show processlist\G</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="出现问题"><a href="#出现问题" class="headerlink" title="出现问题"></a>出现问题</h1><ul>
<li><p>修改完配置文件如启动 MySQL 服务失败，错误编号 1067</p>
<p>将配置文件 my.ini 中的<code>default-storage-engine=InnoDB</code>，修改为<code>default-storage-engine=MyISAM</code></p>
</li>
<li><p>当我在执行 start slave 这条命令时，系统提示</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">"ERROR 1200 (HY000): The server is not configured as slave; fix in config file or with CHANGE MASTER TO，"</span><br></pre></td></tr></table></figure>
<p>执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">slave stop;</span><br></pre></td></tr></table></figure>
<p>再执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">change master to</span><br><span class="line">master_host=&apos;192.168.1.5&apos;,</span><br><span class="line">master_user=&apos;root&apos;,</span><br><span class="line">master_password=&apos;123456&apos;,</span><br><span class="line">master_port=3306,</span><br><span class="line">master_log_file=&apos;log.000003&apos;,</span><br><span class="line">master_log_pos=106;</span><br></pre></td></tr></table></figure>
<p>然后执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">slave start;</span><br></pre></td></tr></table></figure>
<p>再执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show slave status\G</span><br></pre></td></tr></table></figure>
</li>
<li><p>“Slave_IO_Running: Yes” / “Slave_SQL_Running:No”</p>
<ul>
<li><p>解决办法一：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Slave_SQL_Running: No</span><br></pre></td></tr></table></figure>
<ol>
<li><p>程序可能在 slave 上进行了写操作</p>
</li>
<li><p>也可能是 slave 机器重起后，事务回滚造成的.<br>解决办法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; slave stop;</span><br><span class="line">mysql&gt; set GLOBAL SQL_SLAVE_SKIP_COUNTER=1;</span><br><span class="line">mysql&gt; slave start;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>方法一说白了就是如果碰到错误的 sql 执行语句的时候，故障的表象是 slave 不会去同步主库，所以要手工让这个语句不去执行，跳 N 个事件步骤后处理下一个事件，而这个跳过去的事件对数据完整性是没什么影响的。一般设置<code>SET GLOBAL sql_slave_skip_counter = 1</code>（1 可以为 N.）就可以过去了，如果过不去，就要具体判断要跳多少步才能正确了。</p>
</blockquote>
</li>
<li><p>解决办法二：</p>
<p>首先停掉 Slave 服务：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">slave stop;</span><br></pre></td></tr></table></figure>
<p>到主服务器上查看主机状态：记录 File 和 Position 对应的值，进入 master 服务器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show master status;</span><br><span class="line">+-------------+----------+--------------+------------------+</span><br><span class="line">| File | Position | Binlog_Do_DB | Binlog_Ignore_DB |</span><br><span class="line">+-------------+----------+--------------+------------------+</span><br><span class="line">| log.000003 | 106 | | |</span><br><span class="line">+----------------------+----------+--------------+------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>方法二是强制性从某一个点开始同步,会有部分没有同步的数据丢失,后续主服务器上删除记录同步也会有一些错误信息,不会影响使用.</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h1 id="测试同步是否成功"><a href="#测试同步是否成功" class="headerlink" title="测试同步是否成功"></a>测试同步是否成功</h1><ul>
<li><p>在主服务器上面新建一个表，必须在选择同步的数据库下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; use repl</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; create table test(id int,name char(10));</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line">mysql&gt;</span><br><span class="line">mysql&gt; insert into test values(1,&apos;zaq&apos;);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line">mysql&gt;</span><br><span class="line">mysql&gt; select * from test;</span><br><span class="line">+------+------+</span><br><span class="line">| id | name |</span><br><span class="line">+-------+------+</span><br><span class="line">| 1 | zaq |</span><br><span class="line">+-------+------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
</li>
<li><p>在从服务器查看是否同步过来</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; use repl;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; select * from test;</span><br><span class="line">+------+------+</span><br><span class="line">| id | name |</span><br><span class="line">+------+------+</span><br><span class="line">| 1 | zaq |</span><br><span class="line">| 1 | xsw |</span><br><span class="line">+------+------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>说明已经配置成功。</p>
</li>
<li><p>测试同步速度</p>
<p>Read_Master_Log_Pos 和 Exec_Master_Log_Pos 位置之间的时间差值吧.</p>
<p>这个值只能在一定程度上说明复制良好，但是经常不准确，比如主从之间网络环境很差的时候，可能主和从的数据差异很大，但是复制过来的日志都能被 slave 的 sql 线程执行完成，seconds_behind_master 此时为 0。</p>
<p>可以通过在主上 show master status\G 的 Position,和从执行 show slave status\G 的 Read_Master_Log_Pos 和 Exec_Master_Log_Pos 进行比较得出复制是否能跟上主的状态。</p>
</li>
<li><p>还需要做的一些优化与监视:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show full processlist; //查看mysql当前同步线程号</span><br><span class="line">skip-name-resolve //跳过dns名称查询，有助于加快连接及同步的速度</span><br><span class="line">max_connections=1000 //增大Mysql的连接数目，(默认100)</span><br><span class="line">max_connect_errors=100 //增大Mysql的错误连接数目,(默认10)</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>db</category>
      </categories>
      <tags>
        <tag>dev</tag>
        <tag>db</tag>
        <tag>同步</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
</search>
